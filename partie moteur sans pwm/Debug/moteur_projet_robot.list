
moteur_projet_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002578  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002630  08002630  00012630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026a8  080026a8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080026a8  080026a8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026a8  080026a8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026a8  080026a8  000126a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026ac  080026ac  000126ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080026b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  08002718  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08002718  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003e5f  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001411  00000000  00000000  00023f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000558  00000000  00000000  00025348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003d4  00000000  00000000  000258a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015209  00000000  00000000  00025c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006f01  00000000  00000000  0003ae7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f85d  00000000  00000000  00041d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001810  00000000  00000000  000c15dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000c2dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000068 	.word	0x20000068
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002618 	.word	0x08002618

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000006c 	.word	0x2000006c
 80000fc:	08002618 	.word	0x08002618

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800022c:	b590      	push	{r4, r7, lr}
 800022e:	b08b      	sub	sp, #44	; 0x2c
 8000230:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000232:	2414      	movs	r4, #20
 8000234:	193b      	adds	r3, r7, r4
 8000236:	0018      	movs	r0, r3
 8000238:	2314      	movs	r3, #20
 800023a:	001a      	movs	r2, r3
 800023c:	2100      	movs	r1, #0
 800023e:	f001 fba3 	bl	8001988 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000242:	4b52      	ldr	r3, [pc, #328]	; (800038c <MX_GPIO_Init+0x160>)
 8000244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000246:	4b51      	ldr	r3, [pc, #324]	; (800038c <MX_GPIO_Init+0x160>)
 8000248:	2104      	movs	r1, #4
 800024a:	430a      	orrs	r2, r1
 800024c:	635a      	str	r2, [r3, #52]	; 0x34
 800024e:	4b4f      	ldr	r3, [pc, #316]	; (800038c <MX_GPIO_Init+0x160>)
 8000250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000252:	2204      	movs	r2, #4
 8000254:	4013      	ands	r3, r2
 8000256:	613b      	str	r3, [r7, #16]
 8000258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800025a:	4b4c      	ldr	r3, [pc, #304]	; (800038c <MX_GPIO_Init+0x160>)
 800025c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800025e:	4b4b      	ldr	r3, [pc, #300]	; (800038c <MX_GPIO_Init+0x160>)
 8000260:	2120      	movs	r1, #32
 8000262:	430a      	orrs	r2, r1
 8000264:	635a      	str	r2, [r3, #52]	; 0x34
 8000266:	4b49      	ldr	r3, [pc, #292]	; (800038c <MX_GPIO_Init+0x160>)
 8000268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800026a:	2220      	movs	r2, #32
 800026c:	4013      	ands	r3, r2
 800026e:	60fb      	str	r3, [r7, #12]
 8000270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b46      	ldr	r3, [pc, #280]	; (800038c <MX_GPIO_Init+0x160>)
 8000274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000276:	4b45      	ldr	r3, [pc, #276]	; (800038c <MX_GPIO_Init+0x160>)
 8000278:	2101      	movs	r1, #1
 800027a:	430a      	orrs	r2, r1
 800027c:	635a      	str	r2, [r3, #52]	; 0x34
 800027e:	4b43      	ldr	r3, [pc, #268]	; (800038c <MX_GPIO_Init+0x160>)
 8000280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000282:	2201      	movs	r2, #1
 8000284:	4013      	ands	r3, r2
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800028a:	4b40      	ldr	r3, [pc, #256]	; (800038c <MX_GPIO_Init+0x160>)
 800028c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800028e:	4b3f      	ldr	r3, [pc, #252]	; (800038c <MX_GPIO_Init+0x160>)
 8000290:	2102      	movs	r1, #2
 8000292:	430a      	orrs	r2, r1
 8000294:	635a      	str	r2, [r3, #52]	; 0x34
 8000296:	4b3d      	ldr	r3, [pc, #244]	; (800038c <MX_GPIO_Init+0x160>)
 8000298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800029a:	2202      	movs	r2, #2
 800029c:	4013      	ands	r3, r2
 800029e:	607b      	str	r3, [r7, #4]
 80002a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80002a2:	23c0      	movs	r3, #192	; 0xc0
 80002a4:	019b      	lsls	r3, r3, #6
 80002a6:	483a      	ldr	r0, [pc, #232]	; (8000390 <MX_GPIO_Init+0x164>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	0019      	movs	r1, r3
 80002ac:	f000 fd69 	bl	8000d82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80002b0:	4b38      	ldr	r3, [pc, #224]	; (8000394 <MX_GPIO_Init+0x168>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	2103      	movs	r1, #3
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 fd63 	bl	8000d82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80002bc:	23c0      	movs	r3, #192	; 0xc0
 80002be:	0119      	lsls	r1, r3, #4
 80002c0:	23a0      	movs	r3, #160	; 0xa0
 80002c2:	05db      	lsls	r3, r3, #23
 80002c4:	2200      	movs	r2, #0
 80002c6:	0018      	movs	r0, r3
 80002c8:	f000 fd5b 	bl	8000d82 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC12 PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	22c0      	movs	r2, #192	; 0xc0
 80002d0:	0192      	lsls	r2, r2, #6
 80002d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	2201      	movs	r2, #1
 80002d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002da:	193b      	adds	r3, r7, r4
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	4a29      	ldr	r2, [pc, #164]	; (8000390 <MX_GPIO_Init+0x164>)
 80002ea:	0019      	movs	r1, r3
 80002ec:	0010      	movs	r0, r2
 80002ee:	f000 fbc7 	bl	8000a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	2201      	movs	r2, #1
 80002f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	2200      	movs	r2, #0
 80002fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002fe:	193b      	adds	r3, r7, r4
 8000300:	2202      	movs	r2, #2
 8000302:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000304:	193a      	adds	r2, r7, r4
 8000306:	23a0      	movs	r3, #160	; 0xa0
 8000308:	05db      	lsls	r3, r3, #23
 800030a:	0011      	movs	r1, r2
 800030c:	0018      	movs	r0, r3
 800030e:	f000 fbb7 	bl	8000a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000312:	193b      	adds	r3, r7, r4
 8000314:	2203      	movs	r2, #3
 8000316:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000318:	193b      	adds	r3, r7, r4
 800031a:	2201      	movs	r2, #1
 800031c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031e:	193b      	adds	r3, r7, r4
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000324:	193b      	adds	r3, r7, r4
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800032a:	193b      	adds	r3, r7, r4
 800032c:	4a19      	ldr	r2, [pc, #100]	; (8000394 <MX_GPIO_Init+0x168>)
 800032e:	0019      	movs	r1, r3
 8000330:	0010      	movs	r0, r2
 8000332:	f000 fba5 	bl	8000a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000336:	0021      	movs	r1, r4
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2280      	movs	r2, #128	; 0x80
 800033c:	0152      	lsls	r2, r2, #5
 800033e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000340:	000c      	movs	r4, r1
 8000342:	193b      	adds	r3, r7, r4
 8000344:	2200      	movs	r2, #0
 8000346:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000348:	193b      	adds	r3, r7, r4
 800034a:	2202      	movs	r2, #2
 800034c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800034e:	193b      	adds	r3, r7, r4
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <MX_GPIO_Init+0x168>)
 8000352:	0019      	movs	r1, r3
 8000354:	0010      	movs	r0, r2
 8000356:	f000 fb93 	bl	8000a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800035a:	0021      	movs	r1, r4
 800035c:	187b      	adds	r3, r7, r1
 800035e:	22c0      	movs	r2, #192	; 0xc0
 8000360:	0112      	lsls	r2, r2, #4
 8000362:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2201      	movs	r2, #1
 8000368:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2200      	movs	r2, #0
 8000374:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000376:	187a      	adds	r2, r7, r1
 8000378:	23a0      	movs	r3, #160	; 0xa0
 800037a:	05db      	lsls	r3, r3, #23
 800037c:	0011      	movs	r1, r2
 800037e:	0018      	movs	r0, r3
 8000380:	f000 fb7e 	bl	8000a80 <HAL_GPIO_Init>

}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b00b      	add	sp, #44	; 0x2c
 800038a:	bd90      	pop	{r4, r7, pc}
 800038c:	40021000 	.word	0x40021000
 8000390:	50000800 	.word	0x50000800
 8000394:	50000400 	.word	0x50000400

08000398 <avance>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void avance(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800039c:	2380      	movs	r3, #128	; 0x80
 800039e:	0119      	lsls	r1, r3, #4
 80003a0:	23a0      	movs	r3, #160	; 0xa0
 80003a2:	05db      	lsls	r3, r3, #23
 80003a4:	2201      	movs	r2, #1
 80003a6:	0018      	movs	r0, r3
 80003a8:	f000 fceb 	bl	8000d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80003ac:	2380      	movs	r3, #128	; 0x80
 80003ae:	00d9      	lsls	r1, r3, #3
 80003b0:	23a0      	movs	r3, #160	; 0xa0
 80003b2:	05db      	lsls	r3, r3, #23
 80003b4:	2200      	movs	r2, #0
 80003b6:	0018      	movs	r0, r3
 80003b8:	f000 fce3 	bl	8000d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <avance+0x44>)
 80003be:	2201      	movs	r2, #1
 80003c0:	2101      	movs	r1, #1
 80003c2:	0018      	movs	r0, r3
 80003c4:	f000 fcdd 	bl	8000d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80003c8:	4b04      	ldr	r3, [pc, #16]	; (80003dc <avance+0x44>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	2102      	movs	r1, #2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 fcd7 	bl	8000d82 <HAL_GPIO_WritePin>

}
 80003d4:	46c0      	nop			; (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	50000400 	.word	0x50000400

080003e0 <recule>:

void recule(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80003e4:	2380      	movs	r3, #128	; 0x80
 80003e6:	0119      	lsls	r1, r3, #4
 80003e8:	23a0      	movs	r3, #160	; 0xa0
 80003ea:	05db      	lsls	r3, r3, #23
 80003ec:	2200      	movs	r2, #0
 80003ee:	0018      	movs	r0, r3
 80003f0:	f000 fcc7 	bl	8000d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	00d9      	lsls	r1, r3, #3
 80003f8:	23a0      	movs	r3, #160	; 0xa0
 80003fa:	05db      	lsls	r3, r3, #23
 80003fc:	2201      	movs	r2, #1
 80003fe:	0018      	movs	r0, r3
 8000400:	f000 fcbf 	bl	8000d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000404:	4b07      	ldr	r3, [pc, #28]	; (8000424 <recule+0x44>)
 8000406:	2200      	movs	r2, #0
 8000408:	2101      	movs	r1, #1
 800040a:	0018      	movs	r0, r3
 800040c:	f000 fcb9 	bl	8000d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000410:	4b04      	ldr	r3, [pc, #16]	; (8000424 <recule+0x44>)
 8000412:	2201      	movs	r2, #1
 8000414:	2102      	movs	r1, #2
 8000416:	0018      	movs	r0, r3
 8000418:	f000 fcb3 	bl	8000d82 <HAL_GPIO_WritePin>
}
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	50000400 	.word	0x50000400

08000428 <stop>:
void stop(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	0119      	lsls	r1, r3, #4
 8000430:	23a0      	movs	r3, #160	; 0xa0
 8000432:	05db      	lsls	r3, r3, #23
 8000434:	2200      	movs	r2, #0
 8000436:	0018      	movs	r0, r3
 8000438:	f000 fca3 	bl	8000d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	00d9      	lsls	r1, r3, #3
 8000440:	23a0      	movs	r3, #160	; 0xa0
 8000442:	05db      	lsls	r3, r3, #23
 8000444:	2200      	movs	r2, #0
 8000446:	0018      	movs	r0, r3
 8000448:	f000 fc9b 	bl	8000d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800044c:	4b07      	ldr	r3, [pc, #28]	; (800046c <stop+0x44>)
 800044e:	2200      	movs	r2, #0
 8000450:	2101      	movs	r1, #1
 8000452:	0018      	movs	r0, r3
 8000454:	f000 fc95 	bl	8000d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000458:	4b04      	ldr	r3, [pc, #16]	; (800046c <stop+0x44>)
 800045a:	2200      	movs	r2, #0
 800045c:	2102      	movs	r1, #2
 800045e:	0018      	movs	r0, r3
 8000460:	f000 fc8f 	bl	8000d82 <HAL_GPIO_WritePin>
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	50000400 	.word	0x50000400

08000470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000476:	f000 f9a5 	bl	80007c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047a:	f000 f843 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047e:	f7ff fed5 	bl	800022c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	int a=0;
 8000482:	2300      	movs	r3, #0
 8000484:	607b      	str	r3, [r7, #4]
//
//	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
//
//	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0); //ON met a 0 l'une des pwm
	printf("%d",a);
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <main+0x8c>)
 800048a:	0011      	movs	r1, r2
 800048c:	0018      	movs	r0, r3
 800048e:	f001 fa1f 	bl	80018d0 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_RESET)
 8000492:	23a0      	movs	r3, #160	; 0xa0
 8000494:	05db      	lsls	r3, r3, #23
 8000496:	2101      	movs	r1, #1
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fc55 	bl	8000d48 <HAL_GPIO_ReadPin>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d102      	bne.n	80004a8 <main+0x38>
			{
			avance();
 80004a2:	f7ff ff79 	bl	8000398 <avance>
 80004a6:	e010      	b.n	80004ca <main+0x5a>
			}
			else
			{

				stop();
 80004a8:	f7ff ffbe 	bl	8000428 <stop>
				HAL_Delay(100);
 80004ac:	2064      	movs	r0, #100	; 0x64
 80004ae:	f000 fa0f 	bl	80008d0 <HAL_Delay>
				while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 80004b2:	e001      	b.n	80004b8 <main+0x48>
				{
			    recule();
 80004b4:	f7ff ff94 	bl	80003e0 <recule>
				while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 80004b8:	23a0      	movs	r3, #160	; 0xa0
 80004ba:	05db      	lsls	r3, r3, #23
 80004bc:	2101      	movs	r1, #1
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 fc42 	bl	8000d48 <HAL_GPIO_ReadPin>
 80004c4:	0003      	movs	r3, r0
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d0f4      	beq.n	80004b4 <main+0x44>
		    					}

			}
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)==GPIO_PIN_SET)
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	015b      	lsls	r3, r3, #5
 80004ce:	4a0c      	ldr	r2, [pc, #48]	; (8000500 <main+0x90>)
 80004d0:	0019      	movs	r1, r3
 80004d2:	0010      	movs	r0, r2
 80004d4:	f000 fc38 	bl	8000d48 <HAL_GPIO_ReadPin>
 80004d8:	0003      	movs	r3, r0
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d102      	bne.n	80004e4 <main+0x74>
			{
				avance();
 80004de:	f7ff ff5b 	bl	8000398 <avance>
 80004e2:	e7d6      	b.n	8000492 <main+0x22>

			}
				else
			{
				stop();
 80004e4:	f7ff ffa0 	bl	8000428 <stop>
				stop();
 80004e8:	f7ff ff9e 	bl	8000428 <stop>
				HAL_Delay(200);
 80004ec:	20c8      	movs	r0, #200	; 0xc8
 80004ee:	f000 f9ef 	bl	80008d0 <HAL_Delay>
				recule();
 80004f2:	f7ff ff75 	bl	80003e0 <recule>
				recule();
 80004f6:	f7ff ff73 	bl	80003e0 <recule>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_RESET)
 80004fa:	e7ca      	b.n	8000492 <main+0x22>
 80004fc:	08002630 	.word	0x08002630
 8000500:	50000400 	.word	0x50000400

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b093      	sub	sp, #76	; 0x4c
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	2414      	movs	r4, #20
 800050c:	193b      	adds	r3, r7, r4
 800050e:	0018      	movs	r0, r3
 8000510:	2334      	movs	r3, #52	; 0x34
 8000512:	001a      	movs	r2, r3
 8000514:	2100      	movs	r1, #0
 8000516:	f001 fa37 	bl	8001988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	0018      	movs	r0, r3
 800051e:	2310      	movs	r3, #16
 8000520:	001a      	movs	r2, r3
 8000522:	2100      	movs	r1, #0
 8000524:	f001 fa30 	bl	8001988 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	0018      	movs	r0, r3
 800052e:	f000 fc45 	bl	8000dbc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2201      	movs	r2, #1
 8000536:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	0252      	lsls	r2, r2, #9
 800053e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000540:	0021      	movs	r1, r4
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2202      	movs	r2, #2
 8000546:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2203      	movs	r2, #3
 800054c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2200      	movs	r2, #0
 8000552:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2208      	movs	r2, #8
 8000558:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2280      	movs	r2, #128	; 0x80
 800055e:	0292      	lsls	r2, r2, #10
 8000560:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2280      	movs	r2, #128	; 0x80
 8000566:	0592      	lsls	r2, r2, #22
 8000568:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	187b      	adds	r3, r7, r1
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fc65 	bl	8000e3c <HAL_RCC_OscConfig>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000576:	f000 f81a 	bl	80005ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2207      	movs	r2, #7
 800057e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2202      	movs	r2, #2
 8000584:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	22c0      	movs	r2, #192	; 0xc0
 800058a:	0112      	lsls	r2, r2, #4
 800058c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2100      	movs	r1, #0
 8000598:	0018      	movs	r0, r3
 800059a:	f000 ff5f 	bl	800145c <HAL_RCC_ClockConfig>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005a2:	f000 f804 	bl	80005ae <Error_Handler>
  }
}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b013      	add	sp, #76	; 0x4c
 80005ac:	bd90      	pop	{r4, r7, pc}

080005ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b2:	b672      	cpsid	i
}
 80005b4:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80005b6:	e7fe      	b.n	80005b6 <Error_Handler+0x8>

080005b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <HAL_MspInit+0x44>)
 80005c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <HAL_MspInit+0x44>)
 80005c4:	2101      	movs	r1, #1
 80005c6:	430a      	orrs	r2, r1
 80005c8:	641a      	str	r2, [r3, #64]	; 0x40
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <HAL_MspInit+0x44>)
 80005cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ce:	2201      	movs	r2, #1
 80005d0:	4013      	ands	r3, r2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_MspInit+0x44>)
 80005d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <HAL_MspInit+0x44>)
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	0549      	lsls	r1, r1, #21
 80005e0:	430a      	orrs	r2, r1
 80005e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <HAL_MspInit+0x44>)
 80005e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	055b      	lsls	r3, r3, #21
 80005ec:	4013      	ands	r3, r2
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b002      	add	sp, #8
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	40021000 	.word	0x40021000

08000600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <NMI_Handler+0x4>

08000606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <HardFault_Handler+0x4>

0800060c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000624:	f000 f938 	bl	8000898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b086      	sub	sp, #24
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e00a      	b.n	8000656 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000640:	e000      	b.n	8000644 <_read+0x16>
 8000642:	bf00      	nop
 8000644:	0001      	movs	r1, r0
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	1c5a      	adds	r2, r3, #1
 800064a:	60ba      	str	r2, [r7, #8]
 800064c:	b2ca      	uxtb	r2, r1
 800064e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	3301      	adds	r3, #1
 8000654:	617b      	str	r3, [r7, #20]
 8000656:	697a      	ldr	r2, [r7, #20]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	429a      	cmp	r2, r3
 800065c:	dbf0      	blt.n	8000640 <_read+0x12>
  }

  return len;
 800065e:	687b      	ldr	r3, [r7, #4]
}
 8000660:	0018      	movs	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	b006      	add	sp, #24
 8000666:	bd80      	pop	{r7, pc}

08000668 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	e009      	b.n	800068e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	1c5a      	adds	r2, r3, #1
 800067e:	60ba      	str	r2, [r7, #8]
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	0018      	movs	r0, r3
 8000684:	e000      	b.n	8000688 <_write+0x20>
 8000686:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	3301      	adds	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	697a      	ldr	r2, [r7, #20]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	429a      	cmp	r2, r3
 8000694:	dbf1      	blt.n	800067a <_write+0x12>
  }
  return len;
 8000696:	687b      	ldr	r3, [r7, #4]
}
 8000698:	0018      	movs	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	b006      	add	sp, #24
 800069e:	bd80      	pop	{r7, pc}

080006a0 <_close>:

int _close(int file)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	425b      	negs	r3, r3
}
 80006ac:	0018      	movs	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b002      	add	sp, #8
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2280      	movs	r2, #128	; 0x80
 80006c2:	0192      	lsls	r2, r2, #6
 80006c4:	605a      	str	r2, [r3, #4]
  return 0;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	0018      	movs	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b002      	add	sp, #8
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <_isatty>:

int _isatty(int file)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006d8:	2301      	movs	r3, #1
}
 80006da:	0018      	movs	r0, r3
 80006dc:	46bd      	mov	sp, r7
 80006de:	b002      	add	sp, #8
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b084      	sub	sp, #16
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	60f8      	str	r0, [r7, #12]
 80006ea:	60b9      	str	r1, [r7, #8]
 80006ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	0018      	movs	r0, r3
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b004      	add	sp, #16
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000700:	4a14      	ldr	r2, [pc, #80]	; (8000754 <_sbrk+0x5c>)
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <_sbrk+0x60>)
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <_sbrk+0x64>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d102      	bne.n	800071a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <_sbrk+0x64>)
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <_sbrk+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <_sbrk+0x64>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	18d3      	adds	r3, r2, r3
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	429a      	cmp	r2, r3
 8000726:	d207      	bcs.n	8000738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000728:	f001 f984 	bl	8001a34 <__errno>
 800072c:	0003      	movs	r3, r0
 800072e:	220c      	movs	r2, #12
 8000730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000732:	2301      	movs	r3, #1
 8000734:	425b      	negs	r3, r3
 8000736:	e009      	b.n	800074c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <_sbrk+0x64>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800073e:	4b07      	ldr	r3, [pc, #28]	; (800075c <_sbrk+0x64>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	18d2      	adds	r2, r2, r3
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <_sbrk+0x64>)
 8000748:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800074a:	68fb      	ldr	r3, [r7, #12]
}
 800074c:	0018      	movs	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	b006      	add	sp, #24
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20009000 	.word	0x20009000
 8000758:	00000400 	.word	0x00000400
 800075c:	20000084 	.word	0x20000084
 8000760:	200001d8 	.word	0x200001d8

08000764 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000772:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000774:	f7ff fff6 	bl	8000764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <LoopForever+0x6>)
  ldr r1, =_edata
 800077a:	490d      	ldr	r1, [pc, #52]	; (80007b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800077c:	4a0d      	ldr	r2, [pc, #52]	; (80007b4 <LoopForever+0xe>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000780:	e002      	b.n	8000788 <LoopCopyDataInit>

08000782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000786:	3304      	adds	r3, #4

08000788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800078c:	d3f9      	bcc.n	8000782 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000790:	4c0a      	ldr	r4, [pc, #40]	; (80007bc <LoopForever+0x16>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000794:	e001      	b.n	800079a <LoopFillZerobss>

08000796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000798:	3204      	adds	r2, #4

0800079a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800079c:	d3fb      	bcc.n	8000796 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800079e:	f001 f94f 	bl	8001a40 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80007a2:	f7ff fe65 	bl	8000470 <main>

080007a6 <LoopForever>:

LoopForever:
  b LoopForever
 80007a6:	e7fe      	b.n	80007a6 <LoopForever>
  ldr   r0, =_estack
 80007a8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80007b4:	080026b0 	.word	0x080026b0
  ldr r2, =_sbss
 80007b8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80007bc:	200001d8 	.word	0x200001d8

080007c0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC1_IRQHandler>
	...

080007c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_Init+0x3c>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <HAL_Init+0x3c>)
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	0049      	lsls	r1, r1, #1
 80007da:	430a      	orrs	r2, r1
 80007dc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007de:	2003      	movs	r0, #3
 80007e0:	f000 f810 	bl	8000804 <HAL_InitTick>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d003      	beq.n	80007f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80007e8:	1dfb      	adds	r3, r7, #7
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
 80007ee:	e001      	b.n	80007f4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80007f0:	f7ff fee2 	bl	80005b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	781b      	ldrb	r3, [r3, #0]
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b002      	add	sp, #8
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40022000 	.word	0x40022000

08000804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800080c:	230f      	movs	r3, #15
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000814:	4b1d      	ldr	r3, [pc, #116]	; (800088c <HAL_InitTick+0x88>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d02b      	beq.n	8000874 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <HAL_InitTick+0x8c>)
 800081e:	681c      	ldr	r4, [r3, #0]
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <HAL_InitTick+0x88>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	0019      	movs	r1, r3
 8000826:	23fa      	movs	r3, #250	; 0xfa
 8000828:	0098      	lsls	r0, r3, #2
 800082a:	f7ff fc73 	bl	8000114 <__udivsi3>
 800082e:	0003      	movs	r3, r0
 8000830:	0019      	movs	r1, r3
 8000832:	0020      	movs	r0, r4
 8000834:	f7ff fc6e 	bl	8000114 <__udivsi3>
 8000838:	0003      	movs	r3, r0
 800083a:	0018      	movs	r0, r3
 800083c:	f000 f913 	bl	8000a66 <HAL_SYSTICK_Config>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d112      	bne.n	800086a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b03      	cmp	r3, #3
 8000848:	d80a      	bhi.n	8000860 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	2301      	movs	r3, #1
 800084e:	425b      	negs	r3, r3
 8000850:	2200      	movs	r2, #0
 8000852:	0018      	movs	r0, r3
 8000854:	f000 f8f2 	bl	8000a3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_InitTick+0x90>)
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	e00d      	b.n	800087c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000860:	230f      	movs	r3, #15
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]
 8000868:	e008      	b.n	800087c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800086a:	230f      	movs	r3, #15
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	2201      	movs	r2, #1
 8000870:	701a      	strb	r2, [r3, #0]
 8000872:	e003      	b.n	800087c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000874:	230f      	movs	r3, #15
 8000876:	18fb      	adds	r3, r7, r3
 8000878:	2201      	movs	r2, #1
 800087a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800087c:	230f      	movs	r3, #15
 800087e:	18fb      	adds	r3, r7, r3
 8000880:	781b      	ldrb	r3, [r3, #0]
}
 8000882:	0018      	movs	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	b005      	add	sp, #20
 8000888:	bd90      	pop	{r4, r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	20000008 	.word	0x20000008
 8000890:	20000000 	.word	0x20000000
 8000894:	20000004 	.word	0x20000004

08000898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <HAL_IncTick+0x1c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	001a      	movs	r2, r3
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_IncTick+0x20>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	18d2      	adds	r2, r2, r3
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <HAL_IncTick+0x20>)
 80008aa:	601a      	str	r2, [r3, #0]
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000088 	.word	0x20000088

080008bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  return uwTick;
 80008c0:	4b02      	ldr	r3, [pc, #8]	; (80008cc <HAL_GetTick+0x10>)
 80008c2:	681b      	ldr	r3, [r3, #0]
}
 80008c4:	0018      	movs	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	20000088 	.word	0x20000088

080008d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d8:	f7ff fff0 	bl	80008bc <HAL_GetTick>
 80008dc:	0003      	movs	r3, r0
 80008de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	3301      	adds	r3, #1
 80008e8:	d005      	beq.n	80008f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <HAL_Delay+0x44>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	001a      	movs	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	189b      	adds	r3, r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	f7ff ffe0 	bl	80008bc <HAL_GetTick>
 80008fc:	0002      	movs	r2, r0
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	429a      	cmp	r2, r3
 8000906:	d8f7      	bhi.n	80008f8 <HAL_Delay+0x28>
  {
  }
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	b004      	add	sp, #16
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	20000008 	.word	0x20000008

08000918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	0002      	movs	r2, r0
 8000920:	6039      	str	r1, [r7, #0]
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b7f      	cmp	r3, #127	; 0x7f
 800092c:	d828      	bhi.n	8000980 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800092e:	4a2f      	ldr	r2, [pc, #188]	; (80009ec <__NVIC_SetPriority+0xd4>)
 8000930:	1dfb      	adds	r3, r7, #7
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b25b      	sxtb	r3, r3
 8000936:	089b      	lsrs	r3, r3, #2
 8000938:	33c0      	adds	r3, #192	; 0xc0
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	589b      	ldr	r3, [r3, r2]
 800093e:	1dfa      	adds	r2, r7, #7
 8000940:	7812      	ldrb	r2, [r2, #0]
 8000942:	0011      	movs	r1, r2
 8000944:	2203      	movs	r2, #3
 8000946:	400a      	ands	r2, r1
 8000948:	00d2      	lsls	r2, r2, #3
 800094a:	21ff      	movs	r1, #255	; 0xff
 800094c:	4091      	lsls	r1, r2
 800094e:	000a      	movs	r2, r1
 8000950:	43d2      	mvns	r2, r2
 8000952:	401a      	ands	r2, r3
 8000954:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	019b      	lsls	r3, r3, #6
 800095a:	22ff      	movs	r2, #255	; 0xff
 800095c:	401a      	ands	r2, r3
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	0018      	movs	r0, r3
 8000964:	2303      	movs	r3, #3
 8000966:	4003      	ands	r3, r0
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800096c:	481f      	ldr	r0, [pc, #124]	; (80009ec <__NVIC_SetPriority+0xd4>)
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b25b      	sxtb	r3, r3
 8000974:	089b      	lsrs	r3, r3, #2
 8000976:	430a      	orrs	r2, r1
 8000978:	33c0      	adds	r3, #192	; 0xc0
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800097e:	e031      	b.n	80009e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000980:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <__NVIC_SetPriority+0xd8>)
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	0019      	movs	r1, r3
 8000988:	230f      	movs	r3, #15
 800098a:	400b      	ands	r3, r1
 800098c:	3b08      	subs	r3, #8
 800098e:	089b      	lsrs	r3, r3, #2
 8000990:	3306      	adds	r3, #6
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	18d3      	adds	r3, r2, r3
 8000996:	3304      	adds	r3, #4
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	1dfa      	adds	r2, r7, #7
 800099c:	7812      	ldrb	r2, [r2, #0]
 800099e:	0011      	movs	r1, r2
 80009a0:	2203      	movs	r2, #3
 80009a2:	400a      	ands	r2, r1
 80009a4:	00d2      	lsls	r2, r2, #3
 80009a6:	21ff      	movs	r1, #255	; 0xff
 80009a8:	4091      	lsls	r1, r2
 80009aa:	000a      	movs	r2, r1
 80009ac:	43d2      	mvns	r2, r2
 80009ae:	401a      	ands	r2, r3
 80009b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	019b      	lsls	r3, r3, #6
 80009b6:	22ff      	movs	r2, #255	; 0xff
 80009b8:	401a      	ands	r2, r3
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	0018      	movs	r0, r3
 80009c0:	2303      	movs	r3, #3
 80009c2:	4003      	ands	r3, r0
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <__NVIC_SetPriority+0xd8>)
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	001c      	movs	r4, r3
 80009d0:	230f      	movs	r3, #15
 80009d2:	4023      	ands	r3, r4
 80009d4:	3b08      	subs	r3, #8
 80009d6:	089b      	lsrs	r3, r3, #2
 80009d8:	430a      	orrs	r2, r1
 80009da:	3306      	adds	r3, #6
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	18c3      	adds	r3, r0, r3
 80009e0:	3304      	adds	r3, #4
 80009e2:	601a      	str	r2, [r3, #0]
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b003      	add	sp, #12
 80009ea:	bd90      	pop	{r4, r7, pc}
 80009ec:	e000e100 	.word	0xe000e100
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	1e5a      	subs	r2, r3, #1
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	045b      	lsls	r3, r3, #17
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d301      	bcc.n	8000a0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e010      	b.n	8000a2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <SysTick_Config+0x44>)
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	3a01      	subs	r2, #1
 8000a12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a14:	2301      	movs	r3, #1
 8000a16:	425b      	negs	r3, r3
 8000a18:	2103      	movs	r1, #3
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f7ff ff7c 	bl	8000918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <SysTick_Config+0x44>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <SysTick_Config+0x44>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	0018      	movs	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b002      	add	sp, #8
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	e000e010 	.word	0xe000e010

08000a3c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	210f      	movs	r1, #15
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	1c02      	adds	r2, r0, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	0011      	movs	r1, r2
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff ff5d 	bl	8000918 <__NVIC_SetPriority>
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b004      	add	sp, #16
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff ffbf 	bl	80009f4 <SysTick_Config>
 8000a76:	0003      	movs	r3, r0
}
 8000a78:	0018      	movs	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b002      	add	sp, #8
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a8e:	e147      	b.n	8000d20 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2101      	movs	r1, #1
 8000a96:	697a      	ldr	r2, [r7, #20]
 8000a98:	4091      	lsls	r1, r2
 8000a9a:	000a      	movs	r2, r1
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d100      	bne.n	8000aa8 <HAL_GPIO_Init+0x28>
 8000aa6:	e138      	b.n	8000d1a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	2203      	movs	r2, #3
 8000aae:	4013      	ands	r3, r2
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d005      	beq.n	8000ac0 <HAL_GPIO_Init+0x40>
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2203      	movs	r2, #3
 8000aba:	4013      	ands	r3, r2
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d130      	bne.n	8000b22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	2203      	movs	r2, #3
 8000acc:	409a      	lsls	r2, r3
 8000ace:	0013      	movs	r3, r2
 8000ad0:	43da      	mvns	r2, r3
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	68da      	ldr	r2, [r3, #12]
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	409a      	lsls	r2, r3
 8000ae2:	0013      	movs	r3, r2
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000af6:	2201      	movs	r2, #1
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	409a      	lsls	r2, r3
 8000afc:	0013      	movs	r3, r2
 8000afe:	43da      	mvns	r2, r3
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	091b      	lsrs	r3, r3, #4
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	401a      	ands	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	409a      	lsls	r2, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	2203      	movs	r2, #3
 8000b28:	4013      	ands	r3, r2
 8000b2a:	2b03      	cmp	r3, #3
 8000b2c:	d017      	beq.n	8000b5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	2203      	movs	r2, #3
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	0013      	movs	r3, r2
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	689a      	ldr	r2, [r3, #8]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	409a      	lsls	r2, r3
 8000b50:	0013      	movs	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2203      	movs	r2, #3
 8000b64:	4013      	ands	r3, r2
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d123      	bne.n	8000bb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	08da      	lsrs	r2, r3, #3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3208      	adds	r2, #8
 8000b72:	0092      	lsls	r2, r2, #2
 8000b74:	58d3      	ldr	r3, [r2, r3]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	2207      	movs	r2, #7
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	220f      	movs	r2, #15
 8000b82:	409a      	lsls	r2, r3
 8000b84:	0013      	movs	r3, r2
 8000b86:	43da      	mvns	r2, r3
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	691a      	ldr	r2, [r3, #16]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	2107      	movs	r1, #7
 8000b96:	400b      	ands	r3, r1
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	409a      	lsls	r2, r3
 8000b9c:	0013      	movs	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	08da      	lsrs	r2, r3, #3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3208      	adds	r2, #8
 8000bac:	0092      	lsls	r2, r2, #2
 8000bae:	6939      	ldr	r1, [r7, #16]
 8000bb0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2203      	movs	r2, #3
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	409a      	lsls	r2, r3
 8000bd8:	0013      	movs	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	23c0      	movs	r3, #192	; 0xc0
 8000bec:	029b      	lsls	r3, r3, #10
 8000bee:	4013      	ands	r3, r2
 8000bf0:	d100      	bne.n	8000bf4 <HAL_GPIO_Init+0x174>
 8000bf2:	e092      	b.n	8000d1a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000bf4:	4a50      	ldr	r2, [pc, #320]	; (8000d38 <HAL_GPIO_Init+0x2b8>)
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	089b      	lsrs	r3, r3, #2
 8000bfa:	3318      	adds	r3, #24
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	589b      	ldr	r3, [r3, r2]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	2203      	movs	r2, #3
 8000c06:	4013      	ands	r3, r2
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	220f      	movs	r2, #15
 8000c0c:	409a      	lsls	r2, r3
 8000c0e:	0013      	movs	r3, r2
 8000c10:	43da      	mvns	r2, r3
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	23a0      	movs	r3, #160	; 0xa0
 8000c1c:	05db      	lsls	r3, r3, #23
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d013      	beq.n	8000c4a <HAL_GPIO_Init+0x1ca>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a45      	ldr	r2, [pc, #276]	; (8000d3c <HAL_GPIO_Init+0x2bc>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d00d      	beq.n	8000c46 <HAL_GPIO_Init+0x1c6>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a44      	ldr	r2, [pc, #272]	; (8000d40 <HAL_GPIO_Init+0x2c0>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d007      	beq.n	8000c42 <HAL_GPIO_Init+0x1c2>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a43      	ldr	r2, [pc, #268]	; (8000d44 <HAL_GPIO_Init+0x2c4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d101      	bne.n	8000c3e <HAL_GPIO_Init+0x1be>
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e006      	b.n	8000c4c <HAL_GPIO_Init+0x1cc>
 8000c3e:	2305      	movs	r3, #5
 8000c40:	e004      	b.n	8000c4c <HAL_GPIO_Init+0x1cc>
 8000c42:	2302      	movs	r3, #2
 8000c44:	e002      	b.n	8000c4c <HAL_GPIO_Init+0x1cc>
 8000c46:	2301      	movs	r3, #1
 8000c48:	e000      	b.n	8000c4c <HAL_GPIO_Init+0x1cc>
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	2103      	movs	r1, #3
 8000c50:	400a      	ands	r2, r1
 8000c52:	00d2      	lsls	r2, r2, #3
 8000c54:	4093      	lsls	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000c5c:	4936      	ldr	r1, [pc, #216]	; (8000d38 <HAL_GPIO_Init+0x2b8>)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	089b      	lsrs	r3, r3, #2
 8000c62:	3318      	adds	r3, #24
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c6a:	4b33      	ldr	r3, [pc, #204]	; (8000d38 <HAL_GPIO_Init+0x2b8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	43da      	mvns	r2, r3
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	035b      	lsls	r3, r3, #13
 8000c82:	4013      	ands	r3, r2
 8000c84:	d003      	beq.n	8000c8e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <HAL_GPIO_Init+0x2b8>)
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000c94:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <HAL_GPIO_Init+0x2b8>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	43da      	mvns	r2, r3
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	039b      	lsls	r3, r3, #14
 8000cac:	4013      	ands	r3, r2
 8000cae:	d003      	beq.n	8000cb8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <HAL_GPIO_Init+0x2b8>)
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cbe:	4a1e      	ldr	r2, [pc, #120]	; (8000d38 <HAL_GPIO_Init+0x2b8>)
 8000cc0:	2384      	movs	r3, #132	; 0x84
 8000cc2:	58d3      	ldr	r3, [r2, r3]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	43da      	mvns	r2, r3
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	029b      	lsls	r3, r3, #10
 8000cd8:	4013      	ands	r3, r2
 8000cda:	d003      	beq.n	8000ce4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ce4:	4914      	ldr	r1, [pc, #80]	; (8000d38 <HAL_GPIO_Init+0x2b8>)
 8000ce6:	2284      	movs	r2, #132	; 0x84
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <HAL_GPIO_Init+0x2b8>)
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	58d3      	ldr	r3, [r2, r3]
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	2380      	movs	r3, #128	; 0x80
 8000d04:	025b      	lsls	r3, r3, #9
 8000d06:	4013      	ands	r3, r2
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d12:	4909      	ldr	r1, [pc, #36]	; (8000d38 <HAL_GPIO_Init+0x2b8>)
 8000d14:	2280      	movs	r2, #128	; 0x80
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	40da      	lsrs	r2, r3
 8000d28:	1e13      	subs	r3, r2, #0
 8000d2a:	d000      	beq.n	8000d2e <HAL_GPIO_Init+0x2ae>
 8000d2c:	e6b0      	b.n	8000a90 <HAL_GPIO_Init+0x10>
  }
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b006      	add	sp, #24
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40021800 	.word	0x40021800
 8000d3c:	50000400 	.word	0x50000400
 8000d40:	50000800 	.word	0x50000800
 8000d44:	50000c00 	.word	0x50000c00

08000d48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	000a      	movs	r2, r1
 8000d52:	1cbb      	adds	r3, r7, #2
 8000d54:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	691b      	ldr	r3, [r3, #16]
 8000d5a:	1cba      	adds	r2, r7, #2
 8000d5c:	8812      	ldrh	r2, [r2, #0]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	d004      	beq.n	8000d6c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000d62:	230f      	movs	r3, #15
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	e003      	b.n	8000d74 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	18fb      	adds	r3, r7, r3
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000d74:	230f      	movs	r3, #15
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	781b      	ldrb	r3, [r3, #0]
}
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b004      	add	sp, #16
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	0008      	movs	r0, r1
 8000d8c:	0011      	movs	r1, r2
 8000d8e:	1cbb      	adds	r3, r7, #2
 8000d90:	1c02      	adds	r2, r0, #0
 8000d92:	801a      	strh	r2, [r3, #0]
 8000d94:	1c7b      	adds	r3, r7, #1
 8000d96:	1c0a      	adds	r2, r1, #0
 8000d98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d9a:	1c7b      	adds	r3, r7, #1
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d004      	beq.n	8000dac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000da2:	1cbb      	adds	r3, r7, #2
 8000da4:	881a      	ldrh	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000daa:	e003      	b.n	8000db4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dac:	1cbb      	adds	r3, r7, #2
 8000dae:	881a      	ldrh	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b002      	add	sp, #8
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a19      	ldr	r2, [pc, #100]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000dca:	4013      	ands	r3, r2
 8000dcc:	0019      	movs	r1, r3
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d11f      	bne.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	0013      	movs	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	189b      	adds	r3, r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	4912      	ldr	r1, [pc, #72]	; (8000e38 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000dee:	0018      	movs	r0, r3
 8000df0:	f7ff f990 	bl	8000114 <__udivsi3>
 8000df4:	0003      	movs	r3, r0
 8000df6:	3301      	adds	r3, #1
 8000df8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dfa:	e008      	b.n	8000e0e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	e001      	b.n	8000e0e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e009      	b.n	8000e22 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e10:	695a      	ldr	r2, [r3, #20]
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	401a      	ands	r2, r3
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d0ed      	beq.n	8000dfc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	0018      	movs	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b004      	add	sp, #16
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	40007000 	.word	0x40007000
 8000e30:	fffff9ff 	.word	0xfffff9ff
 8000e34:	20000000 	.word	0x20000000
 8000e38:	000f4240 	.word	0x000f4240

08000e3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e2f3      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2201      	movs	r2, #1
 8000e54:	4013      	ands	r3, r2
 8000e56:	d100      	bne.n	8000e5a <HAL_RCC_OscConfig+0x1e>
 8000e58:	e07c      	b.n	8000f54 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e5a:	4bc3      	ldr	r3, [pc, #780]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	2238      	movs	r2, #56	; 0x38
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e64:	4bc0      	ldr	r3, [pc, #768]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	2203      	movs	r2, #3
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	2b10      	cmp	r3, #16
 8000e72:	d102      	bne.n	8000e7a <HAL_RCC_OscConfig+0x3e>
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	d002      	beq.n	8000e80 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	2b08      	cmp	r3, #8
 8000e7e:	d10b      	bne.n	8000e98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e80:	4bb9      	ldr	r3, [pc, #740]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	029b      	lsls	r3, r3, #10
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d062      	beq.n	8000f52 <HAL_RCC_OscConfig+0x116>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d15e      	bne.n	8000f52 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e2ce      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	025b      	lsls	r3, r3, #9
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d107      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x78>
 8000ea4:	4bb0      	ldr	r3, [pc, #704]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4baf      	ldr	r3, [pc, #700]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000eaa:	2180      	movs	r1, #128	; 0x80
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	e020      	b.n	8000ef6 <HAL_RCC_OscConfig+0xba>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	23a0      	movs	r3, #160	; 0xa0
 8000eba:	02db      	lsls	r3, r3, #11
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d10e      	bne.n	8000ede <HAL_RCC_OscConfig+0xa2>
 8000ec0:	4ba9      	ldr	r3, [pc, #676]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4ba8      	ldr	r3, [pc, #672]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000ec6:	2180      	movs	r1, #128	; 0x80
 8000ec8:	02c9      	lsls	r1, r1, #11
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	4ba6      	ldr	r3, [pc, #664]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4ba5      	ldr	r3, [pc, #660]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	0249      	lsls	r1, r1, #9
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	e00b      	b.n	8000ef6 <HAL_RCC_OscConfig+0xba>
 8000ede:	4ba2      	ldr	r3, [pc, #648]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4ba1      	ldr	r3, [pc, #644]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000ee4:	49a1      	ldr	r1, [pc, #644]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000ee6:	400a      	ands	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	4b9f      	ldr	r3, [pc, #636]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4b9e      	ldr	r3, [pc, #632]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000ef0:	499f      	ldr	r1, [pc, #636]	; (8001170 <HAL_RCC_OscConfig+0x334>)
 8000ef2:	400a      	ands	r2, r1
 8000ef4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d014      	beq.n	8000f28 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000efe:	f7ff fcdd 	bl	80008bc <HAL_GetTick>
 8000f02:	0003      	movs	r3, r0
 8000f04:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f08:	f7ff fcd8 	bl	80008bc <HAL_GetTick>
 8000f0c:	0002      	movs	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b64      	cmp	r3, #100	; 0x64
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e28d      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f1a:	4b93      	ldr	r3, [pc, #588]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	029b      	lsls	r3, r3, #10
 8000f22:	4013      	ands	r3, r2
 8000f24:	d0f0      	beq.n	8000f08 <HAL_RCC_OscConfig+0xcc>
 8000f26:	e015      	b.n	8000f54 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f28:	f7ff fcc8 	bl	80008bc <HAL_GetTick>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f32:	f7ff fcc3 	bl	80008bc <HAL_GetTick>
 8000f36:	0002      	movs	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b64      	cmp	r3, #100	; 0x64
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e278      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f44:	4b88      	ldr	r3, [pc, #544]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	029b      	lsls	r3, r3, #10
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d1f0      	bne.n	8000f32 <HAL_RCC_OscConfig+0xf6>
 8000f50:	e000      	b.n	8000f54 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f52:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2202      	movs	r2, #2
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d100      	bne.n	8000f60 <HAL_RCC_OscConfig+0x124>
 8000f5e:	e099      	b.n	8001094 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f60:	4b81      	ldr	r3, [pc, #516]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	2238      	movs	r2, #56	; 0x38
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f6a:	4b7f      	ldr	r3, [pc, #508]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	2203      	movs	r2, #3
 8000f70:	4013      	ands	r3, r2
 8000f72:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	2b10      	cmp	r3, #16
 8000f78:	d102      	bne.n	8000f80 <HAL_RCC_OscConfig+0x144>
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d002      	beq.n	8000f86 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d135      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f86:	4b78      	ldr	r3, [pc, #480]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	2380      	movs	r3, #128	; 0x80
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	4013      	ands	r3, r2
 8000f90:	d005      	beq.n	8000f9e <HAL_RCC_OscConfig+0x162>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e24b      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f9e:	4b72      	ldr	r3, [pc, #456]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	4a74      	ldr	r2, [pc, #464]	; (8001174 <HAL_RCC_OscConfig+0x338>)
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	021a      	lsls	r2, r3, #8
 8000fae:	4b6e      	ldr	r3, [pc, #440]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d112      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000fba:	4b6b      	ldr	r3, [pc, #428]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a6e      	ldr	r2, [pc, #440]	; (8001178 <HAL_RCC_OscConfig+0x33c>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	0019      	movs	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	691a      	ldr	r2, [r3, #16]
 8000fc8:	4b67      	ldr	r3, [pc, #412]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000fce:	4b66      	ldr	r3, [pc, #408]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	0adb      	lsrs	r3, r3, #11
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	4a68      	ldr	r2, [pc, #416]	; (800117c <HAL_RCC_OscConfig+0x340>)
 8000fda:	40da      	lsrs	r2, r3
 8000fdc:	4b68      	ldr	r3, [pc, #416]	; (8001180 <HAL_RCC_OscConfig+0x344>)
 8000fde:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000fe0:	4b68      	ldr	r3, [pc, #416]	; (8001184 <HAL_RCC_OscConfig+0x348>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff fc0d 	bl	8000804 <HAL_InitTick>
 8000fea:	1e03      	subs	r3, r0, #0
 8000fec:	d051      	beq.n	8001092 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e221      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d030      	beq.n	800105c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000ffa:	4b5b      	ldr	r3, [pc, #364]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a5e      	ldr	r2, [pc, #376]	; (8001178 <HAL_RCC_OscConfig+0x33c>)
 8001000:	4013      	ands	r3, r2
 8001002:	0019      	movs	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	4b57      	ldr	r3, [pc, #348]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 800100a:	430a      	orrs	r2, r1
 800100c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800100e:	4b56      	ldr	r3, [pc, #344]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b55      	ldr	r3, [pc, #340]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	0049      	lsls	r1, r1, #1
 8001018:	430a      	orrs	r2, r1
 800101a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101c:	f7ff fc4e 	bl	80008bc <HAL_GetTick>
 8001020:	0003      	movs	r3, r0
 8001022:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001026:	f7ff fc49 	bl	80008bc <HAL_GetTick>
 800102a:	0002      	movs	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e1fe      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001038:	4b4b      	ldr	r3, [pc, #300]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4013      	ands	r3, r2
 8001042:	d0f0      	beq.n	8001026 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001044:	4b48      	ldr	r3, [pc, #288]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	4a4a      	ldr	r2, [pc, #296]	; (8001174 <HAL_RCC_OscConfig+0x338>)
 800104a:	4013      	ands	r3, r2
 800104c:	0019      	movs	r1, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	021a      	lsls	r2, r3, #8
 8001054:	4b44      	ldr	r3, [pc, #272]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8001056:	430a      	orrs	r2, r1
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	e01b      	b.n	8001094 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800105c:	4b42      	ldr	r3, [pc, #264]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b41      	ldr	r3, [pc, #260]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8001062:	4949      	ldr	r1, [pc, #292]	; (8001188 <HAL_RCC_OscConfig+0x34c>)
 8001064:	400a      	ands	r2, r1
 8001066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001068:	f7ff fc28 	bl	80008bc <HAL_GetTick>
 800106c:	0003      	movs	r3, r0
 800106e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001072:	f7ff fc23 	bl	80008bc <HAL_GetTick>
 8001076:	0002      	movs	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e1d8      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001084:	4b38      	ldr	r3, [pc, #224]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	4013      	ands	r3, r2
 800108e:	d1f0      	bne.n	8001072 <HAL_RCC_OscConfig+0x236>
 8001090:	e000      	b.n	8001094 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001092:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2208      	movs	r2, #8
 800109a:	4013      	ands	r3, r2
 800109c:	d047      	beq.n	800112e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800109e:	4b32      	ldr	r3, [pc, #200]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2238      	movs	r2, #56	; 0x38
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b18      	cmp	r3, #24
 80010a8:	d10a      	bne.n	80010c0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80010aa:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 80010ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ae:	2202      	movs	r2, #2
 80010b0:	4013      	ands	r3, r2
 80010b2:	d03c      	beq.n	800112e <HAL_RCC_OscConfig+0x2f2>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d138      	bne.n	800112e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e1ba      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d019      	beq.n	80010fc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80010c8:	4b27      	ldr	r3, [pc, #156]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 80010ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010cc:	4b26      	ldr	r3, [pc, #152]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 80010ce:	2101      	movs	r1, #1
 80010d0:	430a      	orrs	r2, r1
 80010d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d4:	f7ff fbf2 	bl	80008bc <HAL_GetTick>
 80010d8:	0003      	movs	r3, r0
 80010da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010de:	f7ff fbed 	bl	80008bc <HAL_GetTick>
 80010e2:	0002      	movs	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e1a2      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 80010f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f4:	2202      	movs	r2, #2
 80010f6:	4013      	ands	r3, r2
 80010f8:	d0f1      	beq.n	80010de <HAL_RCC_OscConfig+0x2a2>
 80010fa:	e018      	b.n	800112e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 80010fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001100:	4b19      	ldr	r3, [pc, #100]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8001102:	2101      	movs	r1, #1
 8001104:	438a      	bics	r2, r1
 8001106:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001108:	f7ff fbd8 	bl	80008bc <HAL_GetTick>
 800110c:	0003      	movs	r3, r0
 800110e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001112:	f7ff fbd3 	bl	80008bc <HAL_GetTick>
 8001116:	0002      	movs	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e188      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8001126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001128:	2202      	movs	r2, #2
 800112a:	4013      	ands	r3, r2
 800112c:	d1f1      	bne.n	8001112 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2204      	movs	r2, #4
 8001134:	4013      	ands	r3, r2
 8001136:	d100      	bne.n	800113a <HAL_RCC_OscConfig+0x2fe>
 8001138:	e0c6      	b.n	80012c8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800113a:	231f      	movs	r3, #31
 800113c:	18fb      	adds	r3, r7, r3
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2238      	movs	r2, #56	; 0x38
 8001148:	4013      	ands	r3, r2
 800114a:	2b20      	cmp	r3, #32
 800114c:	d11e      	bne.n	800118c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_RCC_OscConfig+0x32c>)
 8001150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001152:	2202      	movs	r2, #2
 8001154:	4013      	ands	r3, r2
 8001156:	d100      	bne.n	800115a <HAL_RCC_OscConfig+0x31e>
 8001158:	e0b6      	b.n	80012c8 <HAL_RCC_OscConfig+0x48c>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d000      	beq.n	8001164 <HAL_RCC_OscConfig+0x328>
 8001162:	e0b1      	b.n	80012c8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e166      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
 8001168:	40021000 	.word	0x40021000
 800116c:	fffeffff 	.word	0xfffeffff
 8001170:	fffbffff 	.word	0xfffbffff
 8001174:	ffff80ff 	.word	0xffff80ff
 8001178:	ffffc7ff 	.word	0xffffc7ff
 800117c:	00f42400 	.word	0x00f42400
 8001180:	20000000 	.word	0x20000000
 8001184:	20000004 	.word	0x20000004
 8001188:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800118c:	4bac      	ldr	r3, [pc, #688]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 800118e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	055b      	lsls	r3, r3, #21
 8001194:	4013      	ands	r3, r2
 8001196:	d101      	bne.n	800119c <HAL_RCC_OscConfig+0x360>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <HAL_RCC_OscConfig+0x362>
 800119c:	2300      	movs	r3, #0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d011      	beq.n	80011c6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	4ba7      	ldr	r3, [pc, #668]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 80011a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011a6:	4ba6      	ldr	r3, [pc, #664]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	0549      	lsls	r1, r1, #21
 80011ac:	430a      	orrs	r2, r1
 80011ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80011b0:	4ba3      	ldr	r3, [pc, #652]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 80011b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	055b      	lsls	r3, r3, #21
 80011b8:	4013      	ands	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80011be:	231f      	movs	r3, #31
 80011c0:	18fb      	adds	r3, r7, r3
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011c6:	4b9f      	ldr	r3, [pc, #636]	; (8001444 <HAL_RCC_OscConfig+0x608>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4013      	ands	r3, r2
 80011d0:	d11a      	bne.n	8001208 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011d2:	4b9c      	ldr	r3, [pc, #624]	; (8001444 <HAL_RCC_OscConfig+0x608>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4b9b      	ldr	r3, [pc, #620]	; (8001444 <HAL_RCC_OscConfig+0x608>)
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	0049      	lsls	r1, r1, #1
 80011dc:	430a      	orrs	r2, r1
 80011de:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fb6c 	bl	80008bc <HAL_GetTick>
 80011e4:	0003      	movs	r3, r0
 80011e6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ea:	f7ff fb67 	bl	80008bc <HAL_GetTick>
 80011ee:	0002      	movs	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e11c      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011fc:	4b91      	ldr	r3, [pc, #580]	; (8001444 <HAL_RCC_OscConfig+0x608>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4013      	ands	r3, r2
 8001206:	d0f0      	beq.n	80011ea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d106      	bne.n	800121e <HAL_RCC_OscConfig+0x3e2>
 8001210:	4b8b      	ldr	r3, [pc, #556]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 8001212:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001214:	4b8a      	ldr	r3, [pc, #552]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 8001216:	2101      	movs	r1, #1
 8001218:	430a      	orrs	r2, r1
 800121a:	65da      	str	r2, [r3, #92]	; 0x5c
 800121c:	e01c      	b.n	8001258 <HAL_RCC_OscConfig+0x41c>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b05      	cmp	r3, #5
 8001224:	d10c      	bne.n	8001240 <HAL_RCC_OscConfig+0x404>
 8001226:	4b86      	ldr	r3, [pc, #536]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 8001228:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800122a:	4b85      	ldr	r3, [pc, #532]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 800122c:	2104      	movs	r1, #4
 800122e:	430a      	orrs	r2, r1
 8001230:	65da      	str	r2, [r3, #92]	; 0x5c
 8001232:	4b83      	ldr	r3, [pc, #524]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 8001234:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001236:	4b82      	ldr	r3, [pc, #520]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 8001238:	2101      	movs	r1, #1
 800123a:	430a      	orrs	r2, r1
 800123c:	65da      	str	r2, [r3, #92]	; 0x5c
 800123e:	e00b      	b.n	8001258 <HAL_RCC_OscConfig+0x41c>
 8001240:	4b7f      	ldr	r3, [pc, #508]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 8001242:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001244:	4b7e      	ldr	r3, [pc, #504]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 8001246:	2101      	movs	r1, #1
 8001248:	438a      	bics	r2, r1
 800124a:	65da      	str	r2, [r3, #92]	; 0x5c
 800124c:	4b7c      	ldr	r3, [pc, #496]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 800124e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001250:	4b7b      	ldr	r3, [pc, #492]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 8001252:	2104      	movs	r1, #4
 8001254:	438a      	bics	r2, r1
 8001256:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d014      	beq.n	800128a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001260:	f7ff fb2c 	bl	80008bc <HAL_GetTick>
 8001264:	0003      	movs	r3, r0
 8001266:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001268:	e009      	b.n	800127e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800126a:	f7ff fb27 	bl	80008bc <HAL_GetTick>
 800126e:	0002      	movs	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	4a74      	ldr	r2, [pc, #464]	; (8001448 <HAL_RCC_OscConfig+0x60c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e0db      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800127e:	4b70      	ldr	r3, [pc, #448]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 8001280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001282:	2202      	movs	r2, #2
 8001284:	4013      	ands	r3, r2
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x42e>
 8001288:	e013      	b.n	80012b2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128a:	f7ff fb17 	bl	80008bc <HAL_GetTick>
 800128e:	0003      	movs	r3, r0
 8001290:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001292:	e009      	b.n	80012a8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001294:	f7ff fb12 	bl	80008bc <HAL_GetTick>
 8001298:	0002      	movs	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	4a6a      	ldr	r2, [pc, #424]	; (8001448 <HAL_RCC_OscConfig+0x60c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e0c6      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012a8:	4b65      	ldr	r3, [pc, #404]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 80012aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ac:	2202      	movs	r2, #2
 80012ae:	4013      	ands	r3, r2
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80012b2:	231f      	movs	r3, #31
 80012b4:	18fb      	adds	r3, r7, r3
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d105      	bne.n	80012c8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80012bc:	4b60      	ldr	r3, [pc, #384]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 80012be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012c0:	4b5f      	ldr	r3, [pc, #380]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 80012c2:	4962      	ldr	r1, [pc, #392]	; (800144c <HAL_RCC_OscConfig+0x610>)
 80012c4:	400a      	ands	r2, r1
 80012c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d100      	bne.n	80012d2 <HAL_RCC_OscConfig+0x496>
 80012d0:	e0b0      	b.n	8001434 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012d2:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2238      	movs	r2, #56	; 0x38
 80012d8:	4013      	ands	r3, r2
 80012da:	2b10      	cmp	r3, #16
 80012dc:	d100      	bne.n	80012e0 <HAL_RCC_OscConfig+0x4a4>
 80012de:	e078      	b.n	80013d2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d153      	bne.n	8001390 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e8:	4b55      	ldr	r3, [pc, #340]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b54      	ldr	r3, [pc, #336]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 80012ee:	4958      	ldr	r1, [pc, #352]	; (8001450 <HAL_RCC_OscConfig+0x614>)
 80012f0:	400a      	ands	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f4:	f7ff fae2 	bl	80008bc <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fe:	f7ff fadd 	bl	80008bc <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e092      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001310:	4b4b      	ldr	r3, [pc, #300]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	049b      	lsls	r3, r3, #18
 8001318:	4013      	ands	r3, r2
 800131a:	d1f0      	bne.n	80012fe <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800131c:	4b48      	ldr	r3, [pc, #288]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	4a4c      	ldr	r2, [pc, #304]	; (8001454 <HAL_RCC_OscConfig+0x618>)
 8001322:	4013      	ands	r3, r2
 8001324:	0019      	movs	r1, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1a      	ldr	r2, [r3, #32]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	431a      	orrs	r2, r3
 8001344:	4b3e      	ldr	r3, [pc, #248]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 8001346:	430a      	orrs	r2, r1
 8001348:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800134a:	4b3d      	ldr	r3, [pc, #244]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b3c      	ldr	r3, [pc, #240]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 8001350:	2180      	movs	r1, #128	; 0x80
 8001352:	0449      	lsls	r1, r1, #17
 8001354:	430a      	orrs	r2, r1
 8001356:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001358:	4b39      	ldr	r3, [pc, #228]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	4b38      	ldr	r3, [pc, #224]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	0549      	lsls	r1, r1, #21
 8001362:	430a      	orrs	r2, r1
 8001364:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff faa9 	bl	80008bc <HAL_GetTick>
 800136a:	0003      	movs	r3, r0
 800136c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001370:	f7ff faa4 	bl	80008bc <HAL_GetTick>
 8001374:	0002      	movs	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e059      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001382:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	049b      	lsls	r3, r3, #18
 800138a:	4013      	ands	r3, r2
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x534>
 800138e:	e051      	b.n	8001434 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 8001396:	492e      	ldr	r1, [pc, #184]	; (8001450 <HAL_RCC_OscConfig+0x614>)
 8001398:	400a      	ands	r2, r1
 800139a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff fa8e 	bl	80008bc <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a6:	f7ff fa89 	bl	80008bc <HAL_GetTick>
 80013aa:	0002      	movs	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e03e      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	049b      	lsls	r3, r3, #18
 80013c0:	4013      	ands	r3, r2
 80013c2:	d1f0      	bne.n	80013a6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 80013ca:	4923      	ldr	r1, [pc, #140]	; (8001458 <HAL_RCC_OscConfig+0x61c>)
 80013cc:	400a      	ands	r2, r1
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	e030      	b.n	8001434 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d101      	bne.n	80013de <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e02b      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_RCC_OscConfig+0x604>)
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	2203      	movs	r2, #3
 80013e8:	401a      	ands	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d11e      	bne.n	8001430 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2270      	movs	r2, #112	; 0x70
 80013f6:	401a      	ands	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d117      	bne.n	8001430 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	23fe      	movs	r3, #254	; 0xfe
 8001404:	01db      	lsls	r3, r3, #7
 8001406:	401a      	ands	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800140e:	429a      	cmp	r2, r3
 8001410:	d10e      	bne.n	8001430 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	23f8      	movs	r3, #248	; 0xf8
 8001416:	039b      	lsls	r3, r3, #14
 8001418:	401a      	ands	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800141e:	429a      	cmp	r2, r3
 8001420:	d106      	bne.n	8001430 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	0f5b      	lsrs	r3, r3, #29
 8001426:	075a      	lsls	r2, r3, #29
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800142c:	429a      	cmp	r2, r3
 800142e:	d001      	beq.n	8001434 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e000      	b.n	8001436 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	0018      	movs	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	b008      	add	sp, #32
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	40021000 	.word	0x40021000
 8001444:	40007000 	.word	0x40007000
 8001448:	00001388 	.word	0x00001388
 800144c:	efffffff 	.word	0xefffffff
 8001450:	feffffff 	.word	0xfeffffff
 8001454:	1fc1808c 	.word	0x1fc1808c
 8001458:	effefffc 	.word	0xeffefffc

0800145c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0e9      	b.n	8001644 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001470:	4b76      	ldr	r3, [pc, #472]	; (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2207      	movs	r2, #7
 8001476:	4013      	ands	r3, r2
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d91e      	bls.n	80014bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147e:	4b73      	ldr	r3, [pc, #460]	; (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2207      	movs	r2, #7
 8001484:	4393      	bics	r3, r2
 8001486:	0019      	movs	r1, r3
 8001488:	4b70      	ldr	r3, [pc, #448]	; (800164c <HAL_RCC_ClockConfig+0x1f0>)
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001490:	f7ff fa14 	bl	80008bc <HAL_GetTick>
 8001494:	0003      	movs	r3, r0
 8001496:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001498:	e009      	b.n	80014ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800149a:	f7ff fa0f 	bl	80008bc <HAL_GetTick>
 800149e:	0002      	movs	r2, r0
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	4a6a      	ldr	r2, [pc, #424]	; (8001650 <HAL_RCC_ClockConfig+0x1f4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e0ca      	b.n	8001644 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014ae:	4b67      	ldr	r3, [pc, #412]	; (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2207      	movs	r2, #7
 80014b4:	4013      	ands	r3, r2
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d1ee      	bne.n	800149a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2202      	movs	r2, #2
 80014c2:	4013      	ands	r3, r2
 80014c4:	d015      	beq.n	80014f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2204      	movs	r2, #4
 80014cc:	4013      	ands	r3, r2
 80014ce:	d006      	beq.n	80014de <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014d0:	4b60      	ldr	r3, [pc, #384]	; (8001654 <HAL_RCC_ClockConfig+0x1f8>)
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	4b5f      	ldr	r3, [pc, #380]	; (8001654 <HAL_RCC_ClockConfig+0x1f8>)
 80014d6:	21e0      	movs	r1, #224	; 0xe0
 80014d8:	01c9      	lsls	r1, r1, #7
 80014da:	430a      	orrs	r2, r1
 80014dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014de:	4b5d      	ldr	r3, [pc, #372]	; (8001654 <HAL_RCC_ClockConfig+0x1f8>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	4a5d      	ldr	r2, [pc, #372]	; (8001658 <HAL_RCC_ClockConfig+0x1fc>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	0019      	movs	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	4b59      	ldr	r3, [pc, #356]	; (8001654 <HAL_RCC_ClockConfig+0x1f8>)
 80014ee:	430a      	orrs	r2, r1
 80014f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2201      	movs	r2, #1
 80014f8:	4013      	ands	r3, r2
 80014fa:	d057      	beq.n	80015ac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d107      	bne.n	8001514 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001504:	4b53      	ldr	r3, [pc, #332]	; (8001654 <HAL_RCC_ClockConfig+0x1f8>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	029b      	lsls	r3, r3, #10
 800150c:	4013      	ands	r3, r2
 800150e:	d12b      	bne.n	8001568 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e097      	b.n	8001644 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d107      	bne.n	800152c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800151c:	4b4d      	ldr	r3, [pc, #308]	; (8001654 <HAL_RCC_ClockConfig+0x1f8>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	049b      	lsls	r3, r3, #18
 8001524:	4013      	ands	r3, r2
 8001526:	d11f      	bne.n	8001568 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e08b      	b.n	8001644 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d107      	bne.n	8001544 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001534:	4b47      	ldr	r3, [pc, #284]	; (8001654 <HAL_RCC_ClockConfig+0x1f8>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4013      	ands	r3, r2
 800153e:	d113      	bne.n	8001568 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e07f      	b.n	8001644 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d106      	bne.n	800155a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800154c:	4b41      	ldr	r3, [pc, #260]	; (8001654 <HAL_RCC_ClockConfig+0x1f8>)
 800154e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001550:	2202      	movs	r2, #2
 8001552:	4013      	ands	r3, r2
 8001554:	d108      	bne.n	8001568 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e074      	b.n	8001644 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800155a:	4b3e      	ldr	r3, [pc, #248]	; (8001654 <HAL_RCC_ClockConfig+0x1f8>)
 800155c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155e:	2202      	movs	r2, #2
 8001560:	4013      	ands	r3, r2
 8001562:	d101      	bne.n	8001568 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e06d      	b.n	8001644 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001568:	4b3a      	ldr	r3, [pc, #232]	; (8001654 <HAL_RCC_ClockConfig+0x1f8>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2207      	movs	r2, #7
 800156e:	4393      	bics	r3, r2
 8001570:	0019      	movs	r1, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	4b37      	ldr	r3, [pc, #220]	; (8001654 <HAL_RCC_ClockConfig+0x1f8>)
 8001578:	430a      	orrs	r2, r1
 800157a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800157c:	f7ff f99e 	bl	80008bc <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001584:	e009      	b.n	800159a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001586:	f7ff f999 	bl	80008bc <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	4a2f      	ldr	r2, [pc, #188]	; (8001650 <HAL_RCC_ClockConfig+0x1f4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e054      	b.n	8001644 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159a:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <HAL_RCC_ClockConfig+0x1f8>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2238      	movs	r2, #56	; 0x38
 80015a0:	401a      	ands	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d1ec      	bne.n	8001586 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2207      	movs	r2, #7
 80015b2:	4013      	ands	r3, r2
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d21e      	bcs.n	80015f8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2207      	movs	r2, #7
 80015c0:	4393      	bics	r3, r2
 80015c2:	0019      	movs	r1, r3
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015cc:	f7ff f976 	bl	80008bc <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015d4:	e009      	b.n	80015ea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d6:	f7ff f971 	bl	80008bc <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <HAL_RCC_ClockConfig+0x1f4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e02c      	b.n	8001644 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2207      	movs	r2, #7
 80015f0:	4013      	ands	r3, r2
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d1ee      	bne.n	80015d6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2204      	movs	r2, #4
 80015fe:	4013      	ands	r3, r2
 8001600:	d009      	beq.n	8001616 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_RCC_ClockConfig+0x1f8>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	4a15      	ldr	r2, [pc, #84]	; (800165c <HAL_RCC_ClockConfig+0x200>)
 8001608:	4013      	ands	r3, r2
 800160a:	0019      	movs	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_RCC_ClockConfig+0x1f8>)
 8001612:	430a      	orrs	r2, r1
 8001614:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001616:	f000 f829 	bl	800166c <HAL_RCC_GetSysClockFreq>
 800161a:	0001      	movs	r1, r0
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <HAL_RCC_ClockConfig+0x1f8>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	220f      	movs	r2, #15
 8001624:	401a      	ands	r2, r3
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_RCC_ClockConfig+0x204>)
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	58d3      	ldr	r3, [r2, r3]
 800162c:	221f      	movs	r2, #31
 800162e:	4013      	ands	r3, r2
 8001630:	000a      	movs	r2, r1
 8001632:	40da      	lsrs	r2, r3
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_RCC_ClockConfig+0x208>)
 8001636:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_RCC_ClockConfig+0x20c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff f8e1 	bl	8000804 <HAL_InitTick>
 8001642:	0003      	movs	r3, r0
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	b004      	add	sp, #16
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40022000 	.word	0x40022000
 8001650:	00001388 	.word	0x00001388
 8001654:	40021000 	.word	0x40021000
 8001658:	fffff0ff 	.word	0xfffff0ff
 800165c:	ffff8fff 	.word	0xffff8fff
 8001660:	08002634 	.word	0x08002634
 8001664:	20000000 	.word	0x20000000
 8001668:	20000004 	.word	0x20000004

0800166c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001672:	4b3c      	ldr	r3, [pc, #240]	; (8001764 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2238      	movs	r2, #56	; 0x38
 8001678:	4013      	ands	r3, r2
 800167a:	d10f      	bne.n	800169c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800167c:	4b39      	ldr	r3, [pc, #228]	; (8001764 <HAL_RCC_GetSysClockFreq+0xf8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	0adb      	lsrs	r3, r3, #11
 8001682:	2207      	movs	r2, #7
 8001684:	4013      	ands	r3, r2
 8001686:	2201      	movs	r2, #1
 8001688:	409a      	lsls	r2, r3
 800168a:	0013      	movs	r3, r2
 800168c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800168e:	6839      	ldr	r1, [r7, #0]
 8001690:	4835      	ldr	r0, [pc, #212]	; (8001768 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001692:	f7fe fd3f 	bl	8000114 <__udivsi3>
 8001696:	0003      	movs	r3, r0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	e05d      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800169c:	4b31      	ldr	r3, [pc, #196]	; (8001764 <HAL_RCC_GetSysClockFreq+0xf8>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2238      	movs	r2, #56	; 0x38
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d102      	bne.n	80016ae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016a8:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <HAL_RCC_GetSysClockFreq+0xfc>)
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	e054      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ae:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2238      	movs	r2, #56	; 0x38
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b10      	cmp	r3, #16
 80016b8:	d138      	bne.n	800172c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80016ba:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	2203      	movs	r2, #3
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	2207      	movs	r2, #7
 80016cc:	4013      	ands	r3, r2
 80016ce:	3301      	adds	r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d10d      	bne.n	80016f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	4823      	ldr	r0, [pc, #140]	; (8001768 <HAL_RCC_GetSysClockFreq+0xfc>)
 80016dc:	f7fe fd1a 	bl	8000114 <__udivsi3>
 80016e0:	0003      	movs	r3, r0
 80016e2:	0019      	movs	r1, r3
 80016e4:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	227f      	movs	r2, #127	; 0x7f
 80016ec:	4013      	ands	r3, r2
 80016ee:	434b      	muls	r3, r1
 80016f0:	617b      	str	r3, [r7, #20]
        break;
 80016f2:	e00d      	b.n	8001710 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	481c      	ldr	r0, [pc, #112]	; (8001768 <HAL_RCC_GetSysClockFreq+0xfc>)
 80016f8:	f7fe fd0c 	bl	8000114 <__udivsi3>
 80016fc:	0003      	movs	r3, r0
 80016fe:	0019      	movs	r1, r3
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	227f      	movs	r2, #127	; 0x7f
 8001708:	4013      	ands	r3, r2
 800170a:	434b      	muls	r3, r1
 800170c:	617b      	str	r3, [r7, #20]
        break;
 800170e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0f5b      	lsrs	r3, r3, #29
 8001716:	2207      	movs	r2, #7
 8001718:	4013      	ands	r3, r2
 800171a:	3301      	adds	r3, #1
 800171c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	6978      	ldr	r0, [r7, #20]
 8001722:	f7fe fcf7 	bl	8000114 <__udivsi3>
 8001726:	0003      	movs	r3, r0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	e015      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <HAL_RCC_GetSysClockFreq+0xf8>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2238      	movs	r2, #56	; 0x38
 8001732:	4013      	ands	r3, r2
 8001734:	2b20      	cmp	r3, #32
 8001736:	d103      	bne.n	8001740 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	e00b      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2238      	movs	r2, #56	; 0x38
 8001746:	4013      	ands	r3, r2
 8001748:	2b18      	cmp	r3, #24
 800174a:	d103      	bne.n	8001754 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800174c:	23fa      	movs	r3, #250	; 0xfa
 800174e:	01db      	lsls	r3, r3, #7
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	e001      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001758:	693b      	ldr	r3, [r7, #16]
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b006      	add	sp, #24
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	40021000 	.word	0x40021000
 8001768:	00f42400 	.word	0x00f42400

0800176c <std>:
 800176c:	2300      	movs	r3, #0
 800176e:	b510      	push	{r4, lr}
 8001770:	0004      	movs	r4, r0
 8001772:	6003      	str	r3, [r0, #0]
 8001774:	6043      	str	r3, [r0, #4]
 8001776:	6083      	str	r3, [r0, #8]
 8001778:	8181      	strh	r1, [r0, #12]
 800177a:	6643      	str	r3, [r0, #100]	; 0x64
 800177c:	0019      	movs	r1, r3
 800177e:	81c2      	strh	r2, [r0, #14]
 8001780:	6103      	str	r3, [r0, #16]
 8001782:	6143      	str	r3, [r0, #20]
 8001784:	6183      	str	r3, [r0, #24]
 8001786:	2208      	movs	r2, #8
 8001788:	305c      	adds	r0, #92	; 0x5c
 800178a:	f000 f8fd 	bl	8001988 <memset>
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <std+0x38>)
 8001790:	6224      	str	r4, [r4, #32]
 8001792:	6263      	str	r3, [r4, #36]	; 0x24
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <std+0x3c>)
 8001796:	62a3      	str	r3, [r4, #40]	; 0x28
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <std+0x40>)
 800179a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <std+0x44>)
 800179e:	6323      	str	r3, [r4, #48]	; 0x30
 80017a0:	bd10      	pop	{r4, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	080018f1 	.word	0x080018f1
 80017a8:	08001919 	.word	0x08001919
 80017ac:	08001951 	.word	0x08001951
 80017b0:	0800197d 	.word	0x0800197d

080017b4 <stdio_exit_handler>:
 80017b4:	b510      	push	{r4, lr}
 80017b6:	4a03      	ldr	r2, [pc, #12]	; (80017c4 <stdio_exit_handler+0x10>)
 80017b8:	4903      	ldr	r1, [pc, #12]	; (80017c8 <stdio_exit_handler+0x14>)
 80017ba:	4804      	ldr	r0, [pc, #16]	; (80017cc <stdio_exit_handler+0x18>)
 80017bc:	f000 f86c 	bl	8001898 <_fwalk_sglue>
 80017c0:	bd10      	pop	{r4, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	2000000c 	.word	0x2000000c
 80017c8:	08002325 	.word	0x08002325
 80017cc:	20000018 	.word	0x20000018

080017d0 <cleanup_stdio>:
 80017d0:	6841      	ldr	r1, [r0, #4]
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <cleanup_stdio+0x30>)
 80017d4:	b510      	push	{r4, lr}
 80017d6:	0004      	movs	r4, r0
 80017d8:	4299      	cmp	r1, r3
 80017da:	d001      	beq.n	80017e0 <cleanup_stdio+0x10>
 80017dc:	f000 fda2 	bl	8002324 <_fflush_r>
 80017e0:	68a1      	ldr	r1, [r4, #8]
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <cleanup_stdio+0x34>)
 80017e4:	4299      	cmp	r1, r3
 80017e6:	d002      	beq.n	80017ee <cleanup_stdio+0x1e>
 80017e8:	0020      	movs	r0, r4
 80017ea:	f000 fd9b 	bl	8002324 <_fflush_r>
 80017ee:	68e1      	ldr	r1, [r4, #12]
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <cleanup_stdio+0x38>)
 80017f2:	4299      	cmp	r1, r3
 80017f4:	d002      	beq.n	80017fc <cleanup_stdio+0x2c>
 80017f6:	0020      	movs	r0, r4
 80017f8:	f000 fd94 	bl	8002324 <_fflush_r>
 80017fc:	bd10      	pop	{r4, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	2000008c 	.word	0x2000008c
 8001804:	200000f4 	.word	0x200000f4
 8001808:	2000015c 	.word	0x2000015c

0800180c <global_stdio_init.part.0>:
 800180c:	b510      	push	{r4, lr}
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <global_stdio_init.part.0+0x28>)
 8001810:	4a09      	ldr	r2, [pc, #36]	; (8001838 <global_stdio_init.part.0+0x2c>)
 8001812:	2104      	movs	r1, #4
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	4809      	ldr	r0, [pc, #36]	; (800183c <global_stdio_init.part.0+0x30>)
 8001818:	2200      	movs	r2, #0
 800181a:	f7ff ffa7 	bl	800176c <std>
 800181e:	2201      	movs	r2, #1
 8001820:	2109      	movs	r1, #9
 8001822:	4807      	ldr	r0, [pc, #28]	; (8001840 <global_stdio_init.part.0+0x34>)
 8001824:	f7ff ffa2 	bl	800176c <std>
 8001828:	2202      	movs	r2, #2
 800182a:	2112      	movs	r1, #18
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <global_stdio_init.part.0+0x38>)
 800182e:	f7ff ff9d 	bl	800176c <std>
 8001832:	bd10      	pop	{r4, pc}
 8001834:	200001c4 	.word	0x200001c4
 8001838:	080017b5 	.word	0x080017b5
 800183c:	2000008c 	.word	0x2000008c
 8001840:	200000f4 	.word	0x200000f4
 8001844:	2000015c 	.word	0x2000015c

08001848 <__sfp_lock_acquire>:
 8001848:	b510      	push	{r4, lr}
 800184a:	4802      	ldr	r0, [pc, #8]	; (8001854 <__sfp_lock_acquire+0xc>)
 800184c:	f000 f91c 	bl	8001a88 <__retarget_lock_acquire_recursive>
 8001850:	bd10      	pop	{r4, pc}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	200001cd 	.word	0x200001cd

08001858 <__sfp_lock_release>:
 8001858:	b510      	push	{r4, lr}
 800185a:	4802      	ldr	r0, [pc, #8]	; (8001864 <__sfp_lock_release+0xc>)
 800185c:	f000 f915 	bl	8001a8a <__retarget_lock_release_recursive>
 8001860:	bd10      	pop	{r4, pc}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	200001cd 	.word	0x200001cd

08001868 <__sinit>:
 8001868:	b510      	push	{r4, lr}
 800186a:	0004      	movs	r4, r0
 800186c:	f7ff ffec 	bl	8001848 <__sfp_lock_acquire>
 8001870:	6a23      	ldr	r3, [r4, #32]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <__sinit+0x14>
 8001876:	f7ff ffef 	bl	8001858 <__sfp_lock_release>
 800187a:	bd10      	pop	{r4, pc}
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <__sinit+0x28>)
 800187e:	6223      	str	r3, [r4, #32]
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <__sinit+0x2c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f6      	bne.n	8001876 <__sinit+0xe>
 8001888:	f7ff ffc0 	bl	800180c <global_stdio_init.part.0>
 800188c:	e7f3      	b.n	8001876 <__sinit+0xe>
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	080017d1 	.word	0x080017d1
 8001894:	200001c4 	.word	0x200001c4

08001898 <_fwalk_sglue>:
 8001898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800189a:	0014      	movs	r4, r2
 800189c:	2600      	movs	r6, #0
 800189e:	9000      	str	r0, [sp, #0]
 80018a0:	9101      	str	r1, [sp, #4]
 80018a2:	68a5      	ldr	r5, [r4, #8]
 80018a4:	6867      	ldr	r7, [r4, #4]
 80018a6:	3f01      	subs	r7, #1
 80018a8:	d504      	bpl.n	80018b4 <_fwalk_sglue+0x1c>
 80018aa:	6824      	ldr	r4, [r4, #0]
 80018ac:	2c00      	cmp	r4, #0
 80018ae:	d1f8      	bne.n	80018a2 <_fwalk_sglue+0xa>
 80018b0:	0030      	movs	r0, r6
 80018b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80018b4:	89ab      	ldrh	r3, [r5, #12]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d908      	bls.n	80018cc <_fwalk_sglue+0x34>
 80018ba:	220e      	movs	r2, #14
 80018bc:	5eab      	ldrsh	r3, [r5, r2]
 80018be:	3301      	adds	r3, #1
 80018c0:	d004      	beq.n	80018cc <_fwalk_sglue+0x34>
 80018c2:	0029      	movs	r1, r5
 80018c4:	9800      	ldr	r0, [sp, #0]
 80018c6:	9b01      	ldr	r3, [sp, #4]
 80018c8:	4798      	blx	r3
 80018ca:	4306      	orrs	r6, r0
 80018cc:	3568      	adds	r5, #104	; 0x68
 80018ce:	e7ea      	b.n	80018a6 <_fwalk_sglue+0xe>

080018d0 <iprintf>:
 80018d0:	b40f      	push	{r0, r1, r2, r3}
 80018d2:	b507      	push	{r0, r1, r2, lr}
 80018d4:	4905      	ldr	r1, [pc, #20]	; (80018ec <iprintf+0x1c>)
 80018d6:	ab04      	add	r3, sp, #16
 80018d8:	6808      	ldr	r0, [r1, #0]
 80018da:	cb04      	ldmia	r3!, {r2}
 80018dc:	6881      	ldr	r1, [r0, #8]
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	f000 f9fa 	bl	8001cd8 <_vfiprintf_r>
 80018e4:	b003      	add	sp, #12
 80018e6:	bc08      	pop	{r3}
 80018e8:	b004      	add	sp, #16
 80018ea:	4718      	bx	r3
 80018ec:	20000064 	.word	0x20000064

080018f0 <__sread>:
 80018f0:	b570      	push	{r4, r5, r6, lr}
 80018f2:	000c      	movs	r4, r1
 80018f4:	250e      	movs	r5, #14
 80018f6:	5f49      	ldrsh	r1, [r1, r5]
 80018f8:	f000 f874 	bl	80019e4 <_read_r>
 80018fc:	2800      	cmp	r0, #0
 80018fe:	db03      	blt.n	8001908 <__sread+0x18>
 8001900:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001902:	181b      	adds	r3, r3, r0
 8001904:	6563      	str	r3, [r4, #84]	; 0x54
 8001906:	bd70      	pop	{r4, r5, r6, pc}
 8001908:	89a3      	ldrh	r3, [r4, #12]
 800190a:	4a02      	ldr	r2, [pc, #8]	; (8001914 <__sread+0x24>)
 800190c:	4013      	ands	r3, r2
 800190e:	81a3      	strh	r3, [r4, #12]
 8001910:	e7f9      	b.n	8001906 <__sread+0x16>
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	ffffefff 	.word	0xffffefff

08001918 <__swrite>:
 8001918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191a:	001f      	movs	r7, r3
 800191c:	898b      	ldrh	r3, [r1, #12]
 800191e:	0005      	movs	r5, r0
 8001920:	000c      	movs	r4, r1
 8001922:	0016      	movs	r6, r2
 8001924:	05db      	lsls	r3, r3, #23
 8001926:	d505      	bpl.n	8001934 <__swrite+0x1c>
 8001928:	230e      	movs	r3, #14
 800192a:	5ec9      	ldrsh	r1, [r1, r3]
 800192c:	2200      	movs	r2, #0
 800192e:	2302      	movs	r3, #2
 8001930:	f000 f844 	bl	80019bc <_lseek_r>
 8001934:	89a3      	ldrh	r3, [r4, #12]
 8001936:	4a05      	ldr	r2, [pc, #20]	; (800194c <__swrite+0x34>)
 8001938:	0028      	movs	r0, r5
 800193a:	4013      	ands	r3, r2
 800193c:	81a3      	strh	r3, [r4, #12]
 800193e:	0032      	movs	r2, r6
 8001940:	230e      	movs	r3, #14
 8001942:	5ee1      	ldrsh	r1, [r4, r3]
 8001944:	003b      	movs	r3, r7
 8001946:	f000 f861 	bl	8001a0c <_write_r>
 800194a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800194c:	ffffefff 	.word	0xffffefff

08001950 <__sseek>:
 8001950:	b570      	push	{r4, r5, r6, lr}
 8001952:	000c      	movs	r4, r1
 8001954:	250e      	movs	r5, #14
 8001956:	5f49      	ldrsh	r1, [r1, r5]
 8001958:	f000 f830 	bl	80019bc <_lseek_r>
 800195c:	89a3      	ldrh	r3, [r4, #12]
 800195e:	1c42      	adds	r2, r0, #1
 8001960:	d103      	bne.n	800196a <__sseek+0x1a>
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <__sseek+0x28>)
 8001964:	4013      	ands	r3, r2
 8001966:	81a3      	strh	r3, [r4, #12]
 8001968:	bd70      	pop	{r4, r5, r6, pc}
 800196a:	2280      	movs	r2, #128	; 0x80
 800196c:	0152      	lsls	r2, r2, #5
 800196e:	4313      	orrs	r3, r2
 8001970:	81a3      	strh	r3, [r4, #12]
 8001972:	6560      	str	r0, [r4, #84]	; 0x54
 8001974:	e7f8      	b.n	8001968 <__sseek+0x18>
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	ffffefff 	.word	0xffffefff

0800197c <__sclose>:
 800197c:	b510      	push	{r4, lr}
 800197e:	230e      	movs	r3, #14
 8001980:	5ec9      	ldrsh	r1, [r1, r3]
 8001982:	f000 f809 	bl	8001998 <_close_r>
 8001986:	bd10      	pop	{r4, pc}

08001988 <memset>:
 8001988:	0003      	movs	r3, r0
 800198a:	1882      	adds	r2, r0, r2
 800198c:	4293      	cmp	r3, r2
 800198e:	d100      	bne.n	8001992 <memset+0xa>
 8001990:	4770      	bx	lr
 8001992:	7019      	strb	r1, [r3, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	e7f9      	b.n	800198c <memset+0x4>

08001998 <_close_r>:
 8001998:	2300      	movs	r3, #0
 800199a:	b570      	push	{r4, r5, r6, lr}
 800199c:	4d06      	ldr	r5, [pc, #24]	; (80019b8 <_close_r+0x20>)
 800199e:	0004      	movs	r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	602b      	str	r3, [r5, #0]
 80019a4:	f7fe fe7c 	bl	80006a0 <_close>
 80019a8:	1c43      	adds	r3, r0, #1
 80019aa:	d103      	bne.n	80019b4 <_close_r+0x1c>
 80019ac:	682b      	ldr	r3, [r5, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d000      	beq.n	80019b4 <_close_r+0x1c>
 80019b2:	6023      	str	r3, [r4, #0]
 80019b4:	bd70      	pop	{r4, r5, r6, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	200001c8 	.word	0x200001c8

080019bc <_lseek_r>:
 80019bc:	b570      	push	{r4, r5, r6, lr}
 80019be:	0004      	movs	r4, r0
 80019c0:	0008      	movs	r0, r1
 80019c2:	0011      	movs	r1, r2
 80019c4:	001a      	movs	r2, r3
 80019c6:	2300      	movs	r3, #0
 80019c8:	4d05      	ldr	r5, [pc, #20]	; (80019e0 <_lseek_r+0x24>)
 80019ca:	602b      	str	r3, [r5, #0]
 80019cc:	f7fe fe89 	bl	80006e2 <_lseek>
 80019d0:	1c43      	adds	r3, r0, #1
 80019d2:	d103      	bne.n	80019dc <_lseek_r+0x20>
 80019d4:	682b      	ldr	r3, [r5, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d000      	beq.n	80019dc <_lseek_r+0x20>
 80019da:	6023      	str	r3, [r4, #0]
 80019dc:	bd70      	pop	{r4, r5, r6, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	200001c8 	.word	0x200001c8

080019e4 <_read_r>:
 80019e4:	b570      	push	{r4, r5, r6, lr}
 80019e6:	0004      	movs	r4, r0
 80019e8:	0008      	movs	r0, r1
 80019ea:	0011      	movs	r1, r2
 80019ec:	001a      	movs	r2, r3
 80019ee:	2300      	movs	r3, #0
 80019f0:	4d05      	ldr	r5, [pc, #20]	; (8001a08 <_read_r+0x24>)
 80019f2:	602b      	str	r3, [r5, #0]
 80019f4:	f7fe fe1b 	bl	800062e <_read>
 80019f8:	1c43      	adds	r3, r0, #1
 80019fa:	d103      	bne.n	8001a04 <_read_r+0x20>
 80019fc:	682b      	ldr	r3, [r5, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d000      	beq.n	8001a04 <_read_r+0x20>
 8001a02:	6023      	str	r3, [r4, #0]
 8001a04:	bd70      	pop	{r4, r5, r6, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	200001c8 	.word	0x200001c8

08001a0c <_write_r>:
 8001a0c:	b570      	push	{r4, r5, r6, lr}
 8001a0e:	0004      	movs	r4, r0
 8001a10:	0008      	movs	r0, r1
 8001a12:	0011      	movs	r1, r2
 8001a14:	001a      	movs	r2, r3
 8001a16:	2300      	movs	r3, #0
 8001a18:	4d05      	ldr	r5, [pc, #20]	; (8001a30 <_write_r+0x24>)
 8001a1a:	602b      	str	r3, [r5, #0]
 8001a1c:	f7fe fe24 	bl	8000668 <_write>
 8001a20:	1c43      	adds	r3, r0, #1
 8001a22:	d103      	bne.n	8001a2c <_write_r+0x20>
 8001a24:	682b      	ldr	r3, [r5, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d000      	beq.n	8001a2c <_write_r+0x20>
 8001a2a:	6023      	str	r3, [r4, #0]
 8001a2c:	bd70      	pop	{r4, r5, r6, pc}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	200001c8 	.word	0x200001c8

08001a34 <__errno>:
 8001a34:	4b01      	ldr	r3, [pc, #4]	; (8001a3c <__errno+0x8>)
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	4770      	bx	lr
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	20000064 	.word	0x20000064

08001a40 <__libc_init_array>:
 8001a40:	b570      	push	{r4, r5, r6, lr}
 8001a42:	2600      	movs	r6, #0
 8001a44:	4c0c      	ldr	r4, [pc, #48]	; (8001a78 <__libc_init_array+0x38>)
 8001a46:	4d0d      	ldr	r5, [pc, #52]	; (8001a7c <__libc_init_array+0x3c>)
 8001a48:	1b64      	subs	r4, r4, r5
 8001a4a:	10a4      	asrs	r4, r4, #2
 8001a4c:	42a6      	cmp	r6, r4
 8001a4e:	d109      	bne.n	8001a64 <__libc_init_array+0x24>
 8001a50:	2600      	movs	r6, #0
 8001a52:	f000 fde1 	bl	8002618 <_init>
 8001a56:	4c0a      	ldr	r4, [pc, #40]	; (8001a80 <__libc_init_array+0x40>)
 8001a58:	4d0a      	ldr	r5, [pc, #40]	; (8001a84 <__libc_init_array+0x44>)
 8001a5a:	1b64      	subs	r4, r4, r5
 8001a5c:	10a4      	asrs	r4, r4, #2
 8001a5e:	42a6      	cmp	r6, r4
 8001a60:	d105      	bne.n	8001a6e <__libc_init_array+0x2e>
 8001a62:	bd70      	pop	{r4, r5, r6, pc}
 8001a64:	00b3      	lsls	r3, r6, #2
 8001a66:	58eb      	ldr	r3, [r5, r3]
 8001a68:	4798      	blx	r3
 8001a6a:	3601      	adds	r6, #1
 8001a6c:	e7ee      	b.n	8001a4c <__libc_init_array+0xc>
 8001a6e:	00b3      	lsls	r3, r6, #2
 8001a70:	58eb      	ldr	r3, [r5, r3]
 8001a72:	4798      	blx	r3
 8001a74:	3601      	adds	r6, #1
 8001a76:	e7f2      	b.n	8001a5e <__libc_init_array+0x1e>
 8001a78:	080026a8 	.word	0x080026a8
 8001a7c:	080026a8 	.word	0x080026a8
 8001a80:	080026ac 	.word	0x080026ac
 8001a84:	080026a8 	.word	0x080026a8

08001a88 <__retarget_lock_acquire_recursive>:
 8001a88:	4770      	bx	lr

08001a8a <__retarget_lock_release_recursive>:
 8001a8a:	4770      	bx	lr

08001a8c <_free_r>:
 8001a8c:	b570      	push	{r4, r5, r6, lr}
 8001a8e:	0005      	movs	r5, r0
 8001a90:	2900      	cmp	r1, #0
 8001a92:	d010      	beq.n	8001ab6 <_free_r+0x2a>
 8001a94:	1f0c      	subs	r4, r1, #4
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	da00      	bge.n	8001a9e <_free_r+0x12>
 8001a9c:	18e4      	adds	r4, r4, r3
 8001a9e:	0028      	movs	r0, r5
 8001aa0:	f000 f8e2 	bl	8001c68 <__malloc_lock>
 8001aa4:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <_free_r+0x90>)
 8001aa6:	6813      	ldr	r3, [r2, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <_free_r+0x2c>
 8001aac:	6063      	str	r3, [r4, #4]
 8001aae:	6014      	str	r4, [r2, #0]
 8001ab0:	0028      	movs	r0, r5
 8001ab2:	f000 f8e1 	bl	8001c78 <__malloc_unlock>
 8001ab6:	bd70      	pop	{r4, r5, r6, pc}
 8001ab8:	42a3      	cmp	r3, r4
 8001aba:	d908      	bls.n	8001ace <_free_r+0x42>
 8001abc:	6820      	ldr	r0, [r4, #0]
 8001abe:	1821      	adds	r1, r4, r0
 8001ac0:	428b      	cmp	r3, r1
 8001ac2:	d1f3      	bne.n	8001aac <_free_r+0x20>
 8001ac4:	6819      	ldr	r1, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	1809      	adds	r1, r1, r0
 8001aca:	6021      	str	r1, [r4, #0]
 8001acc:	e7ee      	b.n	8001aac <_free_r+0x20>
 8001ace:	001a      	movs	r2, r3
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <_free_r+0x4e>
 8001ad6:	42a3      	cmp	r3, r4
 8001ad8:	d9f9      	bls.n	8001ace <_free_r+0x42>
 8001ada:	6811      	ldr	r1, [r2, #0]
 8001adc:	1850      	adds	r0, r2, r1
 8001ade:	42a0      	cmp	r0, r4
 8001ae0:	d10b      	bne.n	8001afa <_free_r+0x6e>
 8001ae2:	6820      	ldr	r0, [r4, #0]
 8001ae4:	1809      	adds	r1, r1, r0
 8001ae6:	1850      	adds	r0, r2, r1
 8001ae8:	6011      	str	r1, [r2, #0]
 8001aea:	4283      	cmp	r3, r0
 8001aec:	d1e0      	bne.n	8001ab0 <_free_r+0x24>
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	1841      	adds	r1, r0, r1
 8001af4:	6011      	str	r1, [r2, #0]
 8001af6:	6053      	str	r3, [r2, #4]
 8001af8:	e7da      	b.n	8001ab0 <_free_r+0x24>
 8001afa:	42a0      	cmp	r0, r4
 8001afc:	d902      	bls.n	8001b04 <_free_r+0x78>
 8001afe:	230c      	movs	r3, #12
 8001b00:	602b      	str	r3, [r5, #0]
 8001b02:	e7d5      	b.n	8001ab0 <_free_r+0x24>
 8001b04:	6820      	ldr	r0, [r4, #0]
 8001b06:	1821      	adds	r1, r4, r0
 8001b08:	428b      	cmp	r3, r1
 8001b0a:	d103      	bne.n	8001b14 <_free_r+0x88>
 8001b0c:	6819      	ldr	r1, [r3, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	1809      	adds	r1, r1, r0
 8001b12:	6021      	str	r1, [r4, #0]
 8001b14:	6063      	str	r3, [r4, #4]
 8001b16:	6054      	str	r4, [r2, #4]
 8001b18:	e7ca      	b.n	8001ab0 <_free_r+0x24>
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	200001d0 	.word	0x200001d0

08001b20 <sbrk_aligned>:
 8001b20:	b570      	push	{r4, r5, r6, lr}
 8001b22:	4e0f      	ldr	r6, [pc, #60]	; (8001b60 <sbrk_aligned+0x40>)
 8001b24:	000d      	movs	r5, r1
 8001b26:	6831      	ldr	r1, [r6, #0]
 8001b28:	0004      	movs	r4, r0
 8001b2a:	2900      	cmp	r1, #0
 8001b2c:	d102      	bne.n	8001b34 <sbrk_aligned+0x14>
 8001b2e:	f000 fccb 	bl	80024c8 <_sbrk_r>
 8001b32:	6030      	str	r0, [r6, #0]
 8001b34:	0029      	movs	r1, r5
 8001b36:	0020      	movs	r0, r4
 8001b38:	f000 fcc6 	bl	80024c8 <_sbrk_r>
 8001b3c:	1c43      	adds	r3, r0, #1
 8001b3e:	d00a      	beq.n	8001b56 <sbrk_aligned+0x36>
 8001b40:	2303      	movs	r3, #3
 8001b42:	1cc5      	adds	r5, r0, #3
 8001b44:	439d      	bics	r5, r3
 8001b46:	42a8      	cmp	r0, r5
 8001b48:	d007      	beq.n	8001b5a <sbrk_aligned+0x3a>
 8001b4a:	1a29      	subs	r1, r5, r0
 8001b4c:	0020      	movs	r0, r4
 8001b4e:	f000 fcbb 	bl	80024c8 <_sbrk_r>
 8001b52:	3001      	adds	r0, #1
 8001b54:	d101      	bne.n	8001b5a <sbrk_aligned+0x3a>
 8001b56:	2501      	movs	r5, #1
 8001b58:	426d      	negs	r5, r5
 8001b5a:	0028      	movs	r0, r5
 8001b5c:	bd70      	pop	{r4, r5, r6, pc}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	200001d4 	.word	0x200001d4

08001b64 <_malloc_r>:
 8001b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b66:	2203      	movs	r2, #3
 8001b68:	1ccb      	adds	r3, r1, #3
 8001b6a:	4393      	bics	r3, r2
 8001b6c:	3308      	adds	r3, #8
 8001b6e:	0006      	movs	r6, r0
 8001b70:	001f      	movs	r7, r3
 8001b72:	2b0c      	cmp	r3, #12
 8001b74:	d238      	bcs.n	8001be8 <_malloc_r+0x84>
 8001b76:	270c      	movs	r7, #12
 8001b78:	42b9      	cmp	r1, r7
 8001b7a:	d837      	bhi.n	8001bec <_malloc_r+0x88>
 8001b7c:	0030      	movs	r0, r6
 8001b7e:	f000 f873 	bl	8001c68 <__malloc_lock>
 8001b82:	4b38      	ldr	r3, [pc, #224]	; (8001c64 <_malloc_r+0x100>)
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	001c      	movs	r4, r3
 8001b8a:	2c00      	cmp	r4, #0
 8001b8c:	d133      	bne.n	8001bf6 <_malloc_r+0x92>
 8001b8e:	0039      	movs	r1, r7
 8001b90:	0030      	movs	r0, r6
 8001b92:	f7ff ffc5 	bl	8001b20 <sbrk_aligned>
 8001b96:	0004      	movs	r4, r0
 8001b98:	1c43      	adds	r3, r0, #1
 8001b9a:	d15e      	bne.n	8001c5a <_malloc_r+0xf6>
 8001b9c:	9b00      	ldr	r3, [sp, #0]
 8001b9e:	681c      	ldr	r4, [r3, #0]
 8001ba0:	0025      	movs	r5, r4
 8001ba2:	2d00      	cmp	r5, #0
 8001ba4:	d14e      	bne.n	8001c44 <_malloc_r+0xe0>
 8001ba6:	2c00      	cmp	r4, #0
 8001ba8:	d051      	beq.n	8001c4e <_malloc_r+0xea>
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	0029      	movs	r1, r5
 8001bae:	18e3      	adds	r3, r4, r3
 8001bb0:	0030      	movs	r0, r6
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	f000 fc88 	bl	80024c8 <_sbrk_r>
 8001bb8:	9b01      	ldr	r3, [sp, #4]
 8001bba:	4283      	cmp	r3, r0
 8001bbc:	d147      	bne.n	8001c4e <_malloc_r+0xea>
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	0030      	movs	r0, r6
 8001bc2:	1aff      	subs	r7, r7, r3
 8001bc4:	0039      	movs	r1, r7
 8001bc6:	f7ff ffab 	bl	8001b20 <sbrk_aligned>
 8001bca:	3001      	adds	r0, #1
 8001bcc:	d03f      	beq.n	8001c4e <_malloc_r+0xea>
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	19db      	adds	r3, r3, r7
 8001bd2:	6023      	str	r3, [r4, #0]
 8001bd4:	9b00      	ldr	r3, [sp, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d040      	beq.n	8001c5e <_malloc_r+0xfa>
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	42a2      	cmp	r2, r4
 8001be0:	d133      	bne.n	8001c4a <_malloc_r+0xe6>
 8001be2:	2200      	movs	r2, #0
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	e014      	b.n	8001c12 <_malloc_r+0xae>
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	dac5      	bge.n	8001b78 <_malloc_r+0x14>
 8001bec:	230c      	movs	r3, #12
 8001bee:	2500      	movs	r5, #0
 8001bf0:	6033      	str	r3, [r6, #0]
 8001bf2:	0028      	movs	r0, r5
 8001bf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001bf6:	6821      	ldr	r1, [r4, #0]
 8001bf8:	1bc9      	subs	r1, r1, r7
 8001bfa:	d420      	bmi.n	8001c3e <_malloc_r+0xda>
 8001bfc:	290b      	cmp	r1, #11
 8001bfe:	d918      	bls.n	8001c32 <_malloc_r+0xce>
 8001c00:	19e2      	adds	r2, r4, r7
 8001c02:	6027      	str	r7, [r4, #0]
 8001c04:	42a3      	cmp	r3, r4
 8001c06:	d112      	bne.n	8001c2e <_malloc_r+0xca>
 8001c08:	9b00      	ldr	r3, [sp, #0]
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	6863      	ldr	r3, [r4, #4]
 8001c0e:	6011      	str	r1, [r2, #0]
 8001c10:	6053      	str	r3, [r2, #4]
 8001c12:	0030      	movs	r0, r6
 8001c14:	0025      	movs	r5, r4
 8001c16:	f000 f82f 	bl	8001c78 <__malloc_unlock>
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	350b      	adds	r5, #11
 8001c1e:	1d23      	adds	r3, r4, #4
 8001c20:	4395      	bics	r5, r2
 8001c22:	1aea      	subs	r2, r5, r3
 8001c24:	429d      	cmp	r5, r3
 8001c26:	d0e4      	beq.n	8001bf2 <_malloc_r+0x8e>
 8001c28:	1b5b      	subs	r3, r3, r5
 8001c2a:	50a3      	str	r3, [r4, r2]
 8001c2c:	e7e1      	b.n	8001bf2 <_malloc_r+0x8e>
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	e7ec      	b.n	8001c0c <_malloc_r+0xa8>
 8001c32:	6862      	ldr	r2, [r4, #4]
 8001c34:	42a3      	cmp	r3, r4
 8001c36:	d1d5      	bne.n	8001be4 <_malloc_r+0x80>
 8001c38:	9b00      	ldr	r3, [sp, #0]
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	e7e9      	b.n	8001c12 <_malloc_r+0xae>
 8001c3e:	0023      	movs	r3, r4
 8001c40:	6864      	ldr	r4, [r4, #4]
 8001c42:	e7a2      	b.n	8001b8a <_malloc_r+0x26>
 8001c44:	002c      	movs	r4, r5
 8001c46:	686d      	ldr	r5, [r5, #4]
 8001c48:	e7ab      	b.n	8001ba2 <_malloc_r+0x3e>
 8001c4a:	0013      	movs	r3, r2
 8001c4c:	e7c4      	b.n	8001bd8 <_malloc_r+0x74>
 8001c4e:	230c      	movs	r3, #12
 8001c50:	0030      	movs	r0, r6
 8001c52:	6033      	str	r3, [r6, #0]
 8001c54:	f000 f810 	bl	8001c78 <__malloc_unlock>
 8001c58:	e7cb      	b.n	8001bf2 <_malloc_r+0x8e>
 8001c5a:	6027      	str	r7, [r4, #0]
 8001c5c:	e7d9      	b.n	8001c12 <_malloc_r+0xae>
 8001c5e:	605b      	str	r3, [r3, #4]
 8001c60:	deff      	udf	#255	; 0xff
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	200001d0 	.word	0x200001d0

08001c68 <__malloc_lock>:
 8001c68:	b510      	push	{r4, lr}
 8001c6a:	4802      	ldr	r0, [pc, #8]	; (8001c74 <__malloc_lock+0xc>)
 8001c6c:	f7ff ff0c 	bl	8001a88 <__retarget_lock_acquire_recursive>
 8001c70:	bd10      	pop	{r4, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	200001cc 	.word	0x200001cc

08001c78 <__malloc_unlock>:
 8001c78:	b510      	push	{r4, lr}
 8001c7a:	4802      	ldr	r0, [pc, #8]	; (8001c84 <__malloc_unlock+0xc>)
 8001c7c:	f7ff ff05 	bl	8001a8a <__retarget_lock_release_recursive>
 8001c80:	bd10      	pop	{r4, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	200001cc 	.word	0x200001cc

08001c88 <__sfputc_r>:
 8001c88:	6893      	ldr	r3, [r2, #8]
 8001c8a:	b510      	push	{r4, lr}
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	6093      	str	r3, [r2, #8]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	da04      	bge.n	8001c9e <__sfputc_r+0x16>
 8001c94:	6994      	ldr	r4, [r2, #24]
 8001c96:	42a3      	cmp	r3, r4
 8001c98:	db07      	blt.n	8001caa <__sfputc_r+0x22>
 8001c9a:	290a      	cmp	r1, #10
 8001c9c:	d005      	beq.n	8001caa <__sfputc_r+0x22>
 8001c9e:	6813      	ldr	r3, [r2, #0]
 8001ca0:	1c58      	adds	r0, r3, #1
 8001ca2:	6010      	str	r0, [r2, #0]
 8001ca4:	7019      	strb	r1, [r3, #0]
 8001ca6:	0008      	movs	r0, r1
 8001ca8:	bd10      	pop	{r4, pc}
 8001caa:	f000 fb66 	bl	800237a <__swbuf_r>
 8001cae:	0001      	movs	r1, r0
 8001cb0:	e7f9      	b.n	8001ca6 <__sfputc_r+0x1e>

08001cb2 <__sfputs_r>:
 8001cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb4:	0006      	movs	r6, r0
 8001cb6:	000f      	movs	r7, r1
 8001cb8:	0014      	movs	r4, r2
 8001cba:	18d5      	adds	r5, r2, r3
 8001cbc:	42ac      	cmp	r4, r5
 8001cbe:	d101      	bne.n	8001cc4 <__sfputs_r+0x12>
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	e007      	b.n	8001cd4 <__sfputs_r+0x22>
 8001cc4:	7821      	ldrb	r1, [r4, #0]
 8001cc6:	003a      	movs	r2, r7
 8001cc8:	0030      	movs	r0, r6
 8001cca:	f7ff ffdd 	bl	8001c88 <__sfputc_r>
 8001cce:	3401      	adds	r4, #1
 8001cd0:	1c43      	adds	r3, r0, #1
 8001cd2:	d1f3      	bne.n	8001cbc <__sfputs_r+0xa>
 8001cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001cd8 <_vfiprintf_r>:
 8001cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cda:	b0a1      	sub	sp, #132	; 0x84
 8001cdc:	000f      	movs	r7, r1
 8001cde:	0015      	movs	r5, r2
 8001ce0:	001e      	movs	r6, r3
 8001ce2:	9003      	str	r0, [sp, #12]
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	d004      	beq.n	8001cf2 <_vfiprintf_r+0x1a>
 8001ce8:	6a03      	ldr	r3, [r0, #32]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <_vfiprintf_r+0x1a>
 8001cee:	f7ff fdbb 	bl	8001868 <__sinit>
 8001cf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cf4:	07db      	lsls	r3, r3, #31
 8001cf6:	d405      	bmi.n	8001d04 <_vfiprintf_r+0x2c>
 8001cf8:	89bb      	ldrh	r3, [r7, #12]
 8001cfa:	059b      	lsls	r3, r3, #22
 8001cfc:	d402      	bmi.n	8001d04 <_vfiprintf_r+0x2c>
 8001cfe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001d00:	f7ff fec2 	bl	8001a88 <__retarget_lock_acquire_recursive>
 8001d04:	89bb      	ldrh	r3, [r7, #12]
 8001d06:	071b      	lsls	r3, r3, #28
 8001d08:	d502      	bpl.n	8001d10 <_vfiprintf_r+0x38>
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d113      	bne.n	8001d38 <_vfiprintf_r+0x60>
 8001d10:	0039      	movs	r1, r7
 8001d12:	9803      	ldr	r0, [sp, #12]
 8001d14:	f000 fb74 	bl	8002400 <__swsetup_r>
 8001d18:	2800      	cmp	r0, #0
 8001d1a:	d00d      	beq.n	8001d38 <_vfiprintf_r+0x60>
 8001d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d1e:	07db      	lsls	r3, r3, #31
 8001d20:	d503      	bpl.n	8001d2a <_vfiprintf_r+0x52>
 8001d22:	2001      	movs	r0, #1
 8001d24:	4240      	negs	r0, r0
 8001d26:	b021      	add	sp, #132	; 0x84
 8001d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2a:	89bb      	ldrh	r3, [r7, #12]
 8001d2c:	059b      	lsls	r3, r3, #22
 8001d2e:	d4f8      	bmi.n	8001d22 <_vfiprintf_r+0x4a>
 8001d30:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001d32:	f7ff feaa 	bl	8001a8a <__retarget_lock_release_recursive>
 8001d36:	e7f4      	b.n	8001d22 <_vfiprintf_r+0x4a>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	ac08      	add	r4, sp, #32
 8001d3c:	6163      	str	r3, [r4, #20]
 8001d3e:	3320      	adds	r3, #32
 8001d40:	7663      	strb	r3, [r4, #25]
 8001d42:	3310      	adds	r3, #16
 8001d44:	76a3      	strb	r3, [r4, #26]
 8001d46:	9607      	str	r6, [sp, #28]
 8001d48:	002e      	movs	r6, r5
 8001d4a:	7833      	ldrb	r3, [r6, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <_vfiprintf_r+0x7c>
 8001d50:	2b25      	cmp	r3, #37	; 0x25
 8001d52:	d148      	bne.n	8001de6 <_vfiprintf_r+0x10e>
 8001d54:	1b73      	subs	r3, r6, r5
 8001d56:	9305      	str	r3, [sp, #20]
 8001d58:	42ae      	cmp	r6, r5
 8001d5a:	d00b      	beq.n	8001d74 <_vfiprintf_r+0x9c>
 8001d5c:	002a      	movs	r2, r5
 8001d5e:	0039      	movs	r1, r7
 8001d60:	9803      	ldr	r0, [sp, #12]
 8001d62:	f7ff ffa6 	bl	8001cb2 <__sfputs_r>
 8001d66:	3001      	adds	r0, #1
 8001d68:	d100      	bne.n	8001d6c <_vfiprintf_r+0x94>
 8001d6a:	e0af      	b.n	8001ecc <_vfiprintf_r+0x1f4>
 8001d6c:	6963      	ldr	r3, [r4, #20]
 8001d6e:	9a05      	ldr	r2, [sp, #20]
 8001d70:	189b      	adds	r3, r3, r2
 8001d72:	6163      	str	r3, [r4, #20]
 8001d74:	7833      	ldrb	r3, [r6, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d100      	bne.n	8001d7c <_vfiprintf_r+0xa4>
 8001d7a:	e0a7      	b.n	8001ecc <_vfiprintf_r+0x1f4>
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	2300      	movs	r3, #0
 8001d80:	4252      	negs	r2, r2
 8001d82:	6062      	str	r2, [r4, #4]
 8001d84:	a904      	add	r1, sp, #16
 8001d86:	3254      	adds	r2, #84	; 0x54
 8001d88:	1852      	adds	r2, r2, r1
 8001d8a:	1c75      	adds	r5, r6, #1
 8001d8c:	6023      	str	r3, [r4, #0]
 8001d8e:	60e3      	str	r3, [r4, #12]
 8001d90:	60a3      	str	r3, [r4, #8]
 8001d92:	7013      	strb	r3, [r2, #0]
 8001d94:	65a3      	str	r3, [r4, #88]	; 0x58
 8001d96:	4b59      	ldr	r3, [pc, #356]	; (8001efc <_vfiprintf_r+0x224>)
 8001d98:	2205      	movs	r2, #5
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	7829      	ldrb	r1, [r5, #0]
 8001d9e:	9305      	str	r3, [sp, #20]
 8001da0:	f000 fba4 	bl	80024ec <memchr>
 8001da4:	1c6e      	adds	r6, r5, #1
 8001da6:	2800      	cmp	r0, #0
 8001da8:	d11f      	bne.n	8001dea <_vfiprintf_r+0x112>
 8001daa:	6822      	ldr	r2, [r4, #0]
 8001dac:	06d3      	lsls	r3, r2, #27
 8001dae:	d504      	bpl.n	8001dba <_vfiprintf_r+0xe2>
 8001db0:	2353      	movs	r3, #83	; 0x53
 8001db2:	a904      	add	r1, sp, #16
 8001db4:	185b      	adds	r3, r3, r1
 8001db6:	2120      	movs	r1, #32
 8001db8:	7019      	strb	r1, [r3, #0]
 8001dba:	0713      	lsls	r3, r2, #28
 8001dbc:	d504      	bpl.n	8001dc8 <_vfiprintf_r+0xf0>
 8001dbe:	2353      	movs	r3, #83	; 0x53
 8001dc0:	a904      	add	r1, sp, #16
 8001dc2:	185b      	adds	r3, r3, r1
 8001dc4:	212b      	movs	r1, #43	; 0x2b
 8001dc6:	7019      	strb	r1, [r3, #0]
 8001dc8:	782b      	ldrb	r3, [r5, #0]
 8001dca:	2b2a      	cmp	r3, #42	; 0x2a
 8001dcc:	d016      	beq.n	8001dfc <_vfiprintf_r+0x124>
 8001dce:	002e      	movs	r6, r5
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	200a      	movs	r0, #10
 8001dd4:	68e3      	ldr	r3, [r4, #12]
 8001dd6:	7832      	ldrb	r2, [r6, #0]
 8001dd8:	1c75      	adds	r5, r6, #1
 8001dda:	3a30      	subs	r2, #48	; 0x30
 8001ddc:	2a09      	cmp	r2, #9
 8001dde:	d94e      	bls.n	8001e7e <_vfiprintf_r+0x1a6>
 8001de0:	2900      	cmp	r1, #0
 8001de2:	d111      	bne.n	8001e08 <_vfiprintf_r+0x130>
 8001de4:	e017      	b.n	8001e16 <_vfiprintf_r+0x13e>
 8001de6:	3601      	adds	r6, #1
 8001de8:	e7af      	b.n	8001d4a <_vfiprintf_r+0x72>
 8001dea:	9b05      	ldr	r3, [sp, #20]
 8001dec:	6822      	ldr	r2, [r4, #0]
 8001dee:	1ac0      	subs	r0, r0, r3
 8001df0:	2301      	movs	r3, #1
 8001df2:	4083      	lsls	r3, r0
 8001df4:	4313      	orrs	r3, r2
 8001df6:	0035      	movs	r5, r6
 8001df8:	6023      	str	r3, [r4, #0]
 8001dfa:	e7cc      	b.n	8001d96 <_vfiprintf_r+0xbe>
 8001dfc:	9b07      	ldr	r3, [sp, #28]
 8001dfe:	1d19      	adds	r1, r3, #4
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	9107      	str	r1, [sp, #28]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	db01      	blt.n	8001e0c <_vfiprintf_r+0x134>
 8001e08:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e0a:	e004      	b.n	8001e16 <_vfiprintf_r+0x13e>
 8001e0c:	425b      	negs	r3, r3
 8001e0e:	60e3      	str	r3, [r4, #12]
 8001e10:	2302      	movs	r3, #2
 8001e12:	4313      	orrs	r3, r2
 8001e14:	6023      	str	r3, [r4, #0]
 8001e16:	7833      	ldrb	r3, [r6, #0]
 8001e18:	2b2e      	cmp	r3, #46	; 0x2e
 8001e1a:	d10a      	bne.n	8001e32 <_vfiprintf_r+0x15a>
 8001e1c:	7873      	ldrb	r3, [r6, #1]
 8001e1e:	2b2a      	cmp	r3, #42	; 0x2a
 8001e20:	d135      	bne.n	8001e8e <_vfiprintf_r+0x1b6>
 8001e22:	9b07      	ldr	r3, [sp, #28]
 8001e24:	3602      	adds	r6, #2
 8001e26:	1d1a      	adds	r2, r3, #4
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	9207      	str	r2, [sp, #28]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db2b      	blt.n	8001e88 <_vfiprintf_r+0x1b0>
 8001e30:	9309      	str	r3, [sp, #36]	; 0x24
 8001e32:	4d33      	ldr	r5, [pc, #204]	; (8001f00 <_vfiprintf_r+0x228>)
 8001e34:	2203      	movs	r2, #3
 8001e36:	0028      	movs	r0, r5
 8001e38:	7831      	ldrb	r1, [r6, #0]
 8001e3a:	f000 fb57 	bl	80024ec <memchr>
 8001e3e:	2800      	cmp	r0, #0
 8001e40:	d006      	beq.n	8001e50 <_vfiprintf_r+0x178>
 8001e42:	2340      	movs	r3, #64	; 0x40
 8001e44:	1b40      	subs	r0, r0, r5
 8001e46:	4083      	lsls	r3, r0
 8001e48:	6822      	ldr	r2, [r4, #0]
 8001e4a:	3601      	adds	r6, #1
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	6023      	str	r3, [r4, #0]
 8001e50:	7831      	ldrb	r1, [r6, #0]
 8001e52:	2206      	movs	r2, #6
 8001e54:	482b      	ldr	r0, [pc, #172]	; (8001f04 <_vfiprintf_r+0x22c>)
 8001e56:	1c75      	adds	r5, r6, #1
 8001e58:	7621      	strb	r1, [r4, #24]
 8001e5a:	f000 fb47 	bl	80024ec <memchr>
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	d043      	beq.n	8001eea <_vfiprintf_r+0x212>
 8001e62:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <_vfiprintf_r+0x230>)
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d125      	bne.n	8001eb4 <_vfiprintf_r+0x1dc>
 8001e68:	2207      	movs	r2, #7
 8001e6a:	9b07      	ldr	r3, [sp, #28]
 8001e6c:	3307      	adds	r3, #7
 8001e6e:	4393      	bics	r3, r2
 8001e70:	3308      	adds	r3, #8
 8001e72:	9307      	str	r3, [sp, #28]
 8001e74:	6963      	ldr	r3, [r4, #20]
 8001e76:	9a04      	ldr	r2, [sp, #16]
 8001e78:	189b      	adds	r3, r3, r2
 8001e7a:	6163      	str	r3, [r4, #20]
 8001e7c:	e764      	b.n	8001d48 <_vfiprintf_r+0x70>
 8001e7e:	4343      	muls	r3, r0
 8001e80:	002e      	movs	r6, r5
 8001e82:	2101      	movs	r1, #1
 8001e84:	189b      	adds	r3, r3, r2
 8001e86:	e7a6      	b.n	8001dd6 <_vfiprintf_r+0xfe>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	425b      	negs	r3, r3
 8001e8c:	e7d0      	b.n	8001e30 <_vfiprintf_r+0x158>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	200a      	movs	r0, #10
 8001e92:	001a      	movs	r2, r3
 8001e94:	3601      	adds	r6, #1
 8001e96:	6063      	str	r3, [r4, #4]
 8001e98:	7831      	ldrb	r1, [r6, #0]
 8001e9a:	1c75      	adds	r5, r6, #1
 8001e9c:	3930      	subs	r1, #48	; 0x30
 8001e9e:	2909      	cmp	r1, #9
 8001ea0:	d903      	bls.n	8001eaa <_vfiprintf_r+0x1d2>
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0c5      	beq.n	8001e32 <_vfiprintf_r+0x15a>
 8001ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8001ea8:	e7c3      	b.n	8001e32 <_vfiprintf_r+0x15a>
 8001eaa:	4342      	muls	r2, r0
 8001eac:	002e      	movs	r6, r5
 8001eae:	2301      	movs	r3, #1
 8001eb0:	1852      	adds	r2, r2, r1
 8001eb2:	e7f1      	b.n	8001e98 <_vfiprintf_r+0x1c0>
 8001eb4:	aa07      	add	r2, sp, #28
 8001eb6:	9200      	str	r2, [sp, #0]
 8001eb8:	0021      	movs	r1, r4
 8001eba:	003a      	movs	r2, r7
 8001ebc:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <_vfiprintf_r+0x234>)
 8001ebe:	9803      	ldr	r0, [sp, #12]
 8001ec0:	e000      	b.n	8001ec4 <_vfiprintf_r+0x1ec>
 8001ec2:	bf00      	nop
 8001ec4:	9004      	str	r0, [sp, #16]
 8001ec6:	9b04      	ldr	r3, [sp, #16]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	d1d3      	bne.n	8001e74 <_vfiprintf_r+0x19c>
 8001ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ece:	07db      	lsls	r3, r3, #31
 8001ed0:	d405      	bmi.n	8001ede <_vfiprintf_r+0x206>
 8001ed2:	89bb      	ldrh	r3, [r7, #12]
 8001ed4:	059b      	lsls	r3, r3, #22
 8001ed6:	d402      	bmi.n	8001ede <_vfiprintf_r+0x206>
 8001ed8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001eda:	f7ff fdd6 	bl	8001a8a <__retarget_lock_release_recursive>
 8001ede:	89bb      	ldrh	r3, [r7, #12]
 8001ee0:	065b      	lsls	r3, r3, #25
 8001ee2:	d500      	bpl.n	8001ee6 <_vfiprintf_r+0x20e>
 8001ee4:	e71d      	b.n	8001d22 <_vfiprintf_r+0x4a>
 8001ee6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001ee8:	e71d      	b.n	8001d26 <_vfiprintf_r+0x4e>
 8001eea:	aa07      	add	r2, sp, #28
 8001eec:	9200      	str	r2, [sp, #0]
 8001eee:	0021      	movs	r1, r4
 8001ef0:	003a      	movs	r2, r7
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <_vfiprintf_r+0x234>)
 8001ef4:	9803      	ldr	r0, [sp, #12]
 8001ef6:	f000 f87b 	bl	8001ff0 <_printf_i>
 8001efa:	e7e3      	b.n	8001ec4 <_vfiprintf_r+0x1ec>
 8001efc:	08002674 	.word	0x08002674
 8001f00:	0800267a 	.word	0x0800267a
 8001f04:	0800267e 	.word	0x0800267e
 8001f08:	00000000 	.word	0x00000000
 8001f0c:	08001cb3 	.word	0x08001cb3

08001f10 <_printf_common>:
 8001f10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f12:	0016      	movs	r6, r2
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	688a      	ldr	r2, [r1, #8]
 8001f18:	690b      	ldr	r3, [r1, #16]
 8001f1a:	000c      	movs	r4, r1
 8001f1c:	9000      	str	r0, [sp, #0]
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	da00      	bge.n	8001f24 <_printf_common+0x14>
 8001f22:	0013      	movs	r3, r2
 8001f24:	0022      	movs	r2, r4
 8001f26:	6033      	str	r3, [r6, #0]
 8001f28:	3243      	adds	r2, #67	; 0x43
 8001f2a:	7812      	ldrb	r2, [r2, #0]
 8001f2c:	2a00      	cmp	r2, #0
 8001f2e:	d001      	beq.n	8001f34 <_printf_common+0x24>
 8001f30:	3301      	adds	r3, #1
 8001f32:	6033      	str	r3, [r6, #0]
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	069b      	lsls	r3, r3, #26
 8001f38:	d502      	bpl.n	8001f40 <_printf_common+0x30>
 8001f3a:	6833      	ldr	r3, [r6, #0]
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	6033      	str	r3, [r6, #0]
 8001f40:	6822      	ldr	r2, [r4, #0]
 8001f42:	2306      	movs	r3, #6
 8001f44:	0015      	movs	r5, r2
 8001f46:	401d      	ands	r5, r3
 8001f48:	421a      	tst	r2, r3
 8001f4a:	d027      	beq.n	8001f9c <_printf_common+0x8c>
 8001f4c:	0023      	movs	r3, r4
 8001f4e:	3343      	adds	r3, #67	; 0x43
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	1e5a      	subs	r2, r3, #1
 8001f54:	4193      	sbcs	r3, r2
 8001f56:	6822      	ldr	r2, [r4, #0]
 8001f58:	0692      	lsls	r2, r2, #26
 8001f5a:	d430      	bmi.n	8001fbe <_printf_common+0xae>
 8001f5c:	0022      	movs	r2, r4
 8001f5e:	9901      	ldr	r1, [sp, #4]
 8001f60:	9800      	ldr	r0, [sp, #0]
 8001f62:	9d08      	ldr	r5, [sp, #32]
 8001f64:	3243      	adds	r2, #67	; 0x43
 8001f66:	47a8      	blx	r5
 8001f68:	3001      	adds	r0, #1
 8001f6a:	d025      	beq.n	8001fb8 <_printf_common+0xa8>
 8001f6c:	2206      	movs	r2, #6
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	2500      	movs	r5, #0
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d105      	bne.n	8001f84 <_printf_common+0x74>
 8001f78:	6833      	ldr	r3, [r6, #0]
 8001f7a:	68e5      	ldr	r5, [r4, #12]
 8001f7c:	1aed      	subs	r5, r5, r3
 8001f7e:	43eb      	mvns	r3, r5
 8001f80:	17db      	asrs	r3, r3, #31
 8001f82:	401d      	ands	r5, r3
 8001f84:	68a3      	ldr	r3, [r4, #8]
 8001f86:	6922      	ldr	r2, [r4, #16]
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	dd01      	ble.n	8001f90 <_printf_common+0x80>
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	18ed      	adds	r5, r5, r3
 8001f90:	2600      	movs	r6, #0
 8001f92:	42b5      	cmp	r5, r6
 8001f94:	d120      	bne.n	8001fd8 <_printf_common+0xc8>
 8001f96:	2000      	movs	r0, #0
 8001f98:	e010      	b.n	8001fbc <_printf_common+0xac>
 8001f9a:	3501      	adds	r5, #1
 8001f9c:	68e3      	ldr	r3, [r4, #12]
 8001f9e:	6832      	ldr	r2, [r6, #0]
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	42ab      	cmp	r3, r5
 8001fa4:	ddd2      	ble.n	8001f4c <_printf_common+0x3c>
 8001fa6:	0022      	movs	r2, r4
 8001fa8:	2301      	movs	r3, #1
 8001faa:	9901      	ldr	r1, [sp, #4]
 8001fac:	9800      	ldr	r0, [sp, #0]
 8001fae:	9f08      	ldr	r7, [sp, #32]
 8001fb0:	3219      	adds	r2, #25
 8001fb2:	47b8      	blx	r7
 8001fb4:	3001      	adds	r0, #1
 8001fb6:	d1f0      	bne.n	8001f9a <_printf_common+0x8a>
 8001fb8:	2001      	movs	r0, #1
 8001fba:	4240      	negs	r0, r0
 8001fbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001fbe:	2030      	movs	r0, #48	; 0x30
 8001fc0:	18e1      	adds	r1, r4, r3
 8001fc2:	3143      	adds	r1, #67	; 0x43
 8001fc4:	7008      	strb	r0, [r1, #0]
 8001fc6:	0021      	movs	r1, r4
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	3145      	adds	r1, #69	; 0x45
 8001fcc:	7809      	ldrb	r1, [r1, #0]
 8001fce:	18a2      	adds	r2, r4, r2
 8001fd0:	3243      	adds	r2, #67	; 0x43
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	7011      	strb	r1, [r2, #0]
 8001fd6:	e7c1      	b.n	8001f5c <_printf_common+0x4c>
 8001fd8:	0022      	movs	r2, r4
 8001fda:	2301      	movs	r3, #1
 8001fdc:	9901      	ldr	r1, [sp, #4]
 8001fde:	9800      	ldr	r0, [sp, #0]
 8001fe0:	9f08      	ldr	r7, [sp, #32]
 8001fe2:	321a      	adds	r2, #26
 8001fe4:	47b8      	blx	r7
 8001fe6:	3001      	adds	r0, #1
 8001fe8:	d0e6      	beq.n	8001fb8 <_printf_common+0xa8>
 8001fea:	3601      	adds	r6, #1
 8001fec:	e7d1      	b.n	8001f92 <_printf_common+0x82>
	...

08001ff0 <_printf_i>:
 8001ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff2:	b08b      	sub	sp, #44	; 0x2c
 8001ff4:	9206      	str	r2, [sp, #24]
 8001ff6:	000a      	movs	r2, r1
 8001ff8:	3243      	adds	r2, #67	; 0x43
 8001ffa:	9307      	str	r3, [sp, #28]
 8001ffc:	9005      	str	r0, [sp, #20]
 8001ffe:	9204      	str	r2, [sp, #16]
 8002000:	7e0a      	ldrb	r2, [r1, #24]
 8002002:	000c      	movs	r4, r1
 8002004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002006:	2a78      	cmp	r2, #120	; 0x78
 8002008:	d809      	bhi.n	800201e <_printf_i+0x2e>
 800200a:	2a62      	cmp	r2, #98	; 0x62
 800200c:	d80b      	bhi.n	8002026 <_printf_i+0x36>
 800200e:	2a00      	cmp	r2, #0
 8002010:	d100      	bne.n	8002014 <_printf_i+0x24>
 8002012:	e0be      	b.n	8002192 <_printf_i+0x1a2>
 8002014:	497c      	ldr	r1, [pc, #496]	; (8002208 <_printf_i+0x218>)
 8002016:	9103      	str	r1, [sp, #12]
 8002018:	2a58      	cmp	r2, #88	; 0x58
 800201a:	d100      	bne.n	800201e <_printf_i+0x2e>
 800201c:	e093      	b.n	8002146 <_printf_i+0x156>
 800201e:	0026      	movs	r6, r4
 8002020:	3642      	adds	r6, #66	; 0x42
 8002022:	7032      	strb	r2, [r6, #0]
 8002024:	e022      	b.n	800206c <_printf_i+0x7c>
 8002026:	0010      	movs	r0, r2
 8002028:	3863      	subs	r0, #99	; 0x63
 800202a:	2815      	cmp	r0, #21
 800202c:	d8f7      	bhi.n	800201e <_printf_i+0x2e>
 800202e:	f7fe f867 	bl	8000100 <__gnu_thumb1_case_shi>
 8002032:	0016      	.short	0x0016
 8002034:	fff6001f 	.word	0xfff6001f
 8002038:	fff6fff6 	.word	0xfff6fff6
 800203c:	001ffff6 	.word	0x001ffff6
 8002040:	fff6fff6 	.word	0xfff6fff6
 8002044:	fff6fff6 	.word	0xfff6fff6
 8002048:	003600a3 	.word	0x003600a3
 800204c:	fff60083 	.word	0xfff60083
 8002050:	00b4fff6 	.word	0x00b4fff6
 8002054:	0036fff6 	.word	0x0036fff6
 8002058:	fff6fff6 	.word	0xfff6fff6
 800205c:	0087      	.short	0x0087
 800205e:	0026      	movs	r6, r4
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	3642      	adds	r6, #66	; 0x42
 8002064:	1d11      	adds	r1, r2, #4
 8002066:	6019      	str	r1, [r3, #0]
 8002068:	6813      	ldr	r3, [r2, #0]
 800206a:	7033      	strb	r3, [r6, #0]
 800206c:	2301      	movs	r3, #1
 800206e:	e0a2      	b.n	80021b6 <_printf_i+0x1c6>
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	6809      	ldr	r1, [r1, #0]
 8002074:	1d02      	adds	r2, r0, #4
 8002076:	060d      	lsls	r5, r1, #24
 8002078:	d50b      	bpl.n	8002092 <_printf_i+0xa2>
 800207a:	6805      	ldr	r5, [r0, #0]
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	2d00      	cmp	r5, #0
 8002080:	da03      	bge.n	800208a <_printf_i+0x9a>
 8002082:	232d      	movs	r3, #45	; 0x2d
 8002084:	9a04      	ldr	r2, [sp, #16]
 8002086:	426d      	negs	r5, r5
 8002088:	7013      	strb	r3, [r2, #0]
 800208a:	4b5f      	ldr	r3, [pc, #380]	; (8002208 <_printf_i+0x218>)
 800208c:	270a      	movs	r7, #10
 800208e:	9303      	str	r3, [sp, #12]
 8002090:	e01b      	b.n	80020ca <_printf_i+0xda>
 8002092:	6805      	ldr	r5, [r0, #0]
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	0649      	lsls	r1, r1, #25
 8002098:	d5f1      	bpl.n	800207e <_printf_i+0x8e>
 800209a:	b22d      	sxth	r5, r5
 800209c:	e7ef      	b.n	800207e <_printf_i+0x8e>
 800209e:	680d      	ldr	r5, [r1, #0]
 80020a0:	6819      	ldr	r1, [r3, #0]
 80020a2:	1d08      	adds	r0, r1, #4
 80020a4:	6018      	str	r0, [r3, #0]
 80020a6:	062e      	lsls	r6, r5, #24
 80020a8:	d501      	bpl.n	80020ae <_printf_i+0xbe>
 80020aa:	680d      	ldr	r5, [r1, #0]
 80020ac:	e003      	b.n	80020b6 <_printf_i+0xc6>
 80020ae:	066d      	lsls	r5, r5, #25
 80020b0:	d5fb      	bpl.n	80020aa <_printf_i+0xba>
 80020b2:	680d      	ldr	r5, [r1, #0]
 80020b4:	b2ad      	uxth	r5, r5
 80020b6:	4b54      	ldr	r3, [pc, #336]	; (8002208 <_printf_i+0x218>)
 80020b8:	2708      	movs	r7, #8
 80020ba:	9303      	str	r3, [sp, #12]
 80020bc:	2a6f      	cmp	r2, #111	; 0x6f
 80020be:	d000      	beq.n	80020c2 <_printf_i+0xd2>
 80020c0:	3702      	adds	r7, #2
 80020c2:	0023      	movs	r3, r4
 80020c4:	2200      	movs	r2, #0
 80020c6:	3343      	adds	r3, #67	; 0x43
 80020c8:	701a      	strb	r2, [r3, #0]
 80020ca:	6863      	ldr	r3, [r4, #4]
 80020cc:	60a3      	str	r3, [r4, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db03      	blt.n	80020da <_printf_i+0xea>
 80020d2:	2104      	movs	r1, #4
 80020d4:	6822      	ldr	r2, [r4, #0]
 80020d6:	438a      	bics	r2, r1
 80020d8:	6022      	str	r2, [r4, #0]
 80020da:	2d00      	cmp	r5, #0
 80020dc:	d102      	bne.n	80020e4 <_printf_i+0xf4>
 80020de:	9e04      	ldr	r6, [sp, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00c      	beq.n	80020fe <_printf_i+0x10e>
 80020e4:	9e04      	ldr	r6, [sp, #16]
 80020e6:	0028      	movs	r0, r5
 80020e8:	0039      	movs	r1, r7
 80020ea:	f7fe f899 	bl	8000220 <__aeabi_uidivmod>
 80020ee:	9b03      	ldr	r3, [sp, #12]
 80020f0:	3e01      	subs	r6, #1
 80020f2:	5c5b      	ldrb	r3, [r3, r1]
 80020f4:	7033      	strb	r3, [r6, #0]
 80020f6:	002b      	movs	r3, r5
 80020f8:	0005      	movs	r5, r0
 80020fa:	429f      	cmp	r7, r3
 80020fc:	d9f3      	bls.n	80020e6 <_printf_i+0xf6>
 80020fe:	2f08      	cmp	r7, #8
 8002100:	d109      	bne.n	8002116 <_printf_i+0x126>
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	07db      	lsls	r3, r3, #31
 8002106:	d506      	bpl.n	8002116 <_printf_i+0x126>
 8002108:	6862      	ldr	r2, [r4, #4]
 800210a:	6923      	ldr	r3, [r4, #16]
 800210c:	429a      	cmp	r2, r3
 800210e:	dc02      	bgt.n	8002116 <_printf_i+0x126>
 8002110:	2330      	movs	r3, #48	; 0x30
 8002112:	3e01      	subs	r6, #1
 8002114:	7033      	strb	r3, [r6, #0]
 8002116:	9b04      	ldr	r3, [sp, #16]
 8002118:	1b9b      	subs	r3, r3, r6
 800211a:	6123      	str	r3, [r4, #16]
 800211c:	9b07      	ldr	r3, [sp, #28]
 800211e:	0021      	movs	r1, r4
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	9805      	ldr	r0, [sp, #20]
 8002124:	9b06      	ldr	r3, [sp, #24]
 8002126:	aa09      	add	r2, sp, #36	; 0x24
 8002128:	f7ff fef2 	bl	8001f10 <_printf_common>
 800212c:	3001      	adds	r0, #1
 800212e:	d147      	bne.n	80021c0 <_printf_i+0x1d0>
 8002130:	2001      	movs	r0, #1
 8002132:	4240      	negs	r0, r0
 8002134:	b00b      	add	sp, #44	; 0x2c
 8002136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002138:	2220      	movs	r2, #32
 800213a:	6809      	ldr	r1, [r1, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	6022      	str	r2, [r4, #0]
 8002140:	2278      	movs	r2, #120	; 0x78
 8002142:	4932      	ldr	r1, [pc, #200]	; (800220c <_printf_i+0x21c>)
 8002144:	9103      	str	r1, [sp, #12]
 8002146:	0021      	movs	r1, r4
 8002148:	3145      	adds	r1, #69	; 0x45
 800214a:	700a      	strb	r2, [r1, #0]
 800214c:	6819      	ldr	r1, [r3, #0]
 800214e:	6822      	ldr	r2, [r4, #0]
 8002150:	c920      	ldmia	r1!, {r5}
 8002152:	0610      	lsls	r0, r2, #24
 8002154:	d402      	bmi.n	800215c <_printf_i+0x16c>
 8002156:	0650      	lsls	r0, r2, #25
 8002158:	d500      	bpl.n	800215c <_printf_i+0x16c>
 800215a:	b2ad      	uxth	r5, r5
 800215c:	6019      	str	r1, [r3, #0]
 800215e:	07d3      	lsls	r3, r2, #31
 8002160:	d502      	bpl.n	8002168 <_printf_i+0x178>
 8002162:	2320      	movs	r3, #32
 8002164:	4313      	orrs	r3, r2
 8002166:	6023      	str	r3, [r4, #0]
 8002168:	2710      	movs	r7, #16
 800216a:	2d00      	cmp	r5, #0
 800216c:	d1a9      	bne.n	80020c2 <_printf_i+0xd2>
 800216e:	2220      	movs	r2, #32
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	4393      	bics	r3, r2
 8002174:	6023      	str	r3, [r4, #0]
 8002176:	e7a4      	b.n	80020c2 <_printf_i+0xd2>
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	680d      	ldr	r5, [r1, #0]
 800217c:	1d10      	adds	r0, r2, #4
 800217e:	6949      	ldr	r1, [r1, #20]
 8002180:	6018      	str	r0, [r3, #0]
 8002182:	6813      	ldr	r3, [r2, #0]
 8002184:	062e      	lsls	r6, r5, #24
 8002186:	d501      	bpl.n	800218c <_printf_i+0x19c>
 8002188:	6019      	str	r1, [r3, #0]
 800218a:	e002      	b.n	8002192 <_printf_i+0x1a2>
 800218c:	066d      	lsls	r5, r5, #25
 800218e:	d5fb      	bpl.n	8002188 <_printf_i+0x198>
 8002190:	8019      	strh	r1, [r3, #0]
 8002192:	2300      	movs	r3, #0
 8002194:	9e04      	ldr	r6, [sp, #16]
 8002196:	6123      	str	r3, [r4, #16]
 8002198:	e7c0      	b.n	800211c <_printf_i+0x12c>
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	1d11      	adds	r1, r2, #4
 800219e:	6019      	str	r1, [r3, #0]
 80021a0:	6816      	ldr	r6, [r2, #0]
 80021a2:	2100      	movs	r1, #0
 80021a4:	0030      	movs	r0, r6
 80021a6:	6862      	ldr	r2, [r4, #4]
 80021a8:	f000 f9a0 	bl	80024ec <memchr>
 80021ac:	2800      	cmp	r0, #0
 80021ae:	d001      	beq.n	80021b4 <_printf_i+0x1c4>
 80021b0:	1b80      	subs	r0, r0, r6
 80021b2:	6060      	str	r0, [r4, #4]
 80021b4:	6863      	ldr	r3, [r4, #4]
 80021b6:	6123      	str	r3, [r4, #16]
 80021b8:	2300      	movs	r3, #0
 80021ba:	9a04      	ldr	r2, [sp, #16]
 80021bc:	7013      	strb	r3, [r2, #0]
 80021be:	e7ad      	b.n	800211c <_printf_i+0x12c>
 80021c0:	0032      	movs	r2, r6
 80021c2:	6923      	ldr	r3, [r4, #16]
 80021c4:	9906      	ldr	r1, [sp, #24]
 80021c6:	9805      	ldr	r0, [sp, #20]
 80021c8:	9d07      	ldr	r5, [sp, #28]
 80021ca:	47a8      	blx	r5
 80021cc:	3001      	adds	r0, #1
 80021ce:	d0af      	beq.n	8002130 <_printf_i+0x140>
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	079b      	lsls	r3, r3, #30
 80021d4:	d415      	bmi.n	8002202 <_printf_i+0x212>
 80021d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021d8:	68e0      	ldr	r0, [r4, #12]
 80021da:	4298      	cmp	r0, r3
 80021dc:	daaa      	bge.n	8002134 <_printf_i+0x144>
 80021de:	0018      	movs	r0, r3
 80021e0:	e7a8      	b.n	8002134 <_printf_i+0x144>
 80021e2:	0022      	movs	r2, r4
 80021e4:	2301      	movs	r3, #1
 80021e6:	9906      	ldr	r1, [sp, #24]
 80021e8:	9805      	ldr	r0, [sp, #20]
 80021ea:	9e07      	ldr	r6, [sp, #28]
 80021ec:	3219      	adds	r2, #25
 80021ee:	47b0      	blx	r6
 80021f0:	3001      	adds	r0, #1
 80021f2:	d09d      	beq.n	8002130 <_printf_i+0x140>
 80021f4:	3501      	adds	r5, #1
 80021f6:	68e3      	ldr	r3, [r4, #12]
 80021f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	42ab      	cmp	r3, r5
 80021fe:	dcf0      	bgt.n	80021e2 <_printf_i+0x1f2>
 8002200:	e7e9      	b.n	80021d6 <_printf_i+0x1e6>
 8002202:	2500      	movs	r5, #0
 8002204:	e7f7      	b.n	80021f6 <_printf_i+0x206>
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	08002685 	.word	0x08002685
 800220c:	08002696 	.word	0x08002696

08002210 <__sflush_r>:
 8002210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002212:	898b      	ldrh	r3, [r1, #12]
 8002214:	0005      	movs	r5, r0
 8002216:	000c      	movs	r4, r1
 8002218:	071a      	lsls	r2, r3, #28
 800221a:	d45c      	bmi.n	80022d6 <__sflush_r+0xc6>
 800221c:	684a      	ldr	r2, [r1, #4]
 800221e:	2a00      	cmp	r2, #0
 8002220:	dc04      	bgt.n	800222c <__sflush_r+0x1c>
 8002222:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002224:	2a00      	cmp	r2, #0
 8002226:	dc01      	bgt.n	800222c <__sflush_r+0x1c>
 8002228:	2000      	movs	r0, #0
 800222a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800222c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800222e:	2f00      	cmp	r7, #0
 8002230:	d0fa      	beq.n	8002228 <__sflush_r+0x18>
 8002232:	2200      	movs	r2, #0
 8002234:	2080      	movs	r0, #128	; 0x80
 8002236:	682e      	ldr	r6, [r5, #0]
 8002238:	602a      	str	r2, [r5, #0]
 800223a:	001a      	movs	r2, r3
 800223c:	0140      	lsls	r0, r0, #5
 800223e:	6a21      	ldr	r1, [r4, #32]
 8002240:	4002      	ands	r2, r0
 8002242:	4203      	tst	r3, r0
 8002244:	d034      	beq.n	80022b0 <__sflush_r+0xa0>
 8002246:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002248:	89a3      	ldrh	r3, [r4, #12]
 800224a:	075b      	lsls	r3, r3, #29
 800224c:	d506      	bpl.n	800225c <__sflush_r+0x4c>
 800224e:	6863      	ldr	r3, [r4, #4]
 8002250:	1ac0      	subs	r0, r0, r3
 8002252:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <__sflush_r+0x4c>
 8002258:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800225a:	1ac0      	subs	r0, r0, r3
 800225c:	0002      	movs	r2, r0
 800225e:	2300      	movs	r3, #0
 8002260:	0028      	movs	r0, r5
 8002262:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002264:	6a21      	ldr	r1, [r4, #32]
 8002266:	47b8      	blx	r7
 8002268:	89a2      	ldrh	r2, [r4, #12]
 800226a:	1c43      	adds	r3, r0, #1
 800226c:	d106      	bne.n	800227c <__sflush_r+0x6c>
 800226e:	6829      	ldr	r1, [r5, #0]
 8002270:	291d      	cmp	r1, #29
 8002272:	d82c      	bhi.n	80022ce <__sflush_r+0xbe>
 8002274:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <__sflush_r+0x110>)
 8002276:	410b      	asrs	r3, r1
 8002278:	07db      	lsls	r3, r3, #31
 800227a:	d428      	bmi.n	80022ce <__sflush_r+0xbe>
 800227c:	2300      	movs	r3, #0
 800227e:	6063      	str	r3, [r4, #4]
 8002280:	6923      	ldr	r3, [r4, #16]
 8002282:	6023      	str	r3, [r4, #0]
 8002284:	04d2      	lsls	r2, r2, #19
 8002286:	d505      	bpl.n	8002294 <__sflush_r+0x84>
 8002288:	1c43      	adds	r3, r0, #1
 800228a:	d102      	bne.n	8002292 <__sflush_r+0x82>
 800228c:	682b      	ldr	r3, [r5, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d100      	bne.n	8002294 <__sflush_r+0x84>
 8002292:	6560      	str	r0, [r4, #84]	; 0x54
 8002294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002296:	602e      	str	r6, [r5, #0]
 8002298:	2900      	cmp	r1, #0
 800229a:	d0c5      	beq.n	8002228 <__sflush_r+0x18>
 800229c:	0023      	movs	r3, r4
 800229e:	3344      	adds	r3, #68	; 0x44
 80022a0:	4299      	cmp	r1, r3
 80022a2:	d002      	beq.n	80022aa <__sflush_r+0x9a>
 80022a4:	0028      	movs	r0, r5
 80022a6:	f7ff fbf1 	bl	8001a8c <_free_r>
 80022aa:	2000      	movs	r0, #0
 80022ac:	6360      	str	r0, [r4, #52]	; 0x34
 80022ae:	e7bc      	b.n	800222a <__sflush_r+0x1a>
 80022b0:	2301      	movs	r3, #1
 80022b2:	0028      	movs	r0, r5
 80022b4:	47b8      	blx	r7
 80022b6:	1c43      	adds	r3, r0, #1
 80022b8:	d1c6      	bne.n	8002248 <__sflush_r+0x38>
 80022ba:	682b      	ldr	r3, [r5, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0c3      	beq.n	8002248 <__sflush_r+0x38>
 80022c0:	2b1d      	cmp	r3, #29
 80022c2:	d001      	beq.n	80022c8 <__sflush_r+0xb8>
 80022c4:	2b16      	cmp	r3, #22
 80022c6:	d101      	bne.n	80022cc <__sflush_r+0xbc>
 80022c8:	602e      	str	r6, [r5, #0]
 80022ca:	e7ad      	b.n	8002228 <__sflush_r+0x18>
 80022cc:	89a2      	ldrh	r2, [r4, #12]
 80022ce:	2340      	movs	r3, #64	; 0x40
 80022d0:	4313      	orrs	r3, r2
 80022d2:	81a3      	strh	r3, [r4, #12]
 80022d4:	e7a9      	b.n	800222a <__sflush_r+0x1a>
 80022d6:	690e      	ldr	r6, [r1, #16]
 80022d8:	2e00      	cmp	r6, #0
 80022da:	d0a5      	beq.n	8002228 <__sflush_r+0x18>
 80022dc:	680f      	ldr	r7, [r1, #0]
 80022de:	600e      	str	r6, [r1, #0]
 80022e0:	1bba      	subs	r2, r7, r6
 80022e2:	9201      	str	r2, [sp, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	079b      	lsls	r3, r3, #30
 80022e8:	d100      	bne.n	80022ec <__sflush_r+0xdc>
 80022ea:	694a      	ldr	r2, [r1, #20]
 80022ec:	60a2      	str	r2, [r4, #8]
 80022ee:	9b01      	ldr	r3, [sp, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	dd99      	ble.n	8002228 <__sflush_r+0x18>
 80022f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022f6:	0032      	movs	r2, r6
 80022f8:	001f      	movs	r7, r3
 80022fa:	0028      	movs	r0, r5
 80022fc:	9b01      	ldr	r3, [sp, #4]
 80022fe:	6a21      	ldr	r1, [r4, #32]
 8002300:	47b8      	blx	r7
 8002302:	2800      	cmp	r0, #0
 8002304:	dc06      	bgt.n	8002314 <__sflush_r+0x104>
 8002306:	2340      	movs	r3, #64	; 0x40
 8002308:	2001      	movs	r0, #1
 800230a:	89a2      	ldrh	r2, [r4, #12]
 800230c:	4240      	negs	r0, r0
 800230e:	4313      	orrs	r3, r2
 8002310:	81a3      	strh	r3, [r4, #12]
 8002312:	e78a      	b.n	800222a <__sflush_r+0x1a>
 8002314:	9b01      	ldr	r3, [sp, #4]
 8002316:	1836      	adds	r6, r6, r0
 8002318:	1a1b      	subs	r3, r3, r0
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	e7e7      	b.n	80022ee <__sflush_r+0xde>
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	dfbffffe 	.word	0xdfbffffe

08002324 <_fflush_r>:
 8002324:	690b      	ldr	r3, [r1, #16]
 8002326:	b570      	push	{r4, r5, r6, lr}
 8002328:	0005      	movs	r5, r0
 800232a:	000c      	movs	r4, r1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <_fflush_r+0x12>
 8002330:	2500      	movs	r5, #0
 8002332:	0028      	movs	r0, r5
 8002334:	bd70      	pop	{r4, r5, r6, pc}
 8002336:	2800      	cmp	r0, #0
 8002338:	d004      	beq.n	8002344 <_fflush_r+0x20>
 800233a:	6a03      	ldr	r3, [r0, #32]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <_fflush_r+0x20>
 8002340:	f7ff fa92 	bl	8001868 <__sinit>
 8002344:	220c      	movs	r2, #12
 8002346:	5ea3      	ldrsh	r3, [r4, r2]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f1      	beq.n	8002330 <_fflush_r+0xc>
 800234c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800234e:	07d2      	lsls	r2, r2, #31
 8002350:	d404      	bmi.n	800235c <_fflush_r+0x38>
 8002352:	059b      	lsls	r3, r3, #22
 8002354:	d402      	bmi.n	800235c <_fflush_r+0x38>
 8002356:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002358:	f7ff fb96 	bl	8001a88 <__retarget_lock_acquire_recursive>
 800235c:	0028      	movs	r0, r5
 800235e:	0021      	movs	r1, r4
 8002360:	f7ff ff56 	bl	8002210 <__sflush_r>
 8002364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002366:	0005      	movs	r5, r0
 8002368:	07db      	lsls	r3, r3, #31
 800236a:	d4e2      	bmi.n	8002332 <_fflush_r+0xe>
 800236c:	89a3      	ldrh	r3, [r4, #12]
 800236e:	059b      	lsls	r3, r3, #22
 8002370:	d4df      	bmi.n	8002332 <_fflush_r+0xe>
 8002372:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002374:	f7ff fb89 	bl	8001a8a <__retarget_lock_release_recursive>
 8002378:	e7db      	b.n	8002332 <_fflush_r+0xe>

0800237a <__swbuf_r>:
 800237a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237c:	0006      	movs	r6, r0
 800237e:	000d      	movs	r5, r1
 8002380:	0014      	movs	r4, r2
 8002382:	2800      	cmp	r0, #0
 8002384:	d004      	beq.n	8002390 <__swbuf_r+0x16>
 8002386:	6a03      	ldr	r3, [r0, #32]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <__swbuf_r+0x16>
 800238c:	f7ff fa6c 	bl	8001868 <__sinit>
 8002390:	69a3      	ldr	r3, [r4, #24]
 8002392:	60a3      	str	r3, [r4, #8]
 8002394:	89a3      	ldrh	r3, [r4, #12]
 8002396:	071b      	lsls	r3, r3, #28
 8002398:	d528      	bpl.n	80023ec <__swbuf_r+0x72>
 800239a:	6923      	ldr	r3, [r4, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d025      	beq.n	80023ec <__swbuf_r+0x72>
 80023a0:	6923      	ldr	r3, [r4, #16]
 80023a2:	6820      	ldr	r0, [r4, #0]
 80023a4:	b2ef      	uxtb	r7, r5
 80023a6:	1ac0      	subs	r0, r0, r3
 80023a8:	6963      	ldr	r3, [r4, #20]
 80023aa:	b2ed      	uxtb	r5, r5
 80023ac:	4283      	cmp	r3, r0
 80023ae:	dc05      	bgt.n	80023bc <__swbuf_r+0x42>
 80023b0:	0021      	movs	r1, r4
 80023b2:	0030      	movs	r0, r6
 80023b4:	f7ff ffb6 	bl	8002324 <_fflush_r>
 80023b8:	2800      	cmp	r0, #0
 80023ba:	d11d      	bne.n	80023f8 <__swbuf_r+0x7e>
 80023bc:	68a3      	ldr	r3, [r4, #8]
 80023be:	3001      	adds	r0, #1
 80023c0:	3b01      	subs	r3, #1
 80023c2:	60a3      	str	r3, [r4, #8]
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	6022      	str	r2, [r4, #0]
 80023ca:	701f      	strb	r7, [r3, #0]
 80023cc:	6963      	ldr	r3, [r4, #20]
 80023ce:	4283      	cmp	r3, r0
 80023d0:	d004      	beq.n	80023dc <__swbuf_r+0x62>
 80023d2:	89a3      	ldrh	r3, [r4, #12]
 80023d4:	07db      	lsls	r3, r3, #31
 80023d6:	d507      	bpl.n	80023e8 <__swbuf_r+0x6e>
 80023d8:	2d0a      	cmp	r5, #10
 80023da:	d105      	bne.n	80023e8 <__swbuf_r+0x6e>
 80023dc:	0021      	movs	r1, r4
 80023de:	0030      	movs	r0, r6
 80023e0:	f7ff ffa0 	bl	8002324 <_fflush_r>
 80023e4:	2800      	cmp	r0, #0
 80023e6:	d107      	bne.n	80023f8 <__swbuf_r+0x7e>
 80023e8:	0028      	movs	r0, r5
 80023ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023ec:	0021      	movs	r1, r4
 80023ee:	0030      	movs	r0, r6
 80023f0:	f000 f806 	bl	8002400 <__swsetup_r>
 80023f4:	2800      	cmp	r0, #0
 80023f6:	d0d3      	beq.n	80023a0 <__swbuf_r+0x26>
 80023f8:	2501      	movs	r5, #1
 80023fa:	426d      	negs	r5, r5
 80023fc:	e7f4      	b.n	80023e8 <__swbuf_r+0x6e>
	...

08002400 <__swsetup_r>:
 8002400:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <__swsetup_r+0xc4>)
 8002402:	b570      	push	{r4, r5, r6, lr}
 8002404:	0005      	movs	r5, r0
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	000c      	movs	r4, r1
 800240a:	2800      	cmp	r0, #0
 800240c:	d004      	beq.n	8002418 <__swsetup_r+0x18>
 800240e:	6a03      	ldr	r3, [r0, #32]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <__swsetup_r+0x18>
 8002414:	f7ff fa28 	bl	8001868 <__sinit>
 8002418:	230c      	movs	r3, #12
 800241a:	5ee2      	ldrsh	r2, [r4, r3]
 800241c:	b293      	uxth	r3, r2
 800241e:	0711      	lsls	r1, r2, #28
 8002420:	d423      	bmi.n	800246a <__swsetup_r+0x6a>
 8002422:	06d9      	lsls	r1, r3, #27
 8002424:	d407      	bmi.n	8002436 <__swsetup_r+0x36>
 8002426:	2309      	movs	r3, #9
 8002428:	2001      	movs	r0, #1
 800242a:	602b      	str	r3, [r5, #0]
 800242c:	3337      	adds	r3, #55	; 0x37
 800242e:	4313      	orrs	r3, r2
 8002430:	81a3      	strh	r3, [r4, #12]
 8002432:	4240      	negs	r0, r0
 8002434:	bd70      	pop	{r4, r5, r6, pc}
 8002436:	075b      	lsls	r3, r3, #29
 8002438:	d513      	bpl.n	8002462 <__swsetup_r+0x62>
 800243a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800243c:	2900      	cmp	r1, #0
 800243e:	d008      	beq.n	8002452 <__swsetup_r+0x52>
 8002440:	0023      	movs	r3, r4
 8002442:	3344      	adds	r3, #68	; 0x44
 8002444:	4299      	cmp	r1, r3
 8002446:	d002      	beq.n	800244e <__swsetup_r+0x4e>
 8002448:	0028      	movs	r0, r5
 800244a:	f7ff fb1f 	bl	8001a8c <_free_r>
 800244e:	2300      	movs	r3, #0
 8002450:	6363      	str	r3, [r4, #52]	; 0x34
 8002452:	2224      	movs	r2, #36	; 0x24
 8002454:	89a3      	ldrh	r3, [r4, #12]
 8002456:	4393      	bics	r3, r2
 8002458:	81a3      	strh	r3, [r4, #12]
 800245a:	2300      	movs	r3, #0
 800245c:	6063      	str	r3, [r4, #4]
 800245e:	6923      	ldr	r3, [r4, #16]
 8002460:	6023      	str	r3, [r4, #0]
 8002462:	2308      	movs	r3, #8
 8002464:	89a2      	ldrh	r2, [r4, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	81a3      	strh	r3, [r4, #12]
 800246a:	6923      	ldr	r3, [r4, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10b      	bne.n	8002488 <__swsetup_r+0x88>
 8002470:	21a0      	movs	r1, #160	; 0xa0
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	89a3      	ldrh	r3, [r4, #12]
 8002476:	0089      	lsls	r1, r1, #2
 8002478:	0092      	lsls	r2, r2, #2
 800247a:	400b      	ands	r3, r1
 800247c:	4293      	cmp	r3, r2
 800247e:	d003      	beq.n	8002488 <__swsetup_r+0x88>
 8002480:	0021      	movs	r1, r4
 8002482:	0028      	movs	r0, r5
 8002484:	f000 f866 	bl	8002554 <__smakebuf_r>
 8002488:	220c      	movs	r2, #12
 800248a:	5ea3      	ldrsh	r3, [r4, r2]
 800248c:	2001      	movs	r0, #1
 800248e:	001a      	movs	r2, r3
 8002490:	b299      	uxth	r1, r3
 8002492:	4002      	ands	r2, r0
 8002494:	4203      	tst	r3, r0
 8002496:	d00f      	beq.n	80024b8 <__swsetup_r+0xb8>
 8002498:	2200      	movs	r2, #0
 800249a:	60a2      	str	r2, [r4, #8]
 800249c:	6962      	ldr	r2, [r4, #20]
 800249e:	4252      	negs	r2, r2
 80024a0:	61a2      	str	r2, [r4, #24]
 80024a2:	2000      	movs	r0, #0
 80024a4:	6922      	ldr	r2, [r4, #16]
 80024a6:	4282      	cmp	r2, r0
 80024a8:	d1c4      	bne.n	8002434 <__swsetup_r+0x34>
 80024aa:	0609      	lsls	r1, r1, #24
 80024ac:	d5c2      	bpl.n	8002434 <__swsetup_r+0x34>
 80024ae:	2240      	movs	r2, #64	; 0x40
 80024b0:	4313      	orrs	r3, r2
 80024b2:	81a3      	strh	r3, [r4, #12]
 80024b4:	3801      	subs	r0, #1
 80024b6:	e7bd      	b.n	8002434 <__swsetup_r+0x34>
 80024b8:	0788      	lsls	r0, r1, #30
 80024ba:	d400      	bmi.n	80024be <__swsetup_r+0xbe>
 80024bc:	6962      	ldr	r2, [r4, #20]
 80024be:	60a2      	str	r2, [r4, #8]
 80024c0:	e7ef      	b.n	80024a2 <__swsetup_r+0xa2>
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	20000064 	.word	0x20000064

080024c8 <_sbrk_r>:
 80024c8:	2300      	movs	r3, #0
 80024ca:	b570      	push	{r4, r5, r6, lr}
 80024cc:	4d06      	ldr	r5, [pc, #24]	; (80024e8 <_sbrk_r+0x20>)
 80024ce:	0004      	movs	r4, r0
 80024d0:	0008      	movs	r0, r1
 80024d2:	602b      	str	r3, [r5, #0]
 80024d4:	f7fe f910 	bl	80006f8 <_sbrk>
 80024d8:	1c43      	adds	r3, r0, #1
 80024da:	d103      	bne.n	80024e4 <_sbrk_r+0x1c>
 80024dc:	682b      	ldr	r3, [r5, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d000      	beq.n	80024e4 <_sbrk_r+0x1c>
 80024e2:	6023      	str	r3, [r4, #0]
 80024e4:	bd70      	pop	{r4, r5, r6, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	200001c8 	.word	0x200001c8

080024ec <memchr>:
 80024ec:	b2c9      	uxtb	r1, r1
 80024ee:	1882      	adds	r2, r0, r2
 80024f0:	4290      	cmp	r0, r2
 80024f2:	d101      	bne.n	80024f8 <memchr+0xc>
 80024f4:	2000      	movs	r0, #0
 80024f6:	4770      	bx	lr
 80024f8:	7803      	ldrb	r3, [r0, #0]
 80024fa:	428b      	cmp	r3, r1
 80024fc:	d0fb      	beq.n	80024f6 <memchr+0xa>
 80024fe:	3001      	adds	r0, #1
 8002500:	e7f6      	b.n	80024f0 <memchr+0x4>
	...

08002504 <__swhatbuf_r>:
 8002504:	b570      	push	{r4, r5, r6, lr}
 8002506:	000e      	movs	r6, r1
 8002508:	001d      	movs	r5, r3
 800250a:	230e      	movs	r3, #14
 800250c:	5ec9      	ldrsh	r1, [r1, r3]
 800250e:	0014      	movs	r4, r2
 8002510:	b096      	sub	sp, #88	; 0x58
 8002512:	2900      	cmp	r1, #0
 8002514:	da0c      	bge.n	8002530 <__swhatbuf_r+0x2c>
 8002516:	89b2      	ldrh	r2, [r6, #12]
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	0011      	movs	r1, r2
 800251c:	4019      	ands	r1, r3
 800251e:	421a      	tst	r2, r3
 8002520:	d013      	beq.n	800254a <__swhatbuf_r+0x46>
 8002522:	2100      	movs	r1, #0
 8002524:	3b40      	subs	r3, #64	; 0x40
 8002526:	2000      	movs	r0, #0
 8002528:	6029      	str	r1, [r5, #0]
 800252a:	6023      	str	r3, [r4, #0]
 800252c:	b016      	add	sp, #88	; 0x58
 800252e:	bd70      	pop	{r4, r5, r6, pc}
 8002530:	466a      	mov	r2, sp
 8002532:	f000 f84d 	bl	80025d0 <_fstat_r>
 8002536:	2800      	cmp	r0, #0
 8002538:	dbed      	blt.n	8002516 <__swhatbuf_r+0x12>
 800253a:	23f0      	movs	r3, #240	; 0xf0
 800253c:	9901      	ldr	r1, [sp, #4]
 800253e:	021b      	lsls	r3, r3, #8
 8002540:	4019      	ands	r1, r3
 8002542:	4b03      	ldr	r3, [pc, #12]	; (8002550 <__swhatbuf_r+0x4c>)
 8002544:	18c9      	adds	r1, r1, r3
 8002546:	424b      	negs	r3, r1
 8002548:	4159      	adcs	r1, r3
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	e7ea      	b.n	8002526 <__swhatbuf_r+0x22>
 8002550:	ffffe000 	.word	0xffffe000

08002554 <__smakebuf_r>:
 8002554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002556:	2602      	movs	r6, #2
 8002558:	898b      	ldrh	r3, [r1, #12]
 800255a:	0005      	movs	r5, r0
 800255c:	000c      	movs	r4, r1
 800255e:	4233      	tst	r3, r6
 8002560:	d006      	beq.n	8002570 <__smakebuf_r+0x1c>
 8002562:	0023      	movs	r3, r4
 8002564:	3347      	adds	r3, #71	; 0x47
 8002566:	6023      	str	r3, [r4, #0]
 8002568:	6123      	str	r3, [r4, #16]
 800256a:	2301      	movs	r3, #1
 800256c:	6163      	str	r3, [r4, #20]
 800256e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002570:	466a      	mov	r2, sp
 8002572:	ab01      	add	r3, sp, #4
 8002574:	f7ff ffc6 	bl	8002504 <__swhatbuf_r>
 8002578:	9900      	ldr	r1, [sp, #0]
 800257a:	0007      	movs	r7, r0
 800257c:	0028      	movs	r0, r5
 800257e:	f7ff faf1 	bl	8001b64 <_malloc_r>
 8002582:	2800      	cmp	r0, #0
 8002584:	d108      	bne.n	8002598 <__smakebuf_r+0x44>
 8002586:	220c      	movs	r2, #12
 8002588:	5ea3      	ldrsh	r3, [r4, r2]
 800258a:	059a      	lsls	r2, r3, #22
 800258c:	d4ef      	bmi.n	800256e <__smakebuf_r+0x1a>
 800258e:	2203      	movs	r2, #3
 8002590:	4393      	bics	r3, r2
 8002592:	431e      	orrs	r6, r3
 8002594:	81a6      	strh	r6, [r4, #12]
 8002596:	e7e4      	b.n	8002562 <__smakebuf_r+0xe>
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	89a2      	ldrh	r2, [r4, #12]
 800259c:	6020      	str	r0, [r4, #0]
 800259e:	4313      	orrs	r3, r2
 80025a0:	81a3      	strh	r3, [r4, #12]
 80025a2:	9b00      	ldr	r3, [sp, #0]
 80025a4:	6120      	str	r0, [r4, #16]
 80025a6:	6163      	str	r3, [r4, #20]
 80025a8:	9b01      	ldr	r3, [sp, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00c      	beq.n	80025c8 <__smakebuf_r+0x74>
 80025ae:	0028      	movs	r0, r5
 80025b0:	230e      	movs	r3, #14
 80025b2:	5ee1      	ldrsh	r1, [r4, r3]
 80025b4:	f000 f81e 	bl	80025f4 <_isatty_r>
 80025b8:	2800      	cmp	r0, #0
 80025ba:	d005      	beq.n	80025c8 <__smakebuf_r+0x74>
 80025bc:	2303      	movs	r3, #3
 80025be:	89a2      	ldrh	r2, [r4, #12]
 80025c0:	439a      	bics	r2, r3
 80025c2:	3b02      	subs	r3, #2
 80025c4:	4313      	orrs	r3, r2
 80025c6:	81a3      	strh	r3, [r4, #12]
 80025c8:	89a3      	ldrh	r3, [r4, #12]
 80025ca:	433b      	orrs	r3, r7
 80025cc:	81a3      	strh	r3, [r4, #12]
 80025ce:	e7ce      	b.n	800256e <__smakebuf_r+0x1a>

080025d0 <_fstat_r>:
 80025d0:	2300      	movs	r3, #0
 80025d2:	b570      	push	{r4, r5, r6, lr}
 80025d4:	4d06      	ldr	r5, [pc, #24]	; (80025f0 <_fstat_r+0x20>)
 80025d6:	0004      	movs	r4, r0
 80025d8:	0008      	movs	r0, r1
 80025da:	0011      	movs	r1, r2
 80025dc:	602b      	str	r3, [r5, #0]
 80025de:	f7fe f869 	bl	80006b4 <_fstat>
 80025e2:	1c43      	adds	r3, r0, #1
 80025e4:	d103      	bne.n	80025ee <_fstat_r+0x1e>
 80025e6:	682b      	ldr	r3, [r5, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d000      	beq.n	80025ee <_fstat_r+0x1e>
 80025ec:	6023      	str	r3, [r4, #0]
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
 80025f0:	200001c8 	.word	0x200001c8

080025f4 <_isatty_r>:
 80025f4:	2300      	movs	r3, #0
 80025f6:	b570      	push	{r4, r5, r6, lr}
 80025f8:	4d06      	ldr	r5, [pc, #24]	; (8002614 <_isatty_r+0x20>)
 80025fa:	0004      	movs	r4, r0
 80025fc:	0008      	movs	r0, r1
 80025fe:	602b      	str	r3, [r5, #0]
 8002600:	f7fe f866 	bl	80006d0 <_isatty>
 8002604:	1c43      	adds	r3, r0, #1
 8002606:	d103      	bne.n	8002610 <_isatty_r+0x1c>
 8002608:	682b      	ldr	r3, [r5, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d000      	beq.n	8002610 <_isatty_r+0x1c>
 800260e:	6023      	str	r3, [r4, #0]
 8002610:	bd70      	pop	{r4, r5, r6, pc}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	200001c8 	.word	0x200001c8

08002618 <_init>:
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261e:	bc08      	pop	{r3}
 8002620:	469e      	mov	lr, r3
 8002622:	4770      	bx	lr

08002624 <_fini>:
 8002624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262a:	bc08      	pop	{r3}
 800262c:	469e      	mov	lr, r3
 800262e:	4770      	bx	lr
