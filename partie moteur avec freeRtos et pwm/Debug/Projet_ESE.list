
Projet_ESE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d070  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  0800d130  0800d130  0001d130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d950  0800d950  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800d950  0800d950  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d950  0800d950  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d950  0800d950  0001d950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d954  0800d954  0001d954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800d958  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001578  20000080  0800d9d8  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015f8  0800d9d8  000215f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019f20  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004253  00000000  00000000  0003a00b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a8  00000000  00000000  0003e260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001248  00000000  00000000  0003fa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b69e  00000000  00000000  00040c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001db34  00000000  00000000  0005c2ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2c5c  00000000  00000000  00079e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006260  00000000  00000000  0011ca80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00122ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d118 	.word	0x0800d118

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	0800d118 	.word	0x0800d118

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0010      	movs	r0, r2
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	0019      	movs	r1, r3
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f000 ff29 	bl	8001270 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fe79 	bl	8001120 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ff1b 	bl	8001270 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff11 	bl	8001270 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fea1 	bl	80011a4 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 fe97 	bl	80011a4 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_dadd>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	464f      	mov	r7, r9
 8000488:	4646      	mov	r6, r8
 800048a:	46d6      	mov	lr, sl
 800048c:	0004      	movs	r4, r0
 800048e:	b5c0      	push	{r6, r7, lr}
 8000490:	001f      	movs	r7, r3
 8000492:	030b      	lsls	r3, r1, #12
 8000494:	0010      	movs	r0, r2
 8000496:	004e      	lsls	r6, r1, #1
 8000498:	0a5b      	lsrs	r3, r3, #9
 800049a:	0fcd      	lsrs	r5, r1, #31
 800049c:	0f61      	lsrs	r1, r4, #29
 800049e:	007a      	lsls	r2, r7, #1
 80004a0:	4319      	orrs	r1, r3
 80004a2:	00e3      	lsls	r3, r4, #3
 80004a4:	033c      	lsls	r4, r7, #12
 80004a6:	0fff      	lsrs	r7, r7, #31
 80004a8:	46bc      	mov	ip, r7
 80004aa:	0a64      	lsrs	r4, r4, #9
 80004ac:	0f47      	lsrs	r7, r0, #29
 80004ae:	4327      	orrs	r7, r4
 80004b0:	0d76      	lsrs	r6, r6, #21
 80004b2:	0d52      	lsrs	r2, r2, #21
 80004b4:	00c0      	lsls	r0, r0, #3
 80004b6:	46b9      	mov	r9, r7
 80004b8:	4680      	mov	r8, r0
 80004ba:	1ab7      	subs	r7, r6, r2
 80004bc:	4565      	cmp	r5, ip
 80004be:	d100      	bne.n	80004c2 <__aeabi_dadd+0x3e>
 80004c0:	e09b      	b.n	80005fa <__aeabi_dadd+0x176>
 80004c2:	2f00      	cmp	r7, #0
 80004c4:	dc00      	bgt.n	80004c8 <__aeabi_dadd+0x44>
 80004c6:	e084      	b.n	80005d2 <__aeabi_dadd+0x14e>
 80004c8:	2a00      	cmp	r2, #0
 80004ca:	d100      	bne.n	80004ce <__aeabi_dadd+0x4a>
 80004cc:	e0be      	b.n	800064c <__aeabi_dadd+0x1c8>
 80004ce:	4ac8      	ldr	r2, [pc, #800]	; (80007f0 <__aeabi_dadd+0x36c>)
 80004d0:	4296      	cmp	r6, r2
 80004d2:	d100      	bne.n	80004d6 <__aeabi_dadd+0x52>
 80004d4:	e124      	b.n	8000720 <__aeabi_dadd+0x29c>
 80004d6:	2280      	movs	r2, #128	; 0x80
 80004d8:	464c      	mov	r4, r9
 80004da:	0412      	lsls	r2, r2, #16
 80004dc:	4314      	orrs	r4, r2
 80004de:	46a1      	mov	r9, r4
 80004e0:	2f38      	cmp	r7, #56	; 0x38
 80004e2:	dd00      	ble.n	80004e6 <__aeabi_dadd+0x62>
 80004e4:	e167      	b.n	80007b6 <__aeabi_dadd+0x332>
 80004e6:	2f1f      	cmp	r7, #31
 80004e8:	dd00      	ble.n	80004ec <__aeabi_dadd+0x68>
 80004ea:	e1d6      	b.n	800089a <__aeabi_dadd+0x416>
 80004ec:	2220      	movs	r2, #32
 80004ee:	464c      	mov	r4, r9
 80004f0:	1bd2      	subs	r2, r2, r7
 80004f2:	4094      	lsls	r4, r2
 80004f4:	46a2      	mov	sl, r4
 80004f6:	4644      	mov	r4, r8
 80004f8:	40fc      	lsrs	r4, r7
 80004fa:	0020      	movs	r0, r4
 80004fc:	4654      	mov	r4, sl
 80004fe:	4304      	orrs	r4, r0
 8000500:	4640      	mov	r0, r8
 8000502:	4090      	lsls	r0, r2
 8000504:	1e42      	subs	r2, r0, #1
 8000506:	4190      	sbcs	r0, r2
 8000508:	464a      	mov	r2, r9
 800050a:	40fa      	lsrs	r2, r7
 800050c:	4304      	orrs	r4, r0
 800050e:	1a89      	subs	r1, r1, r2
 8000510:	1b1c      	subs	r4, r3, r4
 8000512:	42a3      	cmp	r3, r4
 8000514:	4192      	sbcs	r2, r2
 8000516:	4252      	negs	r2, r2
 8000518:	1a8b      	subs	r3, r1, r2
 800051a:	469a      	mov	sl, r3
 800051c:	4653      	mov	r3, sl
 800051e:	021b      	lsls	r3, r3, #8
 8000520:	d400      	bmi.n	8000524 <__aeabi_dadd+0xa0>
 8000522:	e0d4      	b.n	80006ce <__aeabi_dadd+0x24a>
 8000524:	4653      	mov	r3, sl
 8000526:	025a      	lsls	r2, r3, #9
 8000528:	0a53      	lsrs	r3, r2, #9
 800052a:	469a      	mov	sl, r3
 800052c:	4653      	mov	r3, sl
 800052e:	2b00      	cmp	r3, #0
 8000530:	d100      	bne.n	8000534 <__aeabi_dadd+0xb0>
 8000532:	e104      	b.n	800073e <__aeabi_dadd+0x2ba>
 8000534:	4650      	mov	r0, sl
 8000536:	f001 fdc7 	bl	80020c8 <__clzsi2>
 800053a:	0003      	movs	r3, r0
 800053c:	3b08      	subs	r3, #8
 800053e:	2220      	movs	r2, #32
 8000540:	0020      	movs	r0, r4
 8000542:	1ad2      	subs	r2, r2, r3
 8000544:	4651      	mov	r1, sl
 8000546:	40d0      	lsrs	r0, r2
 8000548:	4099      	lsls	r1, r3
 800054a:	0002      	movs	r2, r0
 800054c:	409c      	lsls	r4, r3
 800054e:	430a      	orrs	r2, r1
 8000550:	42b3      	cmp	r3, r6
 8000552:	da00      	bge.n	8000556 <__aeabi_dadd+0xd2>
 8000554:	e102      	b.n	800075c <__aeabi_dadd+0x2d8>
 8000556:	1b9b      	subs	r3, r3, r6
 8000558:	1c59      	adds	r1, r3, #1
 800055a:	291f      	cmp	r1, #31
 800055c:	dd00      	ble.n	8000560 <__aeabi_dadd+0xdc>
 800055e:	e0a7      	b.n	80006b0 <__aeabi_dadd+0x22c>
 8000560:	2320      	movs	r3, #32
 8000562:	0010      	movs	r0, r2
 8000564:	0026      	movs	r6, r4
 8000566:	1a5b      	subs	r3, r3, r1
 8000568:	409c      	lsls	r4, r3
 800056a:	4098      	lsls	r0, r3
 800056c:	40ce      	lsrs	r6, r1
 800056e:	40ca      	lsrs	r2, r1
 8000570:	1e63      	subs	r3, r4, #1
 8000572:	419c      	sbcs	r4, r3
 8000574:	4330      	orrs	r0, r6
 8000576:	4692      	mov	sl, r2
 8000578:	2600      	movs	r6, #0
 800057a:	4304      	orrs	r4, r0
 800057c:	0763      	lsls	r3, r4, #29
 800057e:	d009      	beq.n	8000594 <__aeabi_dadd+0x110>
 8000580:	230f      	movs	r3, #15
 8000582:	4023      	ands	r3, r4
 8000584:	2b04      	cmp	r3, #4
 8000586:	d005      	beq.n	8000594 <__aeabi_dadd+0x110>
 8000588:	1d23      	adds	r3, r4, #4
 800058a:	42a3      	cmp	r3, r4
 800058c:	41a4      	sbcs	r4, r4
 800058e:	4264      	negs	r4, r4
 8000590:	44a2      	add	sl, r4
 8000592:	001c      	movs	r4, r3
 8000594:	4653      	mov	r3, sl
 8000596:	021b      	lsls	r3, r3, #8
 8000598:	d400      	bmi.n	800059c <__aeabi_dadd+0x118>
 800059a:	e09b      	b.n	80006d4 <__aeabi_dadd+0x250>
 800059c:	4b94      	ldr	r3, [pc, #592]	; (80007f0 <__aeabi_dadd+0x36c>)
 800059e:	3601      	adds	r6, #1
 80005a0:	429e      	cmp	r6, r3
 80005a2:	d100      	bne.n	80005a6 <__aeabi_dadd+0x122>
 80005a4:	e0b8      	b.n	8000718 <__aeabi_dadd+0x294>
 80005a6:	4653      	mov	r3, sl
 80005a8:	4992      	ldr	r1, [pc, #584]	; (80007f4 <__aeabi_dadd+0x370>)
 80005aa:	08e4      	lsrs	r4, r4, #3
 80005ac:	400b      	ands	r3, r1
 80005ae:	0019      	movs	r1, r3
 80005b0:	075b      	lsls	r3, r3, #29
 80005b2:	4323      	orrs	r3, r4
 80005b4:	0572      	lsls	r2, r6, #21
 80005b6:	024c      	lsls	r4, r1, #9
 80005b8:	0b24      	lsrs	r4, r4, #12
 80005ba:	0d52      	lsrs	r2, r2, #21
 80005bc:	0512      	lsls	r2, r2, #20
 80005be:	07ed      	lsls	r5, r5, #31
 80005c0:	4322      	orrs	r2, r4
 80005c2:	432a      	orrs	r2, r5
 80005c4:	0018      	movs	r0, r3
 80005c6:	0011      	movs	r1, r2
 80005c8:	bce0      	pop	{r5, r6, r7}
 80005ca:	46ba      	mov	sl, r7
 80005cc:	46b1      	mov	r9, r6
 80005ce:	46a8      	mov	r8, r5
 80005d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d2:	2f00      	cmp	r7, #0
 80005d4:	d048      	beq.n	8000668 <__aeabi_dadd+0x1e4>
 80005d6:	1b97      	subs	r7, r2, r6
 80005d8:	2e00      	cmp	r6, #0
 80005da:	d000      	beq.n	80005de <__aeabi_dadd+0x15a>
 80005dc:	e10e      	b.n	80007fc <__aeabi_dadd+0x378>
 80005de:	000c      	movs	r4, r1
 80005e0:	431c      	orrs	r4, r3
 80005e2:	d100      	bne.n	80005e6 <__aeabi_dadd+0x162>
 80005e4:	e1b7      	b.n	8000956 <__aeabi_dadd+0x4d2>
 80005e6:	1e7c      	subs	r4, r7, #1
 80005e8:	2f01      	cmp	r7, #1
 80005ea:	d100      	bne.n	80005ee <__aeabi_dadd+0x16a>
 80005ec:	e226      	b.n	8000a3c <__aeabi_dadd+0x5b8>
 80005ee:	4d80      	ldr	r5, [pc, #512]	; (80007f0 <__aeabi_dadd+0x36c>)
 80005f0:	42af      	cmp	r7, r5
 80005f2:	d100      	bne.n	80005f6 <__aeabi_dadd+0x172>
 80005f4:	e1d5      	b.n	80009a2 <__aeabi_dadd+0x51e>
 80005f6:	0027      	movs	r7, r4
 80005f8:	e107      	b.n	800080a <__aeabi_dadd+0x386>
 80005fa:	2f00      	cmp	r7, #0
 80005fc:	dc00      	bgt.n	8000600 <__aeabi_dadd+0x17c>
 80005fe:	e0b2      	b.n	8000766 <__aeabi_dadd+0x2e2>
 8000600:	2a00      	cmp	r2, #0
 8000602:	d047      	beq.n	8000694 <__aeabi_dadd+0x210>
 8000604:	4a7a      	ldr	r2, [pc, #488]	; (80007f0 <__aeabi_dadd+0x36c>)
 8000606:	4296      	cmp	r6, r2
 8000608:	d100      	bne.n	800060c <__aeabi_dadd+0x188>
 800060a:	e089      	b.n	8000720 <__aeabi_dadd+0x29c>
 800060c:	2280      	movs	r2, #128	; 0x80
 800060e:	464c      	mov	r4, r9
 8000610:	0412      	lsls	r2, r2, #16
 8000612:	4314      	orrs	r4, r2
 8000614:	46a1      	mov	r9, r4
 8000616:	2f38      	cmp	r7, #56	; 0x38
 8000618:	dc6b      	bgt.n	80006f2 <__aeabi_dadd+0x26e>
 800061a:	2f1f      	cmp	r7, #31
 800061c:	dc00      	bgt.n	8000620 <__aeabi_dadd+0x19c>
 800061e:	e16e      	b.n	80008fe <__aeabi_dadd+0x47a>
 8000620:	003a      	movs	r2, r7
 8000622:	4648      	mov	r0, r9
 8000624:	3a20      	subs	r2, #32
 8000626:	40d0      	lsrs	r0, r2
 8000628:	4684      	mov	ip, r0
 800062a:	2f20      	cmp	r7, #32
 800062c:	d007      	beq.n	800063e <__aeabi_dadd+0x1ba>
 800062e:	2240      	movs	r2, #64	; 0x40
 8000630:	4648      	mov	r0, r9
 8000632:	1bd2      	subs	r2, r2, r7
 8000634:	4090      	lsls	r0, r2
 8000636:	0002      	movs	r2, r0
 8000638:	4640      	mov	r0, r8
 800063a:	4310      	orrs	r0, r2
 800063c:	4680      	mov	r8, r0
 800063e:	4640      	mov	r0, r8
 8000640:	1e42      	subs	r2, r0, #1
 8000642:	4190      	sbcs	r0, r2
 8000644:	4662      	mov	r2, ip
 8000646:	0004      	movs	r4, r0
 8000648:	4314      	orrs	r4, r2
 800064a:	e057      	b.n	80006fc <__aeabi_dadd+0x278>
 800064c:	464a      	mov	r2, r9
 800064e:	4302      	orrs	r2, r0
 8000650:	d100      	bne.n	8000654 <__aeabi_dadd+0x1d0>
 8000652:	e103      	b.n	800085c <__aeabi_dadd+0x3d8>
 8000654:	1e7a      	subs	r2, r7, #1
 8000656:	2f01      	cmp	r7, #1
 8000658:	d100      	bne.n	800065c <__aeabi_dadd+0x1d8>
 800065a:	e193      	b.n	8000984 <__aeabi_dadd+0x500>
 800065c:	4c64      	ldr	r4, [pc, #400]	; (80007f0 <__aeabi_dadd+0x36c>)
 800065e:	42a7      	cmp	r7, r4
 8000660:	d100      	bne.n	8000664 <__aeabi_dadd+0x1e0>
 8000662:	e18a      	b.n	800097a <__aeabi_dadd+0x4f6>
 8000664:	0017      	movs	r7, r2
 8000666:	e73b      	b.n	80004e0 <__aeabi_dadd+0x5c>
 8000668:	4c63      	ldr	r4, [pc, #396]	; (80007f8 <__aeabi_dadd+0x374>)
 800066a:	1c72      	adds	r2, r6, #1
 800066c:	4222      	tst	r2, r4
 800066e:	d000      	beq.n	8000672 <__aeabi_dadd+0x1ee>
 8000670:	e0e0      	b.n	8000834 <__aeabi_dadd+0x3b0>
 8000672:	000a      	movs	r2, r1
 8000674:	431a      	orrs	r2, r3
 8000676:	2e00      	cmp	r6, #0
 8000678:	d000      	beq.n	800067c <__aeabi_dadd+0x1f8>
 800067a:	e174      	b.n	8000966 <__aeabi_dadd+0x4e2>
 800067c:	2a00      	cmp	r2, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_dadd+0x1fe>
 8000680:	e1d0      	b.n	8000a24 <__aeabi_dadd+0x5a0>
 8000682:	464a      	mov	r2, r9
 8000684:	4302      	orrs	r2, r0
 8000686:	d000      	beq.n	800068a <__aeabi_dadd+0x206>
 8000688:	e1e3      	b.n	8000a52 <__aeabi_dadd+0x5ce>
 800068a:	074a      	lsls	r2, r1, #29
 800068c:	08db      	lsrs	r3, r3, #3
 800068e:	4313      	orrs	r3, r2
 8000690:	08c9      	lsrs	r1, r1, #3
 8000692:	e029      	b.n	80006e8 <__aeabi_dadd+0x264>
 8000694:	464a      	mov	r2, r9
 8000696:	4302      	orrs	r2, r0
 8000698:	d100      	bne.n	800069c <__aeabi_dadd+0x218>
 800069a:	e17d      	b.n	8000998 <__aeabi_dadd+0x514>
 800069c:	1e7a      	subs	r2, r7, #1
 800069e:	2f01      	cmp	r7, #1
 80006a0:	d100      	bne.n	80006a4 <__aeabi_dadd+0x220>
 80006a2:	e0e0      	b.n	8000866 <__aeabi_dadd+0x3e2>
 80006a4:	4c52      	ldr	r4, [pc, #328]	; (80007f0 <__aeabi_dadd+0x36c>)
 80006a6:	42a7      	cmp	r7, r4
 80006a8:	d100      	bne.n	80006ac <__aeabi_dadd+0x228>
 80006aa:	e166      	b.n	800097a <__aeabi_dadd+0x4f6>
 80006ac:	0017      	movs	r7, r2
 80006ae:	e7b2      	b.n	8000616 <__aeabi_dadd+0x192>
 80006b0:	0010      	movs	r0, r2
 80006b2:	3b1f      	subs	r3, #31
 80006b4:	40d8      	lsrs	r0, r3
 80006b6:	2920      	cmp	r1, #32
 80006b8:	d003      	beq.n	80006c2 <__aeabi_dadd+0x23e>
 80006ba:	2340      	movs	r3, #64	; 0x40
 80006bc:	1a5b      	subs	r3, r3, r1
 80006be:	409a      	lsls	r2, r3
 80006c0:	4314      	orrs	r4, r2
 80006c2:	1e63      	subs	r3, r4, #1
 80006c4:	419c      	sbcs	r4, r3
 80006c6:	2300      	movs	r3, #0
 80006c8:	2600      	movs	r6, #0
 80006ca:	469a      	mov	sl, r3
 80006cc:	4304      	orrs	r4, r0
 80006ce:	0763      	lsls	r3, r4, #29
 80006d0:	d000      	beq.n	80006d4 <__aeabi_dadd+0x250>
 80006d2:	e755      	b.n	8000580 <__aeabi_dadd+0xfc>
 80006d4:	4652      	mov	r2, sl
 80006d6:	08e3      	lsrs	r3, r4, #3
 80006d8:	0752      	lsls	r2, r2, #29
 80006da:	4313      	orrs	r3, r2
 80006dc:	4652      	mov	r2, sl
 80006de:	0037      	movs	r7, r6
 80006e0:	08d1      	lsrs	r1, r2, #3
 80006e2:	4a43      	ldr	r2, [pc, #268]	; (80007f0 <__aeabi_dadd+0x36c>)
 80006e4:	4297      	cmp	r7, r2
 80006e6:	d01f      	beq.n	8000728 <__aeabi_dadd+0x2a4>
 80006e8:	0309      	lsls	r1, r1, #12
 80006ea:	057a      	lsls	r2, r7, #21
 80006ec:	0b0c      	lsrs	r4, r1, #12
 80006ee:	0d52      	lsrs	r2, r2, #21
 80006f0:	e764      	b.n	80005bc <__aeabi_dadd+0x138>
 80006f2:	4642      	mov	r2, r8
 80006f4:	464c      	mov	r4, r9
 80006f6:	4314      	orrs	r4, r2
 80006f8:	1e62      	subs	r2, r4, #1
 80006fa:	4194      	sbcs	r4, r2
 80006fc:	18e4      	adds	r4, r4, r3
 80006fe:	429c      	cmp	r4, r3
 8000700:	4192      	sbcs	r2, r2
 8000702:	4252      	negs	r2, r2
 8000704:	4692      	mov	sl, r2
 8000706:	448a      	add	sl, r1
 8000708:	4653      	mov	r3, sl
 800070a:	021b      	lsls	r3, r3, #8
 800070c:	d5df      	bpl.n	80006ce <__aeabi_dadd+0x24a>
 800070e:	4b38      	ldr	r3, [pc, #224]	; (80007f0 <__aeabi_dadd+0x36c>)
 8000710:	3601      	adds	r6, #1
 8000712:	429e      	cmp	r6, r3
 8000714:	d000      	beq.n	8000718 <__aeabi_dadd+0x294>
 8000716:	e0b3      	b.n	8000880 <__aeabi_dadd+0x3fc>
 8000718:	0032      	movs	r2, r6
 800071a:	2400      	movs	r4, #0
 800071c:	2300      	movs	r3, #0
 800071e:	e74d      	b.n	80005bc <__aeabi_dadd+0x138>
 8000720:	074a      	lsls	r2, r1, #29
 8000722:	08db      	lsrs	r3, r3, #3
 8000724:	4313      	orrs	r3, r2
 8000726:	08c9      	lsrs	r1, r1, #3
 8000728:	001a      	movs	r2, r3
 800072a:	430a      	orrs	r2, r1
 800072c:	d100      	bne.n	8000730 <__aeabi_dadd+0x2ac>
 800072e:	e200      	b.n	8000b32 <__aeabi_dadd+0x6ae>
 8000730:	2480      	movs	r4, #128	; 0x80
 8000732:	0324      	lsls	r4, r4, #12
 8000734:	430c      	orrs	r4, r1
 8000736:	0324      	lsls	r4, r4, #12
 8000738:	4a2d      	ldr	r2, [pc, #180]	; (80007f0 <__aeabi_dadd+0x36c>)
 800073a:	0b24      	lsrs	r4, r4, #12
 800073c:	e73e      	b.n	80005bc <__aeabi_dadd+0x138>
 800073e:	0020      	movs	r0, r4
 8000740:	f001 fcc2 	bl	80020c8 <__clzsi2>
 8000744:	0003      	movs	r3, r0
 8000746:	3318      	adds	r3, #24
 8000748:	2b1f      	cmp	r3, #31
 800074a:	dc00      	bgt.n	800074e <__aeabi_dadd+0x2ca>
 800074c:	e6f7      	b.n	800053e <__aeabi_dadd+0xba>
 800074e:	0022      	movs	r2, r4
 8000750:	3808      	subs	r0, #8
 8000752:	4082      	lsls	r2, r0
 8000754:	2400      	movs	r4, #0
 8000756:	42b3      	cmp	r3, r6
 8000758:	db00      	blt.n	800075c <__aeabi_dadd+0x2d8>
 800075a:	e6fc      	b.n	8000556 <__aeabi_dadd+0xd2>
 800075c:	1af6      	subs	r6, r6, r3
 800075e:	4b25      	ldr	r3, [pc, #148]	; (80007f4 <__aeabi_dadd+0x370>)
 8000760:	401a      	ands	r2, r3
 8000762:	4692      	mov	sl, r2
 8000764:	e70a      	b.n	800057c <__aeabi_dadd+0xf8>
 8000766:	2f00      	cmp	r7, #0
 8000768:	d02b      	beq.n	80007c2 <__aeabi_dadd+0x33e>
 800076a:	1b97      	subs	r7, r2, r6
 800076c:	2e00      	cmp	r6, #0
 800076e:	d100      	bne.n	8000772 <__aeabi_dadd+0x2ee>
 8000770:	e0b8      	b.n	80008e4 <__aeabi_dadd+0x460>
 8000772:	4c1f      	ldr	r4, [pc, #124]	; (80007f0 <__aeabi_dadd+0x36c>)
 8000774:	42a2      	cmp	r2, r4
 8000776:	d100      	bne.n	800077a <__aeabi_dadd+0x2f6>
 8000778:	e11c      	b.n	80009b4 <__aeabi_dadd+0x530>
 800077a:	2480      	movs	r4, #128	; 0x80
 800077c:	0424      	lsls	r4, r4, #16
 800077e:	4321      	orrs	r1, r4
 8000780:	2f38      	cmp	r7, #56	; 0x38
 8000782:	dd00      	ble.n	8000786 <__aeabi_dadd+0x302>
 8000784:	e11e      	b.n	80009c4 <__aeabi_dadd+0x540>
 8000786:	2f1f      	cmp	r7, #31
 8000788:	dd00      	ble.n	800078c <__aeabi_dadd+0x308>
 800078a:	e19e      	b.n	8000aca <__aeabi_dadd+0x646>
 800078c:	2620      	movs	r6, #32
 800078e:	000c      	movs	r4, r1
 8000790:	1bf6      	subs	r6, r6, r7
 8000792:	0018      	movs	r0, r3
 8000794:	40b3      	lsls	r3, r6
 8000796:	40b4      	lsls	r4, r6
 8000798:	40f8      	lsrs	r0, r7
 800079a:	1e5e      	subs	r6, r3, #1
 800079c:	41b3      	sbcs	r3, r6
 800079e:	40f9      	lsrs	r1, r7
 80007a0:	4304      	orrs	r4, r0
 80007a2:	431c      	orrs	r4, r3
 80007a4:	4489      	add	r9, r1
 80007a6:	4444      	add	r4, r8
 80007a8:	4544      	cmp	r4, r8
 80007aa:	419b      	sbcs	r3, r3
 80007ac:	425b      	negs	r3, r3
 80007ae:	444b      	add	r3, r9
 80007b0:	469a      	mov	sl, r3
 80007b2:	0016      	movs	r6, r2
 80007b4:	e7a8      	b.n	8000708 <__aeabi_dadd+0x284>
 80007b6:	4642      	mov	r2, r8
 80007b8:	464c      	mov	r4, r9
 80007ba:	4314      	orrs	r4, r2
 80007bc:	1e62      	subs	r2, r4, #1
 80007be:	4194      	sbcs	r4, r2
 80007c0:	e6a6      	b.n	8000510 <__aeabi_dadd+0x8c>
 80007c2:	4c0d      	ldr	r4, [pc, #52]	; (80007f8 <__aeabi_dadd+0x374>)
 80007c4:	1c72      	adds	r2, r6, #1
 80007c6:	4222      	tst	r2, r4
 80007c8:	d000      	beq.n	80007cc <__aeabi_dadd+0x348>
 80007ca:	e0a8      	b.n	800091e <__aeabi_dadd+0x49a>
 80007cc:	000a      	movs	r2, r1
 80007ce:	431a      	orrs	r2, r3
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d000      	beq.n	80007d6 <__aeabi_dadd+0x352>
 80007d4:	e10a      	b.n	80009ec <__aeabi_dadd+0x568>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d100      	bne.n	80007dc <__aeabi_dadd+0x358>
 80007da:	e15e      	b.n	8000a9a <__aeabi_dadd+0x616>
 80007dc:	464a      	mov	r2, r9
 80007de:	4302      	orrs	r2, r0
 80007e0:	d000      	beq.n	80007e4 <__aeabi_dadd+0x360>
 80007e2:	e161      	b.n	8000aa8 <__aeabi_dadd+0x624>
 80007e4:	074a      	lsls	r2, r1, #29
 80007e6:	08db      	lsrs	r3, r3, #3
 80007e8:	4313      	orrs	r3, r2
 80007ea:	08c9      	lsrs	r1, r1, #3
 80007ec:	e77c      	b.n	80006e8 <__aeabi_dadd+0x264>
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	000007ff 	.word	0x000007ff
 80007f4:	ff7fffff 	.word	0xff7fffff
 80007f8:	000007fe 	.word	0x000007fe
 80007fc:	4ccf      	ldr	r4, [pc, #828]	; (8000b3c <__aeabi_dadd+0x6b8>)
 80007fe:	42a2      	cmp	r2, r4
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x380>
 8000802:	e0ce      	b.n	80009a2 <__aeabi_dadd+0x51e>
 8000804:	2480      	movs	r4, #128	; 0x80
 8000806:	0424      	lsls	r4, r4, #16
 8000808:	4321      	orrs	r1, r4
 800080a:	2f38      	cmp	r7, #56	; 0x38
 800080c:	dc5b      	bgt.n	80008c6 <__aeabi_dadd+0x442>
 800080e:	2f1f      	cmp	r7, #31
 8000810:	dd00      	ble.n	8000814 <__aeabi_dadd+0x390>
 8000812:	e0dc      	b.n	80009ce <__aeabi_dadd+0x54a>
 8000814:	2520      	movs	r5, #32
 8000816:	000c      	movs	r4, r1
 8000818:	1bed      	subs	r5, r5, r7
 800081a:	001e      	movs	r6, r3
 800081c:	40ab      	lsls	r3, r5
 800081e:	40ac      	lsls	r4, r5
 8000820:	40fe      	lsrs	r6, r7
 8000822:	1e5d      	subs	r5, r3, #1
 8000824:	41ab      	sbcs	r3, r5
 8000826:	4334      	orrs	r4, r6
 8000828:	40f9      	lsrs	r1, r7
 800082a:	431c      	orrs	r4, r3
 800082c:	464b      	mov	r3, r9
 800082e:	1a5b      	subs	r3, r3, r1
 8000830:	4699      	mov	r9, r3
 8000832:	e04c      	b.n	80008ce <__aeabi_dadd+0x44a>
 8000834:	464a      	mov	r2, r9
 8000836:	1a1c      	subs	r4, r3, r0
 8000838:	1a88      	subs	r0, r1, r2
 800083a:	42a3      	cmp	r3, r4
 800083c:	4192      	sbcs	r2, r2
 800083e:	4252      	negs	r2, r2
 8000840:	4692      	mov	sl, r2
 8000842:	0002      	movs	r2, r0
 8000844:	4650      	mov	r0, sl
 8000846:	1a12      	subs	r2, r2, r0
 8000848:	4692      	mov	sl, r2
 800084a:	0212      	lsls	r2, r2, #8
 800084c:	d478      	bmi.n	8000940 <__aeabi_dadd+0x4bc>
 800084e:	4653      	mov	r3, sl
 8000850:	4323      	orrs	r3, r4
 8000852:	d000      	beq.n	8000856 <__aeabi_dadd+0x3d2>
 8000854:	e66a      	b.n	800052c <__aeabi_dadd+0xa8>
 8000856:	2100      	movs	r1, #0
 8000858:	2500      	movs	r5, #0
 800085a:	e745      	b.n	80006e8 <__aeabi_dadd+0x264>
 800085c:	074a      	lsls	r2, r1, #29
 800085e:	08db      	lsrs	r3, r3, #3
 8000860:	4313      	orrs	r3, r2
 8000862:	08c9      	lsrs	r1, r1, #3
 8000864:	e73d      	b.n	80006e2 <__aeabi_dadd+0x25e>
 8000866:	181c      	adds	r4, r3, r0
 8000868:	429c      	cmp	r4, r3
 800086a:	419b      	sbcs	r3, r3
 800086c:	4449      	add	r1, r9
 800086e:	468a      	mov	sl, r1
 8000870:	425b      	negs	r3, r3
 8000872:	449a      	add	sl, r3
 8000874:	4653      	mov	r3, sl
 8000876:	2601      	movs	r6, #1
 8000878:	021b      	lsls	r3, r3, #8
 800087a:	d400      	bmi.n	800087e <__aeabi_dadd+0x3fa>
 800087c:	e727      	b.n	80006ce <__aeabi_dadd+0x24a>
 800087e:	2602      	movs	r6, #2
 8000880:	4652      	mov	r2, sl
 8000882:	4baf      	ldr	r3, [pc, #700]	; (8000b40 <__aeabi_dadd+0x6bc>)
 8000884:	2101      	movs	r1, #1
 8000886:	401a      	ands	r2, r3
 8000888:	0013      	movs	r3, r2
 800088a:	4021      	ands	r1, r4
 800088c:	0862      	lsrs	r2, r4, #1
 800088e:	430a      	orrs	r2, r1
 8000890:	07dc      	lsls	r4, r3, #31
 8000892:	085b      	lsrs	r3, r3, #1
 8000894:	469a      	mov	sl, r3
 8000896:	4314      	orrs	r4, r2
 8000898:	e670      	b.n	800057c <__aeabi_dadd+0xf8>
 800089a:	003a      	movs	r2, r7
 800089c:	464c      	mov	r4, r9
 800089e:	3a20      	subs	r2, #32
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	46a4      	mov	ip, r4
 80008a4:	2f20      	cmp	r7, #32
 80008a6:	d007      	beq.n	80008b8 <__aeabi_dadd+0x434>
 80008a8:	2240      	movs	r2, #64	; 0x40
 80008aa:	4648      	mov	r0, r9
 80008ac:	1bd2      	subs	r2, r2, r7
 80008ae:	4090      	lsls	r0, r2
 80008b0:	0002      	movs	r2, r0
 80008b2:	4640      	mov	r0, r8
 80008b4:	4310      	orrs	r0, r2
 80008b6:	4680      	mov	r8, r0
 80008b8:	4640      	mov	r0, r8
 80008ba:	1e42      	subs	r2, r0, #1
 80008bc:	4190      	sbcs	r0, r2
 80008be:	4662      	mov	r2, ip
 80008c0:	0004      	movs	r4, r0
 80008c2:	4314      	orrs	r4, r2
 80008c4:	e624      	b.n	8000510 <__aeabi_dadd+0x8c>
 80008c6:	4319      	orrs	r1, r3
 80008c8:	000c      	movs	r4, r1
 80008ca:	1e63      	subs	r3, r4, #1
 80008cc:	419c      	sbcs	r4, r3
 80008ce:	4643      	mov	r3, r8
 80008d0:	1b1c      	subs	r4, r3, r4
 80008d2:	45a0      	cmp	r8, r4
 80008d4:	419b      	sbcs	r3, r3
 80008d6:	4649      	mov	r1, r9
 80008d8:	425b      	negs	r3, r3
 80008da:	1acb      	subs	r3, r1, r3
 80008dc:	469a      	mov	sl, r3
 80008de:	4665      	mov	r5, ip
 80008e0:	0016      	movs	r6, r2
 80008e2:	e61b      	b.n	800051c <__aeabi_dadd+0x98>
 80008e4:	000c      	movs	r4, r1
 80008e6:	431c      	orrs	r4, r3
 80008e8:	d100      	bne.n	80008ec <__aeabi_dadd+0x468>
 80008ea:	e0c7      	b.n	8000a7c <__aeabi_dadd+0x5f8>
 80008ec:	1e7c      	subs	r4, r7, #1
 80008ee:	2f01      	cmp	r7, #1
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dadd+0x470>
 80008f2:	e0f9      	b.n	8000ae8 <__aeabi_dadd+0x664>
 80008f4:	4e91      	ldr	r6, [pc, #580]	; (8000b3c <__aeabi_dadd+0x6b8>)
 80008f6:	42b7      	cmp	r7, r6
 80008f8:	d05c      	beq.n	80009b4 <__aeabi_dadd+0x530>
 80008fa:	0027      	movs	r7, r4
 80008fc:	e740      	b.n	8000780 <__aeabi_dadd+0x2fc>
 80008fe:	2220      	movs	r2, #32
 8000900:	464c      	mov	r4, r9
 8000902:	4640      	mov	r0, r8
 8000904:	1bd2      	subs	r2, r2, r7
 8000906:	4094      	lsls	r4, r2
 8000908:	40f8      	lsrs	r0, r7
 800090a:	4304      	orrs	r4, r0
 800090c:	4640      	mov	r0, r8
 800090e:	4090      	lsls	r0, r2
 8000910:	1e42      	subs	r2, r0, #1
 8000912:	4190      	sbcs	r0, r2
 8000914:	464a      	mov	r2, r9
 8000916:	40fa      	lsrs	r2, r7
 8000918:	4304      	orrs	r4, r0
 800091a:	1889      	adds	r1, r1, r2
 800091c:	e6ee      	b.n	80006fc <__aeabi_dadd+0x278>
 800091e:	4c87      	ldr	r4, [pc, #540]	; (8000b3c <__aeabi_dadd+0x6b8>)
 8000920:	42a2      	cmp	r2, r4
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x4a2>
 8000924:	e6f9      	b.n	800071a <__aeabi_dadd+0x296>
 8000926:	1818      	adds	r0, r3, r0
 8000928:	4298      	cmp	r0, r3
 800092a:	419b      	sbcs	r3, r3
 800092c:	4449      	add	r1, r9
 800092e:	425b      	negs	r3, r3
 8000930:	18cb      	adds	r3, r1, r3
 8000932:	07dc      	lsls	r4, r3, #31
 8000934:	0840      	lsrs	r0, r0, #1
 8000936:	085b      	lsrs	r3, r3, #1
 8000938:	469a      	mov	sl, r3
 800093a:	0016      	movs	r6, r2
 800093c:	4304      	orrs	r4, r0
 800093e:	e6c6      	b.n	80006ce <__aeabi_dadd+0x24a>
 8000940:	4642      	mov	r2, r8
 8000942:	1ad4      	subs	r4, r2, r3
 8000944:	45a0      	cmp	r8, r4
 8000946:	4180      	sbcs	r0, r0
 8000948:	464b      	mov	r3, r9
 800094a:	4240      	negs	r0, r0
 800094c:	1a59      	subs	r1, r3, r1
 800094e:	1a0b      	subs	r3, r1, r0
 8000950:	469a      	mov	sl, r3
 8000952:	4665      	mov	r5, ip
 8000954:	e5ea      	b.n	800052c <__aeabi_dadd+0xa8>
 8000956:	464b      	mov	r3, r9
 8000958:	464a      	mov	r2, r9
 800095a:	08c0      	lsrs	r0, r0, #3
 800095c:	075b      	lsls	r3, r3, #29
 800095e:	4665      	mov	r5, ip
 8000960:	4303      	orrs	r3, r0
 8000962:	08d1      	lsrs	r1, r2, #3
 8000964:	e6bd      	b.n	80006e2 <__aeabi_dadd+0x25e>
 8000966:	2a00      	cmp	r2, #0
 8000968:	d000      	beq.n	800096c <__aeabi_dadd+0x4e8>
 800096a:	e08e      	b.n	8000a8a <__aeabi_dadd+0x606>
 800096c:	464b      	mov	r3, r9
 800096e:	4303      	orrs	r3, r0
 8000970:	d117      	bne.n	80009a2 <__aeabi_dadd+0x51e>
 8000972:	2180      	movs	r1, #128	; 0x80
 8000974:	2500      	movs	r5, #0
 8000976:	0309      	lsls	r1, r1, #12
 8000978:	e6da      	b.n	8000730 <__aeabi_dadd+0x2ac>
 800097a:	074a      	lsls	r2, r1, #29
 800097c:	08db      	lsrs	r3, r3, #3
 800097e:	4313      	orrs	r3, r2
 8000980:	08c9      	lsrs	r1, r1, #3
 8000982:	e6d1      	b.n	8000728 <__aeabi_dadd+0x2a4>
 8000984:	1a1c      	subs	r4, r3, r0
 8000986:	464a      	mov	r2, r9
 8000988:	42a3      	cmp	r3, r4
 800098a:	419b      	sbcs	r3, r3
 800098c:	1a89      	subs	r1, r1, r2
 800098e:	425b      	negs	r3, r3
 8000990:	1acb      	subs	r3, r1, r3
 8000992:	469a      	mov	sl, r3
 8000994:	2601      	movs	r6, #1
 8000996:	e5c1      	b.n	800051c <__aeabi_dadd+0x98>
 8000998:	074a      	lsls	r2, r1, #29
 800099a:	08db      	lsrs	r3, r3, #3
 800099c:	4313      	orrs	r3, r2
 800099e:	08c9      	lsrs	r1, r1, #3
 80009a0:	e69f      	b.n	80006e2 <__aeabi_dadd+0x25e>
 80009a2:	4643      	mov	r3, r8
 80009a4:	08d8      	lsrs	r0, r3, #3
 80009a6:	464b      	mov	r3, r9
 80009a8:	464a      	mov	r2, r9
 80009aa:	075b      	lsls	r3, r3, #29
 80009ac:	4665      	mov	r5, ip
 80009ae:	4303      	orrs	r3, r0
 80009b0:	08d1      	lsrs	r1, r2, #3
 80009b2:	e6b9      	b.n	8000728 <__aeabi_dadd+0x2a4>
 80009b4:	4643      	mov	r3, r8
 80009b6:	08d8      	lsrs	r0, r3, #3
 80009b8:	464b      	mov	r3, r9
 80009ba:	464a      	mov	r2, r9
 80009bc:	075b      	lsls	r3, r3, #29
 80009be:	4303      	orrs	r3, r0
 80009c0:	08d1      	lsrs	r1, r2, #3
 80009c2:	e6b1      	b.n	8000728 <__aeabi_dadd+0x2a4>
 80009c4:	4319      	orrs	r1, r3
 80009c6:	000c      	movs	r4, r1
 80009c8:	1e63      	subs	r3, r4, #1
 80009ca:	419c      	sbcs	r4, r3
 80009cc:	e6eb      	b.n	80007a6 <__aeabi_dadd+0x322>
 80009ce:	003c      	movs	r4, r7
 80009d0:	000d      	movs	r5, r1
 80009d2:	3c20      	subs	r4, #32
 80009d4:	40e5      	lsrs	r5, r4
 80009d6:	2f20      	cmp	r7, #32
 80009d8:	d003      	beq.n	80009e2 <__aeabi_dadd+0x55e>
 80009da:	2440      	movs	r4, #64	; 0x40
 80009dc:	1be4      	subs	r4, r4, r7
 80009de:	40a1      	lsls	r1, r4
 80009e0:	430b      	orrs	r3, r1
 80009e2:	001c      	movs	r4, r3
 80009e4:	1e63      	subs	r3, r4, #1
 80009e6:	419c      	sbcs	r4, r3
 80009e8:	432c      	orrs	r4, r5
 80009ea:	e770      	b.n	80008ce <__aeabi_dadd+0x44a>
 80009ec:	2a00      	cmp	r2, #0
 80009ee:	d0e1      	beq.n	80009b4 <__aeabi_dadd+0x530>
 80009f0:	464a      	mov	r2, r9
 80009f2:	4302      	orrs	r2, r0
 80009f4:	d0c1      	beq.n	800097a <__aeabi_dadd+0x4f6>
 80009f6:	074a      	lsls	r2, r1, #29
 80009f8:	08db      	lsrs	r3, r3, #3
 80009fa:	4313      	orrs	r3, r2
 80009fc:	2280      	movs	r2, #128	; 0x80
 80009fe:	08c9      	lsrs	r1, r1, #3
 8000a00:	0312      	lsls	r2, r2, #12
 8000a02:	4211      	tst	r1, r2
 8000a04:	d008      	beq.n	8000a18 <__aeabi_dadd+0x594>
 8000a06:	4648      	mov	r0, r9
 8000a08:	08c4      	lsrs	r4, r0, #3
 8000a0a:	4214      	tst	r4, r2
 8000a0c:	d104      	bne.n	8000a18 <__aeabi_dadd+0x594>
 8000a0e:	4643      	mov	r3, r8
 8000a10:	0021      	movs	r1, r4
 8000a12:	08db      	lsrs	r3, r3, #3
 8000a14:	0742      	lsls	r2, r0, #29
 8000a16:	4313      	orrs	r3, r2
 8000a18:	0f5a      	lsrs	r2, r3, #29
 8000a1a:	00db      	lsls	r3, r3, #3
 8000a1c:	0752      	lsls	r2, r2, #29
 8000a1e:	08db      	lsrs	r3, r3, #3
 8000a20:	4313      	orrs	r3, r2
 8000a22:	e681      	b.n	8000728 <__aeabi_dadd+0x2a4>
 8000a24:	464b      	mov	r3, r9
 8000a26:	4303      	orrs	r3, r0
 8000a28:	d100      	bne.n	8000a2c <__aeabi_dadd+0x5a8>
 8000a2a:	e714      	b.n	8000856 <__aeabi_dadd+0x3d2>
 8000a2c:	464b      	mov	r3, r9
 8000a2e:	464a      	mov	r2, r9
 8000a30:	08c0      	lsrs	r0, r0, #3
 8000a32:	075b      	lsls	r3, r3, #29
 8000a34:	4665      	mov	r5, ip
 8000a36:	4303      	orrs	r3, r0
 8000a38:	08d1      	lsrs	r1, r2, #3
 8000a3a:	e655      	b.n	80006e8 <__aeabi_dadd+0x264>
 8000a3c:	1ac4      	subs	r4, r0, r3
 8000a3e:	45a0      	cmp	r8, r4
 8000a40:	4180      	sbcs	r0, r0
 8000a42:	464b      	mov	r3, r9
 8000a44:	4240      	negs	r0, r0
 8000a46:	1a59      	subs	r1, r3, r1
 8000a48:	1a0b      	subs	r3, r1, r0
 8000a4a:	469a      	mov	sl, r3
 8000a4c:	4665      	mov	r5, ip
 8000a4e:	2601      	movs	r6, #1
 8000a50:	e564      	b.n	800051c <__aeabi_dadd+0x98>
 8000a52:	1a1c      	subs	r4, r3, r0
 8000a54:	464a      	mov	r2, r9
 8000a56:	42a3      	cmp	r3, r4
 8000a58:	4180      	sbcs	r0, r0
 8000a5a:	1a8a      	subs	r2, r1, r2
 8000a5c:	4240      	negs	r0, r0
 8000a5e:	1a12      	subs	r2, r2, r0
 8000a60:	4692      	mov	sl, r2
 8000a62:	0212      	lsls	r2, r2, #8
 8000a64:	d549      	bpl.n	8000afa <__aeabi_dadd+0x676>
 8000a66:	4642      	mov	r2, r8
 8000a68:	1ad4      	subs	r4, r2, r3
 8000a6a:	45a0      	cmp	r8, r4
 8000a6c:	4180      	sbcs	r0, r0
 8000a6e:	464b      	mov	r3, r9
 8000a70:	4240      	negs	r0, r0
 8000a72:	1a59      	subs	r1, r3, r1
 8000a74:	1a0b      	subs	r3, r1, r0
 8000a76:	469a      	mov	sl, r3
 8000a78:	4665      	mov	r5, ip
 8000a7a:	e57f      	b.n	800057c <__aeabi_dadd+0xf8>
 8000a7c:	464b      	mov	r3, r9
 8000a7e:	464a      	mov	r2, r9
 8000a80:	08c0      	lsrs	r0, r0, #3
 8000a82:	075b      	lsls	r3, r3, #29
 8000a84:	4303      	orrs	r3, r0
 8000a86:	08d1      	lsrs	r1, r2, #3
 8000a88:	e62b      	b.n	80006e2 <__aeabi_dadd+0x25e>
 8000a8a:	464a      	mov	r2, r9
 8000a8c:	08db      	lsrs	r3, r3, #3
 8000a8e:	4302      	orrs	r2, r0
 8000a90:	d138      	bne.n	8000b04 <__aeabi_dadd+0x680>
 8000a92:	074a      	lsls	r2, r1, #29
 8000a94:	4313      	orrs	r3, r2
 8000a96:	08c9      	lsrs	r1, r1, #3
 8000a98:	e646      	b.n	8000728 <__aeabi_dadd+0x2a4>
 8000a9a:	464b      	mov	r3, r9
 8000a9c:	464a      	mov	r2, r9
 8000a9e:	08c0      	lsrs	r0, r0, #3
 8000aa0:	075b      	lsls	r3, r3, #29
 8000aa2:	4303      	orrs	r3, r0
 8000aa4:	08d1      	lsrs	r1, r2, #3
 8000aa6:	e61f      	b.n	80006e8 <__aeabi_dadd+0x264>
 8000aa8:	181c      	adds	r4, r3, r0
 8000aaa:	429c      	cmp	r4, r3
 8000aac:	419b      	sbcs	r3, r3
 8000aae:	4449      	add	r1, r9
 8000ab0:	468a      	mov	sl, r1
 8000ab2:	425b      	negs	r3, r3
 8000ab4:	449a      	add	sl, r3
 8000ab6:	4653      	mov	r3, sl
 8000ab8:	021b      	lsls	r3, r3, #8
 8000aba:	d400      	bmi.n	8000abe <__aeabi_dadd+0x63a>
 8000abc:	e607      	b.n	80006ce <__aeabi_dadd+0x24a>
 8000abe:	4652      	mov	r2, sl
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <__aeabi_dadd+0x6bc>)
 8000ac2:	2601      	movs	r6, #1
 8000ac4:	401a      	ands	r2, r3
 8000ac6:	4692      	mov	sl, r2
 8000ac8:	e601      	b.n	80006ce <__aeabi_dadd+0x24a>
 8000aca:	003c      	movs	r4, r7
 8000acc:	000e      	movs	r6, r1
 8000ace:	3c20      	subs	r4, #32
 8000ad0:	40e6      	lsrs	r6, r4
 8000ad2:	2f20      	cmp	r7, #32
 8000ad4:	d003      	beq.n	8000ade <__aeabi_dadd+0x65a>
 8000ad6:	2440      	movs	r4, #64	; 0x40
 8000ad8:	1be4      	subs	r4, r4, r7
 8000ada:	40a1      	lsls	r1, r4
 8000adc:	430b      	orrs	r3, r1
 8000ade:	001c      	movs	r4, r3
 8000ae0:	1e63      	subs	r3, r4, #1
 8000ae2:	419c      	sbcs	r4, r3
 8000ae4:	4334      	orrs	r4, r6
 8000ae6:	e65e      	b.n	80007a6 <__aeabi_dadd+0x322>
 8000ae8:	4443      	add	r3, r8
 8000aea:	4283      	cmp	r3, r0
 8000aec:	4180      	sbcs	r0, r0
 8000aee:	4449      	add	r1, r9
 8000af0:	468a      	mov	sl, r1
 8000af2:	4240      	negs	r0, r0
 8000af4:	001c      	movs	r4, r3
 8000af6:	4482      	add	sl, r0
 8000af8:	e6bc      	b.n	8000874 <__aeabi_dadd+0x3f0>
 8000afa:	4653      	mov	r3, sl
 8000afc:	4323      	orrs	r3, r4
 8000afe:	d100      	bne.n	8000b02 <__aeabi_dadd+0x67e>
 8000b00:	e6a9      	b.n	8000856 <__aeabi_dadd+0x3d2>
 8000b02:	e5e4      	b.n	80006ce <__aeabi_dadd+0x24a>
 8000b04:	074a      	lsls	r2, r1, #29
 8000b06:	4313      	orrs	r3, r2
 8000b08:	2280      	movs	r2, #128	; 0x80
 8000b0a:	08c9      	lsrs	r1, r1, #3
 8000b0c:	0312      	lsls	r2, r2, #12
 8000b0e:	4211      	tst	r1, r2
 8000b10:	d009      	beq.n	8000b26 <__aeabi_dadd+0x6a2>
 8000b12:	4648      	mov	r0, r9
 8000b14:	08c4      	lsrs	r4, r0, #3
 8000b16:	4214      	tst	r4, r2
 8000b18:	d105      	bne.n	8000b26 <__aeabi_dadd+0x6a2>
 8000b1a:	4643      	mov	r3, r8
 8000b1c:	4665      	mov	r5, ip
 8000b1e:	0021      	movs	r1, r4
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	0742      	lsls	r2, r0, #29
 8000b24:	4313      	orrs	r3, r2
 8000b26:	0f5a      	lsrs	r2, r3, #29
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	08db      	lsrs	r3, r3, #3
 8000b2c:	0752      	lsls	r2, r2, #29
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	e5fa      	b.n	8000728 <__aeabi_dadd+0x2a4>
 8000b32:	2300      	movs	r3, #0
 8000b34:	4a01      	ldr	r2, [pc, #4]	; (8000b3c <__aeabi_dadd+0x6b8>)
 8000b36:	001c      	movs	r4, r3
 8000b38:	e540      	b.n	80005bc <__aeabi_dadd+0x138>
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	000007ff 	.word	0x000007ff
 8000b40:	ff7fffff 	.word	0xff7fffff

08000b44 <__aeabi_ddiv>:
 8000b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b46:	4657      	mov	r7, sl
 8000b48:	464e      	mov	r6, r9
 8000b4a:	4645      	mov	r5, r8
 8000b4c:	46de      	mov	lr, fp
 8000b4e:	b5e0      	push	{r5, r6, r7, lr}
 8000b50:	030c      	lsls	r4, r1, #12
 8000b52:	001f      	movs	r7, r3
 8000b54:	004b      	lsls	r3, r1, #1
 8000b56:	4681      	mov	r9, r0
 8000b58:	4692      	mov	sl, r2
 8000b5a:	0005      	movs	r5, r0
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	0b24      	lsrs	r4, r4, #12
 8000b60:	0d5b      	lsrs	r3, r3, #21
 8000b62:	0fce      	lsrs	r6, r1, #31
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d100      	bne.n	8000b6a <__aeabi_ddiv+0x26>
 8000b68:	e152      	b.n	8000e10 <__aeabi_ddiv+0x2cc>
 8000b6a:	4ad2      	ldr	r2, [pc, #840]	; (8000eb4 <__aeabi_ddiv+0x370>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_ddiv+0x2e>
 8000b70:	e16e      	b.n	8000e50 <__aeabi_ddiv+0x30c>
 8000b72:	0f42      	lsrs	r2, r0, #29
 8000b74:	00e4      	lsls	r4, r4, #3
 8000b76:	4314      	orrs	r4, r2
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	0412      	lsls	r2, r2, #16
 8000b7c:	4322      	orrs	r2, r4
 8000b7e:	4690      	mov	r8, r2
 8000b80:	4acd      	ldr	r2, [pc, #820]	; (8000eb8 <__aeabi_ddiv+0x374>)
 8000b82:	00c5      	lsls	r5, r0, #3
 8000b84:	4693      	mov	fp, r2
 8000b86:	449b      	add	fp, r3
 8000b88:	2300      	movs	r3, #0
 8000b8a:	4699      	mov	r9, r3
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	033c      	lsls	r4, r7, #12
 8000b90:	007b      	lsls	r3, r7, #1
 8000b92:	4650      	mov	r0, sl
 8000b94:	0b24      	lsrs	r4, r4, #12
 8000b96:	0d5b      	lsrs	r3, r3, #21
 8000b98:	0fff      	lsrs	r7, r7, #31
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_ddiv+0x5c>
 8000b9e:	e11a      	b.n	8000dd6 <__aeabi_ddiv+0x292>
 8000ba0:	4ac4      	ldr	r2, [pc, #784]	; (8000eb4 <__aeabi_ddiv+0x370>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_ddiv+0x64>
 8000ba6:	e15e      	b.n	8000e66 <__aeabi_ddiv+0x322>
 8000ba8:	0f42      	lsrs	r2, r0, #29
 8000baa:	00e4      	lsls	r4, r4, #3
 8000bac:	4322      	orrs	r2, r4
 8000bae:	2480      	movs	r4, #128	; 0x80
 8000bb0:	0424      	lsls	r4, r4, #16
 8000bb2:	4314      	orrs	r4, r2
 8000bb4:	4ac0      	ldr	r2, [pc, #768]	; (8000eb8 <__aeabi_ddiv+0x374>)
 8000bb6:	00c1      	lsls	r1, r0, #3
 8000bb8:	4694      	mov	ip, r2
 8000bba:	465a      	mov	r2, fp
 8000bbc:	4463      	add	r3, ip
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	469b      	mov	fp, r3
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	0033      	movs	r3, r6
 8000bc6:	407b      	eors	r3, r7
 8000bc8:	469a      	mov	sl, r3
 8000bca:	464b      	mov	r3, r9
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d827      	bhi.n	8000c20 <__aeabi_ddiv+0xdc>
 8000bd0:	4aba      	ldr	r2, [pc, #744]	; (8000ebc <__aeabi_ddiv+0x378>)
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	58d3      	ldr	r3, [r2, r3]
 8000bd6:	469f      	mov	pc, r3
 8000bd8:	46b2      	mov	sl, r6
 8000bda:	9b00      	ldr	r3, [sp, #0]
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d016      	beq.n	8000c0e <__aeabi_ddiv+0xca>
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d100      	bne.n	8000be6 <__aeabi_ddiv+0xa2>
 8000be4:	e287      	b.n	80010f6 <__aeabi_ddiv+0x5b2>
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d000      	beq.n	8000bec <__aeabi_ddiv+0xa8>
 8000bea:	e0d5      	b.n	8000d98 <__aeabi_ddiv+0x254>
 8000bec:	2300      	movs	r3, #0
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2500      	movs	r5, #0
 8000bf2:	051b      	lsls	r3, r3, #20
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	4652      	mov	r2, sl
 8000bf8:	07d2      	lsls	r2, r2, #31
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	0028      	movs	r0, r5
 8000bfe:	0019      	movs	r1, r3
 8000c00:	b005      	add	sp, #20
 8000c02:	bcf0      	pop	{r4, r5, r6, r7}
 8000c04:	46bb      	mov	fp, r7
 8000c06:	46b2      	mov	sl, r6
 8000c08:	46a9      	mov	r9, r5
 8000c0a:	46a0      	mov	r8, r4
 8000c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2500      	movs	r5, #0
 8000c12:	4ba8      	ldr	r3, [pc, #672]	; (8000eb4 <__aeabi_ddiv+0x370>)
 8000c14:	e7ed      	b.n	8000bf2 <__aeabi_ddiv+0xae>
 8000c16:	46ba      	mov	sl, r7
 8000c18:	46a0      	mov	r8, r4
 8000c1a:	000d      	movs	r5, r1
 8000c1c:	9000      	str	r0, [sp, #0]
 8000c1e:	e7dc      	b.n	8000bda <__aeabi_ddiv+0x96>
 8000c20:	4544      	cmp	r4, r8
 8000c22:	d200      	bcs.n	8000c26 <__aeabi_ddiv+0xe2>
 8000c24:	e1c4      	b.n	8000fb0 <__aeabi_ddiv+0x46c>
 8000c26:	d100      	bne.n	8000c2a <__aeabi_ddiv+0xe6>
 8000c28:	e1bf      	b.n	8000faa <__aeabi_ddiv+0x466>
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	425b      	negs	r3, r3
 8000c2e:	469c      	mov	ip, r3
 8000c30:	002e      	movs	r6, r5
 8000c32:	4640      	mov	r0, r8
 8000c34:	2500      	movs	r5, #0
 8000c36:	44e3      	add	fp, ip
 8000c38:	0223      	lsls	r3, r4, #8
 8000c3a:	0e0c      	lsrs	r4, r1, #24
 8000c3c:	431c      	orrs	r4, r3
 8000c3e:	0c1b      	lsrs	r3, r3, #16
 8000c40:	4699      	mov	r9, r3
 8000c42:	0423      	lsls	r3, r4, #16
 8000c44:	020a      	lsls	r2, r1, #8
 8000c46:	0c1f      	lsrs	r7, r3, #16
 8000c48:	4649      	mov	r1, r9
 8000c4a:	9200      	str	r2, [sp, #0]
 8000c4c:	9701      	str	r7, [sp, #4]
 8000c4e:	f7ff faeb 	bl	8000228 <__aeabi_uidivmod>
 8000c52:	0002      	movs	r2, r0
 8000c54:	437a      	muls	r2, r7
 8000c56:	040b      	lsls	r3, r1, #16
 8000c58:	0c31      	lsrs	r1, r6, #16
 8000c5a:	4680      	mov	r8, r0
 8000c5c:	4319      	orrs	r1, r3
 8000c5e:	428a      	cmp	r2, r1
 8000c60:	d907      	bls.n	8000c72 <__aeabi_ddiv+0x12e>
 8000c62:	2301      	movs	r3, #1
 8000c64:	425b      	negs	r3, r3
 8000c66:	469c      	mov	ip, r3
 8000c68:	1909      	adds	r1, r1, r4
 8000c6a:	44e0      	add	r8, ip
 8000c6c:	428c      	cmp	r4, r1
 8000c6e:	d800      	bhi.n	8000c72 <__aeabi_ddiv+0x12e>
 8000c70:	e201      	b.n	8001076 <__aeabi_ddiv+0x532>
 8000c72:	1a88      	subs	r0, r1, r2
 8000c74:	4649      	mov	r1, r9
 8000c76:	f7ff fad7 	bl	8000228 <__aeabi_uidivmod>
 8000c7a:	9a01      	ldr	r2, [sp, #4]
 8000c7c:	0436      	lsls	r6, r6, #16
 8000c7e:	4342      	muls	r2, r0
 8000c80:	0409      	lsls	r1, r1, #16
 8000c82:	0c36      	lsrs	r6, r6, #16
 8000c84:	0003      	movs	r3, r0
 8000c86:	430e      	orrs	r6, r1
 8000c88:	42b2      	cmp	r2, r6
 8000c8a:	d904      	bls.n	8000c96 <__aeabi_ddiv+0x152>
 8000c8c:	1936      	adds	r6, r6, r4
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	42b4      	cmp	r4, r6
 8000c92:	d800      	bhi.n	8000c96 <__aeabi_ddiv+0x152>
 8000c94:	e1e9      	b.n	800106a <__aeabi_ddiv+0x526>
 8000c96:	1ab0      	subs	r0, r6, r2
 8000c98:	4642      	mov	r2, r8
 8000c9a:	9e00      	ldr	r6, [sp, #0]
 8000c9c:	0412      	lsls	r2, r2, #16
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	0c33      	lsrs	r3, r6, #16
 8000ca2:	001f      	movs	r7, r3
 8000ca4:	0c11      	lsrs	r1, r2, #16
 8000ca6:	4690      	mov	r8, r2
 8000ca8:	9302      	str	r3, [sp, #8]
 8000caa:	0413      	lsls	r3, r2, #16
 8000cac:	0432      	lsls	r2, r6, #16
 8000cae:	0c16      	lsrs	r6, r2, #16
 8000cb0:	0032      	movs	r2, r6
 8000cb2:	0c1b      	lsrs	r3, r3, #16
 8000cb4:	435a      	muls	r2, r3
 8000cb6:	9603      	str	r6, [sp, #12]
 8000cb8:	437b      	muls	r3, r7
 8000cba:	434e      	muls	r6, r1
 8000cbc:	4379      	muls	r1, r7
 8000cbe:	0c17      	lsrs	r7, r2, #16
 8000cc0:	46bc      	mov	ip, r7
 8000cc2:	199b      	adds	r3, r3, r6
 8000cc4:	4463      	add	r3, ip
 8000cc6:	429e      	cmp	r6, r3
 8000cc8:	d903      	bls.n	8000cd2 <__aeabi_ddiv+0x18e>
 8000cca:	2680      	movs	r6, #128	; 0x80
 8000ccc:	0276      	lsls	r6, r6, #9
 8000cce:	46b4      	mov	ip, r6
 8000cd0:	4461      	add	r1, ip
 8000cd2:	0c1e      	lsrs	r6, r3, #16
 8000cd4:	1871      	adds	r1, r6, r1
 8000cd6:	0416      	lsls	r6, r2, #16
 8000cd8:	041b      	lsls	r3, r3, #16
 8000cda:	0c36      	lsrs	r6, r6, #16
 8000cdc:	199e      	adds	r6, r3, r6
 8000cde:	4288      	cmp	r0, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__aeabi_ddiv+0x1a4>
 8000ce2:	d112      	bne.n	8000d0a <__aeabi_ddiv+0x1c6>
 8000ce4:	42b5      	cmp	r5, r6
 8000ce6:	d210      	bcs.n	8000d0a <__aeabi_ddiv+0x1c6>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	1e5a      	subs	r2, r3, #1
 8000cec:	9b00      	ldr	r3, [sp, #0]
 8000cee:	469c      	mov	ip, r3
 8000cf0:	4465      	add	r5, ip
 8000cf2:	001f      	movs	r7, r3
 8000cf4:	429d      	cmp	r5, r3
 8000cf6:	419b      	sbcs	r3, r3
 8000cf8:	425b      	negs	r3, r3
 8000cfa:	191b      	adds	r3, r3, r4
 8000cfc:	18c0      	adds	r0, r0, r3
 8000cfe:	4284      	cmp	r4, r0
 8000d00:	d200      	bcs.n	8000d04 <__aeabi_ddiv+0x1c0>
 8000d02:	e19e      	b.n	8001042 <__aeabi_ddiv+0x4fe>
 8000d04:	d100      	bne.n	8000d08 <__aeabi_ddiv+0x1c4>
 8000d06:	e199      	b.n	800103c <__aeabi_ddiv+0x4f8>
 8000d08:	4690      	mov	r8, r2
 8000d0a:	1bae      	subs	r6, r5, r6
 8000d0c:	42b5      	cmp	r5, r6
 8000d0e:	41ad      	sbcs	r5, r5
 8000d10:	1a40      	subs	r0, r0, r1
 8000d12:	426d      	negs	r5, r5
 8000d14:	1b40      	subs	r0, r0, r5
 8000d16:	4284      	cmp	r4, r0
 8000d18:	d100      	bne.n	8000d1c <__aeabi_ddiv+0x1d8>
 8000d1a:	e1d2      	b.n	80010c2 <__aeabi_ddiv+0x57e>
 8000d1c:	4649      	mov	r1, r9
 8000d1e:	f7ff fa83 	bl	8000228 <__aeabi_uidivmod>
 8000d22:	9a01      	ldr	r2, [sp, #4]
 8000d24:	040b      	lsls	r3, r1, #16
 8000d26:	4342      	muls	r2, r0
 8000d28:	0c31      	lsrs	r1, r6, #16
 8000d2a:	0005      	movs	r5, r0
 8000d2c:	4319      	orrs	r1, r3
 8000d2e:	428a      	cmp	r2, r1
 8000d30:	d900      	bls.n	8000d34 <__aeabi_ddiv+0x1f0>
 8000d32:	e16c      	b.n	800100e <__aeabi_ddiv+0x4ca>
 8000d34:	1a88      	subs	r0, r1, r2
 8000d36:	4649      	mov	r1, r9
 8000d38:	f7ff fa76 	bl	8000228 <__aeabi_uidivmod>
 8000d3c:	9a01      	ldr	r2, [sp, #4]
 8000d3e:	0436      	lsls	r6, r6, #16
 8000d40:	4342      	muls	r2, r0
 8000d42:	0409      	lsls	r1, r1, #16
 8000d44:	0c36      	lsrs	r6, r6, #16
 8000d46:	0003      	movs	r3, r0
 8000d48:	430e      	orrs	r6, r1
 8000d4a:	42b2      	cmp	r2, r6
 8000d4c:	d900      	bls.n	8000d50 <__aeabi_ddiv+0x20c>
 8000d4e:	e153      	b.n	8000ff8 <__aeabi_ddiv+0x4b4>
 8000d50:	9803      	ldr	r0, [sp, #12]
 8000d52:	1ab6      	subs	r6, r6, r2
 8000d54:	0002      	movs	r2, r0
 8000d56:	042d      	lsls	r5, r5, #16
 8000d58:	431d      	orrs	r5, r3
 8000d5a:	9f02      	ldr	r7, [sp, #8]
 8000d5c:	042b      	lsls	r3, r5, #16
 8000d5e:	0c1b      	lsrs	r3, r3, #16
 8000d60:	435a      	muls	r2, r3
 8000d62:	437b      	muls	r3, r7
 8000d64:	469c      	mov	ip, r3
 8000d66:	0c29      	lsrs	r1, r5, #16
 8000d68:	4348      	muls	r0, r1
 8000d6a:	0c13      	lsrs	r3, r2, #16
 8000d6c:	4484      	add	ip, r0
 8000d6e:	4463      	add	r3, ip
 8000d70:	4379      	muls	r1, r7
 8000d72:	4298      	cmp	r0, r3
 8000d74:	d903      	bls.n	8000d7e <__aeabi_ddiv+0x23a>
 8000d76:	2080      	movs	r0, #128	; 0x80
 8000d78:	0240      	lsls	r0, r0, #9
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	4461      	add	r1, ip
 8000d7e:	0c18      	lsrs	r0, r3, #16
 8000d80:	0412      	lsls	r2, r2, #16
 8000d82:	041b      	lsls	r3, r3, #16
 8000d84:	0c12      	lsrs	r2, r2, #16
 8000d86:	1840      	adds	r0, r0, r1
 8000d88:	189b      	adds	r3, r3, r2
 8000d8a:	4286      	cmp	r6, r0
 8000d8c:	d200      	bcs.n	8000d90 <__aeabi_ddiv+0x24c>
 8000d8e:	e100      	b.n	8000f92 <__aeabi_ddiv+0x44e>
 8000d90:	d100      	bne.n	8000d94 <__aeabi_ddiv+0x250>
 8000d92:	e0fb      	b.n	8000f8c <__aeabi_ddiv+0x448>
 8000d94:	2301      	movs	r3, #1
 8000d96:	431d      	orrs	r5, r3
 8000d98:	4b49      	ldr	r3, [pc, #292]	; (8000ec0 <__aeabi_ddiv+0x37c>)
 8000d9a:	445b      	add	r3, fp
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	dc00      	bgt.n	8000da2 <__aeabi_ddiv+0x25e>
 8000da0:	e0aa      	b.n	8000ef8 <__aeabi_ddiv+0x3b4>
 8000da2:	076a      	lsls	r2, r5, #29
 8000da4:	d000      	beq.n	8000da8 <__aeabi_ddiv+0x264>
 8000da6:	e13d      	b.n	8001024 <__aeabi_ddiv+0x4e0>
 8000da8:	08e9      	lsrs	r1, r5, #3
 8000daa:	4642      	mov	r2, r8
 8000dac:	01d2      	lsls	r2, r2, #7
 8000dae:	d506      	bpl.n	8000dbe <__aeabi_ddiv+0x27a>
 8000db0:	4642      	mov	r2, r8
 8000db2:	4b44      	ldr	r3, [pc, #272]	; (8000ec4 <__aeabi_ddiv+0x380>)
 8000db4:	401a      	ands	r2, r3
 8000db6:	2380      	movs	r3, #128	; 0x80
 8000db8:	4690      	mov	r8, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	445b      	add	r3, fp
 8000dbe:	4a42      	ldr	r2, [pc, #264]	; (8000ec8 <__aeabi_ddiv+0x384>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	dd00      	ble.n	8000dc6 <__aeabi_ddiv+0x282>
 8000dc4:	e723      	b.n	8000c0e <__aeabi_ddiv+0xca>
 8000dc6:	4642      	mov	r2, r8
 8000dc8:	055b      	lsls	r3, r3, #21
 8000dca:	0755      	lsls	r5, r2, #29
 8000dcc:	0252      	lsls	r2, r2, #9
 8000dce:	430d      	orrs	r5, r1
 8000dd0:	0b12      	lsrs	r2, r2, #12
 8000dd2:	0d5b      	lsrs	r3, r3, #21
 8000dd4:	e70d      	b.n	8000bf2 <__aeabi_ddiv+0xae>
 8000dd6:	4651      	mov	r1, sl
 8000dd8:	4321      	orrs	r1, r4
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0x29a>
 8000ddc:	e07c      	b.n	8000ed8 <__aeabi_ddiv+0x394>
 8000dde:	2c00      	cmp	r4, #0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_ddiv+0x2a0>
 8000de2:	e0fb      	b.n	8000fdc <__aeabi_ddiv+0x498>
 8000de4:	0020      	movs	r0, r4
 8000de6:	f001 f96f 	bl	80020c8 <__clzsi2>
 8000dea:	0002      	movs	r2, r0
 8000dec:	3a0b      	subs	r2, #11
 8000dee:	231d      	movs	r3, #29
 8000df0:	1a9b      	subs	r3, r3, r2
 8000df2:	4652      	mov	r2, sl
 8000df4:	0001      	movs	r1, r0
 8000df6:	40da      	lsrs	r2, r3
 8000df8:	4653      	mov	r3, sl
 8000dfa:	3908      	subs	r1, #8
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	408c      	lsls	r4, r1
 8000e00:	0019      	movs	r1, r3
 8000e02:	4314      	orrs	r4, r2
 8000e04:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <__aeabi_ddiv+0x388>)
 8000e06:	4458      	add	r0, fp
 8000e08:	469b      	mov	fp, r3
 8000e0a:	4483      	add	fp, r0
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	e6d9      	b.n	8000bc4 <__aeabi_ddiv+0x80>
 8000e10:	0003      	movs	r3, r0
 8000e12:	4323      	orrs	r3, r4
 8000e14:	4698      	mov	r8, r3
 8000e16:	d044      	beq.n	8000ea2 <__aeabi_ddiv+0x35e>
 8000e18:	2c00      	cmp	r4, #0
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_ddiv+0x2da>
 8000e1c:	e0cf      	b.n	8000fbe <__aeabi_ddiv+0x47a>
 8000e1e:	0020      	movs	r0, r4
 8000e20:	f001 f952 	bl	80020c8 <__clzsi2>
 8000e24:	0001      	movs	r1, r0
 8000e26:	0002      	movs	r2, r0
 8000e28:	390b      	subs	r1, #11
 8000e2a:	231d      	movs	r3, #29
 8000e2c:	1a5b      	subs	r3, r3, r1
 8000e2e:	4649      	mov	r1, r9
 8000e30:	0010      	movs	r0, r2
 8000e32:	40d9      	lsrs	r1, r3
 8000e34:	3808      	subs	r0, #8
 8000e36:	4084      	lsls	r4, r0
 8000e38:	000b      	movs	r3, r1
 8000e3a:	464d      	mov	r5, r9
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	4698      	mov	r8, r3
 8000e40:	4085      	lsls	r5, r0
 8000e42:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <__aeabi_ddiv+0x38c>)
 8000e44:	1a9b      	subs	r3, r3, r2
 8000e46:	469b      	mov	fp, r3
 8000e48:	2300      	movs	r3, #0
 8000e4a:	4699      	mov	r9, r3
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	e69e      	b.n	8000b8e <__aeabi_ddiv+0x4a>
 8000e50:	0002      	movs	r2, r0
 8000e52:	4322      	orrs	r2, r4
 8000e54:	4690      	mov	r8, r2
 8000e56:	d11d      	bne.n	8000e94 <__aeabi_ddiv+0x350>
 8000e58:	2208      	movs	r2, #8
 8000e5a:	469b      	mov	fp, r3
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	2500      	movs	r5, #0
 8000e60:	4691      	mov	r9, r2
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	e693      	b.n	8000b8e <__aeabi_ddiv+0x4a>
 8000e66:	4651      	mov	r1, sl
 8000e68:	4321      	orrs	r1, r4
 8000e6a:	d109      	bne.n	8000e80 <__aeabi_ddiv+0x33c>
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	464a      	mov	r2, r9
 8000e70:	431a      	orrs	r2, r3
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <__aeabi_ddiv+0x390>)
 8000e74:	4691      	mov	r9, r2
 8000e76:	469c      	mov	ip, r3
 8000e78:	2400      	movs	r4, #0
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	44e3      	add	fp, ip
 8000e7e:	e6a1      	b.n	8000bc4 <__aeabi_ddiv+0x80>
 8000e80:	2303      	movs	r3, #3
 8000e82:	464a      	mov	r2, r9
 8000e84:	431a      	orrs	r2, r3
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <__aeabi_ddiv+0x390>)
 8000e88:	4691      	mov	r9, r2
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	4651      	mov	r1, sl
 8000e8e:	2003      	movs	r0, #3
 8000e90:	44e3      	add	fp, ip
 8000e92:	e697      	b.n	8000bc4 <__aeabi_ddiv+0x80>
 8000e94:	220c      	movs	r2, #12
 8000e96:	469b      	mov	fp, r3
 8000e98:	2303      	movs	r3, #3
 8000e9a:	46a0      	mov	r8, r4
 8000e9c:	4691      	mov	r9, r2
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	e675      	b.n	8000b8e <__aeabi_ddiv+0x4a>
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	469b      	mov	fp, r3
 8000eaa:	3301      	adds	r3, #1
 8000eac:	2500      	movs	r5, #0
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	e66d      	b.n	8000b8e <__aeabi_ddiv+0x4a>
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	000007ff 	.word	0x000007ff
 8000eb8:	fffffc01 	.word	0xfffffc01
 8000ebc:	0800d4e8 	.word	0x0800d4e8
 8000ec0:	000003ff 	.word	0x000003ff
 8000ec4:	feffffff 	.word	0xfeffffff
 8000ec8:	000007fe 	.word	0x000007fe
 8000ecc:	000003f3 	.word	0x000003f3
 8000ed0:	fffffc0d 	.word	0xfffffc0d
 8000ed4:	fffff801 	.word	0xfffff801
 8000ed8:	464a      	mov	r2, r9
 8000eda:	2301      	movs	r3, #1
 8000edc:	431a      	orrs	r2, r3
 8000ede:	4691      	mov	r9, r2
 8000ee0:	2400      	movs	r4, #0
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	e66e      	b.n	8000bc4 <__aeabi_ddiv+0x80>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	469a      	mov	sl, r3
 8000eec:	2500      	movs	r5, #0
 8000eee:	4b88      	ldr	r3, [pc, #544]	; (8001110 <__aeabi_ddiv+0x5cc>)
 8000ef0:	0312      	lsls	r2, r2, #12
 8000ef2:	e67e      	b.n	8000bf2 <__aeabi_ddiv+0xae>
 8000ef4:	2501      	movs	r5, #1
 8000ef6:	426d      	negs	r5, r5
 8000ef8:	2201      	movs	r2, #1
 8000efa:	1ad2      	subs	r2, r2, r3
 8000efc:	2a38      	cmp	r2, #56	; 0x38
 8000efe:	dd00      	ble.n	8000f02 <__aeabi_ddiv+0x3be>
 8000f00:	e674      	b.n	8000bec <__aeabi_ddiv+0xa8>
 8000f02:	2a1f      	cmp	r2, #31
 8000f04:	dc00      	bgt.n	8000f08 <__aeabi_ddiv+0x3c4>
 8000f06:	e0bd      	b.n	8001084 <__aeabi_ddiv+0x540>
 8000f08:	211f      	movs	r1, #31
 8000f0a:	4249      	negs	r1, r1
 8000f0c:	1acb      	subs	r3, r1, r3
 8000f0e:	4641      	mov	r1, r8
 8000f10:	40d9      	lsrs	r1, r3
 8000f12:	000b      	movs	r3, r1
 8000f14:	2a20      	cmp	r2, #32
 8000f16:	d004      	beq.n	8000f22 <__aeabi_ddiv+0x3de>
 8000f18:	4641      	mov	r1, r8
 8000f1a:	4a7e      	ldr	r2, [pc, #504]	; (8001114 <__aeabi_ddiv+0x5d0>)
 8000f1c:	445a      	add	r2, fp
 8000f1e:	4091      	lsls	r1, r2
 8000f20:	430d      	orrs	r5, r1
 8000f22:	0029      	movs	r1, r5
 8000f24:	1e4a      	subs	r2, r1, #1
 8000f26:	4191      	sbcs	r1, r2
 8000f28:	4319      	orrs	r1, r3
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	001d      	movs	r5, r3
 8000f2e:	2200      	movs	r2, #0
 8000f30:	400d      	ands	r5, r1
 8000f32:	420b      	tst	r3, r1
 8000f34:	d100      	bne.n	8000f38 <__aeabi_ddiv+0x3f4>
 8000f36:	e0d0      	b.n	80010da <__aeabi_ddiv+0x596>
 8000f38:	220f      	movs	r2, #15
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	400a      	ands	r2, r1
 8000f3e:	2a04      	cmp	r2, #4
 8000f40:	d100      	bne.n	8000f44 <__aeabi_ddiv+0x400>
 8000f42:	e0c7      	b.n	80010d4 <__aeabi_ddiv+0x590>
 8000f44:	1d0a      	adds	r2, r1, #4
 8000f46:	428a      	cmp	r2, r1
 8000f48:	4189      	sbcs	r1, r1
 8000f4a:	4249      	negs	r1, r1
 8000f4c:	185b      	adds	r3, r3, r1
 8000f4e:	0011      	movs	r1, r2
 8000f50:	021a      	lsls	r2, r3, #8
 8000f52:	d400      	bmi.n	8000f56 <__aeabi_ddiv+0x412>
 8000f54:	e0be      	b.n	80010d4 <__aeabi_ddiv+0x590>
 8000f56:	2301      	movs	r3, #1
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2500      	movs	r5, #0
 8000f5c:	e649      	b.n	8000bf2 <__aeabi_ddiv+0xae>
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	4643      	mov	r3, r8
 8000f62:	0312      	lsls	r2, r2, #12
 8000f64:	4213      	tst	r3, r2
 8000f66:	d008      	beq.n	8000f7a <__aeabi_ddiv+0x436>
 8000f68:	4214      	tst	r4, r2
 8000f6a:	d106      	bne.n	8000f7a <__aeabi_ddiv+0x436>
 8000f6c:	4322      	orrs	r2, r4
 8000f6e:	0312      	lsls	r2, r2, #12
 8000f70:	46ba      	mov	sl, r7
 8000f72:	000d      	movs	r5, r1
 8000f74:	4b66      	ldr	r3, [pc, #408]	; (8001110 <__aeabi_ddiv+0x5cc>)
 8000f76:	0b12      	lsrs	r2, r2, #12
 8000f78:	e63b      	b.n	8000bf2 <__aeabi_ddiv+0xae>
 8000f7a:	2280      	movs	r2, #128	; 0x80
 8000f7c:	4643      	mov	r3, r8
 8000f7e:	0312      	lsls	r2, r2, #12
 8000f80:	431a      	orrs	r2, r3
 8000f82:	0312      	lsls	r2, r2, #12
 8000f84:	46b2      	mov	sl, r6
 8000f86:	4b62      	ldr	r3, [pc, #392]	; (8001110 <__aeabi_ddiv+0x5cc>)
 8000f88:	0b12      	lsrs	r2, r2, #12
 8000f8a:	e632      	b.n	8000bf2 <__aeabi_ddiv+0xae>
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_ddiv+0x44e>
 8000f90:	e702      	b.n	8000d98 <__aeabi_ddiv+0x254>
 8000f92:	19a6      	adds	r6, r4, r6
 8000f94:	1e6a      	subs	r2, r5, #1
 8000f96:	42a6      	cmp	r6, r4
 8000f98:	d200      	bcs.n	8000f9c <__aeabi_ddiv+0x458>
 8000f9a:	e089      	b.n	80010b0 <__aeabi_ddiv+0x56c>
 8000f9c:	4286      	cmp	r6, r0
 8000f9e:	d200      	bcs.n	8000fa2 <__aeabi_ddiv+0x45e>
 8000fa0:	e09f      	b.n	80010e2 <__aeabi_ddiv+0x59e>
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_ddiv+0x462>
 8000fa4:	e0af      	b.n	8001106 <__aeabi_ddiv+0x5c2>
 8000fa6:	0015      	movs	r5, r2
 8000fa8:	e6f4      	b.n	8000d94 <__aeabi_ddiv+0x250>
 8000faa:	42a9      	cmp	r1, r5
 8000fac:	d900      	bls.n	8000fb0 <__aeabi_ddiv+0x46c>
 8000fae:	e63c      	b.n	8000c2a <__aeabi_ddiv+0xe6>
 8000fb0:	4643      	mov	r3, r8
 8000fb2:	07de      	lsls	r6, r3, #31
 8000fb4:	0858      	lsrs	r0, r3, #1
 8000fb6:	086b      	lsrs	r3, r5, #1
 8000fb8:	431e      	orrs	r6, r3
 8000fba:	07ed      	lsls	r5, r5, #31
 8000fbc:	e63c      	b.n	8000c38 <__aeabi_ddiv+0xf4>
 8000fbe:	f001 f883 	bl	80020c8 <__clzsi2>
 8000fc2:	0001      	movs	r1, r0
 8000fc4:	0002      	movs	r2, r0
 8000fc6:	3115      	adds	r1, #21
 8000fc8:	3220      	adds	r2, #32
 8000fca:	291c      	cmp	r1, #28
 8000fcc:	dc00      	bgt.n	8000fd0 <__aeabi_ddiv+0x48c>
 8000fce:	e72c      	b.n	8000e2a <__aeabi_ddiv+0x2e6>
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	3808      	subs	r0, #8
 8000fd4:	4083      	lsls	r3, r0
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	4698      	mov	r8, r3
 8000fda:	e732      	b.n	8000e42 <__aeabi_ddiv+0x2fe>
 8000fdc:	f001 f874 	bl	80020c8 <__clzsi2>
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	001a      	movs	r2, r3
 8000fe4:	3215      	adds	r2, #21
 8000fe6:	3020      	adds	r0, #32
 8000fe8:	2a1c      	cmp	r2, #28
 8000fea:	dc00      	bgt.n	8000fee <__aeabi_ddiv+0x4aa>
 8000fec:	e6ff      	b.n	8000dee <__aeabi_ddiv+0x2aa>
 8000fee:	4654      	mov	r4, sl
 8000ff0:	3b08      	subs	r3, #8
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	409c      	lsls	r4, r3
 8000ff6:	e705      	b.n	8000e04 <__aeabi_ddiv+0x2c0>
 8000ff8:	1936      	adds	r6, r6, r4
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	42b4      	cmp	r4, r6
 8000ffe:	d900      	bls.n	8001002 <__aeabi_ddiv+0x4be>
 8001000:	e6a6      	b.n	8000d50 <__aeabi_ddiv+0x20c>
 8001002:	42b2      	cmp	r2, r6
 8001004:	d800      	bhi.n	8001008 <__aeabi_ddiv+0x4c4>
 8001006:	e6a3      	b.n	8000d50 <__aeabi_ddiv+0x20c>
 8001008:	1e83      	subs	r3, r0, #2
 800100a:	1936      	adds	r6, r6, r4
 800100c:	e6a0      	b.n	8000d50 <__aeabi_ddiv+0x20c>
 800100e:	1909      	adds	r1, r1, r4
 8001010:	3d01      	subs	r5, #1
 8001012:	428c      	cmp	r4, r1
 8001014:	d900      	bls.n	8001018 <__aeabi_ddiv+0x4d4>
 8001016:	e68d      	b.n	8000d34 <__aeabi_ddiv+0x1f0>
 8001018:	428a      	cmp	r2, r1
 800101a:	d800      	bhi.n	800101e <__aeabi_ddiv+0x4da>
 800101c:	e68a      	b.n	8000d34 <__aeabi_ddiv+0x1f0>
 800101e:	1e85      	subs	r5, r0, #2
 8001020:	1909      	adds	r1, r1, r4
 8001022:	e687      	b.n	8000d34 <__aeabi_ddiv+0x1f0>
 8001024:	220f      	movs	r2, #15
 8001026:	402a      	ands	r2, r5
 8001028:	2a04      	cmp	r2, #4
 800102a:	d100      	bne.n	800102e <__aeabi_ddiv+0x4ea>
 800102c:	e6bc      	b.n	8000da8 <__aeabi_ddiv+0x264>
 800102e:	1d29      	adds	r1, r5, #4
 8001030:	42a9      	cmp	r1, r5
 8001032:	41ad      	sbcs	r5, r5
 8001034:	426d      	negs	r5, r5
 8001036:	08c9      	lsrs	r1, r1, #3
 8001038:	44a8      	add	r8, r5
 800103a:	e6b6      	b.n	8000daa <__aeabi_ddiv+0x266>
 800103c:	42af      	cmp	r7, r5
 800103e:	d900      	bls.n	8001042 <__aeabi_ddiv+0x4fe>
 8001040:	e662      	b.n	8000d08 <__aeabi_ddiv+0x1c4>
 8001042:	4281      	cmp	r1, r0
 8001044:	d804      	bhi.n	8001050 <__aeabi_ddiv+0x50c>
 8001046:	d000      	beq.n	800104a <__aeabi_ddiv+0x506>
 8001048:	e65e      	b.n	8000d08 <__aeabi_ddiv+0x1c4>
 800104a:	42ae      	cmp	r6, r5
 800104c:	d800      	bhi.n	8001050 <__aeabi_ddiv+0x50c>
 800104e:	e65b      	b.n	8000d08 <__aeabi_ddiv+0x1c4>
 8001050:	2302      	movs	r3, #2
 8001052:	425b      	negs	r3, r3
 8001054:	469c      	mov	ip, r3
 8001056:	9b00      	ldr	r3, [sp, #0]
 8001058:	44e0      	add	r8, ip
 800105a:	469c      	mov	ip, r3
 800105c:	4465      	add	r5, ip
 800105e:	429d      	cmp	r5, r3
 8001060:	419b      	sbcs	r3, r3
 8001062:	425b      	negs	r3, r3
 8001064:	191b      	adds	r3, r3, r4
 8001066:	18c0      	adds	r0, r0, r3
 8001068:	e64f      	b.n	8000d0a <__aeabi_ddiv+0x1c6>
 800106a:	42b2      	cmp	r2, r6
 800106c:	d800      	bhi.n	8001070 <__aeabi_ddiv+0x52c>
 800106e:	e612      	b.n	8000c96 <__aeabi_ddiv+0x152>
 8001070:	1e83      	subs	r3, r0, #2
 8001072:	1936      	adds	r6, r6, r4
 8001074:	e60f      	b.n	8000c96 <__aeabi_ddiv+0x152>
 8001076:	428a      	cmp	r2, r1
 8001078:	d800      	bhi.n	800107c <__aeabi_ddiv+0x538>
 800107a:	e5fa      	b.n	8000c72 <__aeabi_ddiv+0x12e>
 800107c:	1e83      	subs	r3, r0, #2
 800107e:	4698      	mov	r8, r3
 8001080:	1909      	adds	r1, r1, r4
 8001082:	e5f6      	b.n	8000c72 <__aeabi_ddiv+0x12e>
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <__aeabi_ddiv+0x5d4>)
 8001086:	0028      	movs	r0, r5
 8001088:	445b      	add	r3, fp
 800108a:	4641      	mov	r1, r8
 800108c:	409d      	lsls	r5, r3
 800108e:	4099      	lsls	r1, r3
 8001090:	40d0      	lsrs	r0, r2
 8001092:	1e6b      	subs	r3, r5, #1
 8001094:	419d      	sbcs	r5, r3
 8001096:	4643      	mov	r3, r8
 8001098:	4301      	orrs	r1, r0
 800109a:	4329      	orrs	r1, r5
 800109c:	40d3      	lsrs	r3, r2
 800109e:	074a      	lsls	r2, r1, #29
 80010a0:	d100      	bne.n	80010a4 <__aeabi_ddiv+0x560>
 80010a2:	e755      	b.n	8000f50 <__aeabi_ddiv+0x40c>
 80010a4:	220f      	movs	r2, #15
 80010a6:	400a      	ands	r2, r1
 80010a8:	2a04      	cmp	r2, #4
 80010aa:	d000      	beq.n	80010ae <__aeabi_ddiv+0x56a>
 80010ac:	e74a      	b.n	8000f44 <__aeabi_ddiv+0x400>
 80010ae:	e74f      	b.n	8000f50 <__aeabi_ddiv+0x40c>
 80010b0:	0015      	movs	r5, r2
 80010b2:	4286      	cmp	r6, r0
 80010b4:	d000      	beq.n	80010b8 <__aeabi_ddiv+0x574>
 80010b6:	e66d      	b.n	8000d94 <__aeabi_ddiv+0x250>
 80010b8:	9a00      	ldr	r2, [sp, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d000      	beq.n	80010c0 <__aeabi_ddiv+0x57c>
 80010be:	e669      	b.n	8000d94 <__aeabi_ddiv+0x250>
 80010c0:	e66a      	b.n	8000d98 <__aeabi_ddiv+0x254>
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <__aeabi_ddiv+0x5d8>)
 80010c4:	445b      	add	r3, fp
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	dc00      	bgt.n	80010cc <__aeabi_ddiv+0x588>
 80010ca:	e713      	b.n	8000ef4 <__aeabi_ddiv+0x3b0>
 80010cc:	2501      	movs	r5, #1
 80010ce:	2100      	movs	r1, #0
 80010d0:	44a8      	add	r8, r5
 80010d2:	e66a      	b.n	8000daa <__aeabi_ddiv+0x266>
 80010d4:	075d      	lsls	r5, r3, #29
 80010d6:	025b      	lsls	r3, r3, #9
 80010d8:	0b1a      	lsrs	r2, r3, #12
 80010da:	08c9      	lsrs	r1, r1, #3
 80010dc:	2300      	movs	r3, #0
 80010de:	430d      	orrs	r5, r1
 80010e0:	e587      	b.n	8000bf2 <__aeabi_ddiv+0xae>
 80010e2:	9900      	ldr	r1, [sp, #0]
 80010e4:	3d02      	subs	r5, #2
 80010e6:	004a      	lsls	r2, r1, #1
 80010e8:	428a      	cmp	r2, r1
 80010ea:	41bf      	sbcs	r7, r7
 80010ec:	427f      	negs	r7, r7
 80010ee:	193f      	adds	r7, r7, r4
 80010f0:	19f6      	adds	r6, r6, r7
 80010f2:	9200      	str	r2, [sp, #0]
 80010f4:	e7dd      	b.n	80010b2 <__aeabi_ddiv+0x56e>
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	4643      	mov	r3, r8
 80010fa:	0312      	lsls	r2, r2, #12
 80010fc:	431a      	orrs	r2, r3
 80010fe:	0312      	lsls	r2, r2, #12
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <__aeabi_ddiv+0x5cc>)
 8001102:	0b12      	lsrs	r2, r2, #12
 8001104:	e575      	b.n	8000bf2 <__aeabi_ddiv+0xae>
 8001106:	9900      	ldr	r1, [sp, #0]
 8001108:	4299      	cmp	r1, r3
 800110a:	d3ea      	bcc.n	80010e2 <__aeabi_ddiv+0x59e>
 800110c:	0015      	movs	r5, r2
 800110e:	e7d3      	b.n	80010b8 <__aeabi_ddiv+0x574>
 8001110:	000007ff 	.word	0x000007ff
 8001114:	0000043e 	.word	0x0000043e
 8001118:	0000041e 	.word	0x0000041e
 800111c:	000003ff 	.word	0x000003ff

08001120 <__eqdf2>:
 8001120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001122:	464e      	mov	r6, r9
 8001124:	4645      	mov	r5, r8
 8001126:	46de      	mov	lr, fp
 8001128:	4657      	mov	r7, sl
 800112a:	4690      	mov	r8, r2
 800112c:	b5e0      	push	{r5, r6, r7, lr}
 800112e:	0017      	movs	r7, r2
 8001130:	031a      	lsls	r2, r3, #12
 8001132:	0b12      	lsrs	r2, r2, #12
 8001134:	0005      	movs	r5, r0
 8001136:	4684      	mov	ip, r0
 8001138:	4819      	ldr	r0, [pc, #100]	; (80011a0 <__eqdf2+0x80>)
 800113a:	030e      	lsls	r6, r1, #12
 800113c:	004c      	lsls	r4, r1, #1
 800113e:	4691      	mov	r9, r2
 8001140:	005a      	lsls	r2, r3, #1
 8001142:	0fdb      	lsrs	r3, r3, #31
 8001144:	469b      	mov	fp, r3
 8001146:	0b36      	lsrs	r6, r6, #12
 8001148:	0d64      	lsrs	r4, r4, #21
 800114a:	0fc9      	lsrs	r1, r1, #31
 800114c:	0d52      	lsrs	r2, r2, #21
 800114e:	4284      	cmp	r4, r0
 8001150:	d019      	beq.n	8001186 <__eqdf2+0x66>
 8001152:	4282      	cmp	r2, r0
 8001154:	d010      	beq.n	8001178 <__eqdf2+0x58>
 8001156:	2001      	movs	r0, #1
 8001158:	4294      	cmp	r4, r2
 800115a:	d10e      	bne.n	800117a <__eqdf2+0x5a>
 800115c:	454e      	cmp	r6, r9
 800115e:	d10c      	bne.n	800117a <__eqdf2+0x5a>
 8001160:	2001      	movs	r0, #1
 8001162:	45c4      	cmp	ip, r8
 8001164:	d109      	bne.n	800117a <__eqdf2+0x5a>
 8001166:	4559      	cmp	r1, fp
 8001168:	d017      	beq.n	800119a <__eqdf2+0x7a>
 800116a:	2c00      	cmp	r4, #0
 800116c:	d105      	bne.n	800117a <__eqdf2+0x5a>
 800116e:	0030      	movs	r0, r6
 8001170:	4328      	orrs	r0, r5
 8001172:	1e43      	subs	r3, r0, #1
 8001174:	4198      	sbcs	r0, r3
 8001176:	e000      	b.n	800117a <__eqdf2+0x5a>
 8001178:	2001      	movs	r0, #1
 800117a:	bcf0      	pop	{r4, r5, r6, r7}
 800117c:	46bb      	mov	fp, r7
 800117e:	46b2      	mov	sl, r6
 8001180:	46a9      	mov	r9, r5
 8001182:	46a0      	mov	r8, r4
 8001184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001186:	0033      	movs	r3, r6
 8001188:	2001      	movs	r0, #1
 800118a:	432b      	orrs	r3, r5
 800118c:	d1f5      	bne.n	800117a <__eqdf2+0x5a>
 800118e:	42a2      	cmp	r2, r4
 8001190:	d1f3      	bne.n	800117a <__eqdf2+0x5a>
 8001192:	464b      	mov	r3, r9
 8001194:	433b      	orrs	r3, r7
 8001196:	d1f0      	bne.n	800117a <__eqdf2+0x5a>
 8001198:	e7e2      	b.n	8001160 <__eqdf2+0x40>
 800119a:	2000      	movs	r0, #0
 800119c:	e7ed      	b.n	800117a <__eqdf2+0x5a>
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	000007ff 	.word	0x000007ff

080011a4 <__gedf2>:
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	4647      	mov	r7, r8
 80011a8:	46ce      	mov	lr, r9
 80011aa:	0004      	movs	r4, r0
 80011ac:	0018      	movs	r0, r3
 80011ae:	0016      	movs	r6, r2
 80011b0:	031b      	lsls	r3, r3, #12
 80011b2:	0b1b      	lsrs	r3, r3, #12
 80011b4:	4d2d      	ldr	r5, [pc, #180]	; (800126c <__gedf2+0xc8>)
 80011b6:	004a      	lsls	r2, r1, #1
 80011b8:	4699      	mov	r9, r3
 80011ba:	b580      	push	{r7, lr}
 80011bc:	0043      	lsls	r3, r0, #1
 80011be:	030f      	lsls	r7, r1, #12
 80011c0:	46a4      	mov	ip, r4
 80011c2:	46b0      	mov	r8, r6
 80011c4:	0b3f      	lsrs	r7, r7, #12
 80011c6:	0d52      	lsrs	r2, r2, #21
 80011c8:	0fc9      	lsrs	r1, r1, #31
 80011ca:	0d5b      	lsrs	r3, r3, #21
 80011cc:	0fc0      	lsrs	r0, r0, #31
 80011ce:	42aa      	cmp	r2, r5
 80011d0:	d021      	beq.n	8001216 <__gedf2+0x72>
 80011d2:	42ab      	cmp	r3, r5
 80011d4:	d013      	beq.n	80011fe <__gedf2+0x5a>
 80011d6:	2a00      	cmp	r2, #0
 80011d8:	d122      	bne.n	8001220 <__gedf2+0x7c>
 80011da:	433c      	orrs	r4, r7
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <__gedf2+0x42>
 80011e0:	464d      	mov	r5, r9
 80011e2:	432e      	orrs	r6, r5
 80011e4:	d022      	beq.n	800122c <__gedf2+0x88>
 80011e6:	2c00      	cmp	r4, #0
 80011e8:	d010      	beq.n	800120c <__gedf2+0x68>
 80011ea:	4281      	cmp	r1, r0
 80011ec:	d022      	beq.n	8001234 <__gedf2+0x90>
 80011ee:	2002      	movs	r0, #2
 80011f0:	3901      	subs	r1, #1
 80011f2:	4008      	ands	r0, r1
 80011f4:	3801      	subs	r0, #1
 80011f6:	bcc0      	pop	{r6, r7}
 80011f8:	46b9      	mov	r9, r7
 80011fa:	46b0      	mov	r8, r6
 80011fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011fe:	464d      	mov	r5, r9
 8001200:	432e      	orrs	r6, r5
 8001202:	d129      	bne.n	8001258 <__gedf2+0xb4>
 8001204:	2a00      	cmp	r2, #0
 8001206:	d1f0      	bne.n	80011ea <__gedf2+0x46>
 8001208:	433c      	orrs	r4, r7
 800120a:	d1ee      	bne.n	80011ea <__gedf2+0x46>
 800120c:	2800      	cmp	r0, #0
 800120e:	d1f2      	bne.n	80011f6 <__gedf2+0x52>
 8001210:	2001      	movs	r0, #1
 8001212:	4240      	negs	r0, r0
 8001214:	e7ef      	b.n	80011f6 <__gedf2+0x52>
 8001216:	003d      	movs	r5, r7
 8001218:	4325      	orrs	r5, r4
 800121a:	d11d      	bne.n	8001258 <__gedf2+0xb4>
 800121c:	4293      	cmp	r3, r2
 800121e:	d0ee      	beq.n	80011fe <__gedf2+0x5a>
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1e2      	bne.n	80011ea <__gedf2+0x46>
 8001224:	464c      	mov	r4, r9
 8001226:	4326      	orrs	r6, r4
 8001228:	d1df      	bne.n	80011ea <__gedf2+0x46>
 800122a:	e7e0      	b.n	80011ee <__gedf2+0x4a>
 800122c:	2000      	movs	r0, #0
 800122e:	2c00      	cmp	r4, #0
 8001230:	d0e1      	beq.n	80011f6 <__gedf2+0x52>
 8001232:	e7dc      	b.n	80011ee <__gedf2+0x4a>
 8001234:	429a      	cmp	r2, r3
 8001236:	dc0a      	bgt.n	800124e <__gedf2+0xaa>
 8001238:	dbe8      	blt.n	800120c <__gedf2+0x68>
 800123a:	454f      	cmp	r7, r9
 800123c:	d8d7      	bhi.n	80011ee <__gedf2+0x4a>
 800123e:	d00e      	beq.n	800125e <__gedf2+0xba>
 8001240:	2000      	movs	r0, #0
 8001242:	454f      	cmp	r7, r9
 8001244:	d2d7      	bcs.n	80011f6 <__gedf2+0x52>
 8001246:	2900      	cmp	r1, #0
 8001248:	d0e2      	beq.n	8001210 <__gedf2+0x6c>
 800124a:	0008      	movs	r0, r1
 800124c:	e7d3      	b.n	80011f6 <__gedf2+0x52>
 800124e:	4243      	negs	r3, r0
 8001250:	4158      	adcs	r0, r3
 8001252:	0040      	lsls	r0, r0, #1
 8001254:	3801      	subs	r0, #1
 8001256:	e7ce      	b.n	80011f6 <__gedf2+0x52>
 8001258:	2002      	movs	r0, #2
 800125a:	4240      	negs	r0, r0
 800125c:	e7cb      	b.n	80011f6 <__gedf2+0x52>
 800125e:	45c4      	cmp	ip, r8
 8001260:	d8c5      	bhi.n	80011ee <__gedf2+0x4a>
 8001262:	2000      	movs	r0, #0
 8001264:	45c4      	cmp	ip, r8
 8001266:	d2c6      	bcs.n	80011f6 <__gedf2+0x52>
 8001268:	e7ed      	b.n	8001246 <__gedf2+0xa2>
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	000007ff 	.word	0x000007ff

08001270 <__ledf2>:
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	4647      	mov	r7, r8
 8001274:	46ce      	mov	lr, r9
 8001276:	0004      	movs	r4, r0
 8001278:	0018      	movs	r0, r3
 800127a:	0016      	movs	r6, r2
 800127c:	031b      	lsls	r3, r3, #12
 800127e:	0b1b      	lsrs	r3, r3, #12
 8001280:	4d2c      	ldr	r5, [pc, #176]	; (8001334 <__ledf2+0xc4>)
 8001282:	004a      	lsls	r2, r1, #1
 8001284:	4699      	mov	r9, r3
 8001286:	b580      	push	{r7, lr}
 8001288:	0043      	lsls	r3, r0, #1
 800128a:	030f      	lsls	r7, r1, #12
 800128c:	46a4      	mov	ip, r4
 800128e:	46b0      	mov	r8, r6
 8001290:	0b3f      	lsrs	r7, r7, #12
 8001292:	0d52      	lsrs	r2, r2, #21
 8001294:	0fc9      	lsrs	r1, r1, #31
 8001296:	0d5b      	lsrs	r3, r3, #21
 8001298:	0fc0      	lsrs	r0, r0, #31
 800129a:	42aa      	cmp	r2, r5
 800129c:	d00d      	beq.n	80012ba <__ledf2+0x4a>
 800129e:	42ab      	cmp	r3, r5
 80012a0:	d010      	beq.n	80012c4 <__ledf2+0x54>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d127      	bne.n	80012f6 <__ledf2+0x86>
 80012a6:	433c      	orrs	r4, r7
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d111      	bne.n	80012d0 <__ledf2+0x60>
 80012ac:	464d      	mov	r5, r9
 80012ae:	432e      	orrs	r6, r5
 80012b0:	d10e      	bne.n	80012d0 <__ledf2+0x60>
 80012b2:	2000      	movs	r0, #0
 80012b4:	2c00      	cmp	r4, #0
 80012b6:	d015      	beq.n	80012e4 <__ledf2+0x74>
 80012b8:	e00e      	b.n	80012d8 <__ledf2+0x68>
 80012ba:	003d      	movs	r5, r7
 80012bc:	4325      	orrs	r5, r4
 80012be:	d110      	bne.n	80012e2 <__ledf2+0x72>
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d118      	bne.n	80012f6 <__ledf2+0x86>
 80012c4:	464d      	mov	r5, r9
 80012c6:	432e      	orrs	r6, r5
 80012c8:	d10b      	bne.n	80012e2 <__ledf2+0x72>
 80012ca:	2a00      	cmp	r2, #0
 80012cc:	d102      	bne.n	80012d4 <__ledf2+0x64>
 80012ce:	433c      	orrs	r4, r7
 80012d0:	2c00      	cmp	r4, #0
 80012d2:	d00b      	beq.n	80012ec <__ledf2+0x7c>
 80012d4:	4281      	cmp	r1, r0
 80012d6:	d014      	beq.n	8001302 <__ledf2+0x92>
 80012d8:	2002      	movs	r0, #2
 80012da:	3901      	subs	r1, #1
 80012dc:	4008      	ands	r0, r1
 80012de:	3801      	subs	r0, #1
 80012e0:	e000      	b.n	80012e4 <__ledf2+0x74>
 80012e2:	2002      	movs	r0, #2
 80012e4:	bcc0      	pop	{r6, r7}
 80012e6:	46b9      	mov	r9, r7
 80012e8:	46b0      	mov	r8, r6
 80012ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ec:	2800      	cmp	r0, #0
 80012ee:	d1f9      	bne.n	80012e4 <__ledf2+0x74>
 80012f0:	2001      	movs	r0, #1
 80012f2:	4240      	negs	r0, r0
 80012f4:	e7f6      	b.n	80012e4 <__ledf2+0x74>
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1ec      	bne.n	80012d4 <__ledf2+0x64>
 80012fa:	464c      	mov	r4, r9
 80012fc:	4326      	orrs	r6, r4
 80012fe:	d1e9      	bne.n	80012d4 <__ledf2+0x64>
 8001300:	e7ea      	b.n	80012d8 <__ledf2+0x68>
 8001302:	429a      	cmp	r2, r3
 8001304:	dd04      	ble.n	8001310 <__ledf2+0xa0>
 8001306:	4243      	negs	r3, r0
 8001308:	4158      	adcs	r0, r3
 800130a:	0040      	lsls	r0, r0, #1
 800130c:	3801      	subs	r0, #1
 800130e:	e7e9      	b.n	80012e4 <__ledf2+0x74>
 8001310:	429a      	cmp	r2, r3
 8001312:	dbeb      	blt.n	80012ec <__ledf2+0x7c>
 8001314:	454f      	cmp	r7, r9
 8001316:	d8df      	bhi.n	80012d8 <__ledf2+0x68>
 8001318:	d006      	beq.n	8001328 <__ledf2+0xb8>
 800131a:	2000      	movs	r0, #0
 800131c:	454f      	cmp	r7, r9
 800131e:	d2e1      	bcs.n	80012e4 <__ledf2+0x74>
 8001320:	2900      	cmp	r1, #0
 8001322:	d0e5      	beq.n	80012f0 <__ledf2+0x80>
 8001324:	0008      	movs	r0, r1
 8001326:	e7dd      	b.n	80012e4 <__ledf2+0x74>
 8001328:	45c4      	cmp	ip, r8
 800132a:	d8d5      	bhi.n	80012d8 <__ledf2+0x68>
 800132c:	2000      	movs	r0, #0
 800132e:	45c4      	cmp	ip, r8
 8001330:	d2d8      	bcs.n	80012e4 <__ledf2+0x74>
 8001332:	e7f5      	b.n	8001320 <__ledf2+0xb0>
 8001334:	000007ff 	.word	0x000007ff

08001338 <__aeabi_dmul>:
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	4645      	mov	r5, r8
 800133c:	46de      	mov	lr, fp
 800133e:	4657      	mov	r7, sl
 8001340:	464e      	mov	r6, r9
 8001342:	b5e0      	push	{r5, r6, r7, lr}
 8001344:	001f      	movs	r7, r3
 8001346:	030b      	lsls	r3, r1, #12
 8001348:	0b1b      	lsrs	r3, r3, #12
 800134a:	469b      	mov	fp, r3
 800134c:	004d      	lsls	r5, r1, #1
 800134e:	0fcb      	lsrs	r3, r1, #31
 8001350:	0004      	movs	r4, r0
 8001352:	4691      	mov	r9, r2
 8001354:	4698      	mov	r8, r3
 8001356:	b087      	sub	sp, #28
 8001358:	0d6d      	lsrs	r5, r5, #21
 800135a:	d100      	bne.n	800135e <__aeabi_dmul+0x26>
 800135c:	e1cd      	b.n	80016fa <__aeabi_dmul+0x3c2>
 800135e:	4bce      	ldr	r3, [pc, #824]	; (8001698 <__aeabi_dmul+0x360>)
 8001360:	429d      	cmp	r5, r3
 8001362:	d100      	bne.n	8001366 <__aeabi_dmul+0x2e>
 8001364:	e1e9      	b.n	800173a <__aeabi_dmul+0x402>
 8001366:	465a      	mov	r2, fp
 8001368:	0f43      	lsrs	r3, r0, #29
 800136a:	00d2      	lsls	r2, r2, #3
 800136c:	4313      	orrs	r3, r2
 800136e:	2280      	movs	r2, #128	; 0x80
 8001370:	0412      	lsls	r2, r2, #16
 8001372:	431a      	orrs	r2, r3
 8001374:	00c3      	lsls	r3, r0, #3
 8001376:	469a      	mov	sl, r3
 8001378:	4bc8      	ldr	r3, [pc, #800]	; (800169c <__aeabi_dmul+0x364>)
 800137a:	4693      	mov	fp, r2
 800137c:	469c      	mov	ip, r3
 800137e:	2300      	movs	r3, #0
 8001380:	2600      	movs	r6, #0
 8001382:	4465      	add	r5, ip
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	033c      	lsls	r4, r7, #12
 8001388:	007b      	lsls	r3, r7, #1
 800138a:	4648      	mov	r0, r9
 800138c:	0b24      	lsrs	r4, r4, #12
 800138e:	0d5b      	lsrs	r3, r3, #21
 8001390:	0fff      	lsrs	r7, r7, #31
 8001392:	2b00      	cmp	r3, #0
 8001394:	d100      	bne.n	8001398 <__aeabi_dmul+0x60>
 8001396:	e189      	b.n	80016ac <__aeabi_dmul+0x374>
 8001398:	4abf      	ldr	r2, [pc, #764]	; (8001698 <__aeabi_dmul+0x360>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d019      	beq.n	80013d2 <__aeabi_dmul+0x9a>
 800139e:	0f42      	lsrs	r2, r0, #29
 80013a0:	00e4      	lsls	r4, r4, #3
 80013a2:	4322      	orrs	r2, r4
 80013a4:	2480      	movs	r4, #128	; 0x80
 80013a6:	0424      	lsls	r4, r4, #16
 80013a8:	4314      	orrs	r4, r2
 80013aa:	4abc      	ldr	r2, [pc, #752]	; (800169c <__aeabi_dmul+0x364>)
 80013ac:	2100      	movs	r1, #0
 80013ae:	4694      	mov	ip, r2
 80013b0:	4642      	mov	r2, r8
 80013b2:	4463      	add	r3, ip
 80013b4:	195b      	adds	r3, r3, r5
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	9b01      	ldr	r3, [sp, #4]
 80013ba:	407a      	eors	r2, r7
 80013bc:	3301      	adds	r3, #1
 80013be:	00c0      	lsls	r0, r0, #3
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	2e0a      	cmp	r6, #10
 80013c6:	dd1c      	ble.n	8001402 <__aeabi_dmul+0xca>
 80013c8:	003a      	movs	r2, r7
 80013ca:	2e0b      	cmp	r6, #11
 80013cc:	d05e      	beq.n	800148c <__aeabi_dmul+0x154>
 80013ce:	4647      	mov	r7, r8
 80013d0:	e056      	b.n	8001480 <__aeabi_dmul+0x148>
 80013d2:	4649      	mov	r1, r9
 80013d4:	4bb0      	ldr	r3, [pc, #704]	; (8001698 <__aeabi_dmul+0x360>)
 80013d6:	4321      	orrs	r1, r4
 80013d8:	18eb      	adds	r3, r5, r3
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	2900      	cmp	r1, #0
 80013de:	d12a      	bne.n	8001436 <__aeabi_dmul+0xfe>
 80013e0:	2080      	movs	r0, #128	; 0x80
 80013e2:	2202      	movs	r2, #2
 80013e4:	0100      	lsls	r0, r0, #4
 80013e6:	002b      	movs	r3, r5
 80013e8:	4684      	mov	ip, r0
 80013ea:	4316      	orrs	r6, r2
 80013ec:	4642      	mov	r2, r8
 80013ee:	4463      	add	r3, ip
 80013f0:	407a      	eors	r2, r7
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	2e0a      	cmp	r6, #10
 80013f8:	dd00      	ble.n	80013fc <__aeabi_dmul+0xc4>
 80013fa:	e231      	b.n	8001860 <__aeabi_dmul+0x528>
 80013fc:	2000      	movs	r0, #0
 80013fe:	2400      	movs	r4, #0
 8001400:	2102      	movs	r1, #2
 8001402:	2e02      	cmp	r6, #2
 8001404:	dc26      	bgt.n	8001454 <__aeabi_dmul+0x11c>
 8001406:	3e01      	subs	r6, #1
 8001408:	2e01      	cmp	r6, #1
 800140a:	d852      	bhi.n	80014b2 <__aeabi_dmul+0x17a>
 800140c:	2902      	cmp	r1, #2
 800140e:	d04c      	beq.n	80014aa <__aeabi_dmul+0x172>
 8001410:	2901      	cmp	r1, #1
 8001412:	d000      	beq.n	8001416 <__aeabi_dmul+0xde>
 8001414:	e118      	b.n	8001648 <__aeabi_dmul+0x310>
 8001416:	2300      	movs	r3, #0
 8001418:	2400      	movs	r4, #0
 800141a:	2500      	movs	r5, #0
 800141c:	051b      	lsls	r3, r3, #20
 800141e:	4323      	orrs	r3, r4
 8001420:	07d2      	lsls	r2, r2, #31
 8001422:	4313      	orrs	r3, r2
 8001424:	0028      	movs	r0, r5
 8001426:	0019      	movs	r1, r3
 8001428:	b007      	add	sp, #28
 800142a:	bcf0      	pop	{r4, r5, r6, r7}
 800142c:	46bb      	mov	fp, r7
 800142e:	46b2      	mov	sl, r6
 8001430:	46a9      	mov	r9, r5
 8001432:	46a0      	mov	r8, r4
 8001434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001436:	2180      	movs	r1, #128	; 0x80
 8001438:	2203      	movs	r2, #3
 800143a:	0109      	lsls	r1, r1, #4
 800143c:	002b      	movs	r3, r5
 800143e:	468c      	mov	ip, r1
 8001440:	4316      	orrs	r6, r2
 8001442:	4642      	mov	r2, r8
 8001444:	4463      	add	r3, ip
 8001446:	407a      	eors	r2, r7
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	2e0a      	cmp	r6, #10
 800144e:	dd00      	ble.n	8001452 <__aeabi_dmul+0x11a>
 8001450:	e228      	b.n	80018a4 <__aeabi_dmul+0x56c>
 8001452:	2103      	movs	r1, #3
 8001454:	2501      	movs	r5, #1
 8001456:	40b5      	lsls	r5, r6
 8001458:	46ac      	mov	ip, r5
 800145a:	26a6      	movs	r6, #166	; 0xa6
 800145c:	4663      	mov	r3, ip
 800145e:	00f6      	lsls	r6, r6, #3
 8001460:	4035      	ands	r5, r6
 8001462:	4233      	tst	r3, r6
 8001464:	d10b      	bne.n	800147e <__aeabi_dmul+0x146>
 8001466:	2690      	movs	r6, #144	; 0x90
 8001468:	00b6      	lsls	r6, r6, #2
 800146a:	4233      	tst	r3, r6
 800146c:	d118      	bne.n	80014a0 <__aeabi_dmul+0x168>
 800146e:	3eb9      	subs	r6, #185	; 0xb9
 8001470:	3eff      	subs	r6, #255	; 0xff
 8001472:	421e      	tst	r6, r3
 8001474:	d01d      	beq.n	80014b2 <__aeabi_dmul+0x17a>
 8001476:	46a3      	mov	fp, r4
 8001478:	4682      	mov	sl, r0
 800147a:	9100      	str	r1, [sp, #0]
 800147c:	e000      	b.n	8001480 <__aeabi_dmul+0x148>
 800147e:	0017      	movs	r7, r2
 8001480:	9900      	ldr	r1, [sp, #0]
 8001482:	003a      	movs	r2, r7
 8001484:	2902      	cmp	r1, #2
 8001486:	d010      	beq.n	80014aa <__aeabi_dmul+0x172>
 8001488:	465c      	mov	r4, fp
 800148a:	4650      	mov	r0, sl
 800148c:	2903      	cmp	r1, #3
 800148e:	d1bf      	bne.n	8001410 <__aeabi_dmul+0xd8>
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	031b      	lsls	r3, r3, #12
 8001494:	431c      	orrs	r4, r3
 8001496:	0324      	lsls	r4, r4, #12
 8001498:	0005      	movs	r5, r0
 800149a:	4b7f      	ldr	r3, [pc, #508]	; (8001698 <__aeabi_dmul+0x360>)
 800149c:	0b24      	lsrs	r4, r4, #12
 800149e:	e7bd      	b.n	800141c <__aeabi_dmul+0xe4>
 80014a0:	2480      	movs	r4, #128	; 0x80
 80014a2:	2200      	movs	r2, #0
 80014a4:	4b7c      	ldr	r3, [pc, #496]	; (8001698 <__aeabi_dmul+0x360>)
 80014a6:	0324      	lsls	r4, r4, #12
 80014a8:	e7b8      	b.n	800141c <__aeabi_dmul+0xe4>
 80014aa:	2400      	movs	r4, #0
 80014ac:	2500      	movs	r5, #0
 80014ae:	4b7a      	ldr	r3, [pc, #488]	; (8001698 <__aeabi_dmul+0x360>)
 80014b0:	e7b4      	b.n	800141c <__aeabi_dmul+0xe4>
 80014b2:	4653      	mov	r3, sl
 80014b4:	041e      	lsls	r6, r3, #16
 80014b6:	0c36      	lsrs	r6, r6, #16
 80014b8:	0c1f      	lsrs	r7, r3, #16
 80014ba:	0033      	movs	r3, r6
 80014bc:	0c01      	lsrs	r1, r0, #16
 80014be:	0400      	lsls	r0, r0, #16
 80014c0:	0c00      	lsrs	r0, r0, #16
 80014c2:	4343      	muls	r3, r0
 80014c4:	4698      	mov	r8, r3
 80014c6:	0003      	movs	r3, r0
 80014c8:	437b      	muls	r3, r7
 80014ca:	4699      	mov	r9, r3
 80014cc:	0033      	movs	r3, r6
 80014ce:	434b      	muls	r3, r1
 80014d0:	469c      	mov	ip, r3
 80014d2:	4643      	mov	r3, r8
 80014d4:	000d      	movs	r5, r1
 80014d6:	0c1b      	lsrs	r3, r3, #16
 80014d8:	469a      	mov	sl, r3
 80014da:	437d      	muls	r5, r7
 80014dc:	44cc      	add	ip, r9
 80014de:	44d4      	add	ip, sl
 80014e0:	9500      	str	r5, [sp, #0]
 80014e2:	45e1      	cmp	r9, ip
 80014e4:	d904      	bls.n	80014f0 <__aeabi_dmul+0x1b8>
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	025b      	lsls	r3, r3, #9
 80014ea:	4699      	mov	r9, r3
 80014ec:	444d      	add	r5, r9
 80014ee:	9500      	str	r5, [sp, #0]
 80014f0:	4663      	mov	r3, ip
 80014f2:	0c1b      	lsrs	r3, r3, #16
 80014f4:	001d      	movs	r5, r3
 80014f6:	4663      	mov	r3, ip
 80014f8:	041b      	lsls	r3, r3, #16
 80014fa:	469c      	mov	ip, r3
 80014fc:	4643      	mov	r3, r8
 80014fe:	041b      	lsls	r3, r3, #16
 8001500:	0c1b      	lsrs	r3, r3, #16
 8001502:	4698      	mov	r8, r3
 8001504:	4663      	mov	r3, ip
 8001506:	4443      	add	r3, r8
 8001508:	9303      	str	r3, [sp, #12]
 800150a:	0c23      	lsrs	r3, r4, #16
 800150c:	4698      	mov	r8, r3
 800150e:	0033      	movs	r3, r6
 8001510:	0424      	lsls	r4, r4, #16
 8001512:	0c24      	lsrs	r4, r4, #16
 8001514:	4363      	muls	r3, r4
 8001516:	469c      	mov	ip, r3
 8001518:	0023      	movs	r3, r4
 800151a:	437b      	muls	r3, r7
 800151c:	4699      	mov	r9, r3
 800151e:	4643      	mov	r3, r8
 8001520:	435e      	muls	r6, r3
 8001522:	435f      	muls	r7, r3
 8001524:	444e      	add	r6, r9
 8001526:	4663      	mov	r3, ip
 8001528:	46b2      	mov	sl, r6
 800152a:	0c1e      	lsrs	r6, r3, #16
 800152c:	4456      	add	r6, sl
 800152e:	45b1      	cmp	r9, r6
 8001530:	d903      	bls.n	800153a <__aeabi_dmul+0x202>
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	025b      	lsls	r3, r3, #9
 8001536:	4699      	mov	r9, r3
 8001538:	444f      	add	r7, r9
 800153a:	0c33      	lsrs	r3, r6, #16
 800153c:	4699      	mov	r9, r3
 800153e:	003b      	movs	r3, r7
 8001540:	444b      	add	r3, r9
 8001542:	9305      	str	r3, [sp, #20]
 8001544:	4663      	mov	r3, ip
 8001546:	46ac      	mov	ip, r5
 8001548:	041f      	lsls	r7, r3, #16
 800154a:	0c3f      	lsrs	r7, r7, #16
 800154c:	0436      	lsls	r6, r6, #16
 800154e:	19f6      	adds	r6, r6, r7
 8001550:	44b4      	add	ip, r6
 8001552:	4663      	mov	r3, ip
 8001554:	9304      	str	r3, [sp, #16]
 8001556:	465b      	mov	r3, fp
 8001558:	0c1b      	lsrs	r3, r3, #16
 800155a:	469c      	mov	ip, r3
 800155c:	465b      	mov	r3, fp
 800155e:	041f      	lsls	r7, r3, #16
 8001560:	0c3f      	lsrs	r7, r7, #16
 8001562:	003b      	movs	r3, r7
 8001564:	4343      	muls	r3, r0
 8001566:	4699      	mov	r9, r3
 8001568:	4663      	mov	r3, ip
 800156a:	4343      	muls	r3, r0
 800156c:	469a      	mov	sl, r3
 800156e:	464b      	mov	r3, r9
 8001570:	4660      	mov	r0, ip
 8001572:	0c1b      	lsrs	r3, r3, #16
 8001574:	469b      	mov	fp, r3
 8001576:	4348      	muls	r0, r1
 8001578:	4379      	muls	r1, r7
 800157a:	4451      	add	r1, sl
 800157c:	4459      	add	r1, fp
 800157e:	458a      	cmp	sl, r1
 8001580:	d903      	bls.n	800158a <__aeabi_dmul+0x252>
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	025b      	lsls	r3, r3, #9
 8001586:	469a      	mov	sl, r3
 8001588:	4450      	add	r0, sl
 800158a:	0c0b      	lsrs	r3, r1, #16
 800158c:	469a      	mov	sl, r3
 800158e:	464b      	mov	r3, r9
 8001590:	041b      	lsls	r3, r3, #16
 8001592:	0c1b      	lsrs	r3, r3, #16
 8001594:	4699      	mov	r9, r3
 8001596:	003b      	movs	r3, r7
 8001598:	4363      	muls	r3, r4
 800159a:	0409      	lsls	r1, r1, #16
 800159c:	4645      	mov	r5, r8
 800159e:	4449      	add	r1, r9
 80015a0:	4699      	mov	r9, r3
 80015a2:	4663      	mov	r3, ip
 80015a4:	435c      	muls	r4, r3
 80015a6:	436b      	muls	r3, r5
 80015a8:	469c      	mov	ip, r3
 80015aa:	464b      	mov	r3, r9
 80015ac:	0c1b      	lsrs	r3, r3, #16
 80015ae:	4698      	mov	r8, r3
 80015b0:	436f      	muls	r7, r5
 80015b2:	193f      	adds	r7, r7, r4
 80015b4:	4447      	add	r7, r8
 80015b6:	4450      	add	r0, sl
 80015b8:	42bc      	cmp	r4, r7
 80015ba:	d903      	bls.n	80015c4 <__aeabi_dmul+0x28c>
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	025b      	lsls	r3, r3, #9
 80015c0:	4698      	mov	r8, r3
 80015c2:	44c4      	add	ip, r8
 80015c4:	9b04      	ldr	r3, [sp, #16]
 80015c6:	9d00      	ldr	r5, [sp, #0]
 80015c8:	4698      	mov	r8, r3
 80015ca:	4445      	add	r5, r8
 80015cc:	42b5      	cmp	r5, r6
 80015ce:	41b6      	sbcs	r6, r6
 80015d0:	4273      	negs	r3, r6
 80015d2:	4698      	mov	r8, r3
 80015d4:	464b      	mov	r3, r9
 80015d6:	041e      	lsls	r6, r3, #16
 80015d8:	9b05      	ldr	r3, [sp, #20]
 80015da:	043c      	lsls	r4, r7, #16
 80015dc:	4699      	mov	r9, r3
 80015de:	0c36      	lsrs	r6, r6, #16
 80015e0:	19a4      	adds	r4, r4, r6
 80015e2:	444c      	add	r4, r9
 80015e4:	46a1      	mov	r9, r4
 80015e6:	4683      	mov	fp, r0
 80015e8:	186e      	adds	r6, r5, r1
 80015ea:	44c1      	add	r9, r8
 80015ec:	428e      	cmp	r6, r1
 80015ee:	4189      	sbcs	r1, r1
 80015f0:	44cb      	add	fp, r9
 80015f2:	465d      	mov	r5, fp
 80015f4:	4249      	negs	r1, r1
 80015f6:	186d      	adds	r5, r5, r1
 80015f8:	429c      	cmp	r4, r3
 80015fa:	41a4      	sbcs	r4, r4
 80015fc:	45c1      	cmp	r9, r8
 80015fe:	419b      	sbcs	r3, r3
 8001600:	4583      	cmp	fp, r0
 8001602:	4180      	sbcs	r0, r0
 8001604:	428d      	cmp	r5, r1
 8001606:	4189      	sbcs	r1, r1
 8001608:	425b      	negs	r3, r3
 800160a:	4264      	negs	r4, r4
 800160c:	431c      	orrs	r4, r3
 800160e:	4240      	negs	r0, r0
 8001610:	9b03      	ldr	r3, [sp, #12]
 8001612:	4249      	negs	r1, r1
 8001614:	4301      	orrs	r1, r0
 8001616:	0270      	lsls	r0, r6, #9
 8001618:	0c3f      	lsrs	r7, r7, #16
 800161a:	4318      	orrs	r0, r3
 800161c:	19e4      	adds	r4, r4, r7
 800161e:	1e47      	subs	r7, r0, #1
 8001620:	41b8      	sbcs	r0, r7
 8001622:	1864      	adds	r4, r4, r1
 8001624:	4464      	add	r4, ip
 8001626:	0df6      	lsrs	r6, r6, #23
 8001628:	0261      	lsls	r1, r4, #9
 800162a:	4330      	orrs	r0, r6
 800162c:	0dec      	lsrs	r4, r5, #23
 800162e:	026e      	lsls	r6, r5, #9
 8001630:	430c      	orrs	r4, r1
 8001632:	4330      	orrs	r0, r6
 8001634:	01c9      	lsls	r1, r1, #7
 8001636:	d400      	bmi.n	800163a <__aeabi_dmul+0x302>
 8001638:	e0f1      	b.n	800181e <__aeabi_dmul+0x4e6>
 800163a:	2101      	movs	r1, #1
 800163c:	0843      	lsrs	r3, r0, #1
 800163e:	4001      	ands	r1, r0
 8001640:	430b      	orrs	r3, r1
 8001642:	07e0      	lsls	r0, r4, #31
 8001644:	4318      	orrs	r0, r3
 8001646:	0864      	lsrs	r4, r4, #1
 8001648:	4915      	ldr	r1, [pc, #84]	; (80016a0 <__aeabi_dmul+0x368>)
 800164a:	9b02      	ldr	r3, [sp, #8]
 800164c:	468c      	mov	ip, r1
 800164e:	4463      	add	r3, ip
 8001650:	2b00      	cmp	r3, #0
 8001652:	dc00      	bgt.n	8001656 <__aeabi_dmul+0x31e>
 8001654:	e097      	b.n	8001786 <__aeabi_dmul+0x44e>
 8001656:	0741      	lsls	r1, r0, #29
 8001658:	d009      	beq.n	800166e <__aeabi_dmul+0x336>
 800165a:	210f      	movs	r1, #15
 800165c:	4001      	ands	r1, r0
 800165e:	2904      	cmp	r1, #4
 8001660:	d005      	beq.n	800166e <__aeabi_dmul+0x336>
 8001662:	1d01      	adds	r1, r0, #4
 8001664:	4281      	cmp	r1, r0
 8001666:	4180      	sbcs	r0, r0
 8001668:	4240      	negs	r0, r0
 800166a:	1824      	adds	r4, r4, r0
 800166c:	0008      	movs	r0, r1
 800166e:	01e1      	lsls	r1, r4, #7
 8001670:	d506      	bpl.n	8001680 <__aeabi_dmul+0x348>
 8001672:	2180      	movs	r1, #128	; 0x80
 8001674:	00c9      	lsls	r1, r1, #3
 8001676:	468c      	mov	ip, r1
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <__aeabi_dmul+0x36c>)
 800167a:	401c      	ands	r4, r3
 800167c:	9b02      	ldr	r3, [sp, #8]
 800167e:	4463      	add	r3, ip
 8001680:	4909      	ldr	r1, [pc, #36]	; (80016a8 <__aeabi_dmul+0x370>)
 8001682:	428b      	cmp	r3, r1
 8001684:	dd00      	ble.n	8001688 <__aeabi_dmul+0x350>
 8001686:	e710      	b.n	80014aa <__aeabi_dmul+0x172>
 8001688:	0761      	lsls	r1, r4, #29
 800168a:	08c5      	lsrs	r5, r0, #3
 800168c:	0264      	lsls	r4, r4, #9
 800168e:	055b      	lsls	r3, r3, #21
 8001690:	430d      	orrs	r5, r1
 8001692:	0b24      	lsrs	r4, r4, #12
 8001694:	0d5b      	lsrs	r3, r3, #21
 8001696:	e6c1      	b.n	800141c <__aeabi_dmul+0xe4>
 8001698:	000007ff 	.word	0x000007ff
 800169c:	fffffc01 	.word	0xfffffc01
 80016a0:	000003ff 	.word	0x000003ff
 80016a4:	feffffff 	.word	0xfeffffff
 80016a8:	000007fe 	.word	0x000007fe
 80016ac:	464b      	mov	r3, r9
 80016ae:	4323      	orrs	r3, r4
 80016b0:	d059      	beq.n	8001766 <__aeabi_dmul+0x42e>
 80016b2:	2c00      	cmp	r4, #0
 80016b4:	d100      	bne.n	80016b8 <__aeabi_dmul+0x380>
 80016b6:	e0a3      	b.n	8001800 <__aeabi_dmul+0x4c8>
 80016b8:	0020      	movs	r0, r4
 80016ba:	f000 fd05 	bl	80020c8 <__clzsi2>
 80016be:	0001      	movs	r1, r0
 80016c0:	0003      	movs	r3, r0
 80016c2:	390b      	subs	r1, #11
 80016c4:	221d      	movs	r2, #29
 80016c6:	1a52      	subs	r2, r2, r1
 80016c8:	4649      	mov	r1, r9
 80016ca:	0018      	movs	r0, r3
 80016cc:	40d1      	lsrs	r1, r2
 80016ce:	464a      	mov	r2, r9
 80016d0:	3808      	subs	r0, #8
 80016d2:	4082      	lsls	r2, r0
 80016d4:	4084      	lsls	r4, r0
 80016d6:	0010      	movs	r0, r2
 80016d8:	430c      	orrs	r4, r1
 80016da:	4a74      	ldr	r2, [pc, #464]	; (80018ac <__aeabi_dmul+0x574>)
 80016dc:	1aeb      	subs	r3, r5, r3
 80016de:	4694      	mov	ip, r2
 80016e0:	4642      	mov	r2, r8
 80016e2:	4463      	add	r3, ip
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	9b01      	ldr	r3, [sp, #4]
 80016e8:	407a      	eors	r2, r7
 80016ea:	3301      	adds	r3, #1
 80016ec:	2100      	movs	r1, #0
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	9302      	str	r3, [sp, #8]
 80016f2:	2e0a      	cmp	r6, #10
 80016f4:	dd00      	ble.n	80016f8 <__aeabi_dmul+0x3c0>
 80016f6:	e667      	b.n	80013c8 <__aeabi_dmul+0x90>
 80016f8:	e683      	b.n	8001402 <__aeabi_dmul+0xca>
 80016fa:	465b      	mov	r3, fp
 80016fc:	4303      	orrs	r3, r0
 80016fe:	469a      	mov	sl, r3
 8001700:	d02a      	beq.n	8001758 <__aeabi_dmul+0x420>
 8001702:	465b      	mov	r3, fp
 8001704:	2b00      	cmp	r3, #0
 8001706:	d06d      	beq.n	80017e4 <__aeabi_dmul+0x4ac>
 8001708:	4658      	mov	r0, fp
 800170a:	f000 fcdd 	bl	80020c8 <__clzsi2>
 800170e:	0001      	movs	r1, r0
 8001710:	0003      	movs	r3, r0
 8001712:	390b      	subs	r1, #11
 8001714:	221d      	movs	r2, #29
 8001716:	1a52      	subs	r2, r2, r1
 8001718:	0021      	movs	r1, r4
 800171a:	0018      	movs	r0, r3
 800171c:	465d      	mov	r5, fp
 800171e:	40d1      	lsrs	r1, r2
 8001720:	3808      	subs	r0, #8
 8001722:	4085      	lsls	r5, r0
 8001724:	000a      	movs	r2, r1
 8001726:	4084      	lsls	r4, r0
 8001728:	432a      	orrs	r2, r5
 800172a:	4693      	mov	fp, r2
 800172c:	46a2      	mov	sl, r4
 800172e:	4d5f      	ldr	r5, [pc, #380]	; (80018ac <__aeabi_dmul+0x574>)
 8001730:	2600      	movs	r6, #0
 8001732:	1aed      	subs	r5, r5, r3
 8001734:	2300      	movs	r3, #0
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	e625      	b.n	8001386 <__aeabi_dmul+0x4e>
 800173a:	465b      	mov	r3, fp
 800173c:	4303      	orrs	r3, r0
 800173e:	469a      	mov	sl, r3
 8001740:	d105      	bne.n	800174e <__aeabi_dmul+0x416>
 8001742:	2300      	movs	r3, #0
 8001744:	469b      	mov	fp, r3
 8001746:	3302      	adds	r3, #2
 8001748:	2608      	movs	r6, #8
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	e61b      	b.n	8001386 <__aeabi_dmul+0x4e>
 800174e:	2303      	movs	r3, #3
 8001750:	4682      	mov	sl, r0
 8001752:	260c      	movs	r6, #12
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	e616      	b.n	8001386 <__aeabi_dmul+0x4e>
 8001758:	2300      	movs	r3, #0
 800175a:	469b      	mov	fp, r3
 800175c:	3301      	adds	r3, #1
 800175e:	2604      	movs	r6, #4
 8001760:	2500      	movs	r5, #0
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	e60f      	b.n	8001386 <__aeabi_dmul+0x4e>
 8001766:	4642      	mov	r2, r8
 8001768:	3301      	adds	r3, #1
 800176a:	9501      	str	r5, [sp, #4]
 800176c:	431e      	orrs	r6, r3
 800176e:	9b01      	ldr	r3, [sp, #4]
 8001770:	407a      	eors	r2, r7
 8001772:	3301      	adds	r3, #1
 8001774:	2400      	movs	r4, #0
 8001776:	2000      	movs	r0, #0
 8001778:	2101      	movs	r1, #1
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	9302      	str	r3, [sp, #8]
 800177e:	2e0a      	cmp	r6, #10
 8001780:	dd00      	ble.n	8001784 <__aeabi_dmul+0x44c>
 8001782:	e621      	b.n	80013c8 <__aeabi_dmul+0x90>
 8001784:	e63d      	b.n	8001402 <__aeabi_dmul+0xca>
 8001786:	2101      	movs	r1, #1
 8001788:	1ac9      	subs	r1, r1, r3
 800178a:	2938      	cmp	r1, #56	; 0x38
 800178c:	dd00      	ble.n	8001790 <__aeabi_dmul+0x458>
 800178e:	e642      	b.n	8001416 <__aeabi_dmul+0xde>
 8001790:	291f      	cmp	r1, #31
 8001792:	dd47      	ble.n	8001824 <__aeabi_dmul+0x4ec>
 8001794:	261f      	movs	r6, #31
 8001796:	0025      	movs	r5, r4
 8001798:	4276      	negs	r6, r6
 800179a:	1af3      	subs	r3, r6, r3
 800179c:	40dd      	lsrs	r5, r3
 800179e:	002b      	movs	r3, r5
 80017a0:	2920      	cmp	r1, #32
 80017a2:	d005      	beq.n	80017b0 <__aeabi_dmul+0x478>
 80017a4:	4942      	ldr	r1, [pc, #264]	; (80018b0 <__aeabi_dmul+0x578>)
 80017a6:	9d02      	ldr	r5, [sp, #8]
 80017a8:	468c      	mov	ip, r1
 80017aa:	4465      	add	r5, ip
 80017ac:	40ac      	lsls	r4, r5
 80017ae:	4320      	orrs	r0, r4
 80017b0:	1e41      	subs	r1, r0, #1
 80017b2:	4188      	sbcs	r0, r1
 80017b4:	4318      	orrs	r0, r3
 80017b6:	2307      	movs	r3, #7
 80017b8:	001d      	movs	r5, r3
 80017ba:	2400      	movs	r4, #0
 80017bc:	4005      	ands	r5, r0
 80017be:	4203      	tst	r3, r0
 80017c0:	d04a      	beq.n	8001858 <__aeabi_dmul+0x520>
 80017c2:	230f      	movs	r3, #15
 80017c4:	2400      	movs	r4, #0
 80017c6:	4003      	ands	r3, r0
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d042      	beq.n	8001852 <__aeabi_dmul+0x51a>
 80017cc:	1d03      	adds	r3, r0, #4
 80017ce:	4283      	cmp	r3, r0
 80017d0:	4180      	sbcs	r0, r0
 80017d2:	4240      	negs	r0, r0
 80017d4:	1824      	adds	r4, r4, r0
 80017d6:	0018      	movs	r0, r3
 80017d8:	0223      	lsls	r3, r4, #8
 80017da:	d53a      	bpl.n	8001852 <__aeabi_dmul+0x51a>
 80017dc:	2301      	movs	r3, #1
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	e61b      	b.n	800141c <__aeabi_dmul+0xe4>
 80017e4:	f000 fc70 	bl	80020c8 <__clzsi2>
 80017e8:	0001      	movs	r1, r0
 80017ea:	0003      	movs	r3, r0
 80017ec:	3115      	adds	r1, #21
 80017ee:	3320      	adds	r3, #32
 80017f0:	291c      	cmp	r1, #28
 80017f2:	dd8f      	ble.n	8001714 <__aeabi_dmul+0x3dc>
 80017f4:	3808      	subs	r0, #8
 80017f6:	2200      	movs	r2, #0
 80017f8:	4084      	lsls	r4, r0
 80017fa:	4692      	mov	sl, r2
 80017fc:	46a3      	mov	fp, r4
 80017fe:	e796      	b.n	800172e <__aeabi_dmul+0x3f6>
 8001800:	f000 fc62 	bl	80020c8 <__clzsi2>
 8001804:	0001      	movs	r1, r0
 8001806:	0003      	movs	r3, r0
 8001808:	3115      	adds	r1, #21
 800180a:	3320      	adds	r3, #32
 800180c:	291c      	cmp	r1, #28
 800180e:	dc00      	bgt.n	8001812 <__aeabi_dmul+0x4da>
 8001810:	e758      	b.n	80016c4 <__aeabi_dmul+0x38c>
 8001812:	0002      	movs	r2, r0
 8001814:	464c      	mov	r4, r9
 8001816:	3a08      	subs	r2, #8
 8001818:	2000      	movs	r0, #0
 800181a:	4094      	lsls	r4, r2
 800181c:	e75d      	b.n	80016da <__aeabi_dmul+0x3a2>
 800181e:	9b01      	ldr	r3, [sp, #4]
 8001820:	9302      	str	r3, [sp, #8]
 8001822:	e711      	b.n	8001648 <__aeabi_dmul+0x310>
 8001824:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <__aeabi_dmul+0x57c>)
 8001826:	0026      	movs	r6, r4
 8001828:	469c      	mov	ip, r3
 800182a:	0003      	movs	r3, r0
 800182c:	9d02      	ldr	r5, [sp, #8]
 800182e:	40cb      	lsrs	r3, r1
 8001830:	4465      	add	r5, ip
 8001832:	40ae      	lsls	r6, r5
 8001834:	431e      	orrs	r6, r3
 8001836:	0003      	movs	r3, r0
 8001838:	40ab      	lsls	r3, r5
 800183a:	1e58      	subs	r0, r3, #1
 800183c:	4183      	sbcs	r3, r0
 800183e:	0030      	movs	r0, r6
 8001840:	4318      	orrs	r0, r3
 8001842:	40cc      	lsrs	r4, r1
 8001844:	0743      	lsls	r3, r0, #29
 8001846:	d0c7      	beq.n	80017d8 <__aeabi_dmul+0x4a0>
 8001848:	230f      	movs	r3, #15
 800184a:	4003      	ands	r3, r0
 800184c:	2b04      	cmp	r3, #4
 800184e:	d1bd      	bne.n	80017cc <__aeabi_dmul+0x494>
 8001850:	e7c2      	b.n	80017d8 <__aeabi_dmul+0x4a0>
 8001852:	0765      	lsls	r5, r4, #29
 8001854:	0264      	lsls	r4, r4, #9
 8001856:	0b24      	lsrs	r4, r4, #12
 8001858:	08c0      	lsrs	r0, r0, #3
 800185a:	2300      	movs	r3, #0
 800185c:	4305      	orrs	r5, r0
 800185e:	e5dd      	b.n	800141c <__aeabi_dmul+0xe4>
 8001860:	2500      	movs	r5, #0
 8001862:	2302      	movs	r3, #2
 8001864:	2e0f      	cmp	r6, #15
 8001866:	d10c      	bne.n	8001882 <__aeabi_dmul+0x54a>
 8001868:	2480      	movs	r4, #128	; 0x80
 800186a:	465b      	mov	r3, fp
 800186c:	0324      	lsls	r4, r4, #12
 800186e:	4223      	tst	r3, r4
 8001870:	d00e      	beq.n	8001890 <__aeabi_dmul+0x558>
 8001872:	4221      	tst	r1, r4
 8001874:	d10c      	bne.n	8001890 <__aeabi_dmul+0x558>
 8001876:	430c      	orrs	r4, r1
 8001878:	0324      	lsls	r4, r4, #12
 800187a:	003a      	movs	r2, r7
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <__aeabi_dmul+0x580>)
 800187e:	0b24      	lsrs	r4, r4, #12
 8001880:	e5cc      	b.n	800141c <__aeabi_dmul+0xe4>
 8001882:	2e0b      	cmp	r6, #11
 8001884:	d000      	beq.n	8001888 <__aeabi_dmul+0x550>
 8001886:	e5a2      	b.n	80013ce <__aeabi_dmul+0x96>
 8001888:	468b      	mov	fp, r1
 800188a:	46aa      	mov	sl, r5
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	e5f7      	b.n	8001480 <__aeabi_dmul+0x148>
 8001890:	2480      	movs	r4, #128	; 0x80
 8001892:	465b      	mov	r3, fp
 8001894:	0324      	lsls	r4, r4, #12
 8001896:	431c      	orrs	r4, r3
 8001898:	0324      	lsls	r4, r4, #12
 800189a:	4642      	mov	r2, r8
 800189c:	4655      	mov	r5, sl
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <__aeabi_dmul+0x580>)
 80018a0:	0b24      	lsrs	r4, r4, #12
 80018a2:	e5bb      	b.n	800141c <__aeabi_dmul+0xe4>
 80018a4:	464d      	mov	r5, r9
 80018a6:	0021      	movs	r1, r4
 80018a8:	2303      	movs	r3, #3
 80018aa:	e7db      	b.n	8001864 <__aeabi_dmul+0x52c>
 80018ac:	fffffc0d 	.word	0xfffffc0d
 80018b0:	0000043e 	.word	0x0000043e
 80018b4:	0000041e 	.word	0x0000041e
 80018b8:	000007ff 	.word	0x000007ff

080018bc <__aeabi_dsub>:
 80018bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018be:	4657      	mov	r7, sl
 80018c0:	464e      	mov	r6, r9
 80018c2:	4645      	mov	r5, r8
 80018c4:	46de      	mov	lr, fp
 80018c6:	b5e0      	push	{r5, r6, r7, lr}
 80018c8:	000d      	movs	r5, r1
 80018ca:	0004      	movs	r4, r0
 80018cc:	0019      	movs	r1, r3
 80018ce:	0010      	movs	r0, r2
 80018d0:	032b      	lsls	r3, r5, #12
 80018d2:	0a5b      	lsrs	r3, r3, #9
 80018d4:	0f62      	lsrs	r2, r4, #29
 80018d6:	431a      	orrs	r2, r3
 80018d8:	00e3      	lsls	r3, r4, #3
 80018da:	030c      	lsls	r4, r1, #12
 80018dc:	0a64      	lsrs	r4, r4, #9
 80018de:	0f47      	lsrs	r7, r0, #29
 80018e0:	4327      	orrs	r7, r4
 80018e2:	4cd0      	ldr	r4, [pc, #832]	; (8001c24 <__aeabi_dsub+0x368>)
 80018e4:	006e      	lsls	r6, r5, #1
 80018e6:	4691      	mov	r9, r2
 80018e8:	b083      	sub	sp, #12
 80018ea:	004a      	lsls	r2, r1, #1
 80018ec:	00c0      	lsls	r0, r0, #3
 80018ee:	4698      	mov	r8, r3
 80018f0:	46a2      	mov	sl, r4
 80018f2:	0d76      	lsrs	r6, r6, #21
 80018f4:	0fed      	lsrs	r5, r5, #31
 80018f6:	0d52      	lsrs	r2, r2, #21
 80018f8:	0fc9      	lsrs	r1, r1, #31
 80018fa:	9001      	str	r0, [sp, #4]
 80018fc:	42a2      	cmp	r2, r4
 80018fe:	d100      	bne.n	8001902 <__aeabi_dsub+0x46>
 8001900:	e0b9      	b.n	8001a76 <__aeabi_dsub+0x1ba>
 8001902:	2401      	movs	r4, #1
 8001904:	4061      	eors	r1, r4
 8001906:	468b      	mov	fp, r1
 8001908:	428d      	cmp	r5, r1
 800190a:	d100      	bne.n	800190e <__aeabi_dsub+0x52>
 800190c:	e08d      	b.n	8001a2a <__aeabi_dsub+0x16e>
 800190e:	1ab4      	subs	r4, r6, r2
 8001910:	46a4      	mov	ip, r4
 8001912:	2c00      	cmp	r4, #0
 8001914:	dc00      	bgt.n	8001918 <__aeabi_dsub+0x5c>
 8001916:	e0b7      	b.n	8001a88 <__aeabi_dsub+0x1cc>
 8001918:	2a00      	cmp	r2, #0
 800191a:	d100      	bne.n	800191e <__aeabi_dsub+0x62>
 800191c:	e0cb      	b.n	8001ab6 <__aeabi_dsub+0x1fa>
 800191e:	4ac1      	ldr	r2, [pc, #772]	; (8001c24 <__aeabi_dsub+0x368>)
 8001920:	4296      	cmp	r6, r2
 8001922:	d100      	bne.n	8001926 <__aeabi_dsub+0x6a>
 8001924:	e186      	b.n	8001c34 <__aeabi_dsub+0x378>
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	0412      	lsls	r2, r2, #16
 800192a:	4317      	orrs	r7, r2
 800192c:	4662      	mov	r2, ip
 800192e:	2a38      	cmp	r2, #56	; 0x38
 8001930:	dd00      	ble.n	8001934 <__aeabi_dsub+0x78>
 8001932:	e1a4      	b.n	8001c7e <__aeabi_dsub+0x3c2>
 8001934:	2a1f      	cmp	r2, #31
 8001936:	dd00      	ble.n	800193a <__aeabi_dsub+0x7e>
 8001938:	e21d      	b.n	8001d76 <__aeabi_dsub+0x4ba>
 800193a:	4661      	mov	r1, ip
 800193c:	2220      	movs	r2, #32
 800193e:	003c      	movs	r4, r7
 8001940:	1a52      	subs	r2, r2, r1
 8001942:	0001      	movs	r1, r0
 8001944:	4090      	lsls	r0, r2
 8001946:	4094      	lsls	r4, r2
 8001948:	1e42      	subs	r2, r0, #1
 800194a:	4190      	sbcs	r0, r2
 800194c:	4662      	mov	r2, ip
 800194e:	46a0      	mov	r8, r4
 8001950:	4664      	mov	r4, ip
 8001952:	40d7      	lsrs	r7, r2
 8001954:	464a      	mov	r2, r9
 8001956:	40e1      	lsrs	r1, r4
 8001958:	4644      	mov	r4, r8
 800195a:	1bd2      	subs	r2, r2, r7
 800195c:	4691      	mov	r9, r2
 800195e:	430c      	orrs	r4, r1
 8001960:	4304      	orrs	r4, r0
 8001962:	1b1c      	subs	r4, r3, r4
 8001964:	42a3      	cmp	r3, r4
 8001966:	4192      	sbcs	r2, r2
 8001968:	464b      	mov	r3, r9
 800196a:	4252      	negs	r2, r2
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	469a      	mov	sl, r3
 8001970:	4653      	mov	r3, sl
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	d400      	bmi.n	8001978 <__aeabi_dsub+0xbc>
 8001976:	e12b      	b.n	8001bd0 <__aeabi_dsub+0x314>
 8001978:	4653      	mov	r3, sl
 800197a:	025a      	lsls	r2, r3, #9
 800197c:	0a53      	lsrs	r3, r2, #9
 800197e:	469a      	mov	sl, r3
 8001980:	4653      	mov	r3, sl
 8001982:	2b00      	cmp	r3, #0
 8001984:	d100      	bne.n	8001988 <__aeabi_dsub+0xcc>
 8001986:	e166      	b.n	8001c56 <__aeabi_dsub+0x39a>
 8001988:	4650      	mov	r0, sl
 800198a:	f000 fb9d 	bl	80020c8 <__clzsi2>
 800198e:	0003      	movs	r3, r0
 8001990:	3b08      	subs	r3, #8
 8001992:	2220      	movs	r2, #32
 8001994:	0020      	movs	r0, r4
 8001996:	1ad2      	subs	r2, r2, r3
 8001998:	4651      	mov	r1, sl
 800199a:	40d0      	lsrs	r0, r2
 800199c:	4099      	lsls	r1, r3
 800199e:	0002      	movs	r2, r0
 80019a0:	409c      	lsls	r4, r3
 80019a2:	430a      	orrs	r2, r1
 80019a4:	429e      	cmp	r6, r3
 80019a6:	dd00      	ble.n	80019aa <__aeabi_dsub+0xee>
 80019a8:	e164      	b.n	8001c74 <__aeabi_dsub+0x3b8>
 80019aa:	1b9b      	subs	r3, r3, r6
 80019ac:	1c59      	adds	r1, r3, #1
 80019ae:	291f      	cmp	r1, #31
 80019b0:	dd00      	ble.n	80019b4 <__aeabi_dsub+0xf8>
 80019b2:	e0fe      	b.n	8001bb2 <__aeabi_dsub+0x2f6>
 80019b4:	2320      	movs	r3, #32
 80019b6:	0010      	movs	r0, r2
 80019b8:	0026      	movs	r6, r4
 80019ba:	1a5b      	subs	r3, r3, r1
 80019bc:	409c      	lsls	r4, r3
 80019be:	4098      	lsls	r0, r3
 80019c0:	40ce      	lsrs	r6, r1
 80019c2:	40ca      	lsrs	r2, r1
 80019c4:	1e63      	subs	r3, r4, #1
 80019c6:	419c      	sbcs	r4, r3
 80019c8:	4330      	orrs	r0, r6
 80019ca:	4692      	mov	sl, r2
 80019cc:	2600      	movs	r6, #0
 80019ce:	4304      	orrs	r4, r0
 80019d0:	0763      	lsls	r3, r4, #29
 80019d2:	d009      	beq.n	80019e8 <__aeabi_dsub+0x12c>
 80019d4:	230f      	movs	r3, #15
 80019d6:	4023      	ands	r3, r4
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d005      	beq.n	80019e8 <__aeabi_dsub+0x12c>
 80019dc:	1d23      	adds	r3, r4, #4
 80019de:	42a3      	cmp	r3, r4
 80019e0:	41a4      	sbcs	r4, r4
 80019e2:	4264      	negs	r4, r4
 80019e4:	44a2      	add	sl, r4
 80019e6:	001c      	movs	r4, r3
 80019e8:	4653      	mov	r3, sl
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	d400      	bmi.n	80019f0 <__aeabi_dsub+0x134>
 80019ee:	e0f2      	b.n	8001bd6 <__aeabi_dsub+0x31a>
 80019f0:	4b8c      	ldr	r3, [pc, #560]	; (8001c24 <__aeabi_dsub+0x368>)
 80019f2:	3601      	adds	r6, #1
 80019f4:	429e      	cmp	r6, r3
 80019f6:	d100      	bne.n	80019fa <__aeabi_dsub+0x13e>
 80019f8:	e10f      	b.n	8001c1a <__aeabi_dsub+0x35e>
 80019fa:	4653      	mov	r3, sl
 80019fc:	498a      	ldr	r1, [pc, #552]	; (8001c28 <__aeabi_dsub+0x36c>)
 80019fe:	08e4      	lsrs	r4, r4, #3
 8001a00:	400b      	ands	r3, r1
 8001a02:	0019      	movs	r1, r3
 8001a04:	075b      	lsls	r3, r3, #29
 8001a06:	4323      	orrs	r3, r4
 8001a08:	0572      	lsls	r2, r6, #21
 8001a0a:	024c      	lsls	r4, r1, #9
 8001a0c:	0b24      	lsrs	r4, r4, #12
 8001a0e:	0d52      	lsrs	r2, r2, #21
 8001a10:	0512      	lsls	r2, r2, #20
 8001a12:	4322      	orrs	r2, r4
 8001a14:	07ed      	lsls	r5, r5, #31
 8001a16:	432a      	orrs	r2, r5
 8001a18:	0018      	movs	r0, r3
 8001a1a:	0011      	movs	r1, r2
 8001a1c:	b003      	add	sp, #12
 8001a1e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a20:	46bb      	mov	fp, r7
 8001a22:	46b2      	mov	sl, r6
 8001a24:	46a9      	mov	r9, r5
 8001a26:	46a0      	mov	r8, r4
 8001a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a2a:	1ab4      	subs	r4, r6, r2
 8001a2c:	46a4      	mov	ip, r4
 8001a2e:	2c00      	cmp	r4, #0
 8001a30:	dd59      	ble.n	8001ae6 <__aeabi_dsub+0x22a>
 8001a32:	2a00      	cmp	r2, #0
 8001a34:	d100      	bne.n	8001a38 <__aeabi_dsub+0x17c>
 8001a36:	e0b0      	b.n	8001b9a <__aeabi_dsub+0x2de>
 8001a38:	4556      	cmp	r6, sl
 8001a3a:	d100      	bne.n	8001a3e <__aeabi_dsub+0x182>
 8001a3c:	e0fa      	b.n	8001c34 <__aeabi_dsub+0x378>
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	0412      	lsls	r2, r2, #16
 8001a42:	4317      	orrs	r7, r2
 8001a44:	4662      	mov	r2, ip
 8001a46:	2a38      	cmp	r2, #56	; 0x38
 8001a48:	dd00      	ble.n	8001a4c <__aeabi_dsub+0x190>
 8001a4a:	e0d4      	b.n	8001bf6 <__aeabi_dsub+0x33a>
 8001a4c:	2a1f      	cmp	r2, #31
 8001a4e:	dc00      	bgt.n	8001a52 <__aeabi_dsub+0x196>
 8001a50:	e1c0      	b.n	8001dd4 <__aeabi_dsub+0x518>
 8001a52:	0039      	movs	r1, r7
 8001a54:	3a20      	subs	r2, #32
 8001a56:	40d1      	lsrs	r1, r2
 8001a58:	4662      	mov	r2, ip
 8001a5a:	2a20      	cmp	r2, #32
 8001a5c:	d006      	beq.n	8001a6c <__aeabi_dsub+0x1b0>
 8001a5e:	4664      	mov	r4, ip
 8001a60:	2240      	movs	r2, #64	; 0x40
 8001a62:	1b12      	subs	r2, r2, r4
 8001a64:	003c      	movs	r4, r7
 8001a66:	4094      	lsls	r4, r2
 8001a68:	4304      	orrs	r4, r0
 8001a6a:	9401      	str	r4, [sp, #4]
 8001a6c:	9c01      	ldr	r4, [sp, #4]
 8001a6e:	1e62      	subs	r2, r4, #1
 8001a70:	4194      	sbcs	r4, r2
 8001a72:	430c      	orrs	r4, r1
 8001a74:	e0c3      	b.n	8001bfe <__aeabi_dsub+0x342>
 8001a76:	003c      	movs	r4, r7
 8001a78:	4304      	orrs	r4, r0
 8001a7a:	d02b      	beq.n	8001ad4 <__aeabi_dsub+0x218>
 8001a7c:	468b      	mov	fp, r1
 8001a7e:	428d      	cmp	r5, r1
 8001a80:	d02e      	beq.n	8001ae0 <__aeabi_dsub+0x224>
 8001a82:	4c6a      	ldr	r4, [pc, #424]	; (8001c2c <__aeabi_dsub+0x370>)
 8001a84:	46a4      	mov	ip, r4
 8001a86:	44b4      	add	ip, r6
 8001a88:	4664      	mov	r4, ip
 8001a8a:	2c00      	cmp	r4, #0
 8001a8c:	d05f      	beq.n	8001b4e <__aeabi_dsub+0x292>
 8001a8e:	1b94      	subs	r4, r2, r6
 8001a90:	46a4      	mov	ip, r4
 8001a92:	2e00      	cmp	r6, #0
 8001a94:	d000      	beq.n	8001a98 <__aeabi_dsub+0x1dc>
 8001a96:	e120      	b.n	8001cda <__aeabi_dsub+0x41e>
 8001a98:	464c      	mov	r4, r9
 8001a9a:	431c      	orrs	r4, r3
 8001a9c:	d100      	bne.n	8001aa0 <__aeabi_dsub+0x1e4>
 8001a9e:	e1c7      	b.n	8001e30 <__aeabi_dsub+0x574>
 8001aa0:	4661      	mov	r1, ip
 8001aa2:	1e4c      	subs	r4, r1, #1
 8001aa4:	2901      	cmp	r1, #1
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dsub+0x1ee>
 8001aa8:	e223      	b.n	8001ef2 <__aeabi_dsub+0x636>
 8001aaa:	4d5e      	ldr	r5, [pc, #376]	; (8001c24 <__aeabi_dsub+0x368>)
 8001aac:	45ac      	cmp	ip, r5
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_dsub+0x1f6>
 8001ab0:	e1d8      	b.n	8001e64 <__aeabi_dsub+0x5a8>
 8001ab2:	46a4      	mov	ip, r4
 8001ab4:	e11a      	b.n	8001cec <__aeabi_dsub+0x430>
 8001ab6:	003a      	movs	r2, r7
 8001ab8:	4302      	orrs	r2, r0
 8001aba:	d100      	bne.n	8001abe <__aeabi_dsub+0x202>
 8001abc:	e0e4      	b.n	8001c88 <__aeabi_dsub+0x3cc>
 8001abe:	0022      	movs	r2, r4
 8001ac0:	3a01      	subs	r2, #1
 8001ac2:	2c01      	cmp	r4, #1
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dsub+0x20c>
 8001ac6:	e1c3      	b.n	8001e50 <__aeabi_dsub+0x594>
 8001ac8:	4956      	ldr	r1, [pc, #344]	; (8001c24 <__aeabi_dsub+0x368>)
 8001aca:	428c      	cmp	r4, r1
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_dsub+0x214>
 8001ace:	e0b1      	b.n	8001c34 <__aeabi_dsub+0x378>
 8001ad0:	4694      	mov	ip, r2
 8001ad2:	e72b      	b.n	800192c <__aeabi_dsub+0x70>
 8001ad4:	2401      	movs	r4, #1
 8001ad6:	4061      	eors	r1, r4
 8001ad8:	468b      	mov	fp, r1
 8001ada:	428d      	cmp	r5, r1
 8001adc:	d000      	beq.n	8001ae0 <__aeabi_dsub+0x224>
 8001ade:	e716      	b.n	800190e <__aeabi_dsub+0x52>
 8001ae0:	4952      	ldr	r1, [pc, #328]	; (8001c2c <__aeabi_dsub+0x370>)
 8001ae2:	468c      	mov	ip, r1
 8001ae4:	44b4      	add	ip, r6
 8001ae6:	4664      	mov	r4, ip
 8001ae8:	2c00      	cmp	r4, #0
 8001aea:	d100      	bne.n	8001aee <__aeabi_dsub+0x232>
 8001aec:	e0d3      	b.n	8001c96 <__aeabi_dsub+0x3da>
 8001aee:	1b91      	subs	r1, r2, r6
 8001af0:	468c      	mov	ip, r1
 8001af2:	2e00      	cmp	r6, #0
 8001af4:	d100      	bne.n	8001af8 <__aeabi_dsub+0x23c>
 8001af6:	e15e      	b.n	8001db6 <__aeabi_dsub+0x4fa>
 8001af8:	494a      	ldr	r1, [pc, #296]	; (8001c24 <__aeabi_dsub+0x368>)
 8001afa:	428a      	cmp	r2, r1
 8001afc:	d100      	bne.n	8001b00 <__aeabi_dsub+0x244>
 8001afe:	e1be      	b.n	8001e7e <__aeabi_dsub+0x5c2>
 8001b00:	2180      	movs	r1, #128	; 0x80
 8001b02:	464c      	mov	r4, r9
 8001b04:	0409      	lsls	r1, r1, #16
 8001b06:	430c      	orrs	r4, r1
 8001b08:	46a1      	mov	r9, r4
 8001b0a:	4661      	mov	r1, ip
 8001b0c:	2938      	cmp	r1, #56	; 0x38
 8001b0e:	dd00      	ble.n	8001b12 <__aeabi_dsub+0x256>
 8001b10:	e1ba      	b.n	8001e88 <__aeabi_dsub+0x5cc>
 8001b12:	291f      	cmp	r1, #31
 8001b14:	dd00      	ble.n	8001b18 <__aeabi_dsub+0x25c>
 8001b16:	e227      	b.n	8001f68 <__aeabi_dsub+0x6ac>
 8001b18:	2420      	movs	r4, #32
 8001b1a:	1a64      	subs	r4, r4, r1
 8001b1c:	4649      	mov	r1, r9
 8001b1e:	40a1      	lsls	r1, r4
 8001b20:	001e      	movs	r6, r3
 8001b22:	4688      	mov	r8, r1
 8001b24:	4661      	mov	r1, ip
 8001b26:	40a3      	lsls	r3, r4
 8001b28:	40ce      	lsrs	r6, r1
 8001b2a:	4641      	mov	r1, r8
 8001b2c:	1e5c      	subs	r4, r3, #1
 8001b2e:	41a3      	sbcs	r3, r4
 8001b30:	4331      	orrs	r1, r6
 8001b32:	4319      	orrs	r1, r3
 8001b34:	000c      	movs	r4, r1
 8001b36:	4663      	mov	r3, ip
 8001b38:	4649      	mov	r1, r9
 8001b3a:	40d9      	lsrs	r1, r3
 8001b3c:	187f      	adds	r7, r7, r1
 8001b3e:	1824      	adds	r4, r4, r0
 8001b40:	4284      	cmp	r4, r0
 8001b42:	419b      	sbcs	r3, r3
 8001b44:	425b      	negs	r3, r3
 8001b46:	469a      	mov	sl, r3
 8001b48:	0016      	movs	r6, r2
 8001b4a:	44ba      	add	sl, r7
 8001b4c:	e05d      	b.n	8001c0a <__aeabi_dsub+0x34e>
 8001b4e:	4c38      	ldr	r4, [pc, #224]	; (8001c30 <__aeabi_dsub+0x374>)
 8001b50:	1c72      	adds	r2, r6, #1
 8001b52:	4222      	tst	r2, r4
 8001b54:	d000      	beq.n	8001b58 <__aeabi_dsub+0x29c>
 8001b56:	e0df      	b.n	8001d18 <__aeabi_dsub+0x45c>
 8001b58:	464a      	mov	r2, r9
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	2e00      	cmp	r6, #0
 8001b5e:	d000      	beq.n	8001b62 <__aeabi_dsub+0x2a6>
 8001b60:	e15c      	b.n	8001e1c <__aeabi_dsub+0x560>
 8001b62:	2a00      	cmp	r2, #0
 8001b64:	d100      	bne.n	8001b68 <__aeabi_dsub+0x2ac>
 8001b66:	e1cf      	b.n	8001f08 <__aeabi_dsub+0x64c>
 8001b68:	003a      	movs	r2, r7
 8001b6a:	4302      	orrs	r2, r0
 8001b6c:	d100      	bne.n	8001b70 <__aeabi_dsub+0x2b4>
 8001b6e:	e17f      	b.n	8001e70 <__aeabi_dsub+0x5b4>
 8001b70:	1a1c      	subs	r4, r3, r0
 8001b72:	464a      	mov	r2, r9
 8001b74:	42a3      	cmp	r3, r4
 8001b76:	4189      	sbcs	r1, r1
 8001b78:	1bd2      	subs	r2, r2, r7
 8001b7a:	4249      	negs	r1, r1
 8001b7c:	1a52      	subs	r2, r2, r1
 8001b7e:	4692      	mov	sl, r2
 8001b80:	0212      	lsls	r2, r2, #8
 8001b82:	d400      	bmi.n	8001b86 <__aeabi_dsub+0x2ca>
 8001b84:	e20a      	b.n	8001f9c <__aeabi_dsub+0x6e0>
 8001b86:	1ac4      	subs	r4, r0, r3
 8001b88:	42a0      	cmp	r0, r4
 8001b8a:	4180      	sbcs	r0, r0
 8001b8c:	464b      	mov	r3, r9
 8001b8e:	4240      	negs	r0, r0
 8001b90:	1aff      	subs	r7, r7, r3
 8001b92:	1a3b      	subs	r3, r7, r0
 8001b94:	469a      	mov	sl, r3
 8001b96:	465d      	mov	r5, fp
 8001b98:	e71a      	b.n	80019d0 <__aeabi_dsub+0x114>
 8001b9a:	003a      	movs	r2, r7
 8001b9c:	4302      	orrs	r2, r0
 8001b9e:	d073      	beq.n	8001c88 <__aeabi_dsub+0x3cc>
 8001ba0:	0022      	movs	r2, r4
 8001ba2:	3a01      	subs	r2, #1
 8001ba4:	2c01      	cmp	r4, #1
 8001ba6:	d100      	bne.n	8001baa <__aeabi_dsub+0x2ee>
 8001ba8:	e0cb      	b.n	8001d42 <__aeabi_dsub+0x486>
 8001baa:	4554      	cmp	r4, sl
 8001bac:	d042      	beq.n	8001c34 <__aeabi_dsub+0x378>
 8001bae:	4694      	mov	ip, r2
 8001bb0:	e748      	b.n	8001a44 <__aeabi_dsub+0x188>
 8001bb2:	0010      	movs	r0, r2
 8001bb4:	3b1f      	subs	r3, #31
 8001bb6:	40d8      	lsrs	r0, r3
 8001bb8:	2920      	cmp	r1, #32
 8001bba:	d003      	beq.n	8001bc4 <__aeabi_dsub+0x308>
 8001bbc:	2340      	movs	r3, #64	; 0x40
 8001bbe:	1a5b      	subs	r3, r3, r1
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	4314      	orrs	r4, r2
 8001bc4:	1e63      	subs	r3, r4, #1
 8001bc6:	419c      	sbcs	r4, r3
 8001bc8:	2300      	movs	r3, #0
 8001bca:	2600      	movs	r6, #0
 8001bcc:	469a      	mov	sl, r3
 8001bce:	4304      	orrs	r4, r0
 8001bd0:	0763      	lsls	r3, r4, #29
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dsub+0x31a>
 8001bd4:	e6fe      	b.n	80019d4 <__aeabi_dsub+0x118>
 8001bd6:	4652      	mov	r2, sl
 8001bd8:	08e3      	lsrs	r3, r4, #3
 8001bda:	0752      	lsls	r2, r2, #29
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	4652      	mov	r2, sl
 8001be0:	46b4      	mov	ip, r6
 8001be2:	08d2      	lsrs	r2, r2, #3
 8001be4:	490f      	ldr	r1, [pc, #60]	; (8001c24 <__aeabi_dsub+0x368>)
 8001be6:	458c      	cmp	ip, r1
 8001be8:	d02a      	beq.n	8001c40 <__aeabi_dsub+0x384>
 8001bea:	0312      	lsls	r2, r2, #12
 8001bec:	0b14      	lsrs	r4, r2, #12
 8001bee:	4662      	mov	r2, ip
 8001bf0:	0552      	lsls	r2, r2, #21
 8001bf2:	0d52      	lsrs	r2, r2, #21
 8001bf4:	e70c      	b.n	8001a10 <__aeabi_dsub+0x154>
 8001bf6:	003c      	movs	r4, r7
 8001bf8:	4304      	orrs	r4, r0
 8001bfa:	1e62      	subs	r2, r4, #1
 8001bfc:	4194      	sbcs	r4, r2
 8001bfe:	18e4      	adds	r4, r4, r3
 8001c00:	429c      	cmp	r4, r3
 8001c02:	4192      	sbcs	r2, r2
 8001c04:	4252      	negs	r2, r2
 8001c06:	444a      	add	r2, r9
 8001c08:	4692      	mov	sl, r2
 8001c0a:	4653      	mov	r3, sl
 8001c0c:	021b      	lsls	r3, r3, #8
 8001c0e:	d5df      	bpl.n	8001bd0 <__aeabi_dsub+0x314>
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <__aeabi_dsub+0x368>)
 8001c12:	3601      	adds	r6, #1
 8001c14:	429e      	cmp	r6, r3
 8001c16:	d000      	beq.n	8001c1a <__aeabi_dsub+0x35e>
 8001c18:	e0a0      	b.n	8001d5c <__aeabi_dsub+0x4a0>
 8001c1a:	0032      	movs	r2, r6
 8001c1c:	2400      	movs	r4, #0
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e6f6      	b.n	8001a10 <__aeabi_dsub+0x154>
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	000007ff 	.word	0x000007ff
 8001c28:	ff7fffff 	.word	0xff7fffff
 8001c2c:	fffff801 	.word	0xfffff801
 8001c30:	000007fe 	.word	0x000007fe
 8001c34:	08db      	lsrs	r3, r3, #3
 8001c36:	464a      	mov	r2, r9
 8001c38:	0752      	lsls	r2, r2, #29
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	464a      	mov	r2, r9
 8001c3e:	08d2      	lsrs	r2, r2, #3
 8001c40:	0019      	movs	r1, r3
 8001c42:	4311      	orrs	r1, r2
 8001c44:	d100      	bne.n	8001c48 <__aeabi_dsub+0x38c>
 8001c46:	e1b5      	b.n	8001fb4 <__aeabi_dsub+0x6f8>
 8001c48:	2480      	movs	r4, #128	; 0x80
 8001c4a:	0324      	lsls	r4, r4, #12
 8001c4c:	4314      	orrs	r4, r2
 8001c4e:	0324      	lsls	r4, r4, #12
 8001c50:	4ad5      	ldr	r2, [pc, #852]	; (8001fa8 <__aeabi_dsub+0x6ec>)
 8001c52:	0b24      	lsrs	r4, r4, #12
 8001c54:	e6dc      	b.n	8001a10 <__aeabi_dsub+0x154>
 8001c56:	0020      	movs	r0, r4
 8001c58:	f000 fa36 	bl	80020c8 <__clzsi2>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	3318      	adds	r3, #24
 8001c60:	2b1f      	cmp	r3, #31
 8001c62:	dc00      	bgt.n	8001c66 <__aeabi_dsub+0x3aa>
 8001c64:	e695      	b.n	8001992 <__aeabi_dsub+0xd6>
 8001c66:	0022      	movs	r2, r4
 8001c68:	3808      	subs	r0, #8
 8001c6a:	4082      	lsls	r2, r0
 8001c6c:	2400      	movs	r4, #0
 8001c6e:	429e      	cmp	r6, r3
 8001c70:	dc00      	bgt.n	8001c74 <__aeabi_dsub+0x3b8>
 8001c72:	e69a      	b.n	80019aa <__aeabi_dsub+0xee>
 8001c74:	1af6      	subs	r6, r6, r3
 8001c76:	4bcd      	ldr	r3, [pc, #820]	; (8001fac <__aeabi_dsub+0x6f0>)
 8001c78:	401a      	ands	r2, r3
 8001c7a:	4692      	mov	sl, r2
 8001c7c:	e6a8      	b.n	80019d0 <__aeabi_dsub+0x114>
 8001c7e:	003c      	movs	r4, r7
 8001c80:	4304      	orrs	r4, r0
 8001c82:	1e62      	subs	r2, r4, #1
 8001c84:	4194      	sbcs	r4, r2
 8001c86:	e66c      	b.n	8001962 <__aeabi_dsub+0xa6>
 8001c88:	464a      	mov	r2, r9
 8001c8a:	08db      	lsrs	r3, r3, #3
 8001c8c:	0752      	lsls	r2, r2, #29
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	464a      	mov	r2, r9
 8001c92:	08d2      	lsrs	r2, r2, #3
 8001c94:	e7a6      	b.n	8001be4 <__aeabi_dsub+0x328>
 8001c96:	4cc6      	ldr	r4, [pc, #792]	; (8001fb0 <__aeabi_dsub+0x6f4>)
 8001c98:	1c72      	adds	r2, r6, #1
 8001c9a:	4222      	tst	r2, r4
 8001c9c:	d000      	beq.n	8001ca0 <__aeabi_dsub+0x3e4>
 8001c9e:	e0ac      	b.n	8001dfa <__aeabi_dsub+0x53e>
 8001ca0:	464a      	mov	r2, r9
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	2e00      	cmp	r6, #0
 8001ca6:	d000      	beq.n	8001caa <__aeabi_dsub+0x3ee>
 8001ca8:	e105      	b.n	8001eb6 <__aeabi_dsub+0x5fa>
 8001caa:	2a00      	cmp	r2, #0
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_dsub+0x3f4>
 8001cae:	e156      	b.n	8001f5e <__aeabi_dsub+0x6a2>
 8001cb0:	003a      	movs	r2, r7
 8001cb2:	4302      	orrs	r2, r0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dsub+0x3fc>
 8001cb6:	e0db      	b.n	8001e70 <__aeabi_dsub+0x5b4>
 8001cb8:	181c      	adds	r4, r3, r0
 8001cba:	429c      	cmp	r4, r3
 8001cbc:	419b      	sbcs	r3, r3
 8001cbe:	444f      	add	r7, r9
 8001cc0:	46ba      	mov	sl, r7
 8001cc2:	425b      	negs	r3, r3
 8001cc4:	449a      	add	sl, r3
 8001cc6:	4653      	mov	r3, sl
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	d400      	bmi.n	8001cce <__aeabi_dsub+0x412>
 8001ccc:	e780      	b.n	8001bd0 <__aeabi_dsub+0x314>
 8001cce:	4652      	mov	r2, sl
 8001cd0:	4bb6      	ldr	r3, [pc, #728]	; (8001fac <__aeabi_dsub+0x6f0>)
 8001cd2:	2601      	movs	r6, #1
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	4692      	mov	sl, r2
 8001cd8:	e77a      	b.n	8001bd0 <__aeabi_dsub+0x314>
 8001cda:	4cb3      	ldr	r4, [pc, #716]	; (8001fa8 <__aeabi_dsub+0x6ec>)
 8001cdc:	42a2      	cmp	r2, r4
 8001cde:	d100      	bne.n	8001ce2 <__aeabi_dsub+0x426>
 8001ce0:	e0c0      	b.n	8001e64 <__aeabi_dsub+0x5a8>
 8001ce2:	2480      	movs	r4, #128	; 0x80
 8001ce4:	464d      	mov	r5, r9
 8001ce6:	0424      	lsls	r4, r4, #16
 8001ce8:	4325      	orrs	r5, r4
 8001cea:	46a9      	mov	r9, r5
 8001cec:	4664      	mov	r4, ip
 8001cee:	2c38      	cmp	r4, #56	; 0x38
 8001cf0:	dc53      	bgt.n	8001d9a <__aeabi_dsub+0x4de>
 8001cf2:	4661      	mov	r1, ip
 8001cf4:	2c1f      	cmp	r4, #31
 8001cf6:	dd00      	ble.n	8001cfa <__aeabi_dsub+0x43e>
 8001cf8:	e0cd      	b.n	8001e96 <__aeabi_dsub+0x5da>
 8001cfa:	2520      	movs	r5, #32
 8001cfc:	001e      	movs	r6, r3
 8001cfe:	1b2d      	subs	r5, r5, r4
 8001d00:	464c      	mov	r4, r9
 8001d02:	40ab      	lsls	r3, r5
 8001d04:	40ac      	lsls	r4, r5
 8001d06:	40ce      	lsrs	r6, r1
 8001d08:	1e5d      	subs	r5, r3, #1
 8001d0a:	41ab      	sbcs	r3, r5
 8001d0c:	4334      	orrs	r4, r6
 8001d0e:	4323      	orrs	r3, r4
 8001d10:	464c      	mov	r4, r9
 8001d12:	40cc      	lsrs	r4, r1
 8001d14:	1b3f      	subs	r7, r7, r4
 8001d16:	e045      	b.n	8001da4 <__aeabi_dsub+0x4e8>
 8001d18:	464a      	mov	r2, r9
 8001d1a:	1a1c      	subs	r4, r3, r0
 8001d1c:	1bd1      	subs	r1, r2, r7
 8001d1e:	42a3      	cmp	r3, r4
 8001d20:	4192      	sbcs	r2, r2
 8001d22:	4252      	negs	r2, r2
 8001d24:	4692      	mov	sl, r2
 8001d26:	000a      	movs	r2, r1
 8001d28:	4651      	mov	r1, sl
 8001d2a:	1a52      	subs	r2, r2, r1
 8001d2c:	4692      	mov	sl, r2
 8001d2e:	0212      	lsls	r2, r2, #8
 8001d30:	d500      	bpl.n	8001d34 <__aeabi_dsub+0x478>
 8001d32:	e083      	b.n	8001e3c <__aeabi_dsub+0x580>
 8001d34:	4653      	mov	r3, sl
 8001d36:	4323      	orrs	r3, r4
 8001d38:	d000      	beq.n	8001d3c <__aeabi_dsub+0x480>
 8001d3a:	e621      	b.n	8001980 <__aeabi_dsub+0xc4>
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2500      	movs	r5, #0
 8001d40:	e753      	b.n	8001bea <__aeabi_dsub+0x32e>
 8001d42:	181c      	adds	r4, r3, r0
 8001d44:	429c      	cmp	r4, r3
 8001d46:	419b      	sbcs	r3, r3
 8001d48:	444f      	add	r7, r9
 8001d4a:	46ba      	mov	sl, r7
 8001d4c:	425b      	negs	r3, r3
 8001d4e:	449a      	add	sl, r3
 8001d50:	4653      	mov	r3, sl
 8001d52:	2601      	movs	r6, #1
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	d400      	bmi.n	8001d5a <__aeabi_dsub+0x49e>
 8001d58:	e73a      	b.n	8001bd0 <__aeabi_dsub+0x314>
 8001d5a:	2602      	movs	r6, #2
 8001d5c:	4652      	mov	r2, sl
 8001d5e:	4b93      	ldr	r3, [pc, #588]	; (8001fac <__aeabi_dsub+0x6f0>)
 8001d60:	2101      	movs	r1, #1
 8001d62:	401a      	ands	r2, r3
 8001d64:	0013      	movs	r3, r2
 8001d66:	4021      	ands	r1, r4
 8001d68:	0862      	lsrs	r2, r4, #1
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	07dc      	lsls	r4, r3, #31
 8001d6e:	085b      	lsrs	r3, r3, #1
 8001d70:	469a      	mov	sl, r3
 8001d72:	4314      	orrs	r4, r2
 8001d74:	e62c      	b.n	80019d0 <__aeabi_dsub+0x114>
 8001d76:	0039      	movs	r1, r7
 8001d78:	3a20      	subs	r2, #32
 8001d7a:	40d1      	lsrs	r1, r2
 8001d7c:	4662      	mov	r2, ip
 8001d7e:	2a20      	cmp	r2, #32
 8001d80:	d006      	beq.n	8001d90 <__aeabi_dsub+0x4d4>
 8001d82:	4664      	mov	r4, ip
 8001d84:	2240      	movs	r2, #64	; 0x40
 8001d86:	1b12      	subs	r2, r2, r4
 8001d88:	003c      	movs	r4, r7
 8001d8a:	4094      	lsls	r4, r2
 8001d8c:	4304      	orrs	r4, r0
 8001d8e:	9401      	str	r4, [sp, #4]
 8001d90:	9c01      	ldr	r4, [sp, #4]
 8001d92:	1e62      	subs	r2, r4, #1
 8001d94:	4194      	sbcs	r4, r2
 8001d96:	430c      	orrs	r4, r1
 8001d98:	e5e3      	b.n	8001962 <__aeabi_dsub+0xa6>
 8001d9a:	4649      	mov	r1, r9
 8001d9c:	4319      	orrs	r1, r3
 8001d9e:	000b      	movs	r3, r1
 8001da0:	1e5c      	subs	r4, r3, #1
 8001da2:	41a3      	sbcs	r3, r4
 8001da4:	1ac4      	subs	r4, r0, r3
 8001da6:	42a0      	cmp	r0, r4
 8001da8:	419b      	sbcs	r3, r3
 8001daa:	425b      	negs	r3, r3
 8001dac:	1afb      	subs	r3, r7, r3
 8001dae:	469a      	mov	sl, r3
 8001db0:	465d      	mov	r5, fp
 8001db2:	0016      	movs	r6, r2
 8001db4:	e5dc      	b.n	8001970 <__aeabi_dsub+0xb4>
 8001db6:	4649      	mov	r1, r9
 8001db8:	4319      	orrs	r1, r3
 8001dba:	d100      	bne.n	8001dbe <__aeabi_dsub+0x502>
 8001dbc:	e0ae      	b.n	8001f1c <__aeabi_dsub+0x660>
 8001dbe:	4661      	mov	r1, ip
 8001dc0:	4664      	mov	r4, ip
 8001dc2:	3901      	subs	r1, #1
 8001dc4:	2c01      	cmp	r4, #1
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dsub+0x50e>
 8001dc8:	e0e0      	b.n	8001f8c <__aeabi_dsub+0x6d0>
 8001dca:	4c77      	ldr	r4, [pc, #476]	; (8001fa8 <__aeabi_dsub+0x6ec>)
 8001dcc:	45a4      	cmp	ip, r4
 8001dce:	d056      	beq.n	8001e7e <__aeabi_dsub+0x5c2>
 8001dd0:	468c      	mov	ip, r1
 8001dd2:	e69a      	b.n	8001b0a <__aeabi_dsub+0x24e>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	003c      	movs	r4, r7
 8001dda:	1a52      	subs	r2, r2, r1
 8001ddc:	4094      	lsls	r4, r2
 8001dde:	0001      	movs	r1, r0
 8001de0:	4090      	lsls	r0, r2
 8001de2:	46a0      	mov	r8, r4
 8001de4:	4664      	mov	r4, ip
 8001de6:	1e42      	subs	r2, r0, #1
 8001de8:	4190      	sbcs	r0, r2
 8001dea:	4662      	mov	r2, ip
 8001dec:	40e1      	lsrs	r1, r4
 8001dee:	4644      	mov	r4, r8
 8001df0:	40d7      	lsrs	r7, r2
 8001df2:	430c      	orrs	r4, r1
 8001df4:	4304      	orrs	r4, r0
 8001df6:	44b9      	add	r9, r7
 8001df8:	e701      	b.n	8001bfe <__aeabi_dsub+0x342>
 8001dfa:	496b      	ldr	r1, [pc, #428]	; (8001fa8 <__aeabi_dsub+0x6ec>)
 8001dfc:	428a      	cmp	r2, r1
 8001dfe:	d100      	bne.n	8001e02 <__aeabi_dsub+0x546>
 8001e00:	e70c      	b.n	8001c1c <__aeabi_dsub+0x360>
 8001e02:	1818      	adds	r0, r3, r0
 8001e04:	4298      	cmp	r0, r3
 8001e06:	419b      	sbcs	r3, r3
 8001e08:	444f      	add	r7, r9
 8001e0a:	425b      	negs	r3, r3
 8001e0c:	18fb      	adds	r3, r7, r3
 8001e0e:	07dc      	lsls	r4, r3, #31
 8001e10:	0840      	lsrs	r0, r0, #1
 8001e12:	085b      	lsrs	r3, r3, #1
 8001e14:	469a      	mov	sl, r3
 8001e16:	0016      	movs	r6, r2
 8001e18:	4304      	orrs	r4, r0
 8001e1a:	e6d9      	b.n	8001bd0 <__aeabi_dsub+0x314>
 8001e1c:	2a00      	cmp	r2, #0
 8001e1e:	d000      	beq.n	8001e22 <__aeabi_dsub+0x566>
 8001e20:	e081      	b.n	8001f26 <__aeabi_dsub+0x66a>
 8001e22:	003b      	movs	r3, r7
 8001e24:	4303      	orrs	r3, r0
 8001e26:	d11d      	bne.n	8001e64 <__aeabi_dsub+0x5a8>
 8001e28:	2280      	movs	r2, #128	; 0x80
 8001e2a:	2500      	movs	r5, #0
 8001e2c:	0312      	lsls	r2, r2, #12
 8001e2e:	e70b      	b.n	8001c48 <__aeabi_dsub+0x38c>
 8001e30:	08c0      	lsrs	r0, r0, #3
 8001e32:	077b      	lsls	r3, r7, #29
 8001e34:	465d      	mov	r5, fp
 8001e36:	4303      	orrs	r3, r0
 8001e38:	08fa      	lsrs	r2, r7, #3
 8001e3a:	e6d3      	b.n	8001be4 <__aeabi_dsub+0x328>
 8001e3c:	1ac4      	subs	r4, r0, r3
 8001e3e:	42a0      	cmp	r0, r4
 8001e40:	4180      	sbcs	r0, r0
 8001e42:	464b      	mov	r3, r9
 8001e44:	4240      	negs	r0, r0
 8001e46:	1aff      	subs	r7, r7, r3
 8001e48:	1a3b      	subs	r3, r7, r0
 8001e4a:	469a      	mov	sl, r3
 8001e4c:	465d      	mov	r5, fp
 8001e4e:	e597      	b.n	8001980 <__aeabi_dsub+0xc4>
 8001e50:	1a1c      	subs	r4, r3, r0
 8001e52:	464a      	mov	r2, r9
 8001e54:	42a3      	cmp	r3, r4
 8001e56:	419b      	sbcs	r3, r3
 8001e58:	1bd7      	subs	r7, r2, r7
 8001e5a:	425b      	negs	r3, r3
 8001e5c:	1afb      	subs	r3, r7, r3
 8001e5e:	469a      	mov	sl, r3
 8001e60:	2601      	movs	r6, #1
 8001e62:	e585      	b.n	8001970 <__aeabi_dsub+0xb4>
 8001e64:	08c0      	lsrs	r0, r0, #3
 8001e66:	077b      	lsls	r3, r7, #29
 8001e68:	465d      	mov	r5, fp
 8001e6a:	4303      	orrs	r3, r0
 8001e6c:	08fa      	lsrs	r2, r7, #3
 8001e6e:	e6e7      	b.n	8001c40 <__aeabi_dsub+0x384>
 8001e70:	464a      	mov	r2, r9
 8001e72:	08db      	lsrs	r3, r3, #3
 8001e74:	0752      	lsls	r2, r2, #29
 8001e76:	4313      	orrs	r3, r2
 8001e78:	464a      	mov	r2, r9
 8001e7a:	08d2      	lsrs	r2, r2, #3
 8001e7c:	e6b5      	b.n	8001bea <__aeabi_dsub+0x32e>
 8001e7e:	08c0      	lsrs	r0, r0, #3
 8001e80:	077b      	lsls	r3, r7, #29
 8001e82:	4303      	orrs	r3, r0
 8001e84:	08fa      	lsrs	r2, r7, #3
 8001e86:	e6db      	b.n	8001c40 <__aeabi_dsub+0x384>
 8001e88:	4649      	mov	r1, r9
 8001e8a:	4319      	orrs	r1, r3
 8001e8c:	000b      	movs	r3, r1
 8001e8e:	1e59      	subs	r1, r3, #1
 8001e90:	418b      	sbcs	r3, r1
 8001e92:	001c      	movs	r4, r3
 8001e94:	e653      	b.n	8001b3e <__aeabi_dsub+0x282>
 8001e96:	464d      	mov	r5, r9
 8001e98:	3c20      	subs	r4, #32
 8001e9a:	40e5      	lsrs	r5, r4
 8001e9c:	2920      	cmp	r1, #32
 8001e9e:	d005      	beq.n	8001eac <__aeabi_dsub+0x5f0>
 8001ea0:	2440      	movs	r4, #64	; 0x40
 8001ea2:	1a64      	subs	r4, r4, r1
 8001ea4:	4649      	mov	r1, r9
 8001ea6:	40a1      	lsls	r1, r4
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	4698      	mov	r8, r3
 8001eac:	4643      	mov	r3, r8
 8001eae:	1e5c      	subs	r4, r3, #1
 8001eb0:	41a3      	sbcs	r3, r4
 8001eb2:	432b      	orrs	r3, r5
 8001eb4:	e776      	b.n	8001da4 <__aeabi_dsub+0x4e8>
 8001eb6:	2a00      	cmp	r2, #0
 8001eb8:	d0e1      	beq.n	8001e7e <__aeabi_dsub+0x5c2>
 8001eba:	003a      	movs	r2, r7
 8001ebc:	08db      	lsrs	r3, r3, #3
 8001ebe:	4302      	orrs	r2, r0
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dsub+0x608>
 8001ec2:	e6b8      	b.n	8001c36 <__aeabi_dsub+0x37a>
 8001ec4:	464a      	mov	r2, r9
 8001ec6:	0752      	lsls	r2, r2, #29
 8001ec8:	2480      	movs	r4, #128	; 0x80
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	464a      	mov	r2, r9
 8001ece:	0324      	lsls	r4, r4, #12
 8001ed0:	08d2      	lsrs	r2, r2, #3
 8001ed2:	4222      	tst	r2, r4
 8001ed4:	d007      	beq.n	8001ee6 <__aeabi_dsub+0x62a>
 8001ed6:	08fe      	lsrs	r6, r7, #3
 8001ed8:	4226      	tst	r6, r4
 8001eda:	d104      	bne.n	8001ee6 <__aeabi_dsub+0x62a>
 8001edc:	465d      	mov	r5, fp
 8001ede:	0032      	movs	r2, r6
 8001ee0:	08c3      	lsrs	r3, r0, #3
 8001ee2:	077f      	lsls	r7, r7, #29
 8001ee4:	433b      	orrs	r3, r7
 8001ee6:	0f59      	lsrs	r1, r3, #29
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	0749      	lsls	r1, r1, #29
 8001eec:	08db      	lsrs	r3, r3, #3
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	e6a6      	b.n	8001c40 <__aeabi_dsub+0x384>
 8001ef2:	1ac4      	subs	r4, r0, r3
 8001ef4:	42a0      	cmp	r0, r4
 8001ef6:	4180      	sbcs	r0, r0
 8001ef8:	464b      	mov	r3, r9
 8001efa:	4240      	negs	r0, r0
 8001efc:	1aff      	subs	r7, r7, r3
 8001efe:	1a3b      	subs	r3, r7, r0
 8001f00:	469a      	mov	sl, r3
 8001f02:	465d      	mov	r5, fp
 8001f04:	2601      	movs	r6, #1
 8001f06:	e533      	b.n	8001970 <__aeabi_dsub+0xb4>
 8001f08:	003b      	movs	r3, r7
 8001f0a:	4303      	orrs	r3, r0
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_dsub+0x654>
 8001f0e:	e715      	b.n	8001d3c <__aeabi_dsub+0x480>
 8001f10:	08c0      	lsrs	r0, r0, #3
 8001f12:	077b      	lsls	r3, r7, #29
 8001f14:	465d      	mov	r5, fp
 8001f16:	4303      	orrs	r3, r0
 8001f18:	08fa      	lsrs	r2, r7, #3
 8001f1a:	e666      	b.n	8001bea <__aeabi_dsub+0x32e>
 8001f1c:	08c0      	lsrs	r0, r0, #3
 8001f1e:	077b      	lsls	r3, r7, #29
 8001f20:	4303      	orrs	r3, r0
 8001f22:	08fa      	lsrs	r2, r7, #3
 8001f24:	e65e      	b.n	8001be4 <__aeabi_dsub+0x328>
 8001f26:	003a      	movs	r2, r7
 8001f28:	08db      	lsrs	r3, r3, #3
 8001f2a:	4302      	orrs	r2, r0
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_dsub+0x674>
 8001f2e:	e682      	b.n	8001c36 <__aeabi_dsub+0x37a>
 8001f30:	464a      	mov	r2, r9
 8001f32:	0752      	lsls	r2, r2, #29
 8001f34:	2480      	movs	r4, #128	; 0x80
 8001f36:	4313      	orrs	r3, r2
 8001f38:	464a      	mov	r2, r9
 8001f3a:	0324      	lsls	r4, r4, #12
 8001f3c:	08d2      	lsrs	r2, r2, #3
 8001f3e:	4222      	tst	r2, r4
 8001f40:	d007      	beq.n	8001f52 <__aeabi_dsub+0x696>
 8001f42:	08fe      	lsrs	r6, r7, #3
 8001f44:	4226      	tst	r6, r4
 8001f46:	d104      	bne.n	8001f52 <__aeabi_dsub+0x696>
 8001f48:	465d      	mov	r5, fp
 8001f4a:	0032      	movs	r2, r6
 8001f4c:	08c3      	lsrs	r3, r0, #3
 8001f4e:	077f      	lsls	r7, r7, #29
 8001f50:	433b      	orrs	r3, r7
 8001f52:	0f59      	lsrs	r1, r3, #29
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	08db      	lsrs	r3, r3, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	430b      	orrs	r3, r1
 8001f5c:	e670      	b.n	8001c40 <__aeabi_dsub+0x384>
 8001f5e:	08c0      	lsrs	r0, r0, #3
 8001f60:	077b      	lsls	r3, r7, #29
 8001f62:	4303      	orrs	r3, r0
 8001f64:	08fa      	lsrs	r2, r7, #3
 8001f66:	e640      	b.n	8001bea <__aeabi_dsub+0x32e>
 8001f68:	464c      	mov	r4, r9
 8001f6a:	3920      	subs	r1, #32
 8001f6c:	40cc      	lsrs	r4, r1
 8001f6e:	4661      	mov	r1, ip
 8001f70:	2920      	cmp	r1, #32
 8001f72:	d006      	beq.n	8001f82 <__aeabi_dsub+0x6c6>
 8001f74:	4666      	mov	r6, ip
 8001f76:	2140      	movs	r1, #64	; 0x40
 8001f78:	1b89      	subs	r1, r1, r6
 8001f7a:	464e      	mov	r6, r9
 8001f7c:	408e      	lsls	r6, r1
 8001f7e:	4333      	orrs	r3, r6
 8001f80:	4698      	mov	r8, r3
 8001f82:	4643      	mov	r3, r8
 8001f84:	1e59      	subs	r1, r3, #1
 8001f86:	418b      	sbcs	r3, r1
 8001f88:	431c      	orrs	r4, r3
 8001f8a:	e5d8      	b.n	8001b3e <__aeabi_dsub+0x282>
 8001f8c:	181c      	adds	r4, r3, r0
 8001f8e:	4284      	cmp	r4, r0
 8001f90:	4180      	sbcs	r0, r0
 8001f92:	444f      	add	r7, r9
 8001f94:	46ba      	mov	sl, r7
 8001f96:	4240      	negs	r0, r0
 8001f98:	4482      	add	sl, r0
 8001f9a:	e6d9      	b.n	8001d50 <__aeabi_dsub+0x494>
 8001f9c:	4653      	mov	r3, sl
 8001f9e:	4323      	orrs	r3, r4
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_dsub+0x6e8>
 8001fa2:	e6cb      	b.n	8001d3c <__aeabi_dsub+0x480>
 8001fa4:	e614      	b.n	8001bd0 <__aeabi_dsub+0x314>
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	000007ff 	.word	0x000007ff
 8001fac:	ff7fffff 	.word	0xff7fffff
 8001fb0:	000007fe 	.word	0x000007fe
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	4a01      	ldr	r2, [pc, #4]	; (8001fbc <__aeabi_dsub+0x700>)
 8001fb8:	001c      	movs	r4, r3
 8001fba:	e529      	b.n	8001a10 <__aeabi_dsub+0x154>
 8001fbc:	000007ff 	.word	0x000007ff

08001fc0 <__aeabi_dcmpun>:
 8001fc0:	b570      	push	{r4, r5, r6, lr}
 8001fc2:	0005      	movs	r5, r0
 8001fc4:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <__aeabi_dcmpun+0x38>)
 8001fc6:	031c      	lsls	r4, r3, #12
 8001fc8:	0016      	movs	r6, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	030a      	lsls	r2, r1, #12
 8001fce:	0049      	lsls	r1, r1, #1
 8001fd0:	0b12      	lsrs	r2, r2, #12
 8001fd2:	0d49      	lsrs	r1, r1, #21
 8001fd4:	0b24      	lsrs	r4, r4, #12
 8001fd6:	0d5b      	lsrs	r3, r3, #21
 8001fd8:	4281      	cmp	r1, r0
 8001fda:	d008      	beq.n	8001fee <__aeabi_dcmpun+0x2e>
 8001fdc:	4a06      	ldr	r2, [pc, #24]	; (8001ff8 <__aeabi_dcmpun+0x38>)
 8001fde:	2000      	movs	r0, #0
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d103      	bne.n	8001fec <__aeabi_dcmpun+0x2c>
 8001fe4:	0020      	movs	r0, r4
 8001fe6:	4330      	orrs	r0, r6
 8001fe8:	1e43      	subs	r3, r0, #1
 8001fea:	4198      	sbcs	r0, r3
 8001fec:	bd70      	pop	{r4, r5, r6, pc}
 8001fee:	2001      	movs	r0, #1
 8001ff0:	432a      	orrs	r2, r5
 8001ff2:	d1fb      	bne.n	8001fec <__aeabi_dcmpun+0x2c>
 8001ff4:	e7f2      	b.n	8001fdc <__aeabi_dcmpun+0x1c>
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	000007ff 	.word	0x000007ff

08001ffc <__aeabi_d2iz>:
 8001ffc:	000a      	movs	r2, r1
 8001ffe:	b530      	push	{r4, r5, lr}
 8002000:	4c13      	ldr	r4, [pc, #76]	; (8002050 <__aeabi_d2iz+0x54>)
 8002002:	0053      	lsls	r3, r2, #1
 8002004:	0309      	lsls	r1, r1, #12
 8002006:	0005      	movs	r5, r0
 8002008:	0b09      	lsrs	r1, r1, #12
 800200a:	2000      	movs	r0, #0
 800200c:	0d5b      	lsrs	r3, r3, #21
 800200e:	0fd2      	lsrs	r2, r2, #31
 8002010:	42a3      	cmp	r3, r4
 8002012:	dd04      	ble.n	800201e <__aeabi_d2iz+0x22>
 8002014:	480f      	ldr	r0, [pc, #60]	; (8002054 <__aeabi_d2iz+0x58>)
 8002016:	4283      	cmp	r3, r0
 8002018:	dd02      	ble.n	8002020 <__aeabi_d2iz+0x24>
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <__aeabi_d2iz+0x5c>)
 800201c:	18d0      	adds	r0, r2, r3
 800201e:	bd30      	pop	{r4, r5, pc}
 8002020:	2080      	movs	r0, #128	; 0x80
 8002022:	0340      	lsls	r0, r0, #13
 8002024:	4301      	orrs	r1, r0
 8002026:	480d      	ldr	r0, [pc, #52]	; (800205c <__aeabi_d2iz+0x60>)
 8002028:	1ac0      	subs	r0, r0, r3
 800202a:	281f      	cmp	r0, #31
 800202c:	dd08      	ble.n	8002040 <__aeabi_d2iz+0x44>
 800202e:	480c      	ldr	r0, [pc, #48]	; (8002060 <__aeabi_d2iz+0x64>)
 8002030:	1ac3      	subs	r3, r0, r3
 8002032:	40d9      	lsrs	r1, r3
 8002034:	000b      	movs	r3, r1
 8002036:	4258      	negs	r0, r3
 8002038:	2a00      	cmp	r2, #0
 800203a:	d1f0      	bne.n	800201e <__aeabi_d2iz+0x22>
 800203c:	0018      	movs	r0, r3
 800203e:	e7ee      	b.n	800201e <__aeabi_d2iz+0x22>
 8002040:	4c08      	ldr	r4, [pc, #32]	; (8002064 <__aeabi_d2iz+0x68>)
 8002042:	40c5      	lsrs	r5, r0
 8002044:	46a4      	mov	ip, r4
 8002046:	4463      	add	r3, ip
 8002048:	4099      	lsls	r1, r3
 800204a:	000b      	movs	r3, r1
 800204c:	432b      	orrs	r3, r5
 800204e:	e7f2      	b.n	8002036 <__aeabi_d2iz+0x3a>
 8002050:	000003fe 	.word	0x000003fe
 8002054:	0000041d 	.word	0x0000041d
 8002058:	7fffffff 	.word	0x7fffffff
 800205c:	00000433 	.word	0x00000433
 8002060:	00000413 	.word	0x00000413
 8002064:	fffffbed 	.word	0xfffffbed

08002068 <__aeabi_i2d>:
 8002068:	b570      	push	{r4, r5, r6, lr}
 800206a:	2800      	cmp	r0, #0
 800206c:	d016      	beq.n	800209c <__aeabi_i2d+0x34>
 800206e:	17c3      	asrs	r3, r0, #31
 8002070:	18c5      	adds	r5, r0, r3
 8002072:	405d      	eors	r5, r3
 8002074:	0fc4      	lsrs	r4, r0, #31
 8002076:	0028      	movs	r0, r5
 8002078:	f000 f826 	bl	80020c8 <__clzsi2>
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <__aeabi_i2d+0x5c>)
 800207e:	1a1b      	subs	r3, r3, r0
 8002080:	280a      	cmp	r0, #10
 8002082:	dc16      	bgt.n	80020b2 <__aeabi_i2d+0x4a>
 8002084:	0002      	movs	r2, r0
 8002086:	002e      	movs	r6, r5
 8002088:	3215      	adds	r2, #21
 800208a:	4096      	lsls	r6, r2
 800208c:	220b      	movs	r2, #11
 800208e:	1a12      	subs	r2, r2, r0
 8002090:	40d5      	lsrs	r5, r2
 8002092:	055b      	lsls	r3, r3, #21
 8002094:	032d      	lsls	r5, r5, #12
 8002096:	0b2d      	lsrs	r5, r5, #12
 8002098:	0d5b      	lsrs	r3, r3, #21
 800209a:	e003      	b.n	80020a4 <__aeabi_i2d+0x3c>
 800209c:	2400      	movs	r4, #0
 800209e:	2300      	movs	r3, #0
 80020a0:	2500      	movs	r5, #0
 80020a2:	2600      	movs	r6, #0
 80020a4:	051b      	lsls	r3, r3, #20
 80020a6:	432b      	orrs	r3, r5
 80020a8:	07e4      	lsls	r4, r4, #31
 80020aa:	4323      	orrs	r3, r4
 80020ac:	0030      	movs	r0, r6
 80020ae:	0019      	movs	r1, r3
 80020b0:	bd70      	pop	{r4, r5, r6, pc}
 80020b2:	380b      	subs	r0, #11
 80020b4:	4085      	lsls	r5, r0
 80020b6:	055b      	lsls	r3, r3, #21
 80020b8:	032d      	lsls	r5, r5, #12
 80020ba:	2600      	movs	r6, #0
 80020bc:	0b2d      	lsrs	r5, r5, #12
 80020be:	0d5b      	lsrs	r3, r3, #21
 80020c0:	e7f0      	b.n	80020a4 <__aeabi_i2d+0x3c>
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	0000041e 	.word	0x0000041e

080020c8 <__clzsi2>:
 80020c8:	211c      	movs	r1, #28
 80020ca:	2301      	movs	r3, #1
 80020cc:	041b      	lsls	r3, r3, #16
 80020ce:	4298      	cmp	r0, r3
 80020d0:	d301      	bcc.n	80020d6 <__clzsi2+0xe>
 80020d2:	0c00      	lsrs	r0, r0, #16
 80020d4:	3910      	subs	r1, #16
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	4298      	cmp	r0, r3
 80020da:	d301      	bcc.n	80020e0 <__clzsi2+0x18>
 80020dc:	0a00      	lsrs	r0, r0, #8
 80020de:	3908      	subs	r1, #8
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	4298      	cmp	r0, r3
 80020e4:	d301      	bcc.n	80020ea <__clzsi2+0x22>
 80020e6:	0900      	lsrs	r0, r0, #4
 80020e8:	3904      	subs	r1, #4
 80020ea:	a202      	add	r2, pc, #8	; (adr r2, 80020f4 <__clzsi2+0x2c>)
 80020ec:	5c10      	ldrb	r0, [r2, r0]
 80020ee:	1840      	adds	r0, r0, r1
 80020f0:	4770      	bx	lr
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	02020304 	.word	0x02020304
 80020f8:	01010101 	.word	0x01010101
	...

08002104 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	0018      	movs	r0, r3
 800210e:	230c      	movs	r3, #12
 8002110:	001a      	movs	r2, r3
 8002112:	2100      	movs	r1, #0
 8002114:	f008 fdbe 	bl	800ac94 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002118:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <MX_ADC1_Init+0xcc>)
 800211a:	4a2e      	ldr	r2, [pc, #184]	; (80021d4 <MX_ADC1_Init+0xd0>)
 800211c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800211e:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <MX_ADC1_Init+0xcc>)
 8002120:	2280      	movs	r2, #128	; 0x80
 8002122:	05d2      	lsls	r2, r2, #23
 8002124:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002126:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <MX_ADC1_Init+0xcc>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800212c:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <MX_ADC1_Init+0xcc>)
 800212e:	2200      	movs	r2, #0
 8002130:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002132:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <MX_ADC1_Init+0xcc>)
 8002134:	2200      	movs	r2, #0
 8002136:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002138:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <MX_ADC1_Init+0xcc>)
 800213a:	2204      	movs	r2, #4
 800213c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800213e:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <MX_ADC1_Init+0xcc>)
 8002140:	2200      	movs	r2, #0
 8002142:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002144:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <MX_ADC1_Init+0xcc>)
 8002146:	2200      	movs	r2, #0
 8002148:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800214a:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <MX_ADC1_Init+0xcc>)
 800214c:	2200      	movs	r2, #0
 800214e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <MX_ADC1_Init+0xcc>)
 8002152:	2201      	movs	r2, #1
 8002154:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <MX_ADC1_Init+0xcc>)
 8002158:	2220      	movs	r2, #32
 800215a:	2100      	movs	r1, #0
 800215c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800215e:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <MX_ADC1_Init+0xcc>)
 8002160:	2200      	movs	r2, #0
 8002162:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002164:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <MX_ADC1_Init+0xcc>)
 8002166:	2200      	movs	r2, #0
 8002168:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800216a:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <MX_ADC1_Init+0xcc>)
 800216c:	222c      	movs	r2, #44	; 0x2c
 800216e:	2100      	movs	r1, #0
 8002170:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <MX_ADC1_Init+0xcc>)
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <MX_ADC1_Init+0xcc>)
 800217a:	2200      	movs	r2, #0
 800217c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <MX_ADC1_Init+0xcc>)
 8002180:	2200      	movs	r2, #0
 8002182:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <MX_ADC1_Init+0xcc>)
 8002186:	223c      	movs	r2, #60	; 0x3c
 8002188:	2100      	movs	r1, #0
 800218a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800218c:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <MX_ADC1_Init+0xcc>)
 800218e:	2200      	movs	r2, #0
 8002190:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <MX_ADC1_Init+0xcc>)
 8002194:	0018      	movs	r0, r3
 8002196:	f002 f9e7 	bl	8004568 <HAL_ADC_Init>
 800219a:	1e03      	subs	r3, r0, #0
 800219c:	d001      	beq.n	80021a2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800219e:	f000 fd97 	bl	8002cd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	4a0c      	ldr	r2, [pc, #48]	; (80021d8 <MX_ADC1_Init+0xd4>)
 80021a6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021a8:	1d3b      	adds	r3, r7, #4
 80021aa:	2200      	movs	r2, #0
 80021ac:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021b4:	1d3a      	adds	r2, r7, #4
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <MX_ADC1_Init+0xcc>)
 80021b8:	0011      	movs	r1, r2
 80021ba:	0018      	movs	r0, r3
 80021bc:	f002 fb7c 	bl	80048b8 <HAL_ADC_ConfigChannel>
 80021c0:	1e03      	subs	r3, r0, #0
 80021c2:	d001      	beq.n	80021c8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80021c4:	f000 fd84 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021c8:	46c0      	nop			; (mov r8, r8)
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b004      	add	sp, #16
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2000009c 	.word	0x2000009c
 80021d4:	40012400 	.word	0x40012400
 80021d8:	04000002 	.word	0x04000002

080021dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b08b      	sub	sp, #44	; 0x2c
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	2414      	movs	r4, #20
 80021e6:	193b      	adds	r3, r7, r4
 80021e8:	0018      	movs	r0, r3
 80021ea:	2314      	movs	r3, #20
 80021ec:	001a      	movs	r2, r3
 80021ee:	2100      	movs	r1, #0
 80021f0:	f008 fd50 	bl	800ac94 <memset>
  if(adcHandle->Instance==ADC1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a18      	ldr	r2, [pc, #96]	; (800225c <HAL_ADC_MspInit+0x80>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d129      	bne.n	8002252 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80021fe:	4b18      	ldr	r3, [pc, #96]	; (8002260 <HAL_ADC_MspInit+0x84>)
 8002200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002202:	4b17      	ldr	r3, [pc, #92]	; (8002260 <HAL_ADC_MspInit+0x84>)
 8002204:	2180      	movs	r1, #128	; 0x80
 8002206:	0349      	lsls	r1, r1, #13
 8002208:	430a      	orrs	r2, r1
 800220a:	641a      	str	r2, [r3, #64]	; 0x40
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <HAL_ADC_MspInit+0x84>)
 800220e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	035b      	lsls	r3, r3, #13
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_ADC_MspInit+0x84>)
 800221c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <HAL_ADC_MspInit+0x84>)
 8002220:	2101      	movs	r1, #1
 8002222:	430a      	orrs	r2, r1
 8002224:	635a      	str	r2, [r3, #52]	; 0x34
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <HAL_ADC_MspInit+0x84>)
 8002228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222a:	2201      	movs	r2, #1
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002232:	193b      	adds	r3, r7, r4
 8002234:	2202      	movs	r2, #2
 8002236:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002238:	193b      	adds	r3, r7, r4
 800223a:	2203      	movs	r2, #3
 800223c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	193b      	adds	r3, r7, r4
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002244:	193a      	adds	r2, r7, r4
 8002246:	23a0      	movs	r3, #160	; 0xa0
 8002248:	05db      	lsls	r3, r3, #23
 800224a:	0011      	movs	r1, r2
 800224c:	0018      	movs	r0, r3
 800224e:	f002 fdbf 	bl	8004dd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	46bd      	mov	sp, r7
 8002256:	b00b      	add	sp, #44	; 0x2c
 8002258:	bd90      	pop	{r4, r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	40012400 	.word	0x40012400
 8002260:	40021000 	.word	0x40021000

08002264 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	4a08      	ldr	r2, [pc, #32]	; (8002290 <MX_FREERTOS_Init+0x2c>)
 800226e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002270:	c313      	stmia	r3!, {r0, r1, r4}
 8002272:	ca03      	ldmia	r2!, {r0, r1}
 8002274:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	2100      	movs	r1, #0
 800227a:	0018      	movs	r0, r3
 800227c:	f006 fc7b 	bl	8008b76 <osThreadCreate>
 8002280:	0002      	movs	r2, r0
 8002282:	4b04      	ldr	r3, [pc, #16]	; (8002294 <MX_FREERTOS_Init+0x30>)
 8002284:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	46bd      	mov	sp, r7
 800228a:	b007      	add	sp, #28
 800228c:	bd90      	pop	{r4, r7, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	0800d13c 	.word	0x0800d13c
 8002294:	20000100 	.word	0x20000100

08002298 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022a0:	2001      	movs	r0, #1
 80022a2:	f006 fc90 	bl	8008bc6 <osDelay>
 80022a6:	e7fb      	b.n	80022a0 <StartDefaultTask+0x8>

080022a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ae:	240c      	movs	r4, #12
 80022b0:	193b      	adds	r3, r7, r4
 80022b2:	0018      	movs	r0, r3
 80022b4:	2314      	movs	r3, #20
 80022b6:	001a      	movs	r2, r3
 80022b8:	2100      	movs	r1, #0
 80022ba:	f008 fceb 	bl	800ac94 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022be:	4b24      	ldr	r3, [pc, #144]	; (8002350 <MX_GPIO_Init+0xa8>)
 80022c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c2:	4b23      	ldr	r3, [pc, #140]	; (8002350 <MX_GPIO_Init+0xa8>)
 80022c4:	2120      	movs	r1, #32
 80022c6:	430a      	orrs	r2, r1
 80022c8:	635a      	str	r2, [r3, #52]	; 0x34
 80022ca:	4b21      	ldr	r3, [pc, #132]	; (8002350 <MX_GPIO_Init+0xa8>)
 80022cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ce:	2220      	movs	r2, #32
 80022d0:	4013      	ands	r3, r2
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <MX_GPIO_Init+0xa8>)
 80022d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <MX_GPIO_Init+0xa8>)
 80022dc:	2101      	movs	r1, #1
 80022de:	430a      	orrs	r2, r1
 80022e0:	635a      	str	r2, [r3, #52]	; 0x34
 80022e2:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <MX_GPIO_Init+0xa8>)
 80022e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e6:	2201      	movs	r2, #1
 80022e8:	4013      	ands	r3, r2
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ee:	4b18      	ldr	r3, [pc, #96]	; (8002350 <MX_GPIO_Init+0xa8>)
 80022f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022f2:	4b17      	ldr	r3, [pc, #92]	; (8002350 <MX_GPIO_Init+0xa8>)
 80022f4:	2102      	movs	r1, #2
 80022f6:	430a      	orrs	r2, r1
 80022f8:	635a      	str	r2, [r3, #52]	; 0x34
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <MX_GPIO_Init+0xa8>)
 80022fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fe:	2202      	movs	r2, #2
 8002300:	4013      	ands	r3, r2
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002306:	193b      	adds	r3, r7, r4
 8002308:	2201      	movs	r2, #1
 800230a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230c:	193b      	adds	r3, r7, r4
 800230e:	2200      	movs	r2, #0
 8002310:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002312:	193b      	adds	r3, r7, r4
 8002314:	2202      	movs	r2, #2
 8002316:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002318:	193a      	adds	r2, r7, r4
 800231a:	23a0      	movs	r3, #160	; 0xa0
 800231c:	05db      	lsls	r3, r3, #23
 800231e:	0011      	movs	r1, r2
 8002320:	0018      	movs	r0, r3
 8002322:	f002 fd55 	bl	8004dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002326:	0021      	movs	r1, r4
 8002328:	187b      	adds	r3, r7, r1
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	0152      	lsls	r2, r2, #5
 800232e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002330:	187b      	adds	r3, r7, r1
 8002332:	2200      	movs	r2, #0
 8002334:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002336:	187b      	adds	r3, r7, r1
 8002338:	2202      	movs	r2, #2
 800233a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233c:	187b      	adds	r3, r7, r1
 800233e:	4a05      	ldr	r2, [pc, #20]	; (8002354 <MX_GPIO_Init+0xac>)
 8002340:	0019      	movs	r1, r3
 8002342:	0010      	movs	r0, r2
 8002344:	f002 fd44 	bl	8004dd0 <HAL_GPIO_Init>

}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	b009      	add	sp, #36	; 0x24
 800234e:	bd90      	pop	{r4, r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	50000400 	.word	0x50000400

08002358 <motor>:
	return 0;
}


int motor(h_shell_t * h_shell,int argc, char ** argv)
{
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
	if (argc == 4)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b04      	cmp	r3, #4
 8002368:	d000      	beq.n	800236c <motor+0x14>
 800236a:	e086      	b.n	800247a <motor+0x122>
	{
		uint16_t alpha=atoi(argv[3]);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	330c      	adds	r3, #12
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	0018      	movs	r0, r3
 8002374:	f008 f98e 	bl	800a694 <atoi>
 8002378:	0002      	movs	r2, r0
 800237a:	2416      	movs	r4, #22
 800237c:	193b      	adds	r3, r7, r4
 800237e:	801a      	strh	r2, [r3, #0]

		if(strncmp(argv[1],"r",1)==0)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3304      	adds	r3, #4
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4942      	ldr	r1, [pc, #264]	; (8002490 <motor+0x138>)
 8002388:	2201      	movs	r2, #1
 800238a:	0018      	movs	r0, r3
 800238c:	f008 fc8a 	bl	800aca4 <strncmp>
 8002390:	1e03      	subs	r3, r0, #0
 8002392:	d125      	bne.n	80023e0 <motor+0x88>
		{
			if(strncmp(argv[2],"f",1)==0)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3308      	adds	r3, #8
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	493e      	ldr	r1, [pc, #248]	; (8002494 <motor+0x13c>)
 800239c:	2201      	movs	r2, #1
 800239e:	0018      	movs	r0, r3
 80023a0:	f008 fc80 	bl	800aca4 <strncmp>
 80023a4:	1e03      	subs	r3, r0, #0
 80023a6:	d106      	bne.n	80023b6 <motor+0x5e>
			{
				motors.right.drv_motor.drv_avance(alpha);
 80023a8:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <motor+0x140>)
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	193a      	adds	r2, r7, r4
 80023ae:	8812      	ldrh	r2, [r2, #0]
 80023b0:	0010      	movs	r0, r2
 80023b2:	4798      	blx	r3
 80023b4:	e014      	b.n	80023e0 <motor+0x88>
			}
			else if(strncmp(argv[2],"b",1)==0)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3308      	adds	r3, #8
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4937      	ldr	r1, [pc, #220]	; (800249c <motor+0x144>)
 80023be:	2201      	movs	r2, #1
 80023c0:	0018      	movs	r0, r3
 80023c2:	f008 fc6f 	bl	800aca4 <strncmp>
 80023c6:	1e03      	subs	r3, r0, #0
 80023c8:	d107      	bne.n	80023da <motor+0x82>
			{
				motors.right.drv_motor.drv_recule(alpha);
 80023ca:	4b33      	ldr	r3, [pc, #204]	; (8002498 <motor+0x140>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	2216      	movs	r2, #22
 80023d0:	18ba      	adds	r2, r7, r2
 80023d2:	8812      	ldrh	r2, [r2, #0]
 80023d4:	0010      	movs	r0, r2
 80023d6:	4798      	blx	r3
 80023d8:	e002      	b.n	80023e0 <motor+0x88>
			}
			else
			{
				motors.right.drv_motor.drv_stop();
 80023da:	4b2f      	ldr	r3, [pc, #188]	; (8002498 <motor+0x140>)
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	4798      	blx	r3
			}
		}
		if(strncmp(argv[1],"l",1)==0)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3304      	adds	r3, #4
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	492e      	ldr	r1, [pc, #184]	; (80024a0 <motor+0x148>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	0018      	movs	r0, r3
 80023ec:	f008 fc5a 	bl	800aca4 <strncmp>
 80023f0:	1e03      	subs	r3, r0, #0
 80023f2:	d129      	bne.n	8002448 <motor+0xf0>
		{
			if(strncmp(argv[2],"f",1)==0)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3308      	adds	r3, #8
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4926      	ldr	r1, [pc, #152]	; (8002494 <motor+0x13c>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	0018      	movs	r0, r3
 8002400:	f008 fc50 	bl	800aca4 <strncmp>
 8002404:	1e03      	subs	r3, r0, #0
 8002406:	d108      	bne.n	800241a <motor+0xc2>
			{
				motors.left.drv_motor.drv_avance(alpha);
 8002408:	4b23      	ldr	r3, [pc, #140]	; (8002498 <motor+0x140>)
 800240a:	22b4      	movs	r2, #180	; 0xb4
 800240c:	589b      	ldr	r3, [r3, r2]
 800240e:	2216      	movs	r2, #22
 8002410:	18ba      	adds	r2, r7, r2
 8002412:	8812      	ldrh	r2, [r2, #0]
 8002414:	0010      	movs	r0, r2
 8002416:	4798      	blx	r3
 8002418:	e016      	b.n	8002448 <motor+0xf0>
			}
			else if(strncmp(argv[2],"b",1)==0)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3308      	adds	r3, #8
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	491e      	ldr	r1, [pc, #120]	; (800249c <motor+0x144>)
 8002422:	2201      	movs	r2, #1
 8002424:	0018      	movs	r0, r3
 8002426:	f008 fc3d 	bl	800aca4 <strncmp>
 800242a:	1e03      	subs	r3, r0, #0
 800242c:	d108      	bne.n	8002440 <motor+0xe8>
			{
				motors.left.drv_motor.drv_recule(alpha);
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <motor+0x140>)
 8002430:	22b8      	movs	r2, #184	; 0xb8
 8002432:	589b      	ldr	r3, [r3, r2]
 8002434:	2216      	movs	r2, #22
 8002436:	18ba      	adds	r2, r7, r2
 8002438:	8812      	ldrh	r2, [r2, #0]
 800243a:	0010      	movs	r0, r2
 800243c:	4798      	blx	r3
 800243e:	e003      	b.n	8002448 <motor+0xf0>
			}
			else
			{
				motors.left.drv_motor.drv_stop();
 8002440:	4b15      	ldr	r3, [pc, #84]	; (8002498 <motor+0x140>)
 8002442:	22bc      	movs	r2, #188	; 0xbc
 8002444:	589b      	ldr	r3, [r3, r2]
 8002446:	4798      	blx	r3
			}
		}
		if(strncmp(argv[1],"b",1)==0)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3304      	adds	r3, #4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4913      	ldr	r1, [pc, #76]	; (800249c <motor+0x144>)
 8002450:	2201      	movs	r2, #1
 8002452:	0018      	movs	r0, r3
 8002454:	f008 fc26 	bl	800aca4 <strncmp>
 8002458:	1e03      	subs	r3, r0, #0
 800245a:	d10c      	bne.n	8002476 <motor+0x11e>
		{
			encoders.left.consigne=atoi(argv[3]);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	330c      	adds	r3, #12
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	0018      	movs	r0, r3
 8002464:	f008 f916 	bl	800a694 <atoi>
 8002468:	0002      	movs	r2, r0
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <motor+0x14c>)
 800246c:	661a      	str	r2, [r3, #96]	; 0x60
			encoders.right.consigne=encoders.left.consigne;
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <motor+0x14c>)
 8002470:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002472:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <motor+0x14c>)
 8002474:	629a      	str	r2, [r3, #40]	; 0x28

		}
		return 0;
 8002476:	2300      	movs	r3, #0
 8002478:	e005      	b.n	8002486 <motor+0x12e>
	}
	else
	{
		printf("Erreur, pas le bon nombre d'arguments\r\n");
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <motor+0x150>)
 800247c:	0018      	movs	r0, r3
 800247e:	f008 fab9 	bl	800a9f4 <puts>
		return -1;
 8002482:	2301      	movs	r3, #1
 8002484:	425b      	negs	r3, r3
	}
}
 8002486:	0018      	movs	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	b007      	add	sp, #28
 800248c:	bd90      	pop	{r4, r7, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	0800d188 	.word	0x0800d188
 8002494:	0800d18c 	.word	0x0800d18c
 8002498:	20000454 	.word	0x20000454
 800249c:	0800d190 	.word	0x0800d190
 80024a0:	0800d194 	.word	0x0800d194
 80024a4:	20000518 	.word	0x20000518
 80024a8:	0800d198 	.word	0x0800d198

080024ac <speed>:

int speed(h_shell_t * h_shell,int argc, char ** argv)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
	if (argc == 1)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d139      	bne.n	8002532 <speed+0x86>
	{
		printf("R Ticks = %d\r\n",encoders.right.nbr_ticks);
 80024be:	4b22      	ldr	r3, [pc, #136]	; (8002548 <speed+0x9c>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4b22      	ldr	r3, [pc, #136]	; (800254c <speed+0xa0>)
 80024c4:	0011      	movs	r1, r2
 80024c6:	0018      	movs	r0, r3
 80024c8:	f008 fa2e 	bl	800a928 <iprintf>
		printf("L Ticks = %d\r\n",encoders.left.nbr_ticks);
 80024cc:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <speed+0x9c>)
 80024ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024d0:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <speed+0xa4>)
 80024d2:	0011      	movs	r1, r2
 80024d4:	0018      	movs	r0, r3
 80024d6:	f008 fa27 	bl	800a928 <iprintf>

		printf("R speed = %d Rpm\r\n",encoders.right.speed);
 80024da:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <speed+0x9c>)
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <speed+0xa8>)
 80024e0:	0011      	movs	r1, r2
 80024e2:	0018      	movs	r0, r3
 80024e4:	f008 fa20 	bl	800a928 <iprintf>
		printf("L speed = %d Rpm\r\n",encoders.left.speed);
 80024e8:	4b17      	ldr	r3, [pc, #92]	; (8002548 <speed+0x9c>)
 80024ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024ec:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <speed+0xac>)
 80024ee:	0011      	movs	r1, r2
 80024f0:	0018      	movs	r0, r3
 80024f2:	f008 fa19 	bl	800a928 <iprintf>

		//		printf("R distance = %d mm\r\n",encoders.right.distance);
		//		printf("L distance = %d mm\r\n",encoders.left.distance);

		printf("R error = %d \r\n",encoders.right.error);
 80024f6:	4b14      	ldr	r3, [pc, #80]	; (8002548 <speed+0x9c>)
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	4b18      	ldr	r3, [pc, #96]	; (800255c <speed+0xb0>)
 80024fc:	0011      	movs	r1, r2
 80024fe:	0018      	movs	r0, r3
 8002500:	f008 fa12 	bl	800a928 <iprintf>
		printf("L error = %d \r\n",encoders.left.error);
 8002504:	4b10      	ldr	r3, [pc, #64]	; (8002548 <speed+0x9c>)
 8002506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <speed+0xb4>)
 800250a:	0011      	movs	r1, r2
 800250c:	0018      	movs	r0, r3
 800250e:	f008 fa0b 	bl	800a928 <iprintf>

		printf("R command = %d \r\n",encoders.right.new_command);
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <speed+0x9c>)
 8002514:	6a1a      	ldr	r2, [r3, #32]
 8002516:	4b13      	ldr	r3, [pc, #76]	; (8002564 <speed+0xb8>)
 8002518:	0011      	movs	r1, r2
 800251a:	0018      	movs	r0, r3
 800251c:	f008 fa04 	bl	800a928 <iprintf>
		printf("L command = %d \r\n",encoders.left.new_command);
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <speed+0x9c>)
 8002522:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002524:	4b10      	ldr	r3, [pc, #64]	; (8002568 <speed+0xbc>)
 8002526:	0011      	movs	r1, r2
 8002528:	0018      	movs	r0, r3
 800252a:	f008 f9fd 	bl	800a928 <iprintf>
		return 0;
 800252e:	2300      	movs	r3, #0
 8002530:	e005      	b.n	800253e <speed+0x92>
	}
	else
	{
		printf("Erreur, pas le bon nombre d'arguments\r\n");
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <speed+0xc0>)
 8002534:	0018      	movs	r0, r3
 8002536:	f008 fa5d 	bl	800a9f4 <puts>
		return -1;
 800253a:	2301      	movs	r3, #1
 800253c:	425b      	negs	r3, r3
	}
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b004      	add	sp, #16
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	20000518 	.word	0x20000518
 800254c:	0800d1c0 	.word	0x0800d1c0
 8002550:	0800d1d0 	.word	0x0800d1d0
 8002554:	0800d1e0 	.word	0x0800d1e0
 8002558:	0800d1f4 	.word	0x0800d1f4
 800255c:	0800d208 	.word	0x0800d208
 8002560:	0800d218 	.word	0x0800d218
 8002564:	0800d228 	.word	0x0800d228
 8002568:	0800d23c 	.word	0x0800d23c
 800256c:	0800d198 	.word	0x0800d198

08002570 <test_dist>:
		printf("Erreur, pas le bon nombre d'arguments\r\n");
		return -1;
	}
}
int test_dist(h_shell_t * h_shell,int argc, char ** argv)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
	int32_t distance=atoi(argv[1]);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3304      	adds	r3, #4
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	0018      	movs	r0, r3
 8002584:	f008 f886 	bl	800a694 <atoi>
 8002588:	0003      	movs	r3, r0
 800258a:	617b      	str	r3, [r7, #20]
	if (argc == 2)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d107      	bne.n	80025a2 <test_dist+0x32>
	{
		command_distance(&encoders,distance);
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <test_dist+0x48>)
 8002596:	0011      	movs	r1, r2
 8002598:	0018      	movs	r0, r3
 800259a:	f001 fd8b 	bl	80040b4 <command_distance>
		return 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	e005      	b.n	80025ae <test_dist+0x3e>
	}
	else
	{
		printf("Erreur, pas le bon nombre d'arguments\r\n");
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <test_dist+0x4c>)
 80025a4:	0018      	movs	r0, r3
 80025a6:	f008 fa25 	bl	800a9f4 <puts>
		return -1;
 80025aa:	2301      	movs	r3, #1
 80025ac:	425b      	negs	r3, r3
	}
}
 80025ae:	0018      	movs	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b006      	add	sp, #24
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	20000518 	.word	0x20000518
 80025bc:	0800d198 	.word	0x0800d198

080025c0 <test_angle>:

int test_angle(h_shell_t * h_shell,int argc, char ** argv)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
	double angle=atoi(argv[1]);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3304      	adds	r3, #4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	0018      	movs	r0, r3
 80025d4:	f008 f85e 	bl	800a694 <atoi>
 80025d8:	0003      	movs	r3, r0
 80025da:	0018      	movs	r0, r3
 80025dc:	f7ff fd44 	bl	8002068 <__aeabi_i2d>
 80025e0:	0002      	movs	r2, r0
 80025e2:	000b      	movs	r3, r1
 80025e4:	613a      	str	r2, [r7, #16]
 80025e6:	617b      	str	r3, [r7, #20]
	if (argc == 2)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d107      	bne.n	80025fe <test_angle+0x3e>
	{
		command_angle(&encoders,angle);
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	4908      	ldr	r1, [pc, #32]	; (8002614 <test_angle+0x54>)
 80025f4:	0008      	movs	r0, r1
 80025f6:	f001 fd92 	bl	800411e <command_angle>
		return 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e005      	b.n	800260a <test_angle+0x4a>
	}
	else
	{
		printf("Erreur, pas le bon nombre d'arguments\r\n");
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <test_angle+0x58>)
 8002600:	0018      	movs	r0, r3
 8002602:	f008 f9f7 	bl	800a9f4 <puts>
		return -1;
 8002606:	2301      	movs	r3, #1
 8002608:	425b      	negs	r3, r3
	}
}
 800260a:	0018      	movs	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	b006      	add	sp, #24
 8002610:	bd80      	pop	{r7, pc}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	20000518 	.word	0x20000518
 8002618:	0800d198 	.word	0x0800d198

0800261c <test_xy>:

int test_xy(h_shell_t * h_shell,int argc, char ** argv)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
	int32_t x=atoi(argv[1]);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3304      	adds	r3, #4
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	0018      	movs	r0, r3
 8002630:	f008 f830 	bl	800a694 <atoi>
 8002634:	0003      	movs	r3, r0
 8002636:	617b      	str	r3, [r7, #20]
	int32_t y=atoi(argv[2]);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3308      	adds	r3, #8
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	0018      	movs	r0, r3
 8002640:	f008 f828 	bl	800a694 <atoi>
 8002644:	0003      	movs	r3, r0
 8002646:	613b      	str	r3, [r7, #16]

	if (argc == 3)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b03      	cmp	r3, #3
 800264c:	d107      	bne.n	800265e <test_xy+0x42>
	{
		command_cartesien(x,y,&encoders);
 800264e:	4a09      	ldr	r2, [pc, #36]	; (8002674 <test_xy+0x58>)
 8002650:	6939      	ldr	r1, [r7, #16]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	0018      	movs	r0, r3
 8002656:	f001 fb41 	bl	8003cdc <command_cartesien>
		return 0;
 800265a:	2300      	movs	r3, #0
 800265c:	e005      	b.n	800266a <test_xy+0x4e>
	}
	else
	{
		printf("Erreur, pas le bon nombre d'arguments\r\n");
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <test_xy+0x5c>)
 8002660:	0018      	movs	r0, r3
 8002662:	f008 f9c7 	bl	800a9f4 <puts>
		return -1;
 8002666:	2301      	movs	r3, #1
 8002668:	425b      	negs	r3, r3
	}
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b006      	add	sp, #24
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	20000518 	.word	0x20000518
 8002678:	0800d198 	.word	0x0800d198

0800267c <task_shell>:




void task_shell(void * unused)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	shell_init(&h_shell);
 8002684:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <task_shell+0x64>)
 8002686:	0018      	movs	r0, r3
 8002688:	f006 f8ec 	bl	8008864 <shell_init>

	if (init_motors(&motors))
 800268c:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <task_shell+0x68>)
 800268e:	0018      	movs	r0, r3
 8002690:	f001 f86a 	bl	8003768 <init_motors>
	}

	//shell_add(&h_shell,'f', fonction, (char *)"Une fonction inutile");

	//shell_add(&h_shell,'t', test_pwm, "Tester le pwm du moteur right");
	shell_add(&h_shell,'m', motor, "tourner les moteurs");
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <task_shell+0x6c>)
 8002696:	4a15      	ldr	r2, [pc, #84]	; (80026ec <task_shell+0x70>)
 8002698:	4811      	ldr	r0, [pc, #68]	; (80026e0 <task_shell+0x64>)
 800269a:	216d      	movs	r1, #109	; 0x6d
 800269c:	f006 f90c 	bl	80088b8 <shell_add>
	shell_add(&h_shell,'e', speed, "vitesse des moteurs");
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <task_shell+0x74>)
 80026a2:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <task_shell+0x78>)
 80026a4:	480e      	ldr	r0, [pc, #56]	; (80026e0 <task_shell+0x64>)
 80026a6:	2165      	movs	r1, #101	; 0x65
 80026a8:	f006 f906 	bl	80088b8 <shell_add>
	shell_add(&h_shell,'a', test_dist, "tester asserv dist");
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <task_shell+0x7c>)
 80026ae:	4a13      	ldr	r2, [pc, #76]	; (80026fc <task_shell+0x80>)
 80026b0:	480b      	ldr	r0, [pc, #44]	; (80026e0 <task_shell+0x64>)
 80026b2:	2161      	movs	r1, #97	; 0x61
 80026b4:	f006 f900 	bl	80088b8 <shell_add>
	shell_add(&h_shell,'b', test_angle, "tester asserv angle");
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <task_shell+0x84>)
 80026ba:	4a12      	ldr	r2, [pc, #72]	; (8002704 <task_shell+0x88>)
 80026bc:	4808      	ldr	r0, [pc, #32]	; (80026e0 <task_shell+0x64>)
 80026be:	2162      	movs	r1, #98	; 0x62
 80026c0:	f006 f8fa 	bl	80088b8 <shell_add>
	shell_add(&h_shell,'x', test_xy, "tester asserv xy");
 80026c4:	4b10      	ldr	r3, [pc, #64]	; (8002708 <task_shell+0x8c>)
 80026c6:	4a11      	ldr	r2, [pc, #68]	; (800270c <task_shell+0x90>)
 80026c8:	4805      	ldr	r0, [pc, #20]	; (80026e0 <task_shell+0x64>)
 80026ca:	2178      	movs	r1, #120	; 0x78
 80026cc:	f006 f8f4 	bl	80088b8 <shell_add>
	shell_run(&h_shell);	// boucle infinie
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <task_shell+0x64>)
 80026d2:	0018      	movs	r0, r3
 80026d4:	f006 f9a4 	bl	8008a20 <shell_run>
}
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b002      	add	sp, #8
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	2000011c 	.word	0x2000011c
 80026e4:	20000454 	.word	0x20000454
 80026e8:	0800d25c 	.word	0x0800d25c
 80026ec:	08002359 	.word	0x08002359
 80026f0:	0800d270 	.word	0x0800d270
 80026f4:	080024ad 	.word	0x080024ad
 80026f8:	0800d284 	.word	0x0800d284
 80026fc:	08002571 	.word	0x08002571
 8002700:	0800d298 	.word	0x0800d298
 8002704:	080025c1 	.word	0x080025c1
 8002708:	0800d2ac 	.word	0x0800d2ac
 800270c:	0800261d 	.word	0x0800261d

08002710 <task_encoder>:
void task_encoder(void * unused)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
	if (init_encoders(&encoders))
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <task_encoder+0x20>)
 800271a:	0018      	movs	r0, r3
 800271c:	f001 f870 	bl	8003800 <init_encoders>
	{
		//		printf("Encoders Initialized\r\n");
	}
	while (1)
	{
		get_ticks(&encoders);
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <task_encoder+0x20>)
 8002722:	0018      	movs	r0, r3
 8002724:	f001 f960 	bl	80039e8 <get_ticks>
		vTaskDelay(5);
 8002728:	2005      	movs	r0, #5
 800272a:	f006 ff87 	bl	800963c <vTaskDelay>
		get_ticks(&encoders);
 800272e:	e7f7      	b.n	8002720 <task_encoder+0x10>
 8002730:	20000518 	.word	0x20000518

08002734 <task_odom>:
	}
}

void task_odom(void * unused)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		odom(&encoders);
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <task_odom+0x18>)
 800273e:	0018      	movs	r0, r3
 8002740:	f001 fbac 	bl	8003e9c <odom>

		vTaskDelay(50);
 8002744:	2032      	movs	r0, #50	; 0x32
 8002746:	f006 ff79 	bl	800963c <vTaskDelay>
		odom(&encoders);
 800274a:	e7f7      	b.n	800273c <task_odom+0x8>
 800274c:	20000518 	.word	0x20000518

08002750 <task_bordure>:
	}
}
void task_bordure(void * unused)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	init_bords(&bords);
 8002758:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <task_bordure+0x84>)
 800275a:	0018      	movs	r0, r3
 800275c:	f000 fefb 	bl	8003556 <init_bords>

	while(1)
	{

		if(update_bords(&bords)&(bords.detect==0))
 8002760:	4b1c      	ldr	r3, [pc, #112]	; (80027d4 <task_bordure+0x84>)
 8002762:	0018      	movs	r0, r3
 8002764:	f000 ff0a 	bl	800357c <update_bords>
 8002768:	0003      	movs	r3, r0
 800276a:	001a      	movs	r2, r3
 800276c:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <task_bordure+0x84>)
 800276e:	789b      	ldrb	r3, [r3, #2]
 8002770:	4259      	negs	r1, r3
 8002772:	414b      	adcs	r3, r1
 8002774:	b2db      	uxtb	r3, r3
 8002776:	4013      	ands	r3, r2
 8002778:	d019      	beq.n	80027ae <task_bordure+0x5e>
		{
			command_stop(&encoders);
 800277a:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <task_bordure+0x88>)
 800277c:	0018      	movs	r0, r3
 800277e:	f001 fd45 	bl	800420c <command_stop>
			xSemaphoreGive(encoders.sem_angle_done);
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <task_bordure+0x88>)
 8002784:	22ac      	movs	r2, #172	; 0xac
 8002786:	5898      	ldr	r0, [r3, r2]
 8002788:	2300      	movs	r3, #0
 800278a:	2200      	movs	r2, #0
 800278c:	2100      	movs	r1, #0
 800278e:	f006 fb7b 	bl	8008e88 <xQueueGenericSend>
			xSemaphoreGive(encoders.sem_distance_done);
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <task_bordure+0x88>)
 8002794:	22a8      	movs	r2, #168	; 0xa8
 8002796:	5898      	ldr	r0, [r3, r2]
 8002798:	2300      	movs	r3, #0
 800279a:	2200      	movs	r2, #0
 800279c:	2100      	movs	r1, #0
 800279e:	f006 fb73 	bl	8008e88 <xQueueGenericSend>
			bords.detect=1;
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <task_bordure+0x84>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	709a      	strb	r2, [r3, #2]
			vTaskDelay(10);
 80027a8:	200a      	movs	r0, #10
 80027aa:	f006 ff47 	bl	800963c <vTaskDelay>
		}
		if(bords.detect)
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <task_bordure+0x84>)
 80027b0:	789b      	ldrb	r3, [r3, #2]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <task_bordure+0x7a>
		{
			command_distance(&encoders, -100);
 80027b6:	2364      	movs	r3, #100	; 0x64
 80027b8:	425a      	negs	r2, r3
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <task_bordure+0x88>)
 80027bc:	0011      	movs	r1, r2
 80027be:	0018      	movs	r0, r3
 80027c0:	f001 fc78 	bl	80040b4 <command_distance>
			//command_angle(&encoders, 180);
			bords.detect=0;
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <task_bordure+0x84>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	709a      	strb	r2, [r3, #2]
		}
		vTaskDelay(20);
 80027ca:	2014      	movs	r0, #20
 80027cc:	f006 ff36 	bl	800963c <vTaskDelay>
		if(update_bords(&bords)&(bords.detect==0))
 80027d0:	e7c6      	b.n	8002760 <task_bordure+0x10>
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	200005d0 	.word	0x200005d0
 80027d8:	20000518 	.word	0x20000518

080027dc <task_angle>:
	}
}
void task_angle(void * unused)
{
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Sémaphore
		xSemaphoreTake(encoders.sem_angle_check, portMAX_DELAY);
 80027e4:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <task_angle+0xf8>)
 80027e6:	22b4      	movs	r2, #180	; 0xb4
 80027e8:	589b      	ldr	r3, [r3, r2]
 80027ea:	2201      	movs	r2, #1
 80027ec:	4252      	negs	r2, r2
 80027ee:	0011      	movs	r1, r2
 80027f0:	0018      	movs	r0, r3
 80027f2:	f006 fc0d 	bl	8009010 <xQueueSemaphoreTake>
		if(abs(encoders.theta)>abs(encoders.left.consigne_angle))
 80027f6:	4b37      	ldr	r3, [pc, #220]	; (80028d4 <task_angle+0xf8>)
 80027f8:	3380      	adds	r3, #128	; 0x80
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	0010      	movs	r0, r2
 8002800:	0019      	movs	r1, r3
 8002802:	f7ff fbfb 	bl	8001ffc <__aeabi_d2iz>
 8002806:	0003      	movs	r3, r0
 8002808:	17da      	asrs	r2, r3, #31
 800280a:	189c      	adds	r4, r3, r2
 800280c:	4054      	eors	r4, r2
 800280e:	4b31      	ldr	r3, [pc, #196]	; (80028d4 <task_angle+0xf8>)
 8002810:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002814:	0010      	movs	r0, r2
 8002816:	0019      	movs	r1, r3
 8002818:	f7ff fbf0 	bl	8001ffc <__aeabi_d2iz>
 800281c:	0003      	movs	r3, r0
 800281e:	17da      	asrs	r2, r3, #31
 8002820:	189b      	adds	r3, r3, r2
 8002822:	4053      	eors	r3, r2
 8002824:	429c      	cmp	r4, r3
 8002826:	dd0c      	ble.n	8002842 <task_angle+0x66>
		{
			command_angle_stop(&encoders);
 8002828:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <task_angle+0xf8>)
 800282a:	0018      	movs	r0, r3
 800282c:	f001 fcb6 	bl	800419c <command_angle_stop>
			//printf("angle=%d\r\n",(int)encoders.angle);
			xSemaphoreGive(encoders.sem_angle_done);
 8002830:	4b28      	ldr	r3, [pc, #160]	; (80028d4 <task_angle+0xf8>)
 8002832:	22ac      	movs	r2, #172	; 0xac
 8002834:	5898      	ldr	r0, [r3, r2]
 8002836:	2300      	movs	r3, #0
 8002838:	2200      	movs	r2, #0
 800283a:	2100      	movs	r1, #0
 800283c:	f006 fb24 	bl	8008e88 <xQueueGenericSend>
 8002840:	e007      	b.n	8002852 <task_angle+0x76>
		}
		else
		{
			xSemaphoreGive(encoders.sem_angle_check);
 8002842:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <task_angle+0xf8>)
 8002844:	22b4      	movs	r2, #180	; 0xb4
 8002846:	5898      	ldr	r0, [r3, r2]
 8002848:	2300      	movs	r3, #0
 800284a:	2200      	movs	r2, #0
 800284c:	2100      	movs	r1, #0
 800284e:	f006 fb1b 	bl	8008e88 <xQueueGenericSend>
		}
		g_angle=(int)encoders.angle+270%360;
 8002852:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <task_angle+0xf8>)
 8002854:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002858:	0010      	movs	r0, r2
 800285a:	0019      	movs	r1, r3
 800285c:	f7ff fbce 	bl	8001ffc <__aeabi_d2iz>
 8002860:	0003      	movs	r3, r0
 8002862:	330f      	adds	r3, #15
 8002864:	33ff      	adds	r3, #255	; 0xff
 8002866:	001a      	movs	r2, r3
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <task_angle+0xfc>)
 800286a:	601a      	str	r2, [r3, #0]
		if (g_angle<0)
 800286c:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <task_angle+0xfc>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	da06      	bge.n	8002882 <task_angle+0xa6>
		{
			g_angle+=360;
 8002874:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <task_angle+0xfc>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3369      	adds	r3, #105	; 0x69
 800287a:	33ff      	adds	r3, #255	; 0xff
 800287c:	001a      	movs	r2, r3
 800287e:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <task_angle+0xfc>)
 8002880:	601a      	str	r2, [r3, #0]
		}

		if (g_angle>=100)
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <task_angle+0xfc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b63      	cmp	r3, #99	; 0x63
 8002888:	dd07      	ble.n	800289a <task_angle+0xbe>
			sprintf(g_msg,"g0%dp",g_angle);
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <task_angle+0xfc>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	4913      	ldr	r1, [pc, #76]	; (80028dc <task_angle+0x100>)
 8002890:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <task_angle+0x104>)
 8002892:	0018      	movs	r0, r3
 8002894:	f008 f8ec 	bl	800aa70 <siprintf>
 8002898:	e012      	b.n	80028c0 <task_angle+0xe4>
		else if (g_angle>=10)
 800289a:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <task_angle+0xfc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b09      	cmp	r3, #9
 80028a0:	dd07      	ble.n	80028b2 <task_angle+0xd6>
			sprintf(g_msg,"g00%dp",g_angle);
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <task_angle+0xfc>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	490f      	ldr	r1, [pc, #60]	; (80028e4 <task_angle+0x108>)
 80028a8:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <task_angle+0x104>)
 80028aa:	0018      	movs	r0, r3
 80028ac:	f008 f8e0 	bl	800aa70 <siprintf>
 80028b0:	e006      	b.n	80028c0 <task_angle+0xe4>
		else
			sprintf(g_msg,"g000%dp",g_angle);
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <task_angle+0xfc>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	490c      	ldr	r1, [pc, #48]	; (80028e8 <task_angle+0x10c>)
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <task_angle+0x104>)
 80028ba:	0018      	movs	r0, r3
 80028bc:	f008 f8d8 	bl	800aa70 <siprintf>
		HAL_UART_Transmit(&huart2, g_msg, 6, 0xFFFF);
 80028c0:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <task_angle+0x110>)
 80028c2:	4907      	ldr	r1, [pc, #28]	; (80028e0 <task_angle+0x104>)
 80028c4:	480a      	ldr	r0, [pc, #40]	; (80028f0 <task_angle+0x114>)
 80028c6:	2206      	movs	r2, #6
 80028c8:	f004 fc3a 	bl	8007140 <HAL_UART_Transmit>
		vTaskDelay(10);
 80028cc:	200a      	movs	r0, #10
 80028ce:	f006 feb5 	bl	800963c <vTaskDelay>
		xSemaphoreTake(encoders.sem_angle_check, portMAX_DELAY);
 80028d2:	e787      	b.n	80027e4 <task_angle+0x8>
 80028d4:	20000518 	.word	0x20000518
 80028d8:	200005f8 	.word	0x200005f8
 80028dc:	0800d2c0 	.word	0x0800d2c0
 80028e0:	200005ec 	.word	0x200005ec
 80028e4:	0800d2c8 	.word	0x0800d2c8
 80028e8:	0800d2d0 	.word	0x0800d2d0
 80028ec:	0000ffff 	.word	0x0000ffff
 80028f0:	20000698 	.word	0x20000698

080028f4 <task_distance>:
	}
}
void task_distance(void * unused)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Sémaphore
		xSemaphoreTake(encoders.sem_distance_check, portMAX_DELAY);
 80028fc:	4b50      	ldr	r3, [pc, #320]	; (8002a40 <task_distance+0x14c>)
 80028fe:	22b0      	movs	r2, #176	; 0xb0
 8002900:	589b      	ldr	r3, [r3, r2]
 8002902:	2201      	movs	r2, #1
 8002904:	4252      	negs	r2, r2
 8002906:	0011      	movs	r1, r2
 8002908:	0018      	movs	r0, r3
 800290a:	f006 fb81 	bl	8009010 <xQueueSemaphoreTake>
		if(abs(encoders.distance)>abs(encoders.left.consigne_distance))
 800290e:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <task_distance+0x14c>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	17d9      	asrs	r1, r3, #31
 8002914:	185a      	adds	r2, r3, r1
 8002916:	404a      	eors	r2, r1
 8002918:	4b49      	ldr	r3, [pc, #292]	; (8002a40 <task_distance+0x14c>)
 800291a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800291c:	17d9      	asrs	r1, r3, #31
 800291e:	185b      	adds	r3, r3, r1
 8002920:	404b      	eors	r3, r1
 8002922:	429a      	cmp	r2, r3
 8002924:	dd0c      	ble.n	8002940 <task_distance+0x4c>
		{
			command_distance_stop(&encoders);
 8002926:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <task_distance+0x14c>)
 8002928:	0018      	movs	r0, r3
 800292a:	f001 fc56 	bl	80041da <command_distance_stop>
			xSemaphoreGive(encoders.sem_distance_done);
 800292e:	4b44      	ldr	r3, [pc, #272]	; (8002a40 <task_distance+0x14c>)
 8002930:	22a8      	movs	r2, #168	; 0xa8
 8002932:	5898      	ldr	r0, [r3, r2]
 8002934:	2300      	movs	r3, #0
 8002936:	2200      	movs	r2, #0
 8002938:	2100      	movs	r1, #0
 800293a:	f006 faa5 	bl	8008e88 <xQueueGenericSend>
 800293e:	e007      	b.n	8002950 <task_distance+0x5c>
		}
		else
		{
			xSemaphoreGive(encoders.sem_distance_check);
 8002940:	4b3f      	ldr	r3, [pc, #252]	; (8002a40 <task_distance+0x14c>)
 8002942:	22b0      	movs	r2, #176	; 0xb0
 8002944:	5898      	ldr	r0, [r3, r2]
 8002946:	2300      	movs	r3, #0
 8002948:	2200      	movs	r2, #0
 800294a:	2100      	movs	r1, #0
 800294c:	f006 fa9c 	bl	8008e88 <xQueueGenericSend>
		}
		if (encoders.x>=1000)
 8002950:	4b3b      	ldr	r3, [pc, #236]	; (8002a40 <task_distance+0x14c>)
 8002952:	229c      	movs	r2, #156	; 0x9c
 8002954:	589a      	ldr	r2, [r3, r2]
 8002956:	23fa      	movs	r3, #250	; 0xfa
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	429a      	cmp	r2, r3
 800295c:	db08      	blt.n	8002970 <task_distance+0x7c>
			sprintf(x_msg,"x%dp",encoders.x);
 800295e:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <task_distance+0x14c>)
 8002960:	229c      	movs	r2, #156	; 0x9c
 8002962:	589a      	ldr	r2, [r3, r2]
 8002964:	4937      	ldr	r1, [pc, #220]	; (8002a44 <task_distance+0x150>)
 8002966:	4b38      	ldr	r3, [pc, #224]	; (8002a48 <task_distance+0x154>)
 8002968:	0018      	movs	r0, r3
 800296a:	f008 f881 	bl	800aa70 <siprintf>
 800296e:	e023      	b.n	80029b8 <task_distance+0xc4>
		else if (encoders.x>=100)
 8002970:	4b33      	ldr	r3, [pc, #204]	; (8002a40 <task_distance+0x14c>)
 8002972:	229c      	movs	r2, #156	; 0x9c
 8002974:	589b      	ldr	r3, [r3, r2]
 8002976:	2b63      	cmp	r3, #99	; 0x63
 8002978:	dd08      	ble.n	800298c <task_distance+0x98>
			sprintf(x_msg,"x0%dp",encoders.x);
 800297a:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <task_distance+0x14c>)
 800297c:	229c      	movs	r2, #156	; 0x9c
 800297e:	589a      	ldr	r2, [r3, r2]
 8002980:	4932      	ldr	r1, [pc, #200]	; (8002a4c <task_distance+0x158>)
 8002982:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <task_distance+0x154>)
 8002984:	0018      	movs	r0, r3
 8002986:	f008 f873 	bl	800aa70 <siprintf>
 800298a:	e015      	b.n	80029b8 <task_distance+0xc4>
		else if (encoders.x>=10)
 800298c:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <task_distance+0x14c>)
 800298e:	229c      	movs	r2, #156	; 0x9c
 8002990:	589b      	ldr	r3, [r3, r2]
 8002992:	2b09      	cmp	r3, #9
 8002994:	dd08      	ble.n	80029a8 <task_distance+0xb4>
			sprintf(x_msg,"x00%dp",encoders.x);
 8002996:	4b2a      	ldr	r3, [pc, #168]	; (8002a40 <task_distance+0x14c>)
 8002998:	229c      	movs	r2, #156	; 0x9c
 800299a:	589a      	ldr	r2, [r3, r2]
 800299c:	492c      	ldr	r1, [pc, #176]	; (8002a50 <task_distance+0x15c>)
 800299e:	4b2a      	ldr	r3, [pc, #168]	; (8002a48 <task_distance+0x154>)
 80029a0:	0018      	movs	r0, r3
 80029a2:	f008 f865 	bl	800aa70 <siprintf>
 80029a6:	e007      	b.n	80029b8 <task_distance+0xc4>
		else
			sprintf(x_msg,"x000%dp",encoders.x);
 80029a8:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <task_distance+0x14c>)
 80029aa:	229c      	movs	r2, #156	; 0x9c
 80029ac:	589a      	ldr	r2, [r3, r2]
 80029ae:	4929      	ldr	r1, [pc, #164]	; (8002a54 <task_distance+0x160>)
 80029b0:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <task_distance+0x154>)
 80029b2:	0018      	movs	r0, r3
 80029b4:	f008 f85c 	bl	800aa70 <siprintf>
		HAL_UART_Transmit(&huart2, x_msg, 6, 0xFFFF);
 80029b8:	4b27      	ldr	r3, [pc, #156]	; (8002a58 <task_distance+0x164>)
 80029ba:	4923      	ldr	r1, [pc, #140]	; (8002a48 <task_distance+0x154>)
 80029bc:	4827      	ldr	r0, [pc, #156]	; (8002a5c <task_distance+0x168>)
 80029be:	2206      	movs	r2, #6
 80029c0:	f004 fbbe 	bl	8007140 <HAL_UART_Transmit>

		if (encoders.y>=1000)
 80029c4:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <task_distance+0x14c>)
 80029c6:	22a0      	movs	r2, #160	; 0xa0
 80029c8:	589a      	ldr	r2, [r3, r2]
 80029ca:	23fa      	movs	r3, #250	; 0xfa
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	429a      	cmp	r2, r3
 80029d0:	db08      	blt.n	80029e4 <task_distance+0xf0>
			sprintf(y_msg,"y%dp",encoders.y);
 80029d2:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <task_distance+0x14c>)
 80029d4:	22a0      	movs	r2, #160	; 0xa0
 80029d6:	589a      	ldr	r2, [r3, r2]
 80029d8:	4921      	ldr	r1, [pc, #132]	; (8002a60 <task_distance+0x16c>)
 80029da:	4b22      	ldr	r3, [pc, #136]	; (8002a64 <task_distance+0x170>)
 80029dc:	0018      	movs	r0, r3
 80029de:	f008 f847 	bl	800aa70 <siprintf>
 80029e2:	e023      	b.n	8002a2c <task_distance+0x138>
		else if (encoders.y>=100)
 80029e4:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <task_distance+0x14c>)
 80029e6:	22a0      	movs	r2, #160	; 0xa0
 80029e8:	589b      	ldr	r3, [r3, r2]
 80029ea:	2b63      	cmp	r3, #99	; 0x63
 80029ec:	dd08      	ble.n	8002a00 <task_distance+0x10c>
			sprintf(y_msg,"y0%dp",encoders.y);
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <task_distance+0x14c>)
 80029f0:	22a0      	movs	r2, #160	; 0xa0
 80029f2:	589a      	ldr	r2, [r3, r2]
 80029f4:	491c      	ldr	r1, [pc, #112]	; (8002a68 <task_distance+0x174>)
 80029f6:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <task_distance+0x170>)
 80029f8:	0018      	movs	r0, r3
 80029fa:	f008 f839 	bl	800aa70 <siprintf>
 80029fe:	e015      	b.n	8002a2c <task_distance+0x138>
		else if (encoders.y>=10)
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <task_distance+0x14c>)
 8002a02:	22a0      	movs	r2, #160	; 0xa0
 8002a04:	589b      	ldr	r3, [r3, r2]
 8002a06:	2b09      	cmp	r3, #9
 8002a08:	dd08      	ble.n	8002a1c <task_distance+0x128>
			sprintf(y_msg,"y00%dp",encoders.y);
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <task_distance+0x14c>)
 8002a0c:	22a0      	movs	r2, #160	; 0xa0
 8002a0e:	589a      	ldr	r2, [r3, r2]
 8002a10:	4916      	ldr	r1, [pc, #88]	; (8002a6c <task_distance+0x178>)
 8002a12:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <task_distance+0x170>)
 8002a14:	0018      	movs	r0, r3
 8002a16:	f008 f82b 	bl	800aa70 <siprintf>
 8002a1a:	e007      	b.n	8002a2c <task_distance+0x138>
		else
			sprintf(y_msg,"y000%dp",encoders.y);
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <task_distance+0x14c>)
 8002a1e:	22a0      	movs	r2, #160	; 0xa0
 8002a20:	589a      	ldr	r2, [r3, r2]
 8002a22:	4913      	ldr	r1, [pc, #76]	; (8002a70 <task_distance+0x17c>)
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <task_distance+0x170>)
 8002a26:	0018      	movs	r0, r3
 8002a28:	f008 f822 	bl	800aa70 <siprintf>
		HAL_UART_Transmit(&huart2, y_msg, 6, 0xFFFF);
 8002a2c:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <task_distance+0x164>)
 8002a2e:	490d      	ldr	r1, [pc, #52]	; (8002a64 <task_distance+0x170>)
 8002a30:	480a      	ldr	r0, [pc, #40]	; (8002a5c <task_distance+0x168>)
 8002a32:	2206      	movs	r2, #6
 8002a34:	f004 fb84 	bl	8007140 <HAL_UART_Transmit>


		vTaskDelay(10);
 8002a38:	200a      	movs	r0, #10
 8002a3a:	f006 fdff 	bl	800963c <vTaskDelay>
		xSemaphoreTake(encoders.sem_distance_check, portMAX_DELAY);
 8002a3e:	e75d      	b.n	80028fc <task_distance+0x8>
 8002a40:	20000518 	.word	0x20000518
 8002a44:	0800d2d8 	.word	0x0800d2d8
 8002a48:	200005d4 	.word	0x200005d4
 8002a4c:	0800d2e0 	.word	0x0800d2e0
 8002a50:	0800d2e8 	.word	0x0800d2e8
 8002a54:	0800d2f0 	.word	0x0800d2f0
 8002a58:	0000ffff 	.word	0x0000ffff
 8002a5c:	20000698 	.word	0x20000698
 8002a60:	0800d2f8 	.word	0x0800d2f8
 8002a64:	200005e0 	.word	0x200005e0
 8002a68:	0800d300 	.word	0x0800d300
 8002a6c:	0800d308 	.word	0x0800d308
 8002a70:	0800d310 	.word	0x0800d310

08002a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a7a:	f001 fbf1 	bl	8004260 <HAL_Init>

  /* USER CODE BEGIN Init */
  h_shell.shell_func_list_size=0;
 8002a7e:	4b51      	ldr	r3, [pc, #324]	; (8002bc4 <main+0x150>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
  	h_shell.sem_uart_read=NULL;
 8002a84:	4a4f      	ldr	r2, [pc, #316]	; (8002bc4 <main+0x150>)
 8002a86:	23cb      	movs	r3, #203	; 0xcb
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	50d1      	str	r1, [r2, r3]
  	encoders.sem_angle_done=NULL;
 8002a8e:	4b4e      	ldr	r3, [pc, #312]	; (8002bc8 <main+0x154>)
 8002a90:	22ac      	movs	r2, #172	; 0xac
 8002a92:	2100      	movs	r1, #0
 8002a94:	5099      	str	r1, [r3, r2]
  	encoders.sem_distance_done=NULL;
 8002a96:	4b4c      	ldr	r3, [pc, #304]	; (8002bc8 <main+0x154>)
 8002a98:	22a8      	movs	r2, #168	; 0xa8
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	5099      	str	r1, [r3, r2]
  	encoders.sem_angle_check=NULL;
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <main+0x154>)
 8002aa0:	22b4      	movs	r2, #180	; 0xb4
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	5099      	str	r1, [r3, r2]
  	encoders.sem_distance_check=NULL;
 8002aa6:	4b48      	ldr	r3, [pc, #288]	; (8002bc8 <main+0x154>)
 8002aa8:	22b0      	movs	r2, #176	; 0xb0
 8002aaa:	2100      	movs	r1, #0
 8002aac:	5099      	str	r1, [r3, r2]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002aae:	f000 f8bb 	bl	8002c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ab2:	f7ff fbf9 	bl	80022a8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002ab6:	f000 fa05 	bl	8002ec4 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002aba:	f7ff fb23 	bl	8002104 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002abe:	f000 fae9 	bl	8003094 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002ac2:	f000 fc6d 	bl	80033a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if (xTaskCreate(task_shell, "Shell", TASK_SHELL_STACK_DEPTH, NULL, TASK_SHELL_PRIORITY, &h_task_shell) != pdPASS)
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	00da      	lsls	r2, r3, #3
 8002aca:	4940      	ldr	r1, [pc, #256]	; (8002bcc <main+0x158>)
 8002acc:	4840      	ldr	r0, [pc, #256]	; (8002bd0 <main+0x15c>)
 8002ace:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <main+0x160>)
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f006 fc81 	bl	80093de <xTaskCreate>
 8002adc:	0003      	movs	r3, r0
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d005      	beq.n	8002aee <main+0x7a>
  	{
  		printf("Error creating task shell\r\n");
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	; (8002bd8 <main+0x164>)
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f007 ff85 	bl	800a9f4 <puts>
  		Error_Handler();
 8002aea:	f000 f8f1 	bl	8002cd0 <Error_Handler>
  	}
  	if (xTaskCreate(task_odom, "odom", TASK_ODOM_STACK_DEPTH, NULL, TASK_ODOM_PRIORITY, &h_task_odom) != pdPASS)
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	009a      	lsls	r2, r3, #2
 8002af2:	493a      	ldr	r1, [pc, #232]	; (8002bdc <main+0x168>)
 8002af4:	483a      	ldr	r0, [pc, #232]	; (8002be0 <main+0x16c>)
 8002af6:	4b3b      	ldr	r3, [pc, #236]	; (8002be4 <main+0x170>)
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	2304      	movs	r3, #4
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	2300      	movs	r3, #0
 8002b00:	f006 fc6d 	bl	80093de <xTaskCreate>
 8002b04:	0003      	movs	r3, r0
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d005      	beq.n	8002b16 <main+0xa2>
  	{
  		printf("Error creating task odom\r\n");
 8002b0a:	4b37      	ldr	r3, [pc, #220]	; (8002be8 <main+0x174>)
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f007 ff71 	bl	800a9f4 <puts>
  		Error_Handler();
 8002b12:	f000 f8dd 	bl	8002cd0 <Error_Handler>
  	}
  	if (xTaskCreate(task_bordure, "bordure", TASK_BORDURE_STACK_DEPTH, NULL, TASK_BORDURE_PRIORITY, &h_task_bordure) != pdPASS)
 8002b16:	4935      	ldr	r1, [pc, #212]	; (8002bec <main+0x178>)
 8002b18:	4835      	ldr	r0, [pc, #212]	; (8002bf0 <main+0x17c>)
 8002b1a:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <main+0x180>)
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	2308      	movs	r3, #8
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	2300      	movs	r3, #0
 8002b24:	2240      	movs	r2, #64	; 0x40
 8002b26:	f006 fc5a 	bl	80093de <xTaskCreate>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d005      	beq.n	8002b3c <main+0xc8>
  	{
  		printf("Error creating task bordure\r\n");
 8002b30:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <main+0x184>)
 8002b32:	0018      	movs	r0, r3
 8002b34:	f007 ff5e 	bl	800a9f4 <puts>
  		Error_Handler();
 8002b38:	f000 f8ca 	bl	8002cd0 <Error_Handler>
  	}
  	if (xTaskCreate(task_angle, "angle", TASK_ANGLE_STACK_DEPTH, NULL, TASK_ANGLE_PRIORITY, &h_task_angle) != pdPASS)
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	005a      	lsls	r2, r3, #1
 8002b40:	492e      	ldr	r1, [pc, #184]	; (8002bfc <main+0x188>)
 8002b42:	482f      	ldr	r0, [pc, #188]	; (8002c00 <main+0x18c>)
 8002b44:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <main+0x190>)
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	2304      	movs	r3, #4
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f006 fc46 	bl	80093de <xTaskCreate>
 8002b52:	0003      	movs	r3, r0
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d005      	beq.n	8002b64 <main+0xf0>
  	{
  		printf("Error creating task angle\r\n");
 8002b58:	4b2b      	ldr	r3, [pc, #172]	; (8002c08 <main+0x194>)
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f007 ff4a 	bl	800a9f4 <puts>
  		Error_Handler();
 8002b60:	f000 f8b6 	bl	8002cd0 <Error_Handler>
  	}
  	if (xTaskCreate(task_distance, "distance", TASK_DISTANCE_STACK_DEPTH, NULL, TASK_DISTANCE_PRIORITY, &h_task_distance) != pdPASS)
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	005a      	lsls	r2, r3, #1
 8002b68:	4928      	ldr	r1, [pc, #160]	; (8002c0c <main+0x198>)
 8002b6a:	4829      	ldr	r0, [pc, #164]	; (8002c10 <main+0x19c>)
 8002b6c:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <main+0x1a0>)
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	2304      	movs	r3, #4
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2300      	movs	r3, #0
 8002b76:	f006 fc32 	bl	80093de <xTaskCreate>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d005      	beq.n	8002b8c <main+0x118>
  	{
  		printf("Error creating task distance\r\n");
 8002b80:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <main+0x1a4>)
 8002b82:	0018      	movs	r0, r3
 8002b84:	f007 ff36 	bl	800a9f4 <puts>
  		Error_Handler();
 8002b88:	f000 f8a2 	bl	8002cd0 <Error_Handler>
  	}

  	if (xTaskCreate(task_encoder, "Encoder", TASK_ENCODER_STACK_DEPTH, NULL, TASK_ENCODER_PRIORITY, &h_task_encoder) != pdPASS)
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	009a      	lsls	r2, r3, #2
 8002b90:	4922      	ldr	r1, [pc, #136]	; (8002c1c <main+0x1a8>)
 8002b92:	4823      	ldr	r0, [pc, #140]	; (8002c20 <main+0x1ac>)
 8002b94:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <main+0x1b0>)
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	230a      	movs	r3, #10
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f006 fc1e 	bl	80093de <xTaskCreate>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d005      	beq.n	8002bb4 <main+0x140>
  	{
  		printf("Error creating task shell\r\n");
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <main+0x164>)
 8002baa:	0018      	movs	r0, r3
 8002bac:	f007 ff22 	bl	800a9f4 <puts>
  		Error_Handler();
 8002bb0:	f000 f88e 	bl	8002cd0 <Error_Handler>
  	}


  	vTaskStartScheduler();
 8002bb4:	f006 fd68 	bl	8009688 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002bb8:	f7ff fb54 	bl	8002264 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002bbc:	f005 ffd3 	bl	8008b66 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002bc0:	e7fe      	b.n	8002bc0 <main+0x14c>
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	2000011c 	.word	0x2000011c
 8002bc8:	20000518 	.word	0x20000518
 8002bcc:	0800d318 	.word	0x0800d318
 8002bd0:	0800267d 	.word	0x0800267d
 8002bd4:	20000104 	.word	0x20000104
 8002bd8:	0800d320 	.word	0x0800d320
 8002bdc:	0800d33c 	.word	0x0800d33c
 8002be0:	08002735 	.word	0x08002735
 8002be4:	2000010c 	.word	0x2000010c
 8002be8:	0800d344 	.word	0x0800d344
 8002bec:	0800d360 	.word	0x0800d360
 8002bf0:	08002751 	.word	0x08002751
 8002bf4:	20000110 	.word	0x20000110
 8002bf8:	0800d368 	.word	0x0800d368
 8002bfc:	0800d388 	.word	0x0800d388
 8002c00:	080027dd 	.word	0x080027dd
 8002c04:	20000114 	.word	0x20000114
 8002c08:	0800d390 	.word	0x0800d390
 8002c0c:	0800d3ac 	.word	0x0800d3ac
 8002c10:	080028f5 	.word	0x080028f5
 8002c14:	20000118 	.word	0x20000118
 8002c18:	0800d3b8 	.word	0x0800d3b8
 8002c1c:	0800d3d8 	.word	0x0800d3d8
 8002c20:	08002711 	.word	0x08002711
 8002c24:	20000108 	.word	0x20000108

08002c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b093      	sub	sp, #76	; 0x4c
 8002c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c2e:	2414      	movs	r4, #20
 8002c30:	193b      	adds	r3, r7, r4
 8002c32:	0018      	movs	r0, r3
 8002c34:	2334      	movs	r3, #52	; 0x34
 8002c36:	001a      	movs	r2, r3
 8002c38:	2100      	movs	r1, #0
 8002c3a:	f008 f82b 	bl	800ac94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	0018      	movs	r0, r3
 8002c42:	2310      	movs	r3, #16
 8002c44:	001a      	movs	r2, r3
 8002c46:	2100      	movs	r1, #0
 8002c48:	f008 f824 	bl	800ac94 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	0018      	movs	r0, r3
 8002c52:	f002 fa3f 	bl	80050d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c56:	193b      	adds	r3, r7, r4
 8002c58:	2201      	movs	r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c5c:	193b      	adds	r3, r7, r4
 8002c5e:	2280      	movs	r2, #128	; 0x80
 8002c60:	0252      	lsls	r2, r2, #9
 8002c62:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c64:	0021      	movs	r1, r4
 8002c66:	187b      	adds	r3, r7, r1
 8002c68:	2202      	movs	r2, #2
 8002c6a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c6c:	187b      	adds	r3, r7, r1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002c72:	187b      	adds	r3, r7, r1
 8002c74:	2200      	movs	r2, #0
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002c78:	187b      	adds	r3, r7, r1
 8002c7a:	2210      	movs	r2, #16
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c7e:	187b      	adds	r3, r7, r1
 8002c80:	2280      	movs	r2, #128	; 0x80
 8002c82:	0292      	lsls	r2, r2, #10
 8002c84:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c86:	187b      	adds	r3, r7, r1
 8002c88:	2280      	movs	r2, #128	; 0x80
 8002c8a:	0592      	lsls	r2, r2, #22
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c8e:	187b      	adds	r3, r7, r1
 8002c90:	0018      	movs	r0, r3
 8002c92:	f002 fa6b 	bl	800516c <HAL_RCC_OscConfig>
 8002c96:	1e03      	subs	r3, r0, #0
 8002c98:	d001      	beq.n	8002c9e <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002c9a:	f000 f819 	bl	8002cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c9e:	1d3b      	adds	r3, r7, #4
 8002ca0:	2207      	movs	r2, #7
 8002ca2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ca4:	1d3b      	adds	r3, r7, #4
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cb0:	1d3b      	adds	r3, r7, #4
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cb6:	1d3b      	adds	r3, r7, #4
 8002cb8:	2102      	movs	r1, #2
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f002 fd66 	bl	800578c <HAL_RCC_ClockConfig>
 8002cc0:	1e03      	subs	r3, r0, #0
 8002cc2:	d001      	beq.n	8002cc8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002cc4:	f000 f804 	bl	8002cd0 <Error_Handler>
  }
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b013      	add	sp, #76	; 0x4c
 8002cce:	bd90      	pop	{r4, r7, pc}

08002cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd4:	b672      	cpsid	i
}
 8002cd6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002cd8:	e7fe      	b.n	8002cd8 <Error_Handler+0x8>
	...

08002cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce2:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <HAL_MspInit+0x50>)
 8002ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce6:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <HAL_MspInit+0x50>)
 8002ce8:	2101      	movs	r1, #1
 8002cea:	430a      	orrs	r2, r1
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
 8002cee:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <HAL_MspInit+0x50>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <HAL_MspInit+0x50>)
 8002cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_MspInit+0x50>)
 8002d00:	2180      	movs	r1, #128	; 0x80
 8002d02:	0549      	lsls	r1, r1, #21
 8002d04:	430a      	orrs	r2, r1
 8002d06:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d08:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <HAL_MspInit+0x50>)
 8002d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	055b      	lsls	r3, r3, #21
 8002d10:	4013      	ands	r3, r2
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002d16:	2302      	movs	r3, #2
 8002d18:	425b      	negs	r3, r3
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2103      	movs	r1, #3
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f002 f834 	bl	8004d8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b002      	add	sp, #8
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000

08002d30 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF); //huart3 stlink
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <__io_putchar+0x20>)
 8002d3a:	1d39      	adds	r1, r7, #4
 8002d3c:	4805      	ldr	r0, [pc, #20]	; (8002d54 <__io_putchar+0x24>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f004 f9fe 	bl	8007140 <HAL_UART_Transmit>

  return ch;
 8002d44:	687b      	ldr	r3, [r7, #4]
}
 8002d46:	0018      	movs	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b002      	add	sp, #8
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	0000ffff 	.word	0x0000ffff
 8002d54:	20000698 	.word	0x20000698

08002d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d5c:	e7fe      	b.n	8002d5c <NMI_Handler+0x4>

08002d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d62:	e7fe      	b.n	8002d62 <HardFault_Handler+0x4>

08002d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d68:	f001 fae4 	bl	8004334 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002d6c:	f006 fff6 	bl	8009d5c <xTaskGetSchedulerState>
 8002d70:	0003      	movs	r3, r0
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d001      	beq.n	8002d7a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002d76:	f007 fa9f 	bl	800a2b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	e00a      	b.n	8002da8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d92:	e000      	b.n	8002d96 <_read+0x16>
 8002d94:	bf00      	nop
 8002d96:	0001      	movs	r1, r0
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	60ba      	str	r2, [r7, #8]
 8002d9e:	b2ca      	uxtb	r2, r1
 8002da0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	3301      	adds	r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	dbf0      	blt.n	8002d92 <_read+0x12>
  }

  return len;
 8002db0:	687b      	ldr	r3, [r7, #4]
}
 8002db2:	0018      	movs	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b006      	add	sp, #24
 8002db8:	bd80      	pop	{r7, pc}

08002dba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	e009      	b.n	8002de0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	60ba      	str	r2, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f7ff ffab 	bl	8002d30 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	dbf1      	blt.n	8002dcc <_write+0x12>
  }
  return len;
 8002de8:	687b      	ldr	r3, [r7, #4]
}
 8002dea:	0018      	movs	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b006      	add	sp, #24
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <_close>:

int _close(int file)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	425b      	negs	r3, r3
}
 8002dfe:	0018      	movs	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b002      	add	sp, #8
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2280      	movs	r2, #128	; 0x80
 8002e14:	0192      	lsls	r2, r2, #6
 8002e16:	605a      	str	r2, [r3, #4]
  return 0;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b002      	add	sp, #8
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <_isatty>:

int _isatty(int file)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e2a:	2301      	movs	r3, #1
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b002      	add	sp, #8
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b004      	add	sp, #16
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e54:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <_sbrk+0x5c>)
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <_sbrk+0x60>)
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <_sbrk+0x64>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <_sbrk+0x64>)
 8002e6a:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <_sbrk+0x68>)
 8002e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <_sbrk+0x64>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	18d3      	adds	r3, r2, r3
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d207      	bcs.n	8002e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e7c:	f007 ff72 	bl	800ad64 <__errno>
 8002e80:	0003      	movs	r3, r0
 8002e82:	220c      	movs	r2, #12
 8002e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e86:	2301      	movs	r3, #1
 8002e88:	425b      	negs	r3, r3
 8002e8a:	e009      	b.n	8002ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <_sbrk+0x64>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e92:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <_sbrk+0x64>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	18d2      	adds	r2, r2, r3
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <_sbrk+0x64>)
 8002e9c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b006      	add	sp, #24
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20009000 	.word	0x20009000
 8002eac:	00000400 	.word	0x00000400
 8002eb0:	200005fc 	.word	0x200005fc
 8002eb4:	200015f8 	.word	0x200015f8

08002eb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b0a0      	sub	sp, #128	; 0x80
 8002ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002eca:	235c      	movs	r3, #92	; 0x5c
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	0018      	movs	r0, r3
 8002ed0:	2324      	movs	r3, #36	; 0x24
 8002ed2:	001a      	movs	r2, r3
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	f007 fedd 	bl	800ac94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eda:	2350      	movs	r3, #80	; 0x50
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	0018      	movs	r0, r3
 8002ee0:	230c      	movs	r3, #12
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	f007 fed5 	bl	800ac94 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eea:	2334      	movs	r3, #52	; 0x34
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	0018      	movs	r0, r3
 8002ef0:	231c      	movs	r3, #28
 8002ef2:	001a      	movs	r2, r3
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	f007 fecd 	bl	800ac94 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002efa:	003b      	movs	r3, r7
 8002efc:	0018      	movs	r0, r3
 8002efe:	2334      	movs	r3, #52	; 0x34
 8002f00:	001a      	movs	r2, r3
 8002f02:	2100      	movs	r1, #0
 8002f04:	f007 fec6 	bl	800ac94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f08:	4b5f      	ldr	r3, [pc, #380]	; (8003088 <MX_TIM1_Init+0x1c4>)
 8002f0a:	4a60      	ldr	r2, [pc, #384]	; (800308c <MX_TIM1_Init+0x1c8>)
 8002f0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002f0e:	4b5e      	ldr	r3, [pc, #376]	; (8003088 <MX_TIM1_Init+0x1c4>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f14:	4b5c      	ldr	r3, [pc, #368]	; (8003088 <MX_TIM1_Init+0x1c4>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002f1a:	4b5b      	ldr	r3, [pc, #364]	; (8003088 <MX_TIM1_Init+0x1c4>)
 8002f1c:	4a5c      	ldr	r2, [pc, #368]	; (8003090 <MX_TIM1_Init+0x1cc>)
 8002f1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f20:	4b59      	ldr	r3, [pc, #356]	; (8003088 <MX_TIM1_Init+0x1c4>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f26:	4b58      	ldr	r3, [pc, #352]	; (8003088 <MX_TIM1_Init+0x1c4>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f2c:	4b56      	ldr	r3, [pc, #344]	; (8003088 <MX_TIM1_Init+0x1c4>)
 8002f2e:	2280      	movs	r2, #128	; 0x80
 8002f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f32:	4b55      	ldr	r3, [pc, #340]	; (8003088 <MX_TIM1_Init+0x1c4>)
 8002f34:	0018      	movs	r0, r3
 8002f36:	f002 ff07 	bl	8005d48 <HAL_TIM_PWM_Init>
 8002f3a:	1e03      	subs	r3, r0, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002f3e:	f7ff fec7 	bl	8002cd0 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002f42:	215c      	movs	r1, #92	; 0x5c
 8002f44:	187b      	adds	r3, r7, r1
 8002f46:	2201      	movs	r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f4a:	187b      	adds	r3, r7, r1
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f50:	187b      	adds	r3, r7, r1
 8002f52:	2201      	movs	r2, #1
 8002f54:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f56:	187b      	adds	r3, r7, r1
 8002f58:	2200      	movs	r2, #0
 8002f5a:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8002f5c:	187b      	adds	r3, r7, r1
 8002f5e:	2200      	movs	r2, #0
 8002f60:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f62:	187b      	adds	r3, r7, r1
 8002f64:	2200      	movs	r2, #0
 8002f66:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f68:	187b      	adds	r3, r7, r1
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f6e:	187b      	adds	r3, r7, r1
 8002f70:	2200      	movs	r2, #0
 8002f72:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8002f74:	187b      	adds	r3, r7, r1
 8002f76:	2200      	movs	r2, #0
 8002f78:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002f7a:	187a      	adds	r2, r7, r1
 8002f7c:	4b42      	ldr	r3, [pc, #264]	; (8003088 <MX_TIM1_Init+0x1c4>)
 8002f7e:	0011      	movs	r1, r2
 8002f80:	0018      	movs	r0, r3
 8002f82:	f003 f8a9 	bl	80060d8 <HAL_TIM_Encoder_Init>
 8002f86:	1e03      	subs	r3, r0, #0
 8002f88:	d001      	beq.n	8002f8e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002f8a:	f7ff fea1 	bl	8002cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f8e:	2150      	movs	r1, #80	; 0x50
 8002f90:	187b      	adds	r3, r7, r1
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f96:	187b      	adds	r3, r7, r1
 8002f98:	2200      	movs	r2, #0
 8002f9a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f9c:	187b      	adds	r3, r7, r1
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fa2:	187a      	adds	r2, r7, r1
 8002fa4:	4b38      	ldr	r3, [pc, #224]	; (8003088 <MX_TIM1_Init+0x1c4>)
 8002fa6:	0011      	movs	r1, r2
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f003 ff41 	bl	8006e30 <HAL_TIMEx_MasterConfigSynchronization>
 8002fae:	1e03      	subs	r3, r0, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8002fb2:	f7ff fe8d 	bl	8002cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fb6:	2134      	movs	r1, #52	; 0x34
 8002fb8:	187b      	adds	r3, r7, r1
 8002fba:	2260      	movs	r2, #96	; 0x60
 8002fbc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002fbe:	187b      	adds	r3, r7, r1
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fc4:	187b      	adds	r3, r7, r1
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fca:	187b      	adds	r3, r7, r1
 8002fcc:	2200      	movs	r2, #0
 8002fce:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fd0:	187b      	adds	r3, r7, r1
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fd6:	187b      	adds	r3, r7, r1
 8002fd8:	2200      	movs	r2, #0
 8002fda:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fdc:	187b      	adds	r3, r7, r1
 8002fde:	2200      	movs	r2, #0
 8002fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002fe2:	1879      	adds	r1, r7, r1
 8002fe4:	4b28      	ldr	r3, [pc, #160]	; (8003088 <MX_TIM1_Init+0x1c4>)
 8002fe6:	2208      	movs	r2, #8
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f003 f9c9 	bl	8006380 <HAL_TIM_PWM_ConfigChannel>
 8002fee:	1e03      	subs	r3, r0, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8002ff2:	f7ff fe6d 	bl	8002cd0 <Error_Handler>
  }
  sConfigOC.Pulse = 64;
 8002ff6:	2134      	movs	r1, #52	; 0x34
 8002ff8:	187b      	adds	r3, r7, r1
 8002ffa:	2240      	movs	r2, #64	; 0x40
 8002ffc:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ffe:	1879      	adds	r1, r7, r1
 8003000:	4b21      	ldr	r3, [pc, #132]	; (8003088 <MX_TIM1_Init+0x1c4>)
 8003002:	220c      	movs	r2, #12
 8003004:	0018      	movs	r0, r3
 8003006:	f003 f9bb 	bl	8006380 <HAL_TIM_PWM_ConfigChannel>
 800300a:	1e03      	subs	r3, r0, #0
 800300c:	d001      	beq.n	8003012 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800300e:	f7ff fe5f 	bl	8002cd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003012:	003b      	movs	r3, r7
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003018:	003b      	movs	r3, r7
 800301a:	2200      	movs	r2, #0
 800301c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800301e:	003b      	movs	r3, r7
 8003020:	2200      	movs	r2, #0
 8003022:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003024:	003b      	movs	r3, r7
 8003026:	2200      	movs	r2, #0
 8003028:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800302a:	003b      	movs	r3, r7
 800302c:	2200      	movs	r2, #0
 800302e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003030:	003b      	movs	r3, r7
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	0192      	lsls	r2, r2, #6
 8003036:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003038:	003b      	movs	r3, r7
 800303a:	2200      	movs	r2, #0
 800303c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800303e:	003b      	movs	r3, r7
 8003040:	2200      	movs	r2, #0
 8003042:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003044:	003b      	movs	r3, r7
 8003046:	2200      	movs	r2, #0
 8003048:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800304a:	003b      	movs	r3, r7
 800304c:	2280      	movs	r2, #128	; 0x80
 800304e:	0492      	lsls	r2, r2, #18
 8003050:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003052:	003b      	movs	r3, r7
 8003054:	2200      	movs	r2, #0
 8003056:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003058:	003b      	movs	r3, r7
 800305a:	2200      	movs	r2, #0
 800305c:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800305e:	003b      	movs	r3, r7
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003064:	003a      	movs	r2, r7
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <MX_TIM1_Init+0x1c4>)
 8003068:	0011      	movs	r1, r2
 800306a:	0018      	movs	r0, r3
 800306c:	f003 ff48 	bl	8006f00 <HAL_TIMEx_ConfigBreakDeadTime>
 8003070:	1e03      	subs	r3, r0, #0
 8003072:	d001      	beq.n	8003078 <MX_TIM1_Init+0x1b4>
  {
    Error_Handler();
 8003074:	f7ff fe2c 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <MX_TIM1_Init+0x1c4>)
 800307a:	0018      	movs	r0, r3
 800307c:	f000 f926 	bl	80032cc <HAL_TIM_MspPostInit>

}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b020      	add	sp, #128	; 0x80
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000600 	.word	0x20000600
 800308c:	40012c00 	.word	0x40012c00
 8003090:	0000ffff 	.word	0x0000ffff

08003094 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b094      	sub	sp, #80	; 0x50
 8003098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800309a:	232c      	movs	r3, #44	; 0x2c
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	0018      	movs	r0, r3
 80030a0:	2324      	movs	r3, #36	; 0x24
 80030a2:	001a      	movs	r2, r3
 80030a4:	2100      	movs	r1, #0
 80030a6:	f007 fdf5 	bl	800ac94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030aa:	2320      	movs	r3, #32
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	0018      	movs	r0, r3
 80030b0:	230c      	movs	r3, #12
 80030b2:	001a      	movs	r2, r3
 80030b4:	2100      	movs	r1, #0
 80030b6:	f007 fded 	bl	800ac94 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030ba:	1d3b      	adds	r3, r7, #4
 80030bc:	0018      	movs	r0, r3
 80030be:	231c      	movs	r3, #28
 80030c0:	001a      	movs	r2, r3
 80030c2:	2100      	movs	r1, #0
 80030c4:	f007 fde6 	bl	800ac94 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030c8:	4b3c      	ldr	r3, [pc, #240]	; (80031bc <MX_TIM3_Init+0x128>)
 80030ca:	4a3d      	ldr	r2, [pc, #244]	; (80031c0 <MX_TIM3_Init+0x12c>)
 80030cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80030ce:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <MX_TIM3_Init+0x128>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d4:	4b39      	ldr	r3, [pc, #228]	; (80031bc <MX_TIM3_Init+0x128>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80030da:	4b38      	ldr	r3, [pc, #224]	; (80031bc <MX_TIM3_Init+0x128>)
 80030dc:	4a39      	ldr	r2, [pc, #228]	; (80031c4 <MX_TIM3_Init+0x130>)
 80030de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030e0:	4b36      	ldr	r3, [pc, #216]	; (80031bc <MX_TIM3_Init+0x128>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030e6:	4b35      	ldr	r3, [pc, #212]	; (80031bc <MX_TIM3_Init+0x128>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80030ec:	4b33      	ldr	r3, [pc, #204]	; (80031bc <MX_TIM3_Init+0x128>)
 80030ee:	0018      	movs	r0, r3
 80030f0:	f002 fe2a 	bl	8005d48 <HAL_TIM_PWM_Init>
 80030f4:	1e03      	subs	r3, r0, #0
 80030f6:	d001      	beq.n	80030fc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80030f8:	f7ff fdea 	bl	8002cd0 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	187b      	adds	r3, r7, r1
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003104:	187b      	adds	r3, r7, r1
 8003106:	2200      	movs	r2, #0
 8003108:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800310a:	187b      	adds	r3, r7, r1
 800310c:	2201      	movs	r2, #1
 800310e:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003110:	187b      	adds	r3, r7, r1
 8003112:	2200      	movs	r2, #0
 8003114:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8003116:	187b      	adds	r3, r7, r1
 8003118:	2200      	movs	r2, #0
 800311a:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800311c:	187b      	adds	r3, r7, r1
 800311e:	2200      	movs	r2, #0
 8003120:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003122:	187b      	adds	r3, r7, r1
 8003124:	2201      	movs	r2, #1
 8003126:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003128:	187b      	adds	r3, r7, r1
 800312a:	2200      	movs	r2, #0
 800312c:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 800312e:	187b      	adds	r3, r7, r1
 8003130:	2200      	movs	r2, #0
 8003132:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003134:	187a      	adds	r2, r7, r1
 8003136:	4b21      	ldr	r3, [pc, #132]	; (80031bc <MX_TIM3_Init+0x128>)
 8003138:	0011      	movs	r1, r2
 800313a:	0018      	movs	r0, r3
 800313c:	f002 ffcc 	bl	80060d8 <HAL_TIM_Encoder_Init>
 8003140:	1e03      	subs	r3, r0, #0
 8003142:	d001      	beq.n	8003148 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003144:	f7ff fdc4 	bl	8002cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003148:	2120      	movs	r1, #32
 800314a:	187b      	adds	r3, r7, r1
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003150:	187b      	adds	r3, r7, r1
 8003152:	2200      	movs	r2, #0
 8003154:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003156:	187a      	adds	r2, r7, r1
 8003158:	4b18      	ldr	r3, [pc, #96]	; (80031bc <MX_TIM3_Init+0x128>)
 800315a:	0011      	movs	r1, r2
 800315c:	0018      	movs	r0, r3
 800315e:	f003 fe67 	bl	8006e30 <HAL_TIMEx_MasterConfigSynchronization>
 8003162:	1e03      	subs	r3, r0, #0
 8003164:	d001      	beq.n	800316a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003166:	f7ff fdb3 	bl	8002cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800316a:	1d3b      	adds	r3, r7, #4
 800316c:	2260      	movs	r2, #96	; 0x60
 800316e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003170:	1d3b      	adds	r3, r7, #4
 8003172:	2200      	movs	r2, #0
 8003174:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003176:	1d3b      	adds	r3, r7, #4
 8003178:	2200      	movs	r2, #0
 800317a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800317c:	1d3b      	adds	r3, r7, #4
 800317e:	2200      	movs	r2, #0
 8003180:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003182:	1d39      	adds	r1, r7, #4
 8003184:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <MX_TIM3_Init+0x128>)
 8003186:	2208      	movs	r2, #8
 8003188:	0018      	movs	r0, r3
 800318a:	f003 f8f9 	bl	8006380 <HAL_TIM_PWM_ConfigChannel>
 800318e:	1e03      	subs	r3, r0, #0
 8003190:	d001      	beq.n	8003196 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8003192:	f7ff fd9d 	bl	8002cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003196:	1d39      	adds	r1, r7, #4
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <MX_TIM3_Init+0x128>)
 800319a:	220c      	movs	r2, #12
 800319c:	0018      	movs	r0, r3
 800319e:	f003 f8ef 	bl	8006380 <HAL_TIM_PWM_ConfigChannel>
 80031a2:	1e03      	subs	r3, r0, #0
 80031a4:	d001      	beq.n	80031aa <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 80031a6:	f7ff fd93 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80031aa:	4b04      	ldr	r3, [pc, #16]	; (80031bc <MX_TIM3_Init+0x128>)
 80031ac:	0018      	movs	r0, r3
 80031ae:	f000 f88d 	bl	80032cc <HAL_TIM_MspPostInit>

}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b014      	add	sp, #80	; 0x50
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	2000064c 	.word	0x2000064c
 80031c0:	40000400 	.word	0x40000400
 80031c4:	0000ffff 	.word	0x0000ffff

080031c8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b08d      	sub	sp, #52	; 0x34
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	241c      	movs	r4, #28
 80031d2:	193b      	adds	r3, r7, r4
 80031d4:	0018      	movs	r0, r3
 80031d6:	2314      	movs	r3, #20
 80031d8:	001a      	movs	r2, r3
 80031da:	2100      	movs	r1, #0
 80031dc:	f007 fd5a 	bl	800ac94 <memset>
  if(tim_pwmHandle->Instance==TIM1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a36      	ldr	r2, [pc, #216]	; (80032c0 <HAL_TIM_PWM_MspInit+0xf8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d132      	bne.n	8003250 <HAL_TIM_PWM_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031ea:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <HAL_TIM_PWM_MspInit+0xfc>)
 80031ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ee:	4b35      	ldr	r3, [pc, #212]	; (80032c4 <HAL_TIM_PWM_MspInit+0xfc>)
 80031f0:	2180      	movs	r1, #128	; 0x80
 80031f2:	0109      	lsls	r1, r1, #4
 80031f4:	430a      	orrs	r2, r1
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40
 80031f8:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <HAL_TIM_PWM_MspInit+0xfc>)
 80031fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031fc:	2380      	movs	r3, #128	; 0x80
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
 8003204:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003206:	4b2f      	ldr	r3, [pc, #188]	; (80032c4 <HAL_TIM_PWM_MspInit+0xfc>)
 8003208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800320a:	4b2e      	ldr	r3, [pc, #184]	; (80032c4 <HAL_TIM_PWM_MspInit+0xfc>)
 800320c:	2101      	movs	r1, #1
 800320e:	430a      	orrs	r2, r1
 8003210:	635a      	str	r2, [r3, #52]	; 0x34
 8003212:	4b2c      	ldr	r3, [pc, #176]	; (80032c4 <HAL_TIM_PWM_MspInit+0xfc>)
 8003214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003216:	2201      	movs	r2, #1
 8003218:	4013      	ands	r3, r2
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encod_A_M1_Pin|Encod_B_M1_Pin;
 800321e:	193b      	adds	r3, r7, r4
 8003220:	22c0      	movs	r2, #192	; 0xc0
 8003222:	0092      	lsls	r2, r2, #2
 8003224:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	0021      	movs	r1, r4
 8003228:	187b      	adds	r3, r7, r1
 800322a:	2202      	movs	r2, #2
 800322c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322e:	187b      	adds	r3, r7, r1
 8003230:	2200      	movs	r2, #0
 8003232:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003234:	187b      	adds	r3, r7, r1
 8003236:	2200      	movs	r2, #0
 8003238:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800323a:	187b      	adds	r3, r7, r1
 800323c:	2202      	movs	r2, #2
 800323e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003240:	187a      	adds	r2, r7, r1
 8003242:	23a0      	movs	r3, #160	; 0xa0
 8003244:	05db      	lsls	r3, r3, #23
 8003246:	0011      	movs	r1, r2
 8003248:	0018      	movs	r0, r3
 800324a:	f001 fdc1 	bl	8004dd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800324e:	e033      	b.n	80032b8 <HAL_TIM_PWM_MspInit+0xf0>
  else if(tim_pwmHandle->Instance==TIM3)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a1c      	ldr	r2, [pc, #112]	; (80032c8 <HAL_TIM_PWM_MspInit+0x100>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d12e      	bne.n	80032b8 <HAL_TIM_PWM_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800325a:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <HAL_TIM_PWM_MspInit+0xfc>)
 800325c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800325e:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <HAL_TIM_PWM_MspInit+0xfc>)
 8003260:	2102      	movs	r1, #2
 8003262:	430a      	orrs	r2, r1
 8003264:	63da      	str	r2, [r3, #60]	; 0x3c
 8003266:	4b17      	ldr	r3, [pc, #92]	; (80032c4 <HAL_TIM_PWM_MspInit+0xfc>)
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	2202      	movs	r2, #2
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <HAL_TIM_PWM_MspInit+0xfc>)
 8003274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003276:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <HAL_TIM_PWM_MspInit+0xfc>)
 8003278:	2101      	movs	r1, #1
 800327a:	430a      	orrs	r2, r1
 800327c:	635a      	str	r2, [r3, #52]	; 0x34
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_TIM_PWM_MspInit+0xfc>)
 8003280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003282:	2201      	movs	r2, #1
 8003284:	4013      	ands	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encod_B_M2_Pin|Encod_A_M2_Pin;
 800328a:	211c      	movs	r1, #28
 800328c:	187b      	adds	r3, r7, r1
 800328e:	22c0      	movs	r2, #192	; 0xc0
 8003290:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003292:	187b      	adds	r3, r7, r1
 8003294:	2202      	movs	r2, #2
 8003296:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	187b      	adds	r3, r7, r1
 800329a:	2200      	movs	r2, #0
 800329c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329e:	187b      	adds	r3, r7, r1
 80032a0:	2200      	movs	r2, #0
 80032a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80032a4:	187b      	adds	r3, r7, r1
 80032a6:	2201      	movs	r2, #1
 80032a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032aa:	187a      	adds	r2, r7, r1
 80032ac:	23a0      	movs	r3, #160	; 0xa0
 80032ae:	05db      	lsls	r3, r3, #23
 80032b0:	0011      	movs	r1, r2
 80032b2:	0018      	movs	r0, r3
 80032b4:	f001 fd8c 	bl	8004dd0 <HAL_GPIO_Init>
}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b00d      	add	sp, #52	; 0x34
 80032be:	bd90      	pop	{r4, r7, pc}
 80032c0:	40012c00 	.word	0x40012c00
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40000400 	.word	0x40000400

080032cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80032cc:	b590      	push	{r4, r7, lr}
 80032ce:	b08b      	sub	sp, #44	; 0x2c
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	2414      	movs	r4, #20
 80032d6:	193b      	adds	r3, r7, r4
 80032d8:	0018      	movs	r0, r3
 80032da:	2314      	movs	r3, #20
 80032dc:	001a      	movs	r2, r3
 80032de:	2100      	movs	r1, #0
 80032e0:	f007 fcd8 	bl	800ac94 <memset>
  if(timHandle->Instance==TIM1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a29      	ldr	r2, [pc, #164]	; (8003390 <HAL_TIM_MspPostInit+0xc4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d124      	bne.n	8003338 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ee:	4b29      	ldr	r3, [pc, #164]	; (8003394 <HAL_TIM_MspPostInit+0xc8>)
 80032f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f2:	4b28      	ldr	r3, [pc, #160]	; (8003394 <HAL_TIM_MspPostInit+0xc8>)
 80032f4:	2101      	movs	r1, #1
 80032f6:	430a      	orrs	r2, r1
 80032f8:	635a      	str	r2, [r3, #52]	; 0x34
 80032fa:	4b26      	ldr	r3, [pc, #152]	; (8003394 <HAL_TIM_MspPostInit+0xc8>)
 80032fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fe:	2201      	movs	r2, #1
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    PA11 [PA9]     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_right_Pin|MOTORN_right_Pin;
 8003306:	193b      	adds	r3, r7, r4
 8003308:	22c0      	movs	r2, #192	; 0xc0
 800330a:	0112      	lsls	r2, r2, #4
 800330c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330e:	0021      	movs	r1, r4
 8003310:	187b      	adds	r3, r7, r1
 8003312:	2202      	movs	r2, #2
 8003314:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003316:	187b      	adds	r3, r7, r1
 8003318:	2200      	movs	r2, #0
 800331a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331c:	187b      	adds	r3, r7, r1
 800331e:	2200      	movs	r2, #0
 8003320:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003322:	187b      	adds	r3, r7, r1
 8003324:	2202      	movs	r2, #2
 8003326:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003328:	187a      	adds	r2, r7, r1
 800332a:	23a0      	movs	r3, #160	; 0xa0
 800332c:	05db      	lsls	r3, r3, #23
 800332e:	0011      	movs	r1, r2
 8003330:	0018      	movs	r0, r3
 8003332:	f001 fd4d 	bl	8004dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003336:	e026      	b.n	8003386 <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM3)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a16      	ldr	r2, [pc, #88]	; (8003398 <HAL_TIM_MspPostInit+0xcc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d121      	bne.n	8003386 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003342:	4b14      	ldr	r3, [pc, #80]	; (8003394 <HAL_TIM_MspPostInit+0xc8>)
 8003344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003346:	4b13      	ldr	r3, [pc, #76]	; (8003394 <HAL_TIM_MspPostInit+0xc8>)
 8003348:	2102      	movs	r1, #2
 800334a:	430a      	orrs	r2, r1
 800334c:	635a      	str	r2, [r3, #52]	; 0x34
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_TIM_MspPostInit+0xc8>)
 8003350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003352:	2202      	movs	r2, #2
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = motor_left_Pin|motorN_left_Pin;
 800335a:	2114      	movs	r1, #20
 800335c:	187b      	adds	r3, r7, r1
 800335e:	2203      	movs	r2, #3
 8003360:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003362:	187b      	adds	r3, r7, r1
 8003364:	2202      	movs	r2, #2
 8003366:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	187b      	adds	r3, r7, r1
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336e:	187b      	adds	r3, r7, r1
 8003370:	2200      	movs	r2, #0
 8003372:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003374:	187b      	adds	r3, r7, r1
 8003376:	2201      	movs	r2, #1
 8003378:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337a:	187b      	adds	r3, r7, r1
 800337c:	4a07      	ldr	r2, [pc, #28]	; (800339c <HAL_TIM_MspPostInit+0xd0>)
 800337e:	0019      	movs	r1, r3
 8003380:	0010      	movs	r0, r2
 8003382:	f001 fd25 	bl	8004dd0 <HAL_GPIO_Init>
}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	46bd      	mov	sp, r7
 800338a:	b00b      	add	sp, #44	; 0x2c
 800338c:	bd90      	pop	{r4, r7, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	40012c00 	.word	0x40012c00
 8003394:	40021000 	.word	0x40021000
 8003398:	40000400 	.word	0x40000400
 800339c:	50000400 	.word	0x50000400

080033a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033a4:	4b25      	ldr	r3, [pc, #148]	; (800343c <MX_USART2_UART_Init+0x9c>)
 80033a6:	4a26      	ldr	r2, [pc, #152]	; (8003440 <MX_USART2_UART_Init+0xa0>)
 80033a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033aa:	4b24      	ldr	r3, [pc, #144]	; (800343c <MX_USART2_UART_Init+0x9c>)
 80033ac:	22e1      	movs	r2, #225	; 0xe1
 80033ae:	0252      	lsls	r2, r2, #9
 80033b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033b2:	4b22      	ldr	r3, [pc, #136]	; (800343c <MX_USART2_UART_Init+0x9c>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033b8:	4b20      	ldr	r3, [pc, #128]	; (800343c <MX_USART2_UART_Init+0x9c>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033be:	4b1f      	ldr	r3, [pc, #124]	; (800343c <MX_USART2_UART_Init+0x9c>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033c4:	4b1d      	ldr	r3, [pc, #116]	; (800343c <MX_USART2_UART_Init+0x9c>)
 80033c6:	220c      	movs	r2, #12
 80033c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ca:	4b1c      	ldr	r3, [pc, #112]	; (800343c <MX_USART2_UART_Init+0x9c>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d0:	4b1a      	ldr	r3, [pc, #104]	; (800343c <MX_USART2_UART_Init+0x9c>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033d6:	4b19      	ldr	r3, [pc, #100]	; (800343c <MX_USART2_UART_Init+0x9c>)
 80033d8:	2200      	movs	r2, #0
 80033da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033dc:	4b17      	ldr	r3, [pc, #92]	; (800343c <MX_USART2_UART_Init+0x9c>)
 80033de:	2200      	movs	r2, #0
 80033e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80033e2:	4b16      	ldr	r3, [pc, #88]	; (800343c <MX_USART2_UART_Init+0x9c>)
 80033e4:	2208      	movs	r2, #8
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <MX_USART2_UART_Init+0x9c>)
 80033ea:	2280      	movs	r2, #128	; 0x80
 80033ec:	0212      	lsls	r2, r2, #8
 80033ee:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033f0:	4b12      	ldr	r3, [pc, #72]	; (800343c <MX_USART2_UART_Init+0x9c>)
 80033f2:	0018      	movs	r0, r3
 80033f4:	f003 fe4e 	bl	8007094 <HAL_UART_Init>
 80033f8:	1e03      	subs	r3, r0, #0
 80033fa:	d001      	beq.n	8003400 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 80033fc:	f7ff fc68 	bl	8002cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003400:	4b0e      	ldr	r3, [pc, #56]	; (800343c <MX_USART2_UART_Init+0x9c>)
 8003402:	2100      	movs	r1, #0
 8003404:	0018      	movs	r0, r3
 8003406:	f005 f8d5 	bl	80085b4 <HAL_UARTEx_SetTxFifoThreshold>
 800340a:	1e03      	subs	r3, r0, #0
 800340c:	d001      	beq.n	8003412 <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 800340e:	f7ff fc5f 	bl	8002cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <MX_USART2_UART_Init+0x9c>)
 8003414:	2100      	movs	r1, #0
 8003416:	0018      	movs	r0, r3
 8003418:	f005 f90c 	bl	8008634 <HAL_UARTEx_SetRxFifoThreshold>
 800341c:	1e03      	subs	r3, r0, #0
 800341e:	d001      	beq.n	8003424 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8003420:	f7ff fc56 	bl	8002cd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <MX_USART2_UART_Init+0x9c>)
 8003426:	0018      	movs	r0, r3
 8003428:	f005 f88a 	bl	8008540 <HAL_UARTEx_DisableFifoMode>
 800342c:	1e03      	subs	r3, r0, #0
 800342e:	d001      	beq.n	8003434 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8003430:	f7ff fc4e 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	20000698 	.word	0x20000698
 8003440:	40004400 	.word	0x40004400

08003444 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b091      	sub	sp, #68	; 0x44
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344c:	232c      	movs	r3, #44	; 0x2c
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	0018      	movs	r0, r3
 8003452:	2314      	movs	r3, #20
 8003454:	001a      	movs	r2, r3
 8003456:	2100      	movs	r1, #0
 8003458:	f007 fc1c 	bl	800ac94 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800345c:	2410      	movs	r4, #16
 800345e:	193b      	adds	r3, r7, r4
 8003460:	0018      	movs	r0, r3
 8003462:	231c      	movs	r3, #28
 8003464:	001a      	movs	r2, r3
 8003466:	2100      	movs	r1, #0
 8003468:	f007 fc14 	bl	800ac94 <memset>
  if(uartHandle->Instance==USART2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a22      	ldr	r2, [pc, #136]	; (80034fc <HAL_UART_MspInit+0xb8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d13e      	bne.n	80034f4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003476:	193b      	adds	r3, r7, r4
 8003478:	2202      	movs	r2, #2
 800347a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800347c:	193b      	adds	r3, r7, r4
 800347e:	2200      	movs	r2, #0
 8003480:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003482:	193b      	adds	r3, r7, r4
 8003484:	0018      	movs	r0, r3
 8003486:	f002 fb2b 	bl	8005ae0 <HAL_RCCEx_PeriphCLKConfig>
 800348a:	1e03      	subs	r3, r0, #0
 800348c:	d001      	beq.n	8003492 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800348e:	f7ff fc1f 	bl	8002cd0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003492:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <HAL_UART_MspInit+0xbc>)
 8003494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003496:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <HAL_UART_MspInit+0xbc>)
 8003498:	2180      	movs	r1, #128	; 0x80
 800349a:	0289      	lsls	r1, r1, #10
 800349c:	430a      	orrs	r2, r1
 800349e:	63da      	str	r2, [r3, #60]	; 0x3c
 80034a0:	4b17      	ldr	r3, [pc, #92]	; (8003500 <HAL_UART_MspInit+0xbc>)
 80034a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034a4:	2380      	movs	r3, #128	; 0x80
 80034a6:	029b      	lsls	r3, r3, #10
 80034a8:	4013      	ands	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ae:	4b14      	ldr	r3, [pc, #80]	; (8003500 <HAL_UART_MspInit+0xbc>)
 80034b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b2:	4b13      	ldr	r3, [pc, #76]	; (8003500 <HAL_UART_MspInit+0xbc>)
 80034b4:	2101      	movs	r1, #1
 80034b6:	430a      	orrs	r2, r1
 80034b8:	635a      	str	r2, [r3, #52]	; 0x34
 80034ba:	4b11      	ldr	r3, [pc, #68]	; (8003500 <HAL_UART_MspInit+0xbc>)
 80034bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034be:	2201      	movs	r2, #1
 80034c0:	4013      	ands	r3, r2
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034c6:	212c      	movs	r1, #44	; 0x2c
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	220c      	movs	r2, #12
 80034cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ce:	187b      	adds	r3, r7, r1
 80034d0:	2202      	movs	r2, #2
 80034d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	187b      	adds	r3, r7, r1
 80034d6:	2200      	movs	r2, #0
 80034d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034da:	187b      	adds	r3, r7, r1
 80034dc:	2200      	movs	r2, #0
 80034de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80034e0:	187b      	adds	r3, r7, r1
 80034e2:	2201      	movs	r2, #1
 80034e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e6:	187a      	adds	r2, r7, r1
 80034e8:	23a0      	movs	r3, #160	; 0xa0
 80034ea:	05db      	lsls	r3, r3, #23
 80034ec:	0011      	movs	r1, r2
 80034ee:	0018      	movs	r0, r3
 80034f0:	f001 fc6e 	bl	8004dd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80034f4:	46c0      	nop			; (mov r8, r8)
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b011      	add	sp, #68	; 0x44
 80034fa:	bd90      	pop	{r4, r7, pc}
 80034fc:	40004400 	.word	0x40004400
 8003500:	40021000 	.word	0x40021000

08003504 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003504:	480d      	ldr	r0, [pc, #52]	; (800353c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003506:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003508:	f7ff fcd6 	bl	8002eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800350c:	480c      	ldr	r0, [pc, #48]	; (8003540 <LoopForever+0x6>)
  ldr r1, =_edata
 800350e:	490d      	ldr	r1, [pc, #52]	; (8003544 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003510:	4a0d      	ldr	r2, [pc, #52]	; (8003548 <LoopForever+0xe>)
  movs r3, #0
 8003512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003514:	e002      	b.n	800351c <LoopCopyDataInit>

08003516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800351a:	3304      	adds	r3, #4

0800351c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800351c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800351e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003520:	d3f9      	bcc.n	8003516 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003522:	4a0a      	ldr	r2, [pc, #40]	; (800354c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003524:	4c0a      	ldr	r4, [pc, #40]	; (8003550 <LoopForever+0x16>)
  movs r3, #0
 8003526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003528:	e001      	b.n	800352e <LoopFillZerobss>

0800352a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800352a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800352c:	3204      	adds	r2, #4

0800352e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800352e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003530:	d3fb      	bcc.n	800352a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003532:	f007 fc1d 	bl	800ad70 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003536:	f7ff fa9d 	bl	8002a74 <main>

0800353a <LoopForever>:

LoopForever:
  b LoopForever
 800353a:	e7fe      	b.n	800353a <LoopForever>
  ldr   r0, =_estack
 800353c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003544:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003548:	0800d958 	.word	0x0800d958
  ldr r2, =_sbss
 800354c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003550:	200015f8 	.word	0x200015f8

08003554 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003554:	e7fe      	b.n	8003554 <ADC1_IRQHandler>

08003556 <init_bords>:
 */
#include "bordure.h"


uint8_t init_bords(bords_t * bords)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
	bords->left.state=0;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	705a      	strb	r2, [r3, #1]
	bords->right.state=0;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
	bords->detect=0;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	709a      	strb	r2, [r3, #2]
	return 1;
 8003570:	2301      	movs	r3, #1
}
 8003572:	0018      	movs	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	b002      	add	sp, #8
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <update_bords>:

uint8_t update_bords(bords_t * bords)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 8003584:	23a0      	movs	r3, #160	; 0xa0
 8003586:	05db      	lsls	r3, r3, #23
 8003588:	2101      	movs	r1, #1
 800358a:	0018      	movs	r0, r3
 800358c:	f001 fd84 	bl	8005098 <HAL_GPIO_ReadPin>
 8003590:	0003      	movs	r3, r0
 8003592:	2b01      	cmp	r3, #1
 8003594:	d103      	bne.n	800359e <update_bords+0x22>
		bords->left.state=1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	705a      	strb	r2, [r3, #1]
 800359c:	e002      	b.n	80035a4 <update_bords+0x28>
	else
		bords->left.state=0;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	705a      	strb	r2, [r3, #1]
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)==GPIO_PIN_SET)
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	015b      	lsls	r3, r3, #5
 80035a8:	4a0c      	ldr	r2, [pc, #48]	; (80035dc <update_bords+0x60>)
 80035aa:	0019      	movs	r1, r3
 80035ac:	0010      	movs	r0, r2
 80035ae:	f001 fd73 	bl	8005098 <HAL_GPIO_ReadPin>
 80035b2:	0003      	movs	r3, r0
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d103      	bne.n	80035c0 <update_bords+0x44>
		bords->right.state=1;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e002      	b.n	80035c6 <update_bords+0x4a>
	else
		bords->right.state=0;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	701a      	strb	r2, [r3, #0]
	return ((bords->left.state)|(bords->right.state));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	785a      	ldrb	r2, [r3, #1]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	b2db      	uxtb	r3, r3

}
 80035d2:	0018      	movs	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b002      	add	sp, #8
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	50000400 	.word	0x50000400

080035e0 <recule_r>:


int32_t left_dist=0;

uint8_t recule_r(uint16_t alpha)// alpha de 0 à 1023
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	0002      	movs	r2, r0
 80035e8:	1dbb      	adds	r3, r7, #6
 80035ea:	801a      	strh	r2, [r3, #0]
	htim1.Instance->CCR1=alpha;
 80035ec:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <recule_r+0x44>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	1dba      	adds	r2, r7, #6
 80035f2:	8812      	ldrh	r2, [r2, #0]
 80035f4:	635a      	str	r2, [r3, #52]	; 0x34
	if(HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_4)==HAL_OK)
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <recule_r+0x44>)
 80035f8:	210c      	movs	r1, #12
 80035fa:	0018      	movs	r0, r3
 80035fc:	f003 fbbc 	bl	8006d78 <HAL_TIMEx_PWMN_Stop>
 8003600:	1e03      	subs	r3, r0, #0
 8003602:	d10a      	bne.n	800361a <recule_r+0x3a>
	{
		if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3)==HAL_OK)
 8003604:	4b07      	ldr	r3, [pc, #28]	; (8003624 <recule_r+0x44>)
 8003606:	2108      	movs	r1, #8
 8003608:	0018      	movs	r0, r3
 800360a:	f002 fbf5 	bl	8005df8 <HAL_TIM_PWM_Start>
 800360e:	1e03      	subs	r3, r0, #0
 8003610:	d101      	bne.n	8003616 <recule_r+0x36>
		{
			return 1;
 8003612:	2301      	movs	r3, #1
 8003614:	e002      	b.n	800361c <recule_r+0x3c>
		}
		else
			return 0;
 8003616:	2300      	movs	r3, #0
 8003618:	e000      	b.n	800361c <recule_r+0x3c>
	}
	return 0;
 800361a:	2300      	movs	r3, #0
}
 800361c:	0018      	movs	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	b002      	add	sp, #8
 8003622:	bd80      	pop	{r7, pc}
 8003624:	20000600 	.word	0x20000600

08003628 <avance_r>:
uint8_t avance_r(uint16_t alpha)// alpha de 0 à 1023
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	0002      	movs	r2, r0
 8003630:	1dbb      	adds	r3, r7, #6
 8003632:	801a      	strh	r2, [r3, #0]
	htim1.Instance->CCR1=alpha;
 8003634:	4b0d      	ldr	r3, [pc, #52]	; (800366c <avance_r+0x44>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	1dba      	adds	r2, r7, #6
 800363a:	8812      	ldrh	r2, [r2, #0]
 800363c:	635a      	str	r2, [r3, #52]	; 0x34
	if(HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3)==HAL_OK)
 800363e:	4b0b      	ldr	r3, [pc, #44]	; (800366c <avance_r+0x44>)
 8003640:	2108      	movs	r1, #8
 8003642:	0018      	movs	r0, r3
 8003644:	f002 fcbc 	bl	8005fc0 <HAL_TIM_PWM_Stop>
 8003648:	1e03      	subs	r3, r0, #0
 800364a:	d10a      	bne.n	8003662 <avance_r+0x3a>
	{
		if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4)==HAL_OK)
 800364c:	4b07      	ldr	r3, [pc, #28]	; (800366c <avance_r+0x44>)
 800364e:	210c      	movs	r1, #12
 8003650:	0018      	movs	r0, r3
 8003652:	f002 fbd1 	bl	8005df8 <HAL_TIM_PWM_Start>
 8003656:	1e03      	subs	r3, r0, #0
 8003658:	d101      	bne.n	800365e <avance_r+0x36>
		{
			return 1;
 800365a:	2301      	movs	r3, #1
 800365c:	e002      	b.n	8003664 <avance_r+0x3c>
		}
		else
			return 0;
 800365e:	2300      	movs	r3, #0
 8003660:	e000      	b.n	8003664 <avance_r+0x3c>
	}
	return 0;
 8003662:	2300      	movs	r3, #0
}
 8003664:	0018      	movs	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	b002      	add	sp, #8
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20000600 	.word	0x20000600

08003670 <stop_r>:
uint8_t stop_r()// alpha de 0 à 1023
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
	if (HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3)==HAL_OK)
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <stop_r+0x30>)
 8003676:	2108      	movs	r1, #8
 8003678:	0018      	movs	r0, r3
 800367a:	f002 fca1 	bl	8005fc0 <HAL_TIM_PWM_Stop>
 800367e:	1e03      	subs	r3, r0, #0
 8003680:	d10a      	bne.n	8003698 <stop_r+0x28>
	{
		if (HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_4)==HAL_OK)
 8003682:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <stop_r+0x30>)
 8003684:	210c      	movs	r1, #12
 8003686:	0018      	movs	r0, r3
 8003688:	f003 fb76 	bl	8006d78 <HAL_TIMEx_PWMN_Stop>
 800368c:	1e03      	subs	r3, r0, #0
 800368e:	d101      	bne.n	8003694 <stop_r+0x24>
		{
			return 1;
 8003690:	2301      	movs	r3, #1
 8003692:	e002      	b.n	800369a <stop_r+0x2a>
		}
		else
			return 0;
 8003694:	2300      	movs	r3, #0
 8003696:	e000      	b.n	800369a <stop_r+0x2a>
	}
	return 0;
 8003698:	2300      	movs	r3, #0
}
 800369a:	0018      	movs	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000600 	.word	0x20000600

080036a4 <avance_l>:
uint8_t avance_l(uint16_t alpha)// alpha de 0 à 1023
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	0002      	movs	r2, r0
 80036ac:	1dbb      	adds	r3, r7, #6
 80036ae:	801a      	strh	r2, [r3, #0]
	htim3.Instance->CCR1=alpha;
 80036b0:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <avance_l+0x44>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	1dba      	adds	r2, r7, #6
 80036b6:	8812      	ldrh	r2, [r2, #0]
 80036b8:	635a      	str	r2, [r3, #52]	; 0x34
	if(HAL_TIMEx_PWMN_Stop(&htim3, TIM_CHANNEL_3)==HAL_OK)
 80036ba:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <avance_l+0x44>)
 80036bc:	2108      	movs	r1, #8
 80036be:	0018      	movs	r0, r3
 80036c0:	f003 fb5a 	bl	8006d78 <HAL_TIMEx_PWMN_Stop>
 80036c4:	1e03      	subs	r3, r0, #0
 80036c6:	d10a      	bne.n	80036de <avance_l+0x3a>
	{
		if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4)==HAL_OK)
 80036c8:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <avance_l+0x44>)
 80036ca:	210c      	movs	r1, #12
 80036cc:	0018      	movs	r0, r3
 80036ce:	f002 fb93 	bl	8005df8 <HAL_TIM_PWM_Start>
 80036d2:	1e03      	subs	r3, r0, #0
 80036d4:	d101      	bne.n	80036da <avance_l+0x36>
		{
			return 1;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e002      	b.n	80036e0 <avance_l+0x3c>
		}
		else
			return 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	e000      	b.n	80036e0 <avance_l+0x3c>
	}
	return 0;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	0018      	movs	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b002      	add	sp, #8
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	2000064c 	.word	0x2000064c

080036ec <recule_l>:
uint8_t recule_l(uint16_t alpha)// alpha de 0 à 1023
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	0002      	movs	r2, r0
 80036f4:	1dbb      	adds	r3, r7, #6
 80036f6:	801a      	strh	r2, [r3, #0]
	htim3.Instance->CCR1=alpha;
 80036f8:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <recule_l+0x44>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	1dba      	adds	r2, r7, #6
 80036fe:	8812      	ldrh	r2, [r2, #0]
 8003700:	635a      	str	r2, [r3, #52]	; 0x34
	if(HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4)==HAL_OK)
 8003702:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <recule_l+0x44>)
 8003704:	210c      	movs	r1, #12
 8003706:	0018      	movs	r0, r3
 8003708:	f002 fc5a 	bl	8005fc0 <HAL_TIM_PWM_Stop>
 800370c:	1e03      	subs	r3, r0, #0
 800370e:	d10a      	bne.n	8003726 <recule_l+0x3a>
	{
		if(HAL_TIMEx_PWMN_Start(&htim3, TIM_CHANNEL_3)==HAL_OK)
 8003710:	4b07      	ldr	r3, [pc, #28]	; (8003730 <recule_l+0x44>)
 8003712:	2108      	movs	r1, #8
 8003714:	0018      	movs	r0, r3
 8003716:	f003 fa91 	bl	8006c3c <HAL_TIMEx_PWMN_Start>
 800371a:	1e03      	subs	r3, r0, #0
 800371c:	d101      	bne.n	8003722 <recule_l+0x36>
		{
			return 1;
 800371e:	2301      	movs	r3, #1
 8003720:	e002      	b.n	8003728 <recule_l+0x3c>
		}
		else
			return 0;
 8003722:	2300      	movs	r3, #0
 8003724:	e000      	b.n	8003728 <recule_l+0x3c>
	}
	return 0;
 8003726:	2300      	movs	r3, #0
}
 8003728:	0018      	movs	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	b002      	add	sp, #8
 800372e:	bd80      	pop	{r7, pc}
 8003730:	2000064c 	.word	0x2000064c

08003734 <stop_l>:
uint8_t stop_l()// alpha de 0 à 1023
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
	if (HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3)==HAL_OK)
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <stop_l+0x30>)
 800373a:	2108      	movs	r1, #8
 800373c:	0018      	movs	r0, r3
 800373e:	f002 fc3f 	bl	8005fc0 <HAL_TIM_PWM_Stop>
 8003742:	1e03      	subs	r3, r0, #0
 8003744:	d10a      	bne.n	800375c <stop_l+0x28>
	{
		if (HAL_TIMEx_PWMN_Stop(&htim3, TIM_CHANNEL_3)==HAL_OK)
 8003746:	4b07      	ldr	r3, [pc, #28]	; (8003764 <stop_l+0x30>)
 8003748:	2108      	movs	r1, #8
 800374a:	0018      	movs	r0, r3
 800374c:	f003 fb14 	bl	8006d78 <HAL_TIMEx_PWMN_Stop>
 8003750:	1e03      	subs	r3, r0, #0
 8003752:	d101      	bne.n	8003758 <stop_l+0x24>
		{
			return 1;
 8003754:	2301      	movs	r3, #1
 8003756:	e002      	b.n	800375e <stop_l+0x2a>
		}
		else
			return 0;
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <stop_l+0x2a>
	}
	return 0;
 800375c:	2300      	movs	r3, #0
}
 800375e:	0018      	movs	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	2000064c 	.word	0x2000064c

08003768 <init_motors>:

uint8_t init_motors(motors_t * motors)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	motors->right.h_tim=htim1;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <init_motors+0x78>)
 8003774:	3308      	adds	r3, #8
 8003776:	0011      	movs	r1, r2
 8003778:	224c      	movs	r2, #76	; 0x4c
 800377a:	0018      	movs	r0, r3
 800377c:	f007 fb1e 	bl	800adbc <memcpy>
	motors->left.h_tim=htim3;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <init_motors+0x7c>)
 8003784:	3368      	adds	r3, #104	; 0x68
 8003786:	0011      	movs	r1, r2
 8003788:	224c      	movs	r2, #76	; 0x4c
 800378a:	0018      	movs	r0, r3
 800378c:	f007 fb16 	bl	800adbc <memcpy>
	motors->left.position=0;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2260      	movs	r2, #96	; 0x60
 8003794:	2100      	movs	r1, #0
 8003796:	5299      	strh	r1, [r3, r2]
	motors->right.position=0;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	801a      	strh	r2, [r3, #0]
	motors->left.speed=0;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2262      	movs	r2, #98	; 0x62
 80037a2:	2100      	movs	r1, #0
 80037a4:	5299      	strh	r1, [r3, r2]
	motors->right.speed=0;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	805a      	strh	r2, [r3, #2]
	motors->left.drv_motor.drv_avance=avance_l;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	21b4      	movs	r1, #180	; 0xb4
 80037b0:	4a0d      	ldr	r2, [pc, #52]	; (80037e8 <init_motors+0x80>)
 80037b2:	505a      	str	r2, [r3, r1]
	motors->left.drv_motor.drv_recule=recule_l;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	21b8      	movs	r1, #184	; 0xb8
 80037b8:	4a0c      	ldr	r2, [pc, #48]	; (80037ec <init_motors+0x84>)
 80037ba:	505a      	str	r2, [r3, r1]
	motors->left.drv_motor.drv_stop=stop_l;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	21bc      	movs	r1, #188	; 0xbc
 80037c0:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <init_motors+0x88>)
 80037c2:	505a      	str	r2, [r3, r1]
	motors->right.drv_motor.drv_avance=avance_r;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a0b      	ldr	r2, [pc, #44]	; (80037f4 <init_motors+0x8c>)
 80037c8:	655a      	str	r2, [r3, #84]	; 0x54
	motors->right.drv_motor.drv_recule=recule_r;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <init_motors+0x90>)
 80037ce:	659a      	str	r2, [r3, #88]	; 0x58
	motors->right.drv_motor.drv_stop=stop_r;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <init_motors+0x94>)
 80037d4:	65da      	str	r2, [r3, #92]	; 0x5c
	return 1;
 80037d6:	2301      	movs	r3, #1
}
 80037d8:	0018      	movs	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	b002      	add	sp, #8
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20000600 	.word	0x20000600
 80037e4:	2000064c 	.word	0x2000064c
 80037e8:	080036a5 	.word	0x080036a5
 80037ec:	080036ed 	.word	0x080036ed
 80037f0:	08003735 	.word	0x08003735
 80037f4:	08003629 	.word	0x08003629
 80037f8:	080035e1 	.word	0x080035e1
 80037fc:	08003671 	.word	0x08003671

08003800 <init_encoders>:

uint8_t init_encoders(encoders_t * encoders)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	encoders->left.nbr_ticks=0;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	639a      	str	r2, [r3, #56]	; 0x38
	encoders->left.nbr_ticks=0;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	639a      	str	r2, [r3, #56]	; 0x38
	encoders->left.error=0;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	64da      	str	r2, [r3, #76]	; 0x4c
	encoders->right.error=0;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	615a      	str	r2, [r3, #20]
	encoders->left.sum_erreur=0;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	651a      	str	r2, [r3, #80]	; 0x50
	encoders->right.sum_erreur=0;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	619a      	str	r2, [r3, #24]
	encoders->left.old_command=0;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	65da      	str	r2, [r3, #92]	; 0x5c
	encoders->right.old_command=0;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	625a      	str	r2, [r3, #36]	; 0x24
	encoders->left.new_command=0;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	659a      	str	r2, [r3, #88]	; 0x58
	encoders->right.new_command=0;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	621a      	str	r2, [r3, #32]
	encoders->left.consigne=0;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	661a      	str	r2, [r3, #96]	; 0x60
	encoders->right.consigne=0;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	629a      	str	r2, [r3, #40]	; 0x28
	encoders->left.speed=0;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	645a      	str	r2, [r3, #68]	; 0x44
	encoders->right.speed=0;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	60da      	str	r2, [r3, #12]
	encoders->left.distance=0;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	649a      	str	r2, [r3, #72]	; 0x48
	encoders->right.distance=0;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	611a      	str	r2, [r3, #16]
	encoders->left.consigne_distance=0;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	665a      	str	r2, [r3, #100]	; 0x64
	encoders->right.consigne_distance=0;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	62da      	str	r2, [r3, #44]	; 0x2c
	encoders->left.consigne_angle=0;
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	2300      	movs	r3, #0
 800387a:	668a      	str	r2, [r1, #104]	; 0x68
 800387c:	66cb      	str	r3, [r1, #108]	; 0x6c
	encoders->right.consigne_angle=0;
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	2300      	movs	r3, #0
 8003884:	630a      	str	r2, [r1, #48]	; 0x30
 8003886:	634b      	str	r3, [r1, #52]	; 0x34
	encoders->angle=0; // angle initiale du robot dans le repère de la table
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	2300      	movs	r3, #0
 800388e:	678a      	str	r2, [r1, #120]	; 0x78
 8003890:	67cb      	str	r3, [r1, #124]	; 0x7c
	encoders->distance=0;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	671a      	str	r2, [r3, #112]	; 0x70
	encoders->theta=0;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3380      	adds	r3, #128	; 0x80
 800389c:	0019      	movs	r1, r3
 800389e:	2200      	movs	r2, #0
 80038a0:	2300      	movs	r3, #0
 80038a2:	600a      	str	r2, [r1, #0]
 80038a4:	604b      	str	r3, [r1, #4]
	encoders->x=0; // position initiale du robot dans le repère de la table
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	229c      	movs	r2, #156	; 0x9c
 80038aa:	2100      	movs	r1, #0
 80038ac:	5099      	str	r1, [r3, r2]
	encoders->y=0; // position initiale du robot dans le repère de la table
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	22a0      	movs	r2, #160	; 0xa0
 80038b2:	2100      	movs	r1, #0
 80038b4:	5099      	str	r1, [r3, r2]
	encoders->ddelta=0;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2298      	movs	r2, #152	; 0x98
 80038ba:	2100      	movs	r1, #0
 80038bc:	5099      	str	r1, [r3, r2]
	encoders->dalpha=0;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3390      	adds	r3, #144	; 0x90
 80038c2:	0019      	movs	r1, r3
 80038c4:	2200      	movs	r2, #0
 80038c6:	2300      	movs	r3, #0
 80038c8:	600a      	str	r2, [r1, #0]
 80038ca:	604b      	str	r3, [r1, #4]
	encoders->dl=0;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	228c      	movs	r2, #140	; 0x8c
 80038d0:	2100      	movs	r1, #0
 80038d2:	5099      	str	r1, [r3, r2]
	encoders->dr=0;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2288      	movs	r2, #136	; 0x88
 80038d8:	2100      	movs	r1, #0
 80038da:	5099      	str	r1, [r3, r2]
	encoders->right.nbr_ticks_odom=0;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]
	encoders->left.nbr_ticks_odom=0;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	641a      	str	r2, [r3, #64]	; 0x40
	encoders->distance_done=1;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	22a4      	movs	r2, #164	; 0xa4
 80038ec:	2101      	movs	r1, #1
 80038ee:	5499      	strb	r1, [r3, r2]
	encoders->angle_done=1;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	22a5      	movs	r2, #165	; 0xa5
 80038f4:	2101      	movs	r1, #1
 80038f6:	5499      	strb	r1, [r3, r2]
	encoders->sem_angle_done=xSemaphoreCreateBinary();
 80038f8:	2203      	movs	r2, #3
 80038fa:	2100      	movs	r1, #0
 80038fc:	2001      	movs	r0, #1
 80038fe:	f005 fa73 	bl	8008de8 <xQueueGenericCreate>
 8003902:	0002      	movs	r2, r0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	21ac      	movs	r1, #172	; 0xac
 8003908:	505a      	str	r2, [r3, r1]
	if (encoders->sem_angle_done == NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	22ac      	movs	r2, #172	; 0xac
 800390e:	589b      	ldr	r3, [r3, r2]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d104      	bne.n	800391e <init_encoders+0x11e>
	{
		printf("Error semaphore angle\r\n");
 8003914:	4b2c      	ldr	r3, [pc, #176]	; (80039c8 <init_encoders+0x1c8>)
 8003916:	0018      	movs	r0, r3
 8003918:	f007 f86c 	bl	800a9f4 <puts>
		while(1);
 800391c:	e7fe      	b.n	800391c <init_encoders+0x11c>
	}
	encoders->sem_distance_done=xSemaphoreCreateBinary();
 800391e:	2203      	movs	r2, #3
 8003920:	2100      	movs	r1, #0
 8003922:	2001      	movs	r0, #1
 8003924:	f005 fa60 	bl	8008de8 <xQueueGenericCreate>
 8003928:	0002      	movs	r2, r0
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	21a8      	movs	r1, #168	; 0xa8
 800392e:	505a      	str	r2, [r3, r1]
	if (encoders->sem_distance_done == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	22a8      	movs	r2, #168	; 0xa8
 8003934:	589b      	ldr	r3, [r3, r2]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d104      	bne.n	8003944 <init_encoders+0x144>
	{
		printf("Error semaphore distance\r\n");
 800393a:	4b24      	ldr	r3, [pc, #144]	; (80039cc <init_encoders+0x1cc>)
 800393c:	0018      	movs	r0, r3
 800393e:	f007 f859 	bl	800a9f4 <puts>
		while(1);
 8003942:	e7fe      	b.n	8003942 <init_encoders+0x142>
	}
	encoders->sem_angle_check=xSemaphoreCreateBinary();
 8003944:	2203      	movs	r2, #3
 8003946:	2100      	movs	r1, #0
 8003948:	2001      	movs	r0, #1
 800394a:	f005 fa4d 	bl	8008de8 <xQueueGenericCreate>
 800394e:	0002      	movs	r2, r0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	21b4      	movs	r1, #180	; 0xb4
 8003954:	505a      	str	r2, [r3, r1]
	if (encoders->sem_angle_check == NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	22b4      	movs	r2, #180	; 0xb4
 800395a:	589b      	ldr	r3, [r3, r2]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d104      	bne.n	800396a <init_encoders+0x16a>
	{
		printf("Error semaphore angle check\r\n");
 8003960:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <init_encoders+0x1d0>)
 8003962:	0018      	movs	r0, r3
 8003964:	f007 f846 	bl	800a9f4 <puts>
		while(1);
 8003968:	e7fe      	b.n	8003968 <init_encoders+0x168>
	}
	encoders->sem_distance_check=xSemaphoreCreateBinary();
 800396a:	2203      	movs	r2, #3
 800396c:	2100      	movs	r1, #0
 800396e:	2001      	movs	r0, #1
 8003970:	f005 fa3a 	bl	8008de8 <xQueueGenericCreate>
 8003974:	0002      	movs	r2, r0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	21b0      	movs	r1, #176	; 0xb0
 800397a:	505a      	str	r2, [r3, r1]
	if (encoders->sem_distance_check == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	22b0      	movs	r2, #176	; 0xb0
 8003980:	589b      	ldr	r3, [r3, r2]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d104      	bne.n	8003990 <init_encoders+0x190>
	{
		printf("Error semaphore distance check\r\n");
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <init_encoders+0x1d4>)
 8003988:	0018      	movs	r0, r3
 800398a:	f007 f833 	bl	800a9f4 <puts>
		while(1);
 800398e:	e7fe      	b.n	800398e <init_encoders+0x18e>
	}

	if(HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL)!=HAL_OK)
 8003990:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <init_encoders+0x1d8>)
 8003992:	213c      	movs	r1, #60	; 0x3c
 8003994:	0018      	movs	r0, r3
 8003996:	f002 fc4f 	bl	8006238 <HAL_TIM_Encoder_Start>
 800399a:	1e03      	subs	r3, r0, #0
 800399c:	d003      	beq.n	80039a6 <init_encoders+0x1a6>
	{
		printf("Right encoder did not start\r\n");
 800399e:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <init_encoders+0x1dc>)
 80039a0:	0018      	movs	r0, r3
 80039a2:	f007 f827 	bl	800a9f4 <puts>
	}
	if (HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL)!=HAL_OK)
 80039a6:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <init_encoders+0x1e0>)
 80039a8:	213c      	movs	r1, #60	; 0x3c
 80039aa:	0018      	movs	r0, r3
 80039ac:	f002 fc44 	bl	8006238 <HAL_TIM_Encoder_Start>
 80039b0:	1e03      	subs	r3, r0, #0
 80039b2:	d003      	beq.n	80039bc <init_encoders+0x1bc>
	{
		printf("Left encoder did not start\r\n");
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <init_encoders+0x1e4>)
 80039b6:	0018      	movs	r0, r3
 80039b8:	f007 f81c 	bl	800a9f4 <puts>
	}
	return 1;
 80039bc:	2301      	movs	r3, #1
}
 80039be:	0018      	movs	r0, r3
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b002      	add	sp, #8
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	0800d3e0 	.word	0x0800d3e0
 80039cc:	0800d3f8 	.word	0x0800d3f8
 80039d0:	0800d414 	.word	0x0800d414
 80039d4:	0800d434 	.word	0x0800d434
 80039d8:	20000600 	.word	0x20000600
 80039dc:	0800d454 	.word	0x0800d454
 80039e0:	2000064c 	.word	0x2000064c
 80039e4:	0800d474 	.word	0x0800d474

080039e8 <get_ticks>:



uint8_t get_ticks(encoders_t * encoders)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	encoders->left.nbr_ticks+=(int16_t)(-__HAL_TIM_GET_COUNTER(&htim3));
 80039f0:	4bb2      	ldr	r3, [pc, #712]	; (8003cbc <get_ticks+0x2d4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	425b      	negs	r3, r3
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	b21a      	sxth	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	189a      	adds	r2, r3, r2
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	639a      	str	r2, [r3, #56]	; 0x38
	encoders->right.nbr_ticks+=(int16_t)(__HAL_TIM_GET_COUNTER(&htim1));
 8003a08:	4bad      	ldr	r3, [pc, #692]	; (8003cc0 <get_ticks+0x2d8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	b21a      	sxth	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	189a      	adds	r2, r3, r2
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	601a      	str	r2, [r3, #0]

	htim1.Instance->CNT=0; // garder le cnt et faire le calcul de la différence
 8003a1a:	4ba9      	ldr	r3, [pc, #676]	; (8003cc0 <get_ticks+0x2d8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	625a      	str	r2, [r3, #36]	; 0x24
	htim3.Instance->CNT=0;
 8003a22:	4ba6      	ldr	r3, [pc, #664]	; (8003cbc <get_ticks+0x2d4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2200      	movs	r2, #0
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24
	// change 10*TS_TO_MIN/(ENC_RESOLUTION) to a constant

	encoders->left.speed=(encoders->left.nbr_ticks-encoders->left.nbr_ticks_old)*10*TS_TO_MIN/(ENC_RESOLUTION);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	1ad2      	subs	r2, r2, r3
 8003a34:	0013      	movs	r3, r2
 8003a36:	015b      	lsls	r3, r3, #5
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	189b      	adds	r3, r3, r2
 8003a3e:	011a      	lsls	r2, r3, #4
 8003a40:	1ad2      	subs	r2, r2, r3
 8003a42:	0193      	lsls	r3, r2, #6
 8003a44:	001a      	movs	r2, r3
 8003a46:	0013      	movs	r3, r2
 8003a48:	499e      	ldr	r1, [pc, #632]	; (8003cc4 <get_ticks+0x2dc>)
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f7fc fbf0 	bl	8000230 <__divsi3>
 8003a50:	0003      	movs	r3, r0
 8003a52:	001a      	movs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	645a      	str	r2, [r3, #68]	; 0x44
	encoders->right.speed=(encoders->right.nbr_ticks-encoders->right.nbr_ticks_old)*10*TS_TO_MIN/(ENC_RESOLUTION);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	1ad2      	subs	r2, r2, r3
 8003a62:	0013      	movs	r3, r2
 8003a64:	015b      	lsls	r3, r3, #5
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	189b      	adds	r3, r3, r2
 8003a6c:	011a      	lsls	r2, r3, #4
 8003a6e:	1ad2      	subs	r2, r2, r3
 8003a70:	0193      	lsls	r3, r2, #6
 8003a72:	001a      	movs	r2, r3
 8003a74:	0013      	movs	r3, r2
 8003a76:	4993      	ldr	r1, [pc, #588]	; (8003cc4 <get_ticks+0x2dc>)
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f7fc fbd9 	bl	8000230 <__divsi3>
 8003a7e:	0003      	movs	r3, r0
 8003a80:	001a      	movs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	60da      	str	r2, [r3, #12]

	encoders->left.nbr_ticks_old=encoders->left.nbr_ticks;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	63da      	str	r2, [r3, #60]	; 0x3c
	encoders->right.nbr_ticks_old=encoders->right.nbr_ticks;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	605a      	str	r2, [r3, #4]
	// séparer les calculs d'odométrie




	encoders->left.error=encoders->left.consigne-encoders->left.speed;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	1ad2      	subs	r2, r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	64da      	str	r2, [r3, #76]	; 0x4c
	encoders->right.error=encoders->right.consigne-encoders->right.speed;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	1ad2      	subs	r2, r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	615a      	str	r2, [r3, #20]

	if (abs(encoders->left.error)<700)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab6:	4a84      	ldr	r2, [pc, #528]	; (8003cc8 <get_ticks+0x2e0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	db0c      	blt.n	8003ad6 <get_ticks+0xee>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ac0:	23af      	movs	r3, #175	; 0xaf
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	da06      	bge.n	8003ad6 <get_ticks+0xee>
		encoders->left.sum_erreur+=encoders->left.error;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad0:	18d2      	adds	r2, r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	651a      	str	r2, [r3, #80]	; 0x50
	if (abs(encoders->right.error)<700)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	4a7b      	ldr	r2, [pc, #492]	; (8003cc8 <get_ticks+0x2e0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	db0c      	blt.n	8003afa <get_ticks+0x112>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	23af      	movs	r3, #175	; 0xaf
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	da06      	bge.n	8003afa <get_ticks+0x112>
		encoders->right.sum_erreur+=(encoders->right.error);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	18d2      	adds	r2, r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	619a      	str	r2, [r3, #24]

	if (encoders->left.consigne==0)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <get_ticks+0x120>
		encoders->left.sum_erreur=0;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	651a      	str	r2, [r3, #80]	; 0x50
	if (encoders->right.consigne==0)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d102      	bne.n	8003b16 <get_ticks+0x12e>
		encoders->right.sum_erreur=0;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	619a      	str	r2, [r3, #24]

	encoders->left.new_command=(((encoders->left.error*KP)+(encoders->left.sum_erreur*KI))/10000);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1a:	4a6c      	ldr	r2, [pc, #432]	; (8003ccc <get_ticks+0x2e4>)
 8003b1c:	435a      	muls	r2, r3
 8003b1e:	0011      	movs	r1, r2
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b24:	0013      	movs	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	189b      	adds	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	18cb      	adds	r3, r1, r3
 8003b2e:	4968      	ldr	r1, [pc, #416]	; (8003cd0 <get_ticks+0x2e8>)
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7fc fb7d 	bl	8000230 <__divsi3>
 8003b36:	0003      	movs	r3, r0
 8003b38:	001a      	movs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	659a      	str	r2, [r3, #88]	; 0x58
	encoders->right.new_command=(((encoders->right.error*KP)+(encoders->right.sum_erreur*KI))/10000);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	4a62      	ldr	r2, [pc, #392]	; (8003ccc <get_ticks+0x2e4>)
 8003b44:	435a      	muls	r2, r3
 8003b46:	0011      	movs	r1, r2
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	0013      	movs	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	189b      	adds	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	18cb      	adds	r3, r1, r3
 8003b56:	495e      	ldr	r1, [pc, #376]	; (8003cd0 <get_ticks+0x2e8>)
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7fc fb69 	bl	8000230 <__divsi3>
 8003b5e:	0003      	movs	r3, r0
 8003b60:	001a      	movs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	621a      	str	r2, [r3, #32]



	if (encoders->left.new_command<0)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	da10      	bge.n	8003b90 <get_ticks+0x1a8>
	{
		if (encoders->left.new_command<-853)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b72:	4a58      	ldr	r2, [pc, #352]	; (8003cd4 <get_ticks+0x2ec>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	da02      	bge.n	8003b7e <get_ticks+0x196>
			encoders->left.new_command=-853;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a56      	ldr	r2, [pc, #344]	; (8003cd4 <get_ticks+0x2ec>)
 8003b7c:	659a      	str	r2, [r3, #88]	; 0x58
		if (encoders->left.new_command>-1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	db13      	blt.n	8003bae <get_ticks+0x1c6>
			encoders->left.new_command=-1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	4252      	negs	r2, r2
 8003b8c:	659a      	str	r2, [r3, #88]	; 0x58
 8003b8e:	e00e      	b.n	8003bae <get_ticks+0x1c6>
	}
	else
	{
		if (encoders->left.new_command>853)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b94:	4a50      	ldr	r2, [pc, #320]	; (8003cd8 <get_ticks+0x2f0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	dd02      	ble.n	8003ba0 <get_ticks+0x1b8>
			encoders->left.new_command=853;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a4e      	ldr	r2, [pc, #312]	; (8003cd8 <get_ticks+0x2f0>)
 8003b9e:	659a      	str	r2, [r3, #88]	; 0x58
		if (encoders->left.new_command<1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	dc02      	bgt.n	8003bae <get_ticks+0x1c6>
			encoders->left.new_command=1;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	659a      	str	r2, [r3, #88]	; 0x58
	}
	if (encoders->right.new_command<0)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	da10      	bge.n	8003bd8 <get_ticks+0x1f0>
	{
		if (encoders->right.new_command<-853)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	4a46      	ldr	r2, [pc, #280]	; (8003cd4 <get_ticks+0x2ec>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	da02      	bge.n	8003bc6 <get_ticks+0x1de>
			encoders->right.new_command=-853;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a44      	ldr	r2, [pc, #272]	; (8003cd4 <get_ticks+0x2ec>)
 8003bc4:	621a      	str	r2, [r3, #32]
		if (encoders->right.new_command>-1)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	db13      	blt.n	8003bf6 <get_ticks+0x20e>
			encoders->right.new_command=-1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4252      	negs	r2, r2
 8003bd4:	621a      	str	r2, [r3, #32]
 8003bd6:	e00e      	b.n	8003bf6 <get_ticks+0x20e>
	}
	else
	{
		if (encoders->right.new_command>853)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	4a3e      	ldr	r2, [pc, #248]	; (8003cd8 <get_ticks+0x2f0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	dd02      	ble.n	8003be8 <get_ticks+0x200>
			encoders->right.new_command=853;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a3c      	ldr	r2, [pc, #240]	; (8003cd8 <get_ticks+0x2f0>)
 8003be6:	621a      	str	r2, [r3, #32]
		if (encoders->right.new_command<1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	dc02      	bgt.n	8003bf6 <get_ticks+0x20e>
			encoders->right.new_command=1;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	621a      	str	r2, [r3, #32]
	}


	if (encoders->left.consigne==0)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d102      	bne.n	8003c04 <get_ticks+0x21c>
		encoders->left.new_command=0;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	659a      	str	r2, [r3, #88]	; 0x58
	if (encoders->right.consigne==0)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d102      	bne.n	8003c12 <get_ticks+0x22a>
		encoders->right.new_command=0;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	621a      	str	r2, [r3, #32]

	if (encoders->left.old_command<abs(encoders->left.new_command))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	17d9      	asrs	r1, r3, #31
 8003c1c:	185b      	adds	r3, r3, r1
 8003c1e:	404b      	eors	r3, r1
 8003c20:	429a      	cmp	r2, r3
 8003c22:	da06      	bge.n	8003c32 <get_ticks+0x24a>
		encoders->left.old_command+=16;//16
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c28:	3310      	adds	r3, #16
 8003c2a:	001a      	movs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c30:	e006      	b.n	8003c40 <get_ticks+0x258>
	else encoders->left.old_command=abs(encoders->left.new_command);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	17d9      	asrs	r1, r3, #31
 8003c38:	185a      	adds	r2, r3, r1
 8003c3a:	404a      	eors	r2, r1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	65da      	str	r2, [r3, #92]	; 0x5c
	if (encoders->right.old_command<abs(encoders->right.new_command))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	17d9      	asrs	r1, r3, #31
 8003c4a:	185b      	adds	r3, r3, r1
 8003c4c:	404b      	eors	r3, r1
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	da06      	bge.n	8003c60 <get_ticks+0x278>
		encoders->right.old_command+=16; //24
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	3310      	adds	r3, #16
 8003c58:	001a      	movs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24
 8003c5e:	e006      	b.n	8003c6e <get_ticks+0x286>
	else encoders->right.old_command=abs(encoders->right.new_command);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	17d9      	asrs	r1, r3, #31
 8003c66:	185a      	adds	r2, r3, r1
 8003c68:	404a      	eors	r2, r1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24

	//	encoders->left.old_command=abs(encoders->left.new_command);
	//	encoders->right.old_command=abs(encoders->right.new_command);


	if (encoders->right.new_command>0)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	dd06      	ble.n	8003c84 <get_ticks+0x29c>
		avance_r((uint16_t)(encoders->right.old_command));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f7ff fcd3 	bl	8003628 <avance_r>
 8003c82:	e005      	b.n	8003c90 <get_ticks+0x2a8>
	else recule_r((uint16_t)(encoders->right.old_command));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f7ff fca8 	bl	80035e0 <recule_r>

	if (encoders->left.new_command>0)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	dd06      	ble.n	8003ca6 <get_ticks+0x2be>
		avance_l(encoders->left.old_command);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f7ff fd00 	bl	80036a4 <avance_l>
 8003ca4:	e005      	b.n	8003cb2 <get_ticks+0x2ca>
	else recule_l(encoders->left.old_command);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	0018      	movs	r0, r3
 8003cae:	f7ff fd1d 	bl	80036ec <recule_l>
	return 1;
 8003cb2:	2301      	movs	r3, #1
}
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b002      	add	sp, #8
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	2000064c 	.word	0x2000064c
 8003cc0:	20000600 	.word	0x20000600
 8003cc4:	00003550 	.word	0x00003550
 8003cc8:	fffffd45 	.word	0xfffffd45
 8003ccc:	00004e20 	.word	0x00004e20
 8003cd0:	00002710 	.word	0x00002710
 8003cd4:	fffffcab 	.word	0xfffffcab
 8003cd8:	00000355 	.word	0x00000355

08003cdc <command_cartesien>:

uint8_t command_cartesien(int32_t x_dest,int32_t y_dest,encoders_t * encoders)
{
 8003cdc:	b5b0      	push	{r4, r5, r7, lr}
 8003cde:	b08a      	sub	sp, #40	; 0x28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6178      	str	r0, [r7, #20]
 8003ce4:	6139      	str	r1, [r7, #16]
 8003ce6:	60fa      	str	r2, [r7, #12]
	int32_t distance=0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
	double angle=0;
 8003cec:	2200      	movs	r2, #0
 8003cee:	2300      	movs	r3, #0
 8003cf0:	623a      	str	r2, [r7, #32]
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
	distance=sqrt(((x_dest-encoders->x)*(x_dest-encoders->x))+((y_dest-encoders->y)*(y_dest-encoders->y)));
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	229c      	movs	r2, #156	; 0x9c
 8003cf8:	589b      	ldr	r3, [r3, r2]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	219c      	movs	r1, #156	; 0x9c
 8003d02:	5852      	ldr	r2, [r2, r1]
 8003d04:	6979      	ldr	r1, [r7, #20]
 8003d06:	1a8a      	subs	r2, r1, r2
 8003d08:	435a      	muls	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	21a0      	movs	r1, #160	; 0xa0
 8003d0e:	585b      	ldr	r3, [r3, r1]
 8003d10:	6939      	ldr	r1, [r7, #16]
 8003d12:	1acb      	subs	r3, r1, r3
 8003d14:	68f9      	ldr	r1, [r7, #12]
 8003d16:	20a0      	movs	r0, #160	; 0xa0
 8003d18:	5809      	ldr	r1, [r1, r0]
 8003d1a:	6938      	ldr	r0, [r7, #16]
 8003d1c:	1a41      	subs	r1, r0, r1
 8003d1e:	434b      	muls	r3, r1
 8003d20:	18d3      	adds	r3, r2, r3
 8003d22:	0018      	movs	r0, r3
 8003d24:	f7fe f9a0 	bl	8002068 <__aeabi_i2d>
 8003d28:	0002      	movs	r2, r0
 8003d2a:	000b      	movs	r3, r1
 8003d2c:	0010      	movs	r0, r2
 8003d2e:	0019      	movs	r1, r3
 8003d30:	f007 ff1a 	bl	800bb68 <sqrt>
 8003d34:	0002      	movs	r2, r0
 8003d36:	000b      	movs	r3, r1
 8003d38:	0010      	movs	r0, r2
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	f7fe f95e 	bl	8001ffc <__aeabi_d2iz>
 8003d40:	0003      	movs	r3, r0
 8003d42:	61fb      	str	r3, [r7, #28]
	if(x_dest-encoders->x==0)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	229c      	movs	r2, #156	; 0x9c
 8003d48:	589b      	ldr	r3, [r3, r2]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d110      	bne.n	8003d72 <command_cartesien+0x96>
	{
		if (y_dest-encoders->y>0)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	22a0      	movs	r2, #160	; 0xa0
 8003d54:	589b      	ldr	r3, [r3, r2]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	dd04      	ble.n	8003d68 <command_cartesien+0x8c>
			angle=+90;
 8003d5e:	2200      	movs	r2, #0
 8003d60:	4b49      	ldr	r3, [pc, #292]	; (8003e88 <command_cartesien+0x1ac>)
 8003d62:	623a      	str	r2, [r7, #32]
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
 8003d66:	e078      	b.n	8003e5a <command_cartesien+0x17e>
		else
			angle=-90;
 8003d68:	2200      	movs	r2, #0
 8003d6a:	4b48      	ldr	r3, [pc, #288]	; (8003e8c <command_cartesien+0x1b0>)
 8003d6c:	623a      	str	r2, [r7, #32]
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d70:	e073      	b.n	8003e5a <command_cartesien+0x17e>
	}
	else if (x_dest-encoders->x>0)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	229c      	movs	r2, #156	; 0x9c
 8003d76:	589b      	ldr	r3, [r3, r2]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	dd2f      	ble.n	8003de0 <command_cartesien+0x104>
	{
		//if (((encoders->angle%360)>-90)&((encoders->angle%360)<90))
		angle=-encoders->angle+atan(((double)(y_dest-encoders->y)/(x_dest-encoders->x)))*RAD_TO_DEG;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	22a0      	movs	r2, #160	; 0xa0
 8003d84:	589b      	ldr	r3, [r3, r2]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f7fe f96c 	bl	8002068 <__aeabi_i2d>
 8003d90:	0004      	movs	r4, r0
 8003d92:	000d      	movs	r5, r1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	229c      	movs	r2, #156	; 0x9c
 8003d98:	589b      	ldr	r3, [r3, r2]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f7fe f962 	bl	8002068 <__aeabi_i2d>
 8003da4:	0002      	movs	r2, r0
 8003da6:	000b      	movs	r3, r1
 8003da8:	0020      	movs	r0, r4
 8003daa:	0029      	movs	r1, r5
 8003dac:	f7fc feca 	bl	8000b44 <__aeabi_ddiv>
 8003db0:	0002      	movs	r2, r0
 8003db2:	000b      	movs	r3, r1
 8003db4:	0010      	movs	r0, r2
 8003db6:	0019      	movs	r1, r3
 8003db8:	f007 fefc 	bl	800bbb4 <atan>
 8003dbc:	4a34      	ldr	r2, [pc, #208]	; (8003e90 <command_cartesien+0x1b4>)
 8003dbe:	4b35      	ldr	r3, [pc, #212]	; (8003e94 <command_cartesien+0x1b8>)
 8003dc0:	f7fd faba 	bl	8001338 <__aeabi_dmul>
 8003dc4:	0002      	movs	r2, r0
 8003dc6:	000b      	movs	r3, r1
 8003dc8:	0010      	movs	r0, r2
 8003dca:	0019      	movs	r1, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dd2:	f7fd fd73 	bl	80018bc <__aeabi_dsub>
 8003dd6:	0002      	movs	r2, r0
 8003dd8:	000b      	movs	r3, r1
 8003dda:	623a      	str	r2, [r7, #32]
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dde:	e03c      	b.n	8003e5a <command_cartesien+0x17e>

	}

	else if(x_dest-encoders->x<0)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	229c      	movs	r2, #156	; 0x9c
 8003de4:	589b      	ldr	r3, [r3, r2]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	d536      	bpl.n	8003e5a <command_cartesien+0x17e>
	{
		angle=180-encoders->angle+atan(((double)(y_dest-encoders->y)/(x_dest-encoders->x)))*RAD_TO_DEG;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003df2:	2000      	movs	r0, #0
 8003df4:	4928      	ldr	r1, [pc, #160]	; (8003e98 <command_cartesien+0x1bc>)
 8003df6:	f7fd fd61 	bl	80018bc <__aeabi_dsub>
 8003dfa:	0002      	movs	r2, r0
 8003dfc:	000b      	movs	r3, r1
 8003dfe:	603a      	str	r2, [r7, #0]
 8003e00:	607b      	str	r3, [r7, #4]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	22a0      	movs	r2, #160	; 0xa0
 8003e06:	589b      	ldr	r3, [r3, r2]
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f7fe f92b 	bl	8002068 <__aeabi_i2d>
 8003e12:	0004      	movs	r4, r0
 8003e14:	000d      	movs	r5, r1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	229c      	movs	r2, #156	; 0x9c
 8003e1a:	589b      	ldr	r3, [r3, r2]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	0018      	movs	r0, r3
 8003e22:	f7fe f921 	bl	8002068 <__aeabi_i2d>
 8003e26:	0002      	movs	r2, r0
 8003e28:	000b      	movs	r3, r1
 8003e2a:	0020      	movs	r0, r4
 8003e2c:	0029      	movs	r1, r5
 8003e2e:	f7fc fe89 	bl	8000b44 <__aeabi_ddiv>
 8003e32:	0002      	movs	r2, r0
 8003e34:	000b      	movs	r3, r1
 8003e36:	0010      	movs	r0, r2
 8003e38:	0019      	movs	r1, r3
 8003e3a:	f007 febb 	bl	800bbb4 <atan>
 8003e3e:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <command_cartesien+0x1b4>)
 8003e40:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <command_cartesien+0x1b8>)
 8003e42:	f7fd fa79 	bl	8001338 <__aeabi_dmul>
 8003e46:	0002      	movs	r2, r0
 8003e48:	000b      	movs	r3, r1
 8003e4a:	6838      	ldr	r0, [r7, #0]
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	f7fc fb19 	bl	8000484 <__aeabi_dadd>
 8003e52:	0002      	movs	r2, r0
 8003e54:	000b      	movs	r3, r1
 8003e56:	623a      	str	r2, [r7, #32]
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
	}
//	printf("x=%d and y=%d and x_dest=%d and y_dest=%d\n\r",encoders->x,encoders->y,x_dest,y_dest);
//	printf("Dist=%d and angle=%d\n\r",distance,(int)angle);


	command_angle(encoders,angle);
 8003e5a:	6a3a      	ldr	r2, [r7, #32]
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	68f9      	ldr	r1, [r7, #12]
 8003e60:	0008      	movs	r0, r1
 8003e62:	f000 f95c 	bl	800411e <command_angle>
	vTaskDelay(20);
 8003e66:	2014      	movs	r0, #20
 8003e68:	f005 fbe8 	bl	800963c <vTaskDelay>
	//while(encoders->angle_done==0); // semaphore or notification
	command_distance(encoders,distance);
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	0011      	movs	r1, r2
 8003e72:	0018      	movs	r0, r3
 8003e74:	f000 f91e 	bl	80040b4 <command_distance>
	vTaskDelay(20);
 8003e78:	2014      	movs	r0, #20
 8003e7a:	f005 fbdf 	bl	800963c <vTaskDelay>
	//while(encoders->distance_done==0);
}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	0018      	movs	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b00a      	add	sp, #40	; 0x28
 8003e86:	bdb0      	pop	{r4, r5, r7, pc}
 8003e88:	40568000 	.word	0x40568000
 8003e8c:	c0568000 	.word	0xc0568000
 8003e90:	1a63c1f8 	.word	0x1a63c1f8
 8003e94:	404ca5dc 	.word	0x404ca5dc
 8003e98:	40668000 	.word	0x40668000

08003e9c <odom>:

uint8_t odom(encoders_t * encoders)
{
 8003e9c:	b5b0      	push	{r4, r5, r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
	encoders->dr=(encoders->right.nbr_ticks-encoders->right.nbr_ticks_odom)*TICKS_TO_MM;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f7fe f8da 	bl	8002068 <__aeabi_i2d>
 8003eb4:	4a78      	ldr	r2, [pc, #480]	; (8004098 <odom+0x1fc>)
 8003eb6:	4b79      	ldr	r3, [pc, #484]	; (800409c <odom+0x200>)
 8003eb8:	f7fd fa3e 	bl	8001338 <__aeabi_dmul>
 8003ebc:	0002      	movs	r2, r0
 8003ebe:	000b      	movs	r3, r1
 8003ec0:	0010      	movs	r0, r2
 8003ec2:	0019      	movs	r1, r3
 8003ec4:	f7fe f89a 	bl	8001ffc <__aeabi_d2iz>
 8003ec8:	0002      	movs	r2, r0
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2188      	movs	r1, #136	; 0x88
 8003ece:	505a      	str	r2, [r3, r1]
	encoders->dl=(encoders->left.nbr_ticks-encoders->left.nbr_ticks_odom)*TICKS_TO_MM;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	0018      	movs	r0, r3
 8003edc:	f7fe f8c4 	bl	8002068 <__aeabi_i2d>
 8003ee0:	4a6d      	ldr	r2, [pc, #436]	; (8004098 <odom+0x1fc>)
 8003ee2:	4b6e      	ldr	r3, [pc, #440]	; (800409c <odom+0x200>)
 8003ee4:	f7fd fa28 	bl	8001338 <__aeabi_dmul>
 8003ee8:	0002      	movs	r2, r0
 8003eea:	000b      	movs	r3, r1
 8003eec:	0010      	movs	r0, r2
 8003eee:	0019      	movs	r1, r3
 8003ef0:	f7fe f884 	bl	8001ffc <__aeabi_d2iz>
 8003ef4:	0002      	movs	r2, r0
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	218c      	movs	r1, #140	; 0x8c
 8003efa:	505a      	str	r2, [r3, r1]
	encoders->dalpha=atan(((double)(encoders->dr-encoders->dl)/ENTRAXE))*RAD_TO_DEG*0.95;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2288      	movs	r2, #136	; 0x88
 8003f00:	589a      	ldr	r2, [r3, r2]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	218c      	movs	r1, #140	; 0x8c
 8003f06:	585b      	ldr	r3, [r3, r1]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f7fe f8ac 	bl	8002068 <__aeabi_i2d>
 8003f10:	2200      	movs	r2, #0
 8003f12:	4b63      	ldr	r3, [pc, #396]	; (80040a0 <odom+0x204>)
 8003f14:	f7fc fe16 	bl	8000b44 <__aeabi_ddiv>
 8003f18:	0002      	movs	r2, r0
 8003f1a:	000b      	movs	r3, r1
 8003f1c:	0010      	movs	r0, r2
 8003f1e:	0019      	movs	r1, r3
 8003f20:	f007 fe48 	bl	800bbb4 <atan>
 8003f24:	4a5f      	ldr	r2, [pc, #380]	; (80040a4 <odom+0x208>)
 8003f26:	4b60      	ldr	r3, [pc, #384]	; (80040a8 <odom+0x20c>)
 8003f28:	f7fd fa06 	bl	8001338 <__aeabi_dmul>
 8003f2c:	0002      	movs	r2, r0
 8003f2e:	000b      	movs	r3, r1
 8003f30:	0010      	movs	r0, r2
 8003f32:	0019      	movs	r1, r3
 8003f34:	4a5d      	ldr	r2, [pc, #372]	; (80040ac <odom+0x210>)
 8003f36:	4b5e      	ldr	r3, [pc, #376]	; (80040b0 <odom+0x214>)
 8003f38:	f7fd f9fe 	bl	8001338 <__aeabi_dmul>
 8003f3c:	0002      	movs	r2, r0
 8003f3e:	000b      	movs	r3, r1
 8003f40:	68f9      	ldr	r1, [r7, #12]
 8003f42:	3190      	adds	r1, #144	; 0x90
 8003f44:	600a      	str	r2, [r1, #0]
 8003f46:	604b      	str	r3, [r1, #4]
	encoders->ddelta=(encoders->dr+encoders->dl)/2;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2288      	movs	r2, #136	; 0x88
 8003f4c:	589a      	ldr	r2, [r3, r2]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	218c      	movs	r1, #140	; 0x8c
 8003f52:	585b      	ldr	r3, [r3, r1]
 8003f54:	18d3      	adds	r3, r2, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	da00      	bge.n	8003f5c <odom+0xc0>
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	105b      	asrs	r3, r3, #1
 8003f5e:	0019      	movs	r1, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2298      	movs	r2, #152	; 0x98
 8003f64:	5099      	str	r1, [r3, r2]

	encoders->angle+=encoders->dalpha;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8003f6a:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	3390      	adds	r3, #144	; 0x90
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f7fc fa86 	bl	8000484 <__aeabi_dadd>
 8003f78:	0002      	movs	r2, r0
 8003f7a:	000b      	movs	r3, r1
 8003f7c:	68f9      	ldr	r1, [r7, #12]
 8003f7e:	678a      	str	r2, [r1, #120]	; 0x78
 8003f80:	67cb      	str	r3, [r1, #124]	; 0x7c

	// Polaire
	encoders->distance+=encoders->ddelta;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2198      	movs	r1, #152	; 0x98
 8003f8a:	585b      	ldr	r3, [r3, r1]
 8003f8c:	18d2      	adds	r2, r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	671a      	str	r2, [r3, #112]	; 0x70
	encoders->theta+=encoders->dalpha;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3380      	adds	r3, #128	; 0x80
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	6859      	ldr	r1, [r3, #4]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3390      	adds	r3, #144	; 0x90
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f7fc fa6f 	bl	8000484 <__aeabi_dadd>
 8003fa6:	0002      	movs	r2, r0
 8003fa8:	000b      	movs	r3, r1
 8003faa:	68f9      	ldr	r1, [r7, #12]
 8003fac:	3180      	adds	r1, #128	; 0x80
 8003fae:	600a      	str	r2, [r1, #0]
 8003fb0:	604b      	str	r3, [r1, #4]

	// Cartésien
	encoders->x+=encoders->ddelta*cos(encoders->angle/RAD_TO_DEG);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	229c      	movs	r2, #156	; 0x9c
 8003fb6:	589b      	ldr	r3, [r3, r2]
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f7fe f855 	bl	8002068 <__aeabi_i2d>
 8003fbe:	0004      	movs	r4, r0
 8003fc0:	000d      	movs	r5, r1
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2298      	movs	r2, #152	; 0x98
 8003fc6:	589b      	ldr	r3, [r3, r2]
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f7fe f84d 	bl	8002068 <__aeabi_i2d>
 8003fce:	6038      	str	r0, [r7, #0]
 8003fd0:	6079      	str	r1, [r7, #4]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8003fd6:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003fd8:	4a32      	ldr	r2, [pc, #200]	; (80040a4 <odom+0x208>)
 8003fda:	4b33      	ldr	r3, [pc, #204]	; (80040a8 <odom+0x20c>)
 8003fdc:	f7fc fdb2 	bl	8000b44 <__aeabi_ddiv>
 8003fe0:	0002      	movs	r2, r0
 8003fe2:	000b      	movs	r3, r1
 8003fe4:	0010      	movs	r0, r2
 8003fe6:	0019      	movs	r1, r3
 8003fe8:	f007 ff64 	bl	800beb4 <cos>
 8003fec:	0002      	movs	r2, r0
 8003fee:	000b      	movs	r3, r1
 8003ff0:	6838      	ldr	r0, [r7, #0]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	f7fd f9a0 	bl	8001338 <__aeabi_dmul>
 8003ff8:	0002      	movs	r2, r0
 8003ffa:	000b      	movs	r3, r1
 8003ffc:	0020      	movs	r0, r4
 8003ffe:	0029      	movs	r1, r5
 8004000:	f7fc fa40 	bl	8000484 <__aeabi_dadd>
 8004004:	0002      	movs	r2, r0
 8004006:	000b      	movs	r3, r1
 8004008:	0010      	movs	r0, r2
 800400a:	0019      	movs	r1, r3
 800400c:	f7fd fff6 	bl	8001ffc <__aeabi_d2iz>
 8004010:	0002      	movs	r2, r0
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	219c      	movs	r1, #156	; 0x9c
 8004016:	505a      	str	r2, [r3, r1]
	encoders->y+=encoders->ddelta*sin(encoders->angle/RAD_TO_DEG);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	22a0      	movs	r2, #160	; 0xa0
 800401c:	589b      	ldr	r3, [r3, r2]
 800401e:	0018      	movs	r0, r3
 8004020:	f7fe f822 	bl	8002068 <__aeabi_i2d>
 8004024:	0004      	movs	r4, r0
 8004026:	000d      	movs	r5, r1
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2298      	movs	r2, #152	; 0x98
 800402c:	589b      	ldr	r3, [r3, r2]
 800402e:	0018      	movs	r0, r3
 8004030:	f7fe f81a 	bl	8002068 <__aeabi_i2d>
 8004034:	6038      	str	r0, [r7, #0]
 8004036:	6079      	str	r1, [r7, #4]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800403c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800403e:	4a19      	ldr	r2, [pc, #100]	; (80040a4 <odom+0x208>)
 8004040:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <odom+0x20c>)
 8004042:	f7fc fd7f 	bl	8000b44 <__aeabi_ddiv>
 8004046:	0002      	movs	r2, r0
 8004048:	000b      	movs	r3, r1
 800404a:	0010      	movs	r0, r2
 800404c:	0019      	movs	r1, r3
 800404e:	f007 ff75 	bl	800bf3c <sin>
 8004052:	0002      	movs	r2, r0
 8004054:	000b      	movs	r3, r1
 8004056:	6838      	ldr	r0, [r7, #0]
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	f7fd f96d 	bl	8001338 <__aeabi_dmul>
 800405e:	0002      	movs	r2, r0
 8004060:	000b      	movs	r3, r1
 8004062:	0020      	movs	r0, r4
 8004064:	0029      	movs	r1, r5
 8004066:	f7fc fa0d 	bl	8000484 <__aeabi_dadd>
 800406a:	0002      	movs	r2, r0
 800406c:	000b      	movs	r3, r1
 800406e:	0010      	movs	r0, r2
 8004070:	0019      	movs	r1, r3
 8004072:	f7fd ffc3 	bl	8001ffc <__aeabi_d2iz>
 8004076:	0002      	movs	r2, r0
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	21a0      	movs	r1, #160	; 0xa0
 800407c:	505a      	str	r2, [r3, r1]


	encoders->left.nbr_ticks_odom=encoders->left.nbr_ticks;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
	encoders->right.nbr_ticks_odom=encoders->right.nbr_ticks;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	609a      	str	r2, [r3, #8]


	return 0;
 800408e:	2300      	movs	r3, #0
}
 8004090:	0018      	movs	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	b004      	add	sp, #16
 8004096:	bdb0      	pop	{r4, r5, r7, pc}
 8004098:	4cd47ba6 	.word	0x4cd47ba6
 800409c:	3f9e0300 	.word	0x3f9e0300
 80040a0:	40620000 	.word	0x40620000
 80040a4:	1a63c1f8 	.word	0x1a63c1f8
 80040a8:	404ca5dc 	.word	0x404ca5dc
 80040ac:	66666666 	.word	0x66666666
 80040b0:	3fee6666 	.word	0x3fee6666

080040b4 <command_distance>:
uint8_t command_distance(encoders_t * encoders, int32_t distance)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
	if (encoders->distance_done==1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	22a4      	movs	r2, #164	; 0xa4
 80040c2:	5c9b      	ldrb	r3, [r3, r2]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d125      	bne.n	8004114 <command_distance+0x60>
	{

	encoders->left.consigne_distance=distance;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	665a      	str	r2, [r3, #100]	; 0x64
	if (distance >0)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	dd06      	ble.n	80040e2 <command_distance+0x2e>
	{
		encoders->left.consigne=50;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2232      	movs	r2, #50	; 0x32
 80040d8:	661a      	str	r2, [r3, #96]	; 0x60
		encoders->right.consigne=50;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2232      	movs	r2, #50	; 0x32
 80040de:	629a      	str	r2, [r3, #40]	; 0x28
 80040e0:	e007      	b.n	80040f2 <command_distance+0x3e>
	}
	else
	{
		encoders->left.consigne=-50;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2232      	movs	r2, #50	; 0x32
 80040e6:	4252      	negs	r2, r2
 80040e8:	661a      	str	r2, [r3, #96]	; 0x60
		encoders->right.consigne=-50;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2232      	movs	r2, #50	; 0x32
 80040ee:	4252      	negs	r2, r2
 80040f0:	629a      	str	r2, [r3, #40]	; 0x28
	}
	//encoders->distance_done=0;
	xSemaphoreGive(encoders->sem_distance_check);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	22b0      	movs	r2, #176	; 0xb0
 80040f6:	5898      	ldr	r0, [r3, r2]
 80040f8:	2300      	movs	r3, #0
 80040fa:	2200      	movs	r2, #0
 80040fc:	2100      	movs	r1, #0
 80040fe:	f004 fec3 	bl	8008e88 <xQueueGenericSend>
	xSemaphoreTake(encoders->sem_distance_done, portMAX_DELAY);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	22a8      	movs	r2, #168	; 0xa8
 8004106:	589b      	ldr	r3, [r3, r2]
 8004108:	2201      	movs	r2, #1
 800410a:	4252      	negs	r2, r2
 800410c:	0011      	movs	r1, r2
 800410e:	0018      	movs	r0, r3
 8004110:	f004 ff7e 	bl	8009010 <xQueueSemaphoreTake>
	//xSemaphoreGive(encoders->sem_distance_done);
	}

	return 0;
 8004114:	2300      	movs	r3, #0
}
 8004116:	0018      	movs	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	b002      	add	sp, #8
 800411c:	bd80      	pop	{r7, pc}

0800411e <command_angle>:
uint8_t command_angle(encoders_t * encoders,double angle)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	603a      	str	r2, [r7, #0]
 8004128:	607b      	str	r3, [r7, #4]
	if (encoders->angle_done==1)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	22a5      	movs	r2, #165	; 0xa5
 800412e:	5c9b      	ldrb	r3, [r3, r2]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d12e      	bne.n	8004192 <command_angle+0x74>
	{
		encoders->left.consigne_angle=angle;
 8004134:	68f9      	ldr	r1, [r7, #12]
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	668a      	str	r2, [r1, #104]	; 0x68
 800413c:	66cb      	str	r3, [r1, #108]	; 0x6c
		if (angle<encoders->theta)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3380      	adds	r3, #128	; 0x80
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	6838      	ldr	r0, [r7, #0]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	f7fc f973 	bl	8000434 <__aeabi_dcmplt>
 800414e:	1e03      	subs	r3, r0, #0
 8004150:	d007      	beq.n	8004162 <command_angle+0x44>
		{
			encoders->left.consigne=50;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2232      	movs	r2, #50	; 0x32
 8004156:	661a      	str	r2, [r3, #96]	; 0x60
			encoders->right.consigne=-50;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2232      	movs	r2, #50	; 0x32
 800415c:	4252      	negs	r2, r2
 800415e:	629a      	str	r2, [r3, #40]	; 0x28
 8004160:	e006      	b.n	8004170 <command_angle+0x52>
		}
		else
		{
			encoders->left.consigne=-50;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2232      	movs	r2, #50	; 0x32
 8004166:	4252      	negs	r2, r2
 8004168:	661a      	str	r2, [r3, #96]	; 0x60
			encoders->right.consigne=50;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2232      	movs	r2, #50	; 0x32
 800416e:	629a      	str	r2, [r3, #40]	; 0x28
		}
		//encoders->angle_done=0;
		xSemaphoreGive(encoders->sem_angle_check);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	22b4      	movs	r2, #180	; 0xb4
 8004174:	5898      	ldr	r0, [r3, r2]
 8004176:	2300      	movs	r3, #0
 8004178:	2200      	movs	r2, #0
 800417a:	2100      	movs	r1, #0
 800417c:	f004 fe84 	bl	8008e88 <xQueueGenericSend>
		xSemaphoreTake(encoders->sem_angle_done, portMAX_DELAY);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	22ac      	movs	r2, #172	; 0xac
 8004184:	589b      	ldr	r3, [r3, r2]
 8004186:	2201      	movs	r2, #1
 8004188:	4252      	negs	r2, r2
 800418a:	0011      	movs	r1, r2
 800418c:	0018      	movs	r0, r3
 800418e:	f004 ff3f 	bl	8009010 <xQueueSemaphoreTake>
	}

	return 0;
 8004192:	2300      	movs	r3, #0
}
 8004194:	0018      	movs	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	b004      	add	sp, #16
 800419a:	bd80      	pop	{r7, pc}

0800419c <command_angle_stop>:
uint8_t command_angle_stop(encoders_t * encoders)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
	encoders->left.consigne_angle=0;
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	2300      	movs	r3, #0
 80041aa:	668a      	str	r2, [r1, #104]	; 0x68
 80041ac:	66cb      	str	r3, [r1, #108]	; 0x6c
	encoders->left.consigne=0;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	661a      	str	r2, [r3, #96]	; 0x60
	encoders->right.consigne=0;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	629a      	str	r2, [r3, #40]	; 0x28
	encoders->theta=0;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3380      	adds	r3, #128	; 0x80
 80041be:	0019      	movs	r1, r3
 80041c0:	2200      	movs	r2, #0
 80041c2:	2300      	movs	r3, #0
 80041c4:	600a      	str	r2, [r1, #0]
 80041c6:	604b      	str	r3, [r1, #4]
	encoders->angle_done=1;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	22a5      	movs	r2, #165	; 0xa5
 80041cc:	2101      	movs	r1, #1
 80041ce:	5499      	strb	r1, [r3, r2]
	return 0;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	0018      	movs	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b002      	add	sp, #8
 80041d8:	bd80      	pop	{r7, pc}

080041da <command_distance_stop>:
uint8_t command_distance_stop(encoders_t * encoders)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
	encoders->left.consigne_distance=0;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	665a      	str	r2, [r3, #100]	; 0x64
	encoders->left.consigne=0;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	661a      	str	r2, [r3, #96]	; 0x60
	encoders->right.consigne=0;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	629a      	str	r2, [r3, #40]	; 0x28
	encoders->distance=0;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	671a      	str	r2, [r3, #112]	; 0x70
	encoders->distance_done=1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	22a4      	movs	r2, #164	; 0xa4
 80041fe:	2101      	movs	r1, #1
 8004200:	5499      	strb	r1, [r3, r2]
	return 0;
 8004202:	2300      	movs	r3, #0
}
 8004204:	0018      	movs	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	b002      	add	sp, #8
 800420a:	bd80      	pop	{r7, pc}

0800420c <command_stop>:
uint8_t command_stop(encoders_t * encoders)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	encoders->left.consigne_distance=0;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	665a      	str	r2, [r3, #100]	; 0x64
	encoders->left.consigne=0;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	661a      	str	r2, [r3, #96]	; 0x60
	encoders->right.consigne=0;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	629a      	str	r2, [r3, #40]	; 0x28
	encoders->distance=0;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	671a      	str	r2, [r3, #112]	; 0x70
	encoders->distance_done=1;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	22a4      	movs	r2, #164	; 0xa4
 8004230:	2101      	movs	r1, #1
 8004232:	5499      	strb	r1, [r3, r2]
	encoders->left.consigne_angle=0;
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	2300      	movs	r3, #0
 800423a:	668a      	str	r2, [r1, #104]	; 0x68
 800423c:	66cb      	str	r3, [r1, #108]	; 0x6c
	encoders->theta=0;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3380      	adds	r3, #128	; 0x80
 8004242:	0019      	movs	r1, r3
 8004244:	2200      	movs	r2, #0
 8004246:	2300      	movs	r3, #0
 8004248:	600a      	str	r2, [r1, #0]
 800424a:	604b      	str	r3, [r1, #4]
	encoders->angle_done=1;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	22a5      	movs	r2, #165	; 0xa5
 8004250:	2101      	movs	r1, #1
 8004252:	5499      	strb	r1, [r3, r2]
	//	while(encoders->distance_done==0);
	//	command_angle(encoders,180);
	//	while(encoders->angle_done==0); // semaphore or notification


	return 0;
 8004254:	2300      	movs	r3, #0
}
 8004256:	0018      	movs	r0, r3
 8004258:	46bd      	mov	sp, r7
 800425a:	b002      	add	sp, #8
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004266:	1dfb      	adds	r3, r7, #7
 8004268:	2200      	movs	r2, #0
 800426a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800426c:	4b0b      	ldr	r3, [pc, #44]	; (800429c <HAL_Init+0x3c>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4b0a      	ldr	r3, [pc, #40]	; (800429c <HAL_Init+0x3c>)
 8004272:	2180      	movs	r1, #128	; 0x80
 8004274:	0049      	lsls	r1, r1, #1
 8004276:	430a      	orrs	r2, r1
 8004278:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800427a:	2003      	movs	r0, #3
 800427c:	f000 f810 	bl	80042a0 <HAL_InitTick>
 8004280:	1e03      	subs	r3, r0, #0
 8004282:	d003      	beq.n	800428c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004284:	1dfb      	adds	r3, r7, #7
 8004286:	2201      	movs	r2, #1
 8004288:	701a      	strb	r2, [r3, #0]
 800428a:	e001      	b.n	8004290 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800428c:	f7fe fd26 	bl	8002cdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004290:	1dfb      	adds	r3, r7, #7
 8004292:	781b      	ldrb	r3, [r3, #0]
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	b002      	add	sp, #8
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40022000 	.word	0x40022000

080042a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042a0:	b590      	push	{r4, r7, lr}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80042a8:	230f      	movs	r3, #15
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	2200      	movs	r2, #0
 80042ae:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80042b0:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <HAL_InitTick+0x88>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d02b      	beq.n	8004310 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80042b8:	4b1c      	ldr	r3, [pc, #112]	; (800432c <HAL_InitTick+0x8c>)
 80042ba:	681c      	ldr	r4, [r3, #0]
 80042bc:	4b1a      	ldr	r3, [pc, #104]	; (8004328 <HAL_InitTick+0x88>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	0019      	movs	r1, r3
 80042c2:	23fa      	movs	r3, #250	; 0xfa
 80042c4:	0098      	lsls	r0, r3, #2
 80042c6:	f7fb ff29 	bl	800011c <__udivsi3>
 80042ca:	0003      	movs	r3, r0
 80042cc:	0019      	movs	r1, r3
 80042ce:	0020      	movs	r0, r4
 80042d0:	f7fb ff24 	bl	800011c <__udivsi3>
 80042d4:	0003      	movs	r3, r0
 80042d6:	0018      	movs	r0, r3
 80042d8:	f000 fd6d 	bl	8004db6 <HAL_SYSTICK_Config>
 80042dc:	1e03      	subs	r3, r0, #0
 80042de:	d112      	bne.n	8004306 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d80a      	bhi.n	80042fc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	2301      	movs	r3, #1
 80042ea:	425b      	negs	r3, r3
 80042ec:	2200      	movs	r2, #0
 80042ee:	0018      	movs	r0, r3
 80042f0:	f000 fd4c 	bl	8004d8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80042f4:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <HAL_InitTick+0x90>)
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	e00d      	b.n	8004318 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80042fc:	230f      	movs	r3, #15
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	2201      	movs	r2, #1
 8004302:	701a      	strb	r2, [r3, #0]
 8004304:	e008      	b.n	8004318 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004306:	230f      	movs	r3, #15
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	2201      	movs	r2, #1
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	e003      	b.n	8004318 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004310:	230f      	movs	r3, #15
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	2201      	movs	r2, #1
 8004316:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004318:	230f      	movs	r3, #15
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	781b      	ldrb	r3, [r3, #0]
}
 800431e:	0018      	movs	r0, r3
 8004320:	46bd      	mov	sp, r7
 8004322:	b005      	add	sp, #20
 8004324:	bd90      	pop	{r4, r7, pc}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	20000008 	.word	0x20000008
 800432c:	20000000 	.word	0x20000000
 8004330:	20000004 	.word	0x20000004

08004334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_IncTick+0x1c>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	001a      	movs	r2, r3
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_IncTick+0x20>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	18d2      	adds	r2, r2, r3
 8004344:	4b03      	ldr	r3, [pc, #12]	; (8004354 <HAL_IncTick+0x20>)
 8004346:	601a      	str	r2, [r3, #0]
}
 8004348:	46c0      	nop			; (mov r8, r8)
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	20000008 	.word	0x20000008
 8004354:	2000072c 	.word	0x2000072c

08004358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  return uwTick;
 800435c:	4b02      	ldr	r3, [pc, #8]	; (8004368 <HAL_GetTick+0x10>)
 800435e:	681b      	ldr	r3, [r3, #0]
}
 8004360:	0018      	movs	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	2000072c 	.word	0x2000072c

0800436c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a05      	ldr	r2, [pc, #20]	; (8004390 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800437c:	401a      	ands	r2, r3
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	601a      	str	r2, [r3, #0]
}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	46bd      	mov	sp, r7
 800438a:	b002      	add	sp, #8
 800438c:	bd80      	pop	{r7, pc}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	fe3fffff 	.word	0xfe3fffff

08004394 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	23e0      	movs	r3, #224	; 0xe0
 80043a2:	045b      	lsls	r3, r3, #17
 80043a4:	4013      	ands	r3, r2
}
 80043a6:	0018      	movs	r0, r3
 80043a8:	46bd      	mov	sp, r7
 80043aa:	b002      	add	sp, #8
 80043ac:	bd80      	pop	{r7, pc}

080043ae <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	2104      	movs	r1, #4
 80043c2:	400a      	ands	r2, r1
 80043c4:	2107      	movs	r1, #7
 80043c6:	4091      	lsls	r1, r2
 80043c8:	000a      	movs	r2, r1
 80043ca:	43d2      	mvns	r2, r2
 80043cc:	401a      	ands	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2104      	movs	r1, #4
 80043d2:	400b      	ands	r3, r1
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	4099      	lsls	r1, r3
 80043d8:	000b      	movs	r3, r1
 80043da:	431a      	orrs	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80043e0:	46c0      	nop			; (mov r8, r8)
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b004      	add	sp, #16
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	2104      	movs	r1, #4
 80043fa:	400a      	ands	r2, r1
 80043fc:	2107      	movs	r1, #7
 80043fe:	4091      	lsls	r1, r2
 8004400:	000a      	movs	r2, r1
 8004402:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2104      	movs	r1, #4
 8004408:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800440a:	40da      	lsrs	r2, r3
 800440c:	0013      	movs	r3, r2
}
 800440e:	0018      	movs	r0, r3
 8004410:	46bd      	mov	sp, r7
 8004412:	b002      	add	sp, #8
 8004414:	bd80      	pop	{r7, pc}

08004416 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	211f      	movs	r1, #31
 800442a:	400a      	ands	r2, r1
 800442c:	210f      	movs	r1, #15
 800442e:	4091      	lsls	r1, r2
 8004430:	000a      	movs	r2, r1
 8004432:	43d2      	mvns	r2, r2
 8004434:	401a      	ands	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	0e9b      	lsrs	r3, r3, #26
 800443a:	210f      	movs	r1, #15
 800443c:	4019      	ands	r1, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	201f      	movs	r0, #31
 8004442:	4003      	ands	r3, r0
 8004444:	4099      	lsls	r1, r3
 8004446:	000b      	movs	r3, r1
 8004448:	431a      	orrs	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	46bd      	mov	sp, r7
 8004452:	b004      	add	sp, #16
 8004454:	bd80      	pop	{r7, pc}

08004456 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b082      	sub	sp, #8
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	035b      	lsls	r3, r3, #13
 8004468:	0b5b      	lsrs	r3, r3, #13
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b002      	add	sp, #8
 8004476:	bd80      	pop	{r7, pc}

08004478 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	0352      	lsls	r2, r2, #13
 800448a:	0b52      	lsrs	r2, r2, #13
 800448c:	43d2      	mvns	r2, r2
 800448e:	401a      	ands	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004494:	46c0      	nop			; (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	b002      	add	sp, #8
 800449a:	bd80      	pop	{r7, pc}

0800449c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	0212      	lsls	r2, r2, #8
 80044b0:	43d2      	mvns	r2, r2
 80044b2:	401a      	ands	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	400b      	ands	r3, r1
 80044bc:	4904      	ldr	r1, [pc, #16]	; (80044d0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80044be:	400b      	ands	r3, r1
 80044c0:	431a      	orrs	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	46bd      	mov	sp, r7
 80044ca:	b004      	add	sp, #16
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	07ffff00 	.word	0x07ffff00

080044d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	4a05      	ldr	r2, [pc, #20]	; (80044f8 <LL_ADC_EnableInternalRegulator+0x24>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	2280      	movs	r2, #128	; 0x80
 80044e6:	0552      	lsls	r2, r2, #21
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b002      	add	sp, #8
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	6fffffe8 	.word	0x6fffffe8

080044fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	2380      	movs	r3, #128	; 0x80
 800450a:	055b      	lsls	r3, r3, #21
 800450c:	401a      	ands	r2, r3
 800450e:	2380      	movs	r3, #128	; 0x80
 8004510:	055b      	lsls	r3, r3, #21
 8004512:	429a      	cmp	r2, r3
 8004514:	d101      	bne.n	800451a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800451a:	2300      	movs	r3, #0
}
 800451c:	0018      	movs	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	b002      	add	sp, #8
 8004522:	bd80      	pop	{r7, pc}

08004524 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2201      	movs	r2, #1
 8004532:	4013      	ands	r3, r2
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <LL_ADC_IsEnabled+0x18>
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <LL_ADC_IsEnabled+0x1a>
 800453c:	2300      	movs	r3, #0
}
 800453e:	0018      	movs	r0, r3
 8004540:	46bd      	mov	sp, r7
 8004542:	b002      	add	sp, #8
 8004544:	bd80      	pop	{r7, pc}

08004546 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2204      	movs	r2, #4
 8004554:	4013      	ands	r3, r2
 8004556:	2b04      	cmp	r3, #4
 8004558:	d101      	bne.n	800455e <LL_ADC_REG_IsConversionOngoing+0x18>
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800455e:	2300      	movs	r3, #0
}
 8004560:	0018      	movs	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	b002      	add	sp, #8
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004570:	231f      	movs	r3, #31
 8004572:	18fb      	adds	r3, r7, r3
 8004574:	2200      	movs	r2, #0
 8004576:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8004578:	2300      	movs	r3, #0
 800457a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e17f      	b.n	800488e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10a      	bne.n	80045ac <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	0018      	movs	r0, r3
 800459a:	f7fd fe1f 	bl	80021dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2254      	movs	r2, #84	; 0x54
 80045a8:	2100      	movs	r1, #0
 80045aa:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f7ff ffa3 	bl	80044fc <LL_ADC_IsInternalRegulatorEnabled>
 80045b6:	1e03      	subs	r3, r0, #0
 80045b8:	d115      	bne.n	80045e6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	0018      	movs	r0, r3
 80045c0:	f7ff ff88 	bl	80044d4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045c4:	4bb4      	ldr	r3, [pc, #720]	; (8004898 <HAL_ADC_Init+0x330>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	49b4      	ldr	r1, [pc, #720]	; (800489c <HAL_ADC_Init+0x334>)
 80045ca:	0018      	movs	r0, r3
 80045cc:	f7fb fda6 	bl	800011c <__udivsi3>
 80045d0:	0003      	movs	r3, r0
 80045d2:	3301      	adds	r3, #1
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80045d8:	e002      	b.n	80045e0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3b01      	subs	r3, #1
 80045de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f9      	bne.n	80045da <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	0018      	movs	r0, r3
 80045ec:	f7ff ff86 	bl	80044fc <LL_ADC_IsInternalRegulatorEnabled>
 80045f0:	1e03      	subs	r3, r0, #0
 80045f2:	d10f      	bne.n	8004614 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f8:	2210      	movs	r2, #16
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004604:	2201      	movs	r2, #1
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800460c:	231f      	movs	r3, #31
 800460e:	18fb      	adds	r3, r7, r3
 8004610:	2201      	movs	r2, #1
 8004612:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	0018      	movs	r0, r3
 800461a:	f7ff ff94 	bl	8004546 <LL_ADC_REG_IsConversionOngoing>
 800461e:	0003      	movs	r3, r0
 8004620:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004626:	2210      	movs	r2, #16
 8004628:	4013      	ands	r3, r2
 800462a:	d000      	beq.n	800462e <HAL_ADC_Init+0xc6>
 800462c:	e122      	b.n	8004874 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d000      	beq.n	8004636 <HAL_ADC_Init+0xce>
 8004634:	e11e      	b.n	8004874 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463a:	4a99      	ldr	r2, [pc, #612]	; (80048a0 <HAL_ADC_Init+0x338>)
 800463c:	4013      	ands	r3, r2
 800463e:	2202      	movs	r2, #2
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	0018      	movs	r0, r3
 800464c:	f7ff ff6a 	bl	8004524 <LL_ADC_IsEnabled>
 8004650:	1e03      	subs	r3, r0, #0
 8004652:	d000      	beq.n	8004656 <HAL_ADC_Init+0xee>
 8004654:	e0ad      	b.n	80047b2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	7e1b      	ldrb	r3, [r3, #24]
 800465e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004660:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	7e5b      	ldrb	r3, [r3, #25]
 8004666:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004668:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	7e9b      	ldrb	r3, [r3, #26]
 800466e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004670:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_ADC_Init+0x118>
 800467a:	2380      	movs	r3, #128	; 0x80
 800467c:	015b      	lsls	r3, r3, #5
 800467e:	e000      	b.n	8004682 <HAL_ADC_Init+0x11a>
 8004680:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004682:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004688:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	da04      	bge.n	800469c <HAL_ADC_Init+0x134>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	085b      	lsrs	r3, r3, #1
 800469a:	e001      	b.n	80046a0 <HAL_ADC_Init+0x138>
 800469c:	2380      	movs	r3, #128	; 0x80
 800469e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80046a0:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	212c      	movs	r1, #44	; 0x2c
 80046a6:	5c5b      	ldrb	r3, [r3, r1]
 80046a8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80046aa:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	5c9b      	ldrb	r3, [r3, r2]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d115      	bne.n	80046e8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	7e9b      	ldrb	r3, [r3, #26]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d105      	bne.n	80046d0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	2280      	movs	r2, #128	; 0x80
 80046c8:	0252      	lsls	r2, r2, #9
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
 80046ce:	e00b      	b.n	80046e8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d4:	2220      	movs	r2, #32
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e0:	2201      	movs	r2, #1
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046f4:	23e0      	movs	r3, #224	; 0xe0
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80046fe:	4313      	orrs	r3, r2
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	4313      	orrs	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	4a65      	ldr	r2, [pc, #404]	; (80048a4 <HAL_ADC_Init+0x33c>)
 800470e:	4013      	ands	r3, r2
 8004710:	0019      	movs	r1, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	430a      	orrs	r2, r1
 800471a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	0f9b      	lsrs	r3, r3, #30
 8004722:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004728:	4313      	orrs	r3, r2
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	223c      	movs	r2, #60	; 0x3c
 8004734:	5c9b      	ldrb	r3, [r3, r2]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d111      	bne.n	800475e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	0f9b      	lsrs	r3, r3, #30
 8004740:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004746:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800474c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004752:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	2201      	movs	r2, #1
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	4a50      	ldr	r2, [pc, #320]	; (80048a8 <HAL_ADC_Init+0x340>)
 8004766:	4013      	ands	r3, r2
 8004768:	0019      	movs	r1, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	430a      	orrs	r2, r1
 8004772:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	23c0      	movs	r3, #192	; 0xc0
 800477a:	061b      	lsls	r3, r3, #24
 800477c:	429a      	cmp	r2, r3
 800477e:	d018      	beq.n	80047b2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004784:	2380      	movs	r3, #128	; 0x80
 8004786:	05db      	lsls	r3, r3, #23
 8004788:	429a      	cmp	r2, r3
 800478a:	d012      	beq.n	80047b2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004790:	2380      	movs	r3, #128	; 0x80
 8004792:	061b      	lsls	r3, r3, #24
 8004794:	429a      	cmp	r2, r3
 8004796:	d00c      	beq.n	80047b2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004798:	4b44      	ldr	r3, [pc, #272]	; (80048ac <HAL_ADC_Init+0x344>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a44      	ldr	r2, [pc, #272]	; (80048b0 <HAL_ADC_Init+0x348>)
 800479e:	4013      	ands	r3, r2
 80047a0:	0019      	movs	r1, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	23f0      	movs	r3, #240	; 0xf0
 80047a8:	039b      	lsls	r3, r3, #14
 80047aa:	401a      	ands	r2, r3
 80047ac:	4b3f      	ldr	r3, [pc, #252]	; (80048ac <HAL_ADC_Init+0x344>)
 80047ae:	430a      	orrs	r2, r1
 80047b0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ba:	001a      	movs	r2, r3
 80047bc:	2100      	movs	r1, #0
 80047be:	f7ff fdf6 	bl	80043ae <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	493a      	ldr	r1, [pc, #232]	; (80048b4 <HAL_ADC_Init+0x34c>)
 80047cc:	001a      	movs	r2, r3
 80047ce:	f7ff fdee 	bl	80043ae <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2110      	movs	r1, #16
 80047e6:	4249      	negs	r1, r1
 80047e8:	430a      	orrs	r2, r1
 80047ea:	629a      	str	r2, [r3, #40]	; 0x28
 80047ec:	e018      	b.n	8004820 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691a      	ldr	r2, [r3, #16]
 80047f2:	2380      	movs	r3, #128	; 0x80
 80047f4:	039b      	lsls	r3, r3, #14
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d112      	bne.n	8004820 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	3b01      	subs	r3, #1
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	221c      	movs	r2, #28
 800480a:	4013      	ands	r3, r2
 800480c:	2210      	movs	r2, #16
 800480e:	4252      	negs	r2, r2
 8004810:	409a      	lsls	r2, r3
 8004812:	0011      	movs	r1, r2
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2100      	movs	r1, #0
 8004826:	0018      	movs	r0, r3
 8004828:	f7ff fdde 	bl	80043e8 <LL_ADC_GetSamplingTimeCommonChannels>
 800482c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004832:	429a      	cmp	r2, r3
 8004834:	d10b      	bne.n	800484e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004840:	2203      	movs	r2, #3
 8004842:	4393      	bics	r3, r2
 8004844:	2201      	movs	r2, #1
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800484c:	e01c      	b.n	8004888 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004852:	2212      	movs	r2, #18
 8004854:	4393      	bics	r3, r2
 8004856:	2210      	movs	r2, #16
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004862:	2201      	movs	r2, #1
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800486a:	231f      	movs	r3, #31
 800486c:	18fb      	adds	r3, r7, r3
 800486e:	2201      	movs	r2, #1
 8004870:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004872:	e009      	b.n	8004888 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004878:	2210      	movs	r2, #16
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004880:	231f      	movs	r3, #31
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	2201      	movs	r2, #1
 8004886:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004888:	231f      	movs	r3, #31
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	781b      	ldrb	r3, [r3, #0]
}
 800488e:	0018      	movs	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	b008      	add	sp, #32
 8004894:	bd80      	pop	{r7, pc}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	20000000 	.word	0x20000000
 800489c:	00030d40 	.word	0x00030d40
 80048a0:	fffffefd 	.word	0xfffffefd
 80048a4:	fffe0201 	.word	0xfffe0201
 80048a8:	1ffffc02 	.word	0x1ffffc02
 80048ac:	40012708 	.word	0x40012708
 80048b0:	ffc3ffff 	.word	0xffc3ffff
 80048b4:	07ffff04 	.word	0x07ffff04

080048b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048c2:	2317      	movs	r3, #23
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2254      	movs	r2, #84	; 0x54
 80048d2:	5c9b      	ldrb	r3, [r3, r2]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_ADC_ConfigChannel+0x24>
 80048d8:	2302      	movs	r3, #2
 80048da:	e1c0      	b.n	8004c5e <HAL_ADC_ConfigChannel+0x3a6>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2254      	movs	r2, #84	; 0x54
 80048e0:	2101      	movs	r1, #1
 80048e2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	0018      	movs	r0, r3
 80048ea:	f7ff fe2c 	bl	8004546 <LL_ADC_REG_IsConversionOngoing>
 80048ee:	1e03      	subs	r3, r0, #0
 80048f0:	d000      	beq.n	80048f4 <HAL_ADC_ConfigChannel+0x3c>
 80048f2:	e1a3      	b.n	8004c3c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d100      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x46>
 80048fc:	e143      	b.n	8004b86 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	2380      	movs	r3, #128	; 0x80
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	429a      	cmp	r2, r3
 8004908:	d004      	beq.n	8004914 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800490e:	4ac1      	ldr	r2, [pc, #772]	; (8004c14 <HAL_ADC_ConfigChannel+0x35c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d108      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	0019      	movs	r1, r3
 800491e:	0010      	movs	r0, r2
 8004920:	f7ff fd99 	bl	8004456 <LL_ADC_REG_SetSequencerChAdd>
 8004924:	e0c9      	b.n	8004aba <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	211f      	movs	r1, #31
 8004930:	400b      	ands	r3, r1
 8004932:	210f      	movs	r1, #15
 8004934:	4099      	lsls	r1, r3
 8004936:	000b      	movs	r3, r1
 8004938:	43db      	mvns	r3, r3
 800493a:	4013      	ands	r3, r2
 800493c:	0019      	movs	r1, r3
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	035b      	lsls	r3, r3, #13
 8004944:	0b5b      	lsrs	r3, r3, #13
 8004946:	d105      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x9c>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	0e9b      	lsrs	r3, r3, #26
 800494e:	221f      	movs	r2, #31
 8004950:	4013      	ands	r3, r2
 8004952:	e098      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2201      	movs	r2, #1
 800495a:	4013      	ands	r3, r2
 800495c:	d000      	beq.n	8004960 <HAL_ADC_ConfigChannel+0xa8>
 800495e:	e091      	b.n	8004a84 <HAL_ADC_ConfigChannel+0x1cc>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2202      	movs	r2, #2
 8004966:	4013      	ands	r3, r2
 8004968:	d000      	beq.n	800496c <HAL_ADC_ConfigChannel+0xb4>
 800496a:	e089      	b.n	8004a80 <HAL_ADC_ConfigChannel+0x1c8>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2204      	movs	r2, #4
 8004972:	4013      	ands	r3, r2
 8004974:	d000      	beq.n	8004978 <HAL_ADC_ConfigChannel+0xc0>
 8004976:	e081      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x1c4>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2208      	movs	r2, #8
 800497e:	4013      	ands	r3, r2
 8004980:	d000      	beq.n	8004984 <HAL_ADC_ConfigChannel+0xcc>
 8004982:	e079      	b.n	8004a78 <HAL_ADC_ConfigChannel+0x1c0>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2210      	movs	r2, #16
 800498a:	4013      	ands	r3, r2
 800498c:	d000      	beq.n	8004990 <HAL_ADC_ConfigChannel+0xd8>
 800498e:	e071      	b.n	8004a74 <HAL_ADC_ConfigChannel+0x1bc>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2220      	movs	r2, #32
 8004996:	4013      	ands	r3, r2
 8004998:	d000      	beq.n	800499c <HAL_ADC_ConfigChannel+0xe4>
 800499a:	e069      	b.n	8004a70 <HAL_ADC_ConfigChannel+0x1b8>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2240      	movs	r2, #64	; 0x40
 80049a2:	4013      	ands	r3, r2
 80049a4:	d000      	beq.n	80049a8 <HAL_ADC_ConfigChannel+0xf0>
 80049a6:	e061      	b.n	8004a6c <HAL_ADC_ConfigChannel+0x1b4>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2280      	movs	r2, #128	; 0x80
 80049ae:	4013      	ands	r3, r2
 80049b0:	d000      	beq.n	80049b4 <HAL_ADC_ConfigChannel+0xfc>
 80049b2:	e059      	b.n	8004a68 <HAL_ADC_ConfigChannel+0x1b0>
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	4013      	ands	r3, r2
 80049be:	d151      	bne.n	8004a64 <HAL_ADC_ConfigChannel+0x1ac>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	2380      	movs	r3, #128	; 0x80
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4013      	ands	r3, r2
 80049ca:	d149      	bne.n	8004a60 <HAL_ADC_ConfigChannel+0x1a8>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4013      	ands	r3, r2
 80049d6:	d141      	bne.n	8004a5c <HAL_ADC_ConfigChannel+0x1a4>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	2380      	movs	r3, #128	; 0x80
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	4013      	ands	r3, r2
 80049e2:	d139      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x1a0>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	2380      	movs	r3, #128	; 0x80
 80049ea:	015b      	lsls	r3, r3, #5
 80049ec:	4013      	ands	r3, r2
 80049ee:	d131      	bne.n	8004a54 <HAL_ADC_ConfigChannel+0x19c>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	2380      	movs	r3, #128	; 0x80
 80049f6:	019b      	lsls	r3, r3, #6
 80049f8:	4013      	ands	r3, r2
 80049fa:	d129      	bne.n	8004a50 <HAL_ADC_ConfigChannel+0x198>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	2380      	movs	r3, #128	; 0x80
 8004a02:	01db      	lsls	r3, r3, #7
 8004a04:	4013      	ands	r3, r2
 8004a06:	d121      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x194>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	4013      	ands	r3, r2
 8004a12:	d119      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0x190>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	2380      	movs	r3, #128	; 0x80
 8004a1a:	025b      	lsls	r3, r3, #9
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d111      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x18c>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	029b      	lsls	r3, r3, #10
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d109      	bne.n	8004a40 <HAL_ADC_ConfigChannel+0x188>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	2380      	movs	r3, #128	; 0x80
 8004a32:	02db      	lsls	r3, r3, #11
 8004a34:	4013      	ands	r3, r2
 8004a36:	d001      	beq.n	8004a3c <HAL_ADC_ConfigChannel+0x184>
 8004a38:	2312      	movs	r3, #18
 8004a3a:	e024      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	e022      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a40:	2311      	movs	r3, #17
 8004a42:	e020      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a44:	2310      	movs	r3, #16
 8004a46:	e01e      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a48:	230f      	movs	r3, #15
 8004a4a:	e01c      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a4c:	230e      	movs	r3, #14
 8004a4e:	e01a      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a50:	230d      	movs	r3, #13
 8004a52:	e018      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a54:	230c      	movs	r3, #12
 8004a56:	e016      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a58:	230b      	movs	r3, #11
 8004a5a:	e014      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a5c:	230a      	movs	r3, #10
 8004a5e:	e012      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a60:	2309      	movs	r3, #9
 8004a62:	e010      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a64:	2308      	movs	r3, #8
 8004a66:	e00e      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a68:	2307      	movs	r3, #7
 8004a6a:	e00c      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a6c:	2306      	movs	r3, #6
 8004a6e:	e00a      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a70:	2305      	movs	r3, #5
 8004a72:	e008      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a74:	2304      	movs	r3, #4
 8004a76:	e006      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e004      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e002      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x1ce>
 8004a84:	2300      	movs	r3, #0
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	6852      	ldr	r2, [r2, #4]
 8004a8a:	201f      	movs	r0, #31
 8004a8c:	4002      	ands	r2, r0
 8004a8e:	4093      	lsls	r3, r2
 8004a90:	000a      	movs	r2, r1
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	089b      	lsrs	r3, r3, #2
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d808      	bhi.n	8004aba <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	6859      	ldr	r1, [r3, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	001a      	movs	r2, r3
 8004ab6:	f7ff fcae 	bl	8004416 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	001a      	movs	r2, r3
 8004ac8:	f7ff fce8 	bl	800449c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	db00      	blt.n	8004ad6 <HAL_ADC_ConfigChannel+0x21e>
 8004ad4:	e0bc      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ad6:	4b50      	ldr	r3, [pc, #320]	; (8004c18 <HAL_ADC_ConfigChannel+0x360>)
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f7ff fc5b 	bl	8004394 <LL_ADC_GetCommonPathInternalCh>
 8004ade:	0003      	movs	r3, r0
 8004ae0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a4d      	ldr	r2, [pc, #308]	; (8004c1c <HAL_ADC_ConfigChannel+0x364>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d122      	bne.n	8004b32 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	2380      	movs	r3, #128	; 0x80
 8004af0:	041b      	lsls	r3, r3, #16
 8004af2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004af4:	d11d      	bne.n	8004b32 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2280      	movs	r2, #128	; 0x80
 8004afa:	0412      	lsls	r2, r2, #16
 8004afc:	4313      	orrs	r3, r2
 8004afe:	4a46      	ldr	r2, [pc, #280]	; (8004c18 <HAL_ADC_ConfigChannel+0x360>)
 8004b00:	0019      	movs	r1, r3
 8004b02:	0010      	movs	r0, r2
 8004b04:	f7ff fc32 	bl	800436c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b08:	4b45      	ldr	r3, [pc, #276]	; (8004c20 <HAL_ADC_ConfigChannel+0x368>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4945      	ldr	r1, [pc, #276]	; (8004c24 <HAL_ADC_ConfigChannel+0x36c>)
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f7fb fb04 	bl	800011c <__udivsi3>
 8004b14:	0003      	movs	r3, r0
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	0013      	movs	r3, r2
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	189b      	adds	r3, r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b22:	e002      	b.n	8004b2a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1f9      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004b30:	e08e      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a3c      	ldr	r2, [pc, #240]	; (8004c28 <HAL_ADC_ConfigChannel+0x370>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d10e      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	2380      	movs	r3, #128	; 0x80
 8004b40:	045b      	lsls	r3, r3, #17
 8004b42:	4013      	ands	r3, r2
 8004b44:	d109      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	2280      	movs	r2, #128	; 0x80
 8004b4a:	0452      	lsls	r2, r2, #17
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	4a32      	ldr	r2, [pc, #200]	; (8004c18 <HAL_ADC_ConfigChannel+0x360>)
 8004b50:	0019      	movs	r1, r3
 8004b52:	0010      	movs	r0, r2
 8004b54:	f7ff fc0a 	bl	800436c <LL_ADC_SetCommonPathInternalCh>
 8004b58:	e07a      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a33      	ldr	r2, [pc, #204]	; (8004c2c <HAL_ADC_ConfigChannel+0x374>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d000      	beq.n	8004b66 <HAL_ADC_ConfigChannel+0x2ae>
 8004b64:	e074      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	2380      	movs	r3, #128	; 0x80
 8004b6a:	03db      	lsls	r3, r3, #15
 8004b6c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004b6e:	d000      	beq.n	8004b72 <HAL_ADC_ConfigChannel+0x2ba>
 8004b70:	e06e      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2280      	movs	r2, #128	; 0x80
 8004b76:	03d2      	lsls	r2, r2, #15
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	4a27      	ldr	r2, [pc, #156]	; (8004c18 <HAL_ADC_ConfigChannel+0x360>)
 8004b7c:	0019      	movs	r1, r3
 8004b7e:	0010      	movs	r0, r2
 8004b80:	f7ff fbf4 	bl	800436c <LL_ADC_SetCommonPathInternalCh>
 8004b84:	e064      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	061b      	lsls	r3, r3, #24
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d004      	beq.n	8004b9c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004b96:	4a1f      	ldr	r2, [pc, #124]	; (8004c14 <HAL_ADC_ConfigChannel+0x35c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d107      	bne.n	8004bac <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	0010      	movs	r0, r2
 8004ba8:	f7ff fc66 	bl	8004478 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	da4d      	bge.n	8004c50 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bb4:	4b18      	ldr	r3, [pc, #96]	; (8004c18 <HAL_ADC_ConfigChannel+0x360>)
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f7ff fbec 	bl	8004394 <LL_ADC_GetCommonPathInternalCh>
 8004bbc:	0003      	movs	r3, r0
 8004bbe:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <HAL_ADC_ConfigChannel+0x364>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d108      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	4a18      	ldr	r2, [pc, #96]	; (8004c30 <HAL_ADC_ConfigChannel+0x378>)
 8004bce:	4013      	ands	r3, r2
 8004bd0:	4a11      	ldr	r2, [pc, #68]	; (8004c18 <HAL_ADC_ConfigChannel+0x360>)
 8004bd2:	0019      	movs	r1, r3
 8004bd4:	0010      	movs	r0, r2
 8004bd6:	f7ff fbc9 	bl	800436c <LL_ADC_SetCommonPathInternalCh>
 8004bda:	e039      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a11      	ldr	r2, [pc, #68]	; (8004c28 <HAL_ADC_ConfigChannel+0x370>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d108      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	4a12      	ldr	r2, [pc, #72]	; (8004c34 <HAL_ADC_ConfigChannel+0x37c>)
 8004bea:	4013      	ands	r3, r2
 8004bec:	4a0a      	ldr	r2, [pc, #40]	; (8004c18 <HAL_ADC_ConfigChannel+0x360>)
 8004bee:	0019      	movs	r1, r3
 8004bf0:	0010      	movs	r0, r2
 8004bf2:	f7ff fbbb 	bl	800436c <LL_ADC_SetCommonPathInternalCh>
 8004bf6:	e02b      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a0b      	ldr	r2, [pc, #44]	; (8004c2c <HAL_ADC_ConfigChannel+0x374>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d126      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4a0c      	ldr	r2, [pc, #48]	; (8004c38 <HAL_ADC_ConfigChannel+0x380>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	4a03      	ldr	r2, [pc, #12]	; (8004c18 <HAL_ADC_ConfigChannel+0x360>)
 8004c0a:	0019      	movs	r1, r3
 8004c0c:	0010      	movs	r0, r2
 8004c0e:	f7ff fbad 	bl	800436c <LL_ADC_SetCommonPathInternalCh>
 8004c12:	e01d      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x398>
 8004c14:	80000004 	.word	0x80000004
 8004c18:	40012708 	.word	0x40012708
 8004c1c:	b0001000 	.word	0xb0001000
 8004c20:	20000000 	.word	0x20000000
 8004c24:	00030d40 	.word	0x00030d40
 8004c28:	b8004000 	.word	0xb8004000
 8004c2c:	b4002000 	.word	0xb4002000
 8004c30:	ff7fffff 	.word	0xff7fffff
 8004c34:	feffffff 	.word	0xfeffffff
 8004c38:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c40:	2220      	movs	r2, #32
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004c48:	2317      	movs	r3, #23
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2254      	movs	r2, #84	; 0x54
 8004c54:	2100      	movs	r1, #0
 8004c56:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004c58:	2317      	movs	r3, #23
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	781b      	ldrb	r3, [r3, #0]
}
 8004c5e:	0018      	movs	r0, r3
 8004c60:	46bd      	mov	sp, r7
 8004c62:	b006      	add	sp, #24
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	46c0      	nop			; (mov r8, r8)

08004c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	0002      	movs	r2, r0
 8004c70:	6039      	str	r1, [r7, #0]
 8004c72:	1dfb      	adds	r3, r7, #7
 8004c74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c76:	1dfb      	adds	r3, r7, #7
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c7c:	d828      	bhi.n	8004cd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c7e:	4a2f      	ldr	r2, [pc, #188]	; (8004d3c <__NVIC_SetPriority+0xd4>)
 8004c80:	1dfb      	adds	r3, r7, #7
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	b25b      	sxtb	r3, r3
 8004c86:	089b      	lsrs	r3, r3, #2
 8004c88:	33c0      	adds	r3, #192	; 0xc0
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	589b      	ldr	r3, [r3, r2]
 8004c8e:	1dfa      	adds	r2, r7, #7
 8004c90:	7812      	ldrb	r2, [r2, #0]
 8004c92:	0011      	movs	r1, r2
 8004c94:	2203      	movs	r2, #3
 8004c96:	400a      	ands	r2, r1
 8004c98:	00d2      	lsls	r2, r2, #3
 8004c9a:	21ff      	movs	r1, #255	; 0xff
 8004c9c:	4091      	lsls	r1, r2
 8004c9e:	000a      	movs	r2, r1
 8004ca0:	43d2      	mvns	r2, r2
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	019b      	lsls	r3, r3, #6
 8004caa:	22ff      	movs	r2, #255	; 0xff
 8004cac:	401a      	ands	r2, r3
 8004cae:	1dfb      	adds	r3, r7, #7
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	4003      	ands	r3, r0
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cbc:	481f      	ldr	r0, [pc, #124]	; (8004d3c <__NVIC_SetPriority+0xd4>)
 8004cbe:	1dfb      	adds	r3, r7, #7
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	b25b      	sxtb	r3, r3
 8004cc4:	089b      	lsrs	r3, r3, #2
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	33c0      	adds	r3, #192	; 0xc0
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004cce:	e031      	b.n	8004d34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cd0:	4a1b      	ldr	r2, [pc, #108]	; (8004d40 <__NVIC_SetPriority+0xd8>)
 8004cd2:	1dfb      	adds	r3, r7, #7
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	0019      	movs	r1, r3
 8004cd8:	230f      	movs	r3, #15
 8004cda:	400b      	ands	r3, r1
 8004cdc:	3b08      	subs	r3, #8
 8004cde:	089b      	lsrs	r3, r3, #2
 8004ce0:	3306      	adds	r3, #6
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	18d3      	adds	r3, r2, r3
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	1dfa      	adds	r2, r7, #7
 8004cec:	7812      	ldrb	r2, [r2, #0]
 8004cee:	0011      	movs	r1, r2
 8004cf0:	2203      	movs	r2, #3
 8004cf2:	400a      	ands	r2, r1
 8004cf4:	00d2      	lsls	r2, r2, #3
 8004cf6:	21ff      	movs	r1, #255	; 0xff
 8004cf8:	4091      	lsls	r1, r2
 8004cfa:	000a      	movs	r2, r1
 8004cfc:	43d2      	mvns	r2, r2
 8004cfe:	401a      	ands	r2, r3
 8004d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	019b      	lsls	r3, r3, #6
 8004d06:	22ff      	movs	r2, #255	; 0xff
 8004d08:	401a      	ands	r2, r3
 8004d0a:	1dfb      	adds	r3, r7, #7
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	0018      	movs	r0, r3
 8004d10:	2303      	movs	r3, #3
 8004d12:	4003      	ands	r3, r0
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d18:	4809      	ldr	r0, [pc, #36]	; (8004d40 <__NVIC_SetPriority+0xd8>)
 8004d1a:	1dfb      	adds	r3, r7, #7
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	001c      	movs	r4, r3
 8004d20:	230f      	movs	r3, #15
 8004d22:	4023      	ands	r3, r4
 8004d24:	3b08      	subs	r3, #8
 8004d26:	089b      	lsrs	r3, r3, #2
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	3306      	adds	r3, #6
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	18c3      	adds	r3, r0, r3
 8004d30:	3304      	adds	r3, #4
 8004d32:	601a      	str	r2, [r3, #0]
}
 8004d34:	46c0      	nop			; (mov r8, r8)
 8004d36:	46bd      	mov	sp, r7
 8004d38:	b003      	add	sp, #12
 8004d3a:	bd90      	pop	{r4, r7, pc}
 8004d3c:	e000e100 	.word	0xe000e100
 8004d40:	e000ed00 	.word	0xe000ed00

08004d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	1e5a      	subs	r2, r3, #1
 8004d50:	2380      	movs	r3, #128	; 0x80
 8004d52:	045b      	lsls	r3, r3, #17
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d301      	bcc.n	8004d5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e010      	b.n	8004d7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <SysTick_Config+0x44>)
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	3a01      	subs	r2, #1
 8004d62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d64:	2301      	movs	r3, #1
 8004d66:	425b      	negs	r3, r3
 8004d68:	2103      	movs	r1, #3
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f7ff ff7c 	bl	8004c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d70:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <SysTick_Config+0x44>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d76:	4b04      	ldr	r3, [pc, #16]	; (8004d88 <SysTick_Config+0x44>)
 8004d78:	2207      	movs	r2, #7
 8004d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	0018      	movs	r0, r3
 8004d80:	46bd      	mov	sp, r7
 8004d82:	b002      	add	sp, #8
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	46c0      	nop			; (mov r8, r8)
 8004d88:	e000e010 	.word	0xe000e010

08004d8c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	210f      	movs	r1, #15
 8004d98:	187b      	adds	r3, r7, r1
 8004d9a:	1c02      	adds	r2, r0, #0
 8004d9c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	187b      	adds	r3, r7, r1
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	b25b      	sxtb	r3, r3
 8004da6:	0011      	movs	r1, r2
 8004da8:	0018      	movs	r0, r3
 8004daa:	f7ff ff5d 	bl	8004c68 <__NVIC_SetPriority>
}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b004      	add	sp, #16
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f7ff ffbf 	bl	8004d44 <SysTick_Config>
 8004dc6:	0003      	movs	r3, r0
}
 8004dc8:	0018      	movs	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b002      	add	sp, #8
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dde:	e147      	b.n	8005070 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2101      	movs	r1, #1
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4091      	lsls	r1, r2
 8004dea:	000a      	movs	r2, r1
 8004dec:	4013      	ands	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d100      	bne.n	8004df8 <HAL_GPIO_Init+0x28>
 8004df6:	e138      	b.n	800506a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2203      	movs	r2, #3
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d005      	beq.n	8004e10 <HAL_GPIO_Init+0x40>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2203      	movs	r2, #3
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d130      	bne.n	8004e72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	409a      	lsls	r2, r3
 8004e1e:	0013      	movs	r3, r2
 8004e20:	43da      	mvns	r2, r3
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4013      	ands	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	409a      	lsls	r2, r3
 8004e32:	0013      	movs	r3, r2
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e46:	2201      	movs	r2, #1
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	409a      	lsls	r2, r3
 8004e4c:	0013      	movs	r3, r2
 8004e4e:	43da      	mvns	r2, r3
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	4013      	ands	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	091b      	lsrs	r3, r3, #4
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	401a      	ands	r2, r3
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	409a      	lsls	r2, r3
 8004e64:	0013      	movs	r3, r2
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2203      	movs	r2, #3
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d017      	beq.n	8004eae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	2203      	movs	r2, #3
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	0013      	movs	r3, r2
 8004e8e:	43da      	mvns	r2, r3
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	4013      	ands	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	0013      	movs	r3, r2
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d123      	bne.n	8004f02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	08da      	lsrs	r2, r3, #3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3208      	adds	r2, #8
 8004ec2:	0092      	lsls	r2, r2, #2
 8004ec4:	58d3      	ldr	r3, [r2, r3]
 8004ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2207      	movs	r2, #7
 8004ecc:	4013      	ands	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	220f      	movs	r2, #15
 8004ed2:	409a      	lsls	r2, r3
 8004ed4:	0013      	movs	r3, r2
 8004ed6:	43da      	mvns	r2, r3
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4013      	ands	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	691a      	ldr	r2, [r3, #16]
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2107      	movs	r1, #7
 8004ee6:	400b      	ands	r3, r1
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	409a      	lsls	r2, r3
 8004eec:	0013      	movs	r3, r2
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	08da      	lsrs	r2, r3, #3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3208      	adds	r2, #8
 8004efc:	0092      	lsls	r2, r2, #2
 8004efe:	6939      	ldr	r1, [r7, #16]
 8004f00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	409a      	lsls	r2, r3
 8004f10:	0013      	movs	r3, r2
 8004f12:	43da      	mvns	r2, r3
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	4013      	ands	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2203      	movs	r2, #3
 8004f20:	401a      	ands	r2, r3
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	409a      	lsls	r2, r3
 8004f28:	0013      	movs	r3, r2
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	23c0      	movs	r3, #192	; 0xc0
 8004f3c:	029b      	lsls	r3, r3, #10
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d100      	bne.n	8004f44 <HAL_GPIO_Init+0x174>
 8004f42:	e092      	b.n	800506a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004f44:	4a50      	ldr	r2, [pc, #320]	; (8005088 <HAL_GPIO_Init+0x2b8>)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	089b      	lsrs	r3, r3, #2
 8004f4a:	3318      	adds	r3, #24
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	589b      	ldr	r3, [r3, r2]
 8004f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2203      	movs	r2, #3
 8004f56:	4013      	ands	r3, r2
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	220f      	movs	r2, #15
 8004f5c:	409a      	lsls	r2, r3
 8004f5e:	0013      	movs	r3, r2
 8004f60:	43da      	mvns	r2, r3
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	4013      	ands	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	23a0      	movs	r3, #160	; 0xa0
 8004f6c:	05db      	lsls	r3, r3, #23
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d013      	beq.n	8004f9a <HAL_GPIO_Init+0x1ca>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a45      	ldr	r2, [pc, #276]	; (800508c <HAL_GPIO_Init+0x2bc>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00d      	beq.n	8004f96 <HAL_GPIO_Init+0x1c6>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a44      	ldr	r2, [pc, #272]	; (8005090 <HAL_GPIO_Init+0x2c0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d007      	beq.n	8004f92 <HAL_GPIO_Init+0x1c2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a43      	ldr	r2, [pc, #268]	; (8005094 <HAL_GPIO_Init+0x2c4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d101      	bne.n	8004f8e <HAL_GPIO_Init+0x1be>
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e006      	b.n	8004f9c <HAL_GPIO_Init+0x1cc>
 8004f8e:	2305      	movs	r3, #5
 8004f90:	e004      	b.n	8004f9c <HAL_GPIO_Init+0x1cc>
 8004f92:	2302      	movs	r3, #2
 8004f94:	e002      	b.n	8004f9c <HAL_GPIO_Init+0x1cc>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <HAL_GPIO_Init+0x1cc>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	2103      	movs	r1, #3
 8004fa0:	400a      	ands	r2, r1
 8004fa2:	00d2      	lsls	r2, r2, #3
 8004fa4:	4093      	lsls	r3, r2
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004fac:	4936      	ldr	r1, [pc, #216]	; (8005088 <HAL_GPIO_Init+0x2b8>)
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	089b      	lsrs	r3, r3, #2
 8004fb2:	3318      	adds	r3, #24
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fba:	4b33      	ldr	r3, [pc, #204]	; (8005088 <HAL_GPIO_Init+0x2b8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	43da      	mvns	r2, r3
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	2380      	movs	r3, #128	; 0x80
 8004fd0:	035b      	lsls	r3, r3, #13
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d003      	beq.n	8004fde <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004fde:	4b2a      	ldr	r3, [pc, #168]	; (8005088 <HAL_GPIO_Init+0x2b8>)
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004fe4:	4b28      	ldr	r3, [pc, #160]	; (8005088 <HAL_GPIO_Init+0x2b8>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	43da      	mvns	r2, r3
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	2380      	movs	r3, #128	; 0x80
 8004ffa:	039b      	lsls	r3, r3, #14
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d003      	beq.n	8005008 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005008:	4b1f      	ldr	r3, [pc, #124]	; (8005088 <HAL_GPIO_Init+0x2b8>)
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800500e:	4a1e      	ldr	r2, [pc, #120]	; (8005088 <HAL_GPIO_Init+0x2b8>)
 8005010:	2384      	movs	r3, #132	; 0x84
 8005012:	58d3      	ldr	r3, [r2, r3]
 8005014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	43da      	mvns	r2, r3
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	4013      	ands	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	2380      	movs	r3, #128	; 0x80
 8005026:	029b      	lsls	r3, r3, #10
 8005028:	4013      	ands	r3, r2
 800502a:	d003      	beq.n	8005034 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005034:	4914      	ldr	r1, [pc, #80]	; (8005088 <HAL_GPIO_Init+0x2b8>)
 8005036:	2284      	movs	r2, #132	; 0x84
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800503c:	4a12      	ldr	r2, [pc, #72]	; (8005088 <HAL_GPIO_Init+0x2b8>)
 800503e:	2380      	movs	r3, #128	; 0x80
 8005040:	58d3      	ldr	r3, [r2, r3]
 8005042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	43da      	mvns	r2, r3
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4013      	ands	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	2380      	movs	r3, #128	; 0x80
 8005054:	025b      	lsls	r3, r3, #9
 8005056:	4013      	ands	r3, r2
 8005058:	d003      	beq.n	8005062 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005062:	4909      	ldr	r1, [pc, #36]	; (8005088 <HAL_GPIO_Init+0x2b8>)
 8005064:	2280      	movs	r2, #128	; 0x80
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	3301      	adds	r3, #1
 800506e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	40da      	lsrs	r2, r3
 8005078:	1e13      	subs	r3, r2, #0
 800507a:	d000      	beq.n	800507e <HAL_GPIO_Init+0x2ae>
 800507c:	e6b0      	b.n	8004de0 <HAL_GPIO_Init+0x10>
  }
}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	46c0      	nop			; (mov r8, r8)
 8005082:	46bd      	mov	sp, r7
 8005084:	b006      	add	sp, #24
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40021800 	.word	0x40021800
 800508c:	50000400 	.word	0x50000400
 8005090:	50000800 	.word	0x50000800
 8005094:	50000c00 	.word	0x50000c00

08005098 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	000a      	movs	r2, r1
 80050a2:	1cbb      	adds	r3, r7, #2
 80050a4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	1cba      	adds	r2, r7, #2
 80050ac:	8812      	ldrh	r2, [r2, #0]
 80050ae:	4013      	ands	r3, r2
 80050b0:	d004      	beq.n	80050bc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80050b2:	230f      	movs	r3, #15
 80050b4:	18fb      	adds	r3, r7, r3
 80050b6:	2201      	movs	r2, #1
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	e003      	b.n	80050c4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050bc:	230f      	movs	r3, #15
 80050be:	18fb      	adds	r3, r7, r3
 80050c0:	2200      	movs	r2, #0
 80050c2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80050c4:	230f      	movs	r3, #15
 80050c6:	18fb      	adds	r3, r7, r3
 80050c8:	781b      	ldrb	r3, [r3, #0]
}
 80050ca:	0018      	movs	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	b004      	add	sp, #16
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80050dc:	4b19      	ldr	r3, [pc, #100]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a19      	ldr	r2, [pc, #100]	; (8005148 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	0019      	movs	r1, r3
 80050e6:	4b17      	ldr	r3, [pc, #92]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	2380      	movs	r3, #128	; 0x80
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d11f      	bne.n	8005138 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80050f8:	4b14      	ldr	r3, [pc, #80]	; (800514c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	0013      	movs	r3, r2
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	189b      	adds	r3, r3, r2
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	4912      	ldr	r1, [pc, #72]	; (8005150 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005106:	0018      	movs	r0, r3
 8005108:	f7fb f808 	bl	800011c <__udivsi3>
 800510c:	0003      	movs	r3, r0
 800510e:	3301      	adds	r3, #1
 8005110:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005112:	e008      	b.n	8005126 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3b01      	subs	r3, #1
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	e001      	b.n	8005126 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e009      	b.n	800513a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005126:	4b07      	ldr	r3, [pc, #28]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005128:	695a      	ldr	r2, [r3, #20]
 800512a:	2380      	movs	r3, #128	; 0x80
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	401a      	ands	r2, r3
 8005130:	2380      	movs	r3, #128	; 0x80
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	429a      	cmp	r2, r3
 8005136:	d0ed      	beq.n	8005114 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	0018      	movs	r0, r3
 800513c:	46bd      	mov	sp, r7
 800513e:	b004      	add	sp, #16
 8005140:	bd80      	pop	{r7, pc}
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	40007000 	.word	0x40007000
 8005148:	fffff9ff 	.word	0xfffff9ff
 800514c:	20000000 	.word	0x20000000
 8005150:	000f4240 	.word	0x000f4240

08005154 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005158:	4b03      	ldr	r3, [pc, #12]	; (8005168 <LL_RCC_GetAPB1Prescaler+0x14>)
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	23e0      	movs	r3, #224	; 0xe0
 800515e:	01db      	lsls	r3, r3, #7
 8005160:	4013      	ands	r3, r2
}
 8005162:	0018      	movs	r0, r3
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	40021000 	.word	0x40021000

0800516c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e2f3      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2201      	movs	r2, #1
 8005184:	4013      	ands	r3, r2
 8005186:	d100      	bne.n	800518a <HAL_RCC_OscConfig+0x1e>
 8005188:	e07c      	b.n	8005284 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800518a:	4bc3      	ldr	r3, [pc, #780]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2238      	movs	r2, #56	; 0x38
 8005190:	4013      	ands	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005194:	4bc0      	ldr	r3, [pc, #768]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	2203      	movs	r2, #3
 800519a:	4013      	ands	r3, r2
 800519c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d102      	bne.n	80051aa <HAL_RCC_OscConfig+0x3e>
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d002      	beq.n	80051b0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d10b      	bne.n	80051c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b0:	4bb9      	ldr	r3, [pc, #740]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	2380      	movs	r3, #128	; 0x80
 80051b6:	029b      	lsls	r3, r3, #10
 80051b8:	4013      	ands	r3, r2
 80051ba:	d062      	beq.n	8005282 <HAL_RCC_OscConfig+0x116>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d15e      	bne.n	8005282 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e2ce      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	2380      	movs	r3, #128	; 0x80
 80051ce:	025b      	lsls	r3, r3, #9
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d107      	bne.n	80051e4 <HAL_RCC_OscConfig+0x78>
 80051d4:	4bb0      	ldr	r3, [pc, #704]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	4baf      	ldr	r3, [pc, #700]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 80051da:	2180      	movs	r1, #128	; 0x80
 80051dc:	0249      	lsls	r1, r1, #9
 80051de:	430a      	orrs	r2, r1
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	e020      	b.n	8005226 <HAL_RCC_OscConfig+0xba>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	23a0      	movs	r3, #160	; 0xa0
 80051ea:	02db      	lsls	r3, r3, #11
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d10e      	bne.n	800520e <HAL_RCC_OscConfig+0xa2>
 80051f0:	4ba9      	ldr	r3, [pc, #676]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	4ba8      	ldr	r3, [pc, #672]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 80051f6:	2180      	movs	r1, #128	; 0x80
 80051f8:	02c9      	lsls	r1, r1, #11
 80051fa:	430a      	orrs	r2, r1
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	4ba6      	ldr	r3, [pc, #664]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4ba5      	ldr	r3, [pc, #660]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005204:	2180      	movs	r1, #128	; 0x80
 8005206:	0249      	lsls	r1, r1, #9
 8005208:	430a      	orrs	r2, r1
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	e00b      	b.n	8005226 <HAL_RCC_OscConfig+0xba>
 800520e:	4ba2      	ldr	r3, [pc, #648]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4ba1      	ldr	r3, [pc, #644]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005214:	49a1      	ldr	r1, [pc, #644]	; (800549c <HAL_RCC_OscConfig+0x330>)
 8005216:	400a      	ands	r2, r1
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	4b9f      	ldr	r3, [pc, #636]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	4b9e      	ldr	r3, [pc, #632]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005220:	499f      	ldr	r1, [pc, #636]	; (80054a0 <HAL_RCC_OscConfig+0x334>)
 8005222:	400a      	ands	r2, r1
 8005224:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d014      	beq.n	8005258 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522e:	f7ff f893 	bl	8004358 <HAL_GetTick>
 8005232:	0003      	movs	r3, r0
 8005234:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005238:	f7ff f88e 	bl	8004358 <HAL_GetTick>
 800523c:	0002      	movs	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b64      	cmp	r3, #100	; 0x64
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e28d      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800524a:	4b93      	ldr	r3, [pc, #588]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	2380      	movs	r3, #128	; 0x80
 8005250:	029b      	lsls	r3, r3, #10
 8005252:	4013      	ands	r3, r2
 8005254:	d0f0      	beq.n	8005238 <HAL_RCC_OscConfig+0xcc>
 8005256:	e015      	b.n	8005284 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005258:	f7ff f87e 	bl	8004358 <HAL_GetTick>
 800525c:	0003      	movs	r3, r0
 800525e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005260:	e008      	b.n	8005274 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005262:	f7ff f879 	bl	8004358 <HAL_GetTick>
 8005266:	0002      	movs	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b64      	cmp	r3, #100	; 0x64
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e278      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005274:	4b88      	ldr	r3, [pc, #544]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	2380      	movs	r3, #128	; 0x80
 800527a:	029b      	lsls	r3, r3, #10
 800527c:	4013      	ands	r3, r2
 800527e:	d1f0      	bne.n	8005262 <HAL_RCC_OscConfig+0xf6>
 8005280:	e000      	b.n	8005284 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005282:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2202      	movs	r2, #2
 800528a:	4013      	ands	r3, r2
 800528c:	d100      	bne.n	8005290 <HAL_RCC_OscConfig+0x124>
 800528e:	e099      	b.n	80053c4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005290:	4b81      	ldr	r3, [pc, #516]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	2238      	movs	r2, #56	; 0x38
 8005296:	4013      	ands	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800529a:	4b7f      	ldr	r3, [pc, #508]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	2203      	movs	r2, #3
 80052a0:	4013      	ands	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	2b10      	cmp	r3, #16
 80052a8:	d102      	bne.n	80052b0 <HAL_RCC_OscConfig+0x144>
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d002      	beq.n	80052b6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d135      	bne.n	8005322 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052b6:	4b78      	ldr	r3, [pc, #480]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	2380      	movs	r3, #128	; 0x80
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	4013      	ands	r3, r2
 80052c0:	d005      	beq.n	80052ce <HAL_RCC_OscConfig+0x162>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e24b      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ce:	4b72      	ldr	r3, [pc, #456]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	4a74      	ldr	r2, [pc, #464]	; (80054a4 <HAL_RCC_OscConfig+0x338>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	0019      	movs	r1, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	021a      	lsls	r2, r3, #8
 80052de:	4b6e      	ldr	r3, [pc, #440]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 80052e0:	430a      	orrs	r2, r1
 80052e2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d112      	bne.n	8005310 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80052ea:	4b6b      	ldr	r3, [pc, #428]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a6e      	ldr	r2, [pc, #440]	; (80054a8 <HAL_RCC_OscConfig+0x33c>)
 80052f0:	4013      	ands	r3, r2
 80052f2:	0019      	movs	r1, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	4b67      	ldr	r3, [pc, #412]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 80052fa:	430a      	orrs	r2, r1
 80052fc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80052fe:	4b66      	ldr	r3, [pc, #408]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	0adb      	lsrs	r3, r3, #11
 8005304:	2207      	movs	r2, #7
 8005306:	4013      	ands	r3, r2
 8005308:	4a68      	ldr	r2, [pc, #416]	; (80054ac <HAL_RCC_OscConfig+0x340>)
 800530a:	40da      	lsrs	r2, r3
 800530c:	4b68      	ldr	r3, [pc, #416]	; (80054b0 <HAL_RCC_OscConfig+0x344>)
 800530e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005310:	4b68      	ldr	r3, [pc, #416]	; (80054b4 <HAL_RCC_OscConfig+0x348>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	0018      	movs	r0, r3
 8005316:	f7fe ffc3 	bl	80042a0 <HAL_InitTick>
 800531a:	1e03      	subs	r3, r0, #0
 800531c:	d051      	beq.n	80053c2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e221      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d030      	beq.n	800538c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800532a:	4b5b      	ldr	r3, [pc, #364]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a5e      	ldr	r2, [pc, #376]	; (80054a8 <HAL_RCC_OscConfig+0x33c>)
 8005330:	4013      	ands	r3, r2
 8005332:	0019      	movs	r1, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	4b57      	ldr	r3, [pc, #348]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 800533a:	430a      	orrs	r2, r1
 800533c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800533e:	4b56      	ldr	r3, [pc, #344]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4b55      	ldr	r3, [pc, #340]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005344:	2180      	movs	r1, #128	; 0x80
 8005346:	0049      	lsls	r1, r1, #1
 8005348:	430a      	orrs	r2, r1
 800534a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534c:	f7ff f804 	bl	8004358 <HAL_GetTick>
 8005350:	0003      	movs	r3, r0
 8005352:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005356:	f7fe ffff 	bl	8004358 <HAL_GetTick>
 800535a:	0002      	movs	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e1fe      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005368:	4b4b      	ldr	r3, [pc, #300]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	2380      	movs	r3, #128	; 0x80
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	4013      	ands	r3, r2
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005374:	4b48      	ldr	r3, [pc, #288]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	4a4a      	ldr	r2, [pc, #296]	; (80054a4 <HAL_RCC_OscConfig+0x338>)
 800537a:	4013      	ands	r3, r2
 800537c:	0019      	movs	r1, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	021a      	lsls	r2, r3, #8
 8005384:	4b44      	ldr	r3, [pc, #272]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
 800538a:	e01b      	b.n	80053c4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800538c:	4b42      	ldr	r3, [pc, #264]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4b41      	ldr	r3, [pc, #260]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005392:	4949      	ldr	r1, [pc, #292]	; (80054b8 <HAL_RCC_OscConfig+0x34c>)
 8005394:	400a      	ands	r2, r1
 8005396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7fe ffde 	bl	8004358 <HAL_GetTick>
 800539c:	0003      	movs	r3, r0
 800539e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053a2:	f7fe ffd9 	bl	8004358 <HAL_GetTick>
 80053a6:	0002      	movs	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e1d8      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053b4:	4b38      	ldr	r3, [pc, #224]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	2380      	movs	r3, #128	; 0x80
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	4013      	ands	r3, r2
 80053be:	d1f0      	bne.n	80053a2 <HAL_RCC_OscConfig+0x236>
 80053c0:	e000      	b.n	80053c4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2208      	movs	r2, #8
 80053ca:	4013      	ands	r3, r2
 80053cc:	d047      	beq.n	800545e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80053ce:	4b32      	ldr	r3, [pc, #200]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	2238      	movs	r2, #56	; 0x38
 80053d4:	4013      	ands	r3, r2
 80053d6:	2b18      	cmp	r3, #24
 80053d8:	d10a      	bne.n	80053f0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80053da:	4b2f      	ldr	r3, [pc, #188]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 80053dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053de:	2202      	movs	r2, #2
 80053e0:	4013      	ands	r3, r2
 80053e2:	d03c      	beq.n	800545e <HAL_RCC_OscConfig+0x2f2>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d138      	bne.n	800545e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e1ba      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d019      	beq.n	800542c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80053f8:	4b27      	ldr	r3, [pc, #156]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 80053fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053fc:	4b26      	ldr	r3, [pc, #152]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 80053fe:	2101      	movs	r1, #1
 8005400:	430a      	orrs	r2, r1
 8005402:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005404:	f7fe ffa8 	bl	8004358 <HAL_GetTick>
 8005408:	0003      	movs	r3, r0
 800540a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800540c:	e008      	b.n	8005420 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800540e:	f7fe ffa3 	bl	8004358 <HAL_GetTick>
 8005412:	0002      	movs	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e1a2      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005420:	4b1d      	ldr	r3, [pc, #116]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005424:	2202      	movs	r2, #2
 8005426:	4013      	ands	r3, r2
 8005428:	d0f1      	beq.n	800540e <HAL_RCC_OscConfig+0x2a2>
 800542a:	e018      	b.n	800545e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800542c:	4b1a      	ldr	r3, [pc, #104]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 800542e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005430:	4b19      	ldr	r3, [pc, #100]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005432:	2101      	movs	r1, #1
 8005434:	438a      	bics	r2, r1
 8005436:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005438:	f7fe ff8e 	bl	8004358 <HAL_GetTick>
 800543c:	0003      	movs	r3, r0
 800543e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005442:	f7fe ff89 	bl	8004358 <HAL_GetTick>
 8005446:	0002      	movs	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e188      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005454:	4b10      	ldr	r3, [pc, #64]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005458:	2202      	movs	r2, #2
 800545a:	4013      	ands	r3, r2
 800545c:	d1f1      	bne.n	8005442 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2204      	movs	r2, #4
 8005464:	4013      	ands	r3, r2
 8005466:	d100      	bne.n	800546a <HAL_RCC_OscConfig+0x2fe>
 8005468:	e0c6      	b.n	80055f8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800546a:	231f      	movs	r3, #31
 800546c:	18fb      	adds	r3, r7, r3
 800546e:	2200      	movs	r2, #0
 8005470:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005472:	4b09      	ldr	r3, [pc, #36]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2238      	movs	r2, #56	; 0x38
 8005478:	4013      	ands	r3, r2
 800547a:	2b20      	cmp	r3, #32
 800547c:	d11e      	bne.n	80054bc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800547e:	4b06      	ldr	r3, [pc, #24]	; (8005498 <HAL_RCC_OscConfig+0x32c>)
 8005480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005482:	2202      	movs	r2, #2
 8005484:	4013      	ands	r3, r2
 8005486:	d100      	bne.n	800548a <HAL_RCC_OscConfig+0x31e>
 8005488:	e0b6      	b.n	80055f8 <HAL_RCC_OscConfig+0x48c>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d000      	beq.n	8005494 <HAL_RCC_OscConfig+0x328>
 8005492:	e0b1      	b.n	80055f8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e166      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
 8005498:	40021000 	.word	0x40021000
 800549c:	fffeffff 	.word	0xfffeffff
 80054a0:	fffbffff 	.word	0xfffbffff
 80054a4:	ffff80ff 	.word	0xffff80ff
 80054a8:	ffffc7ff 	.word	0xffffc7ff
 80054ac:	00f42400 	.word	0x00f42400
 80054b0:	20000000 	.word	0x20000000
 80054b4:	20000004 	.word	0x20000004
 80054b8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054bc:	4bac      	ldr	r3, [pc, #688]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 80054be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054c0:	2380      	movs	r3, #128	; 0x80
 80054c2:	055b      	lsls	r3, r3, #21
 80054c4:	4013      	ands	r3, r2
 80054c6:	d101      	bne.n	80054cc <HAL_RCC_OscConfig+0x360>
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <HAL_RCC_OscConfig+0x362>
 80054cc:	2300      	movs	r3, #0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d011      	beq.n	80054f6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80054d2:	4ba7      	ldr	r3, [pc, #668]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 80054d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054d6:	4ba6      	ldr	r3, [pc, #664]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 80054d8:	2180      	movs	r1, #128	; 0x80
 80054da:	0549      	lsls	r1, r1, #21
 80054dc:	430a      	orrs	r2, r1
 80054de:	63da      	str	r2, [r3, #60]	; 0x3c
 80054e0:	4ba3      	ldr	r3, [pc, #652]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 80054e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	055b      	lsls	r3, r3, #21
 80054e8:	4013      	ands	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80054ee:	231f      	movs	r3, #31
 80054f0:	18fb      	adds	r3, r7, r3
 80054f2:	2201      	movs	r2, #1
 80054f4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054f6:	4b9f      	ldr	r3, [pc, #636]	; (8005774 <HAL_RCC_OscConfig+0x608>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	2380      	movs	r3, #128	; 0x80
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	4013      	ands	r3, r2
 8005500:	d11a      	bne.n	8005538 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005502:	4b9c      	ldr	r3, [pc, #624]	; (8005774 <HAL_RCC_OscConfig+0x608>)
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	4b9b      	ldr	r3, [pc, #620]	; (8005774 <HAL_RCC_OscConfig+0x608>)
 8005508:	2180      	movs	r1, #128	; 0x80
 800550a:	0049      	lsls	r1, r1, #1
 800550c:	430a      	orrs	r2, r1
 800550e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005510:	f7fe ff22 	bl	8004358 <HAL_GetTick>
 8005514:	0003      	movs	r3, r0
 8005516:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005518:	e008      	b.n	800552c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800551a:	f7fe ff1d 	bl	8004358 <HAL_GetTick>
 800551e:	0002      	movs	r2, r0
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d901      	bls.n	800552c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e11c      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800552c:	4b91      	ldr	r3, [pc, #580]	; (8005774 <HAL_RCC_OscConfig+0x608>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	4013      	ands	r3, r2
 8005536:	d0f0      	beq.n	800551a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d106      	bne.n	800554e <HAL_RCC_OscConfig+0x3e2>
 8005540:	4b8b      	ldr	r3, [pc, #556]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 8005542:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005544:	4b8a      	ldr	r3, [pc, #552]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 8005546:	2101      	movs	r1, #1
 8005548:	430a      	orrs	r2, r1
 800554a:	65da      	str	r2, [r3, #92]	; 0x5c
 800554c:	e01c      	b.n	8005588 <HAL_RCC_OscConfig+0x41c>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	2b05      	cmp	r3, #5
 8005554:	d10c      	bne.n	8005570 <HAL_RCC_OscConfig+0x404>
 8005556:	4b86      	ldr	r3, [pc, #536]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 8005558:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800555a:	4b85      	ldr	r3, [pc, #532]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 800555c:	2104      	movs	r1, #4
 800555e:	430a      	orrs	r2, r1
 8005560:	65da      	str	r2, [r3, #92]	; 0x5c
 8005562:	4b83      	ldr	r3, [pc, #524]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 8005564:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005566:	4b82      	ldr	r3, [pc, #520]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 8005568:	2101      	movs	r1, #1
 800556a:	430a      	orrs	r2, r1
 800556c:	65da      	str	r2, [r3, #92]	; 0x5c
 800556e:	e00b      	b.n	8005588 <HAL_RCC_OscConfig+0x41c>
 8005570:	4b7f      	ldr	r3, [pc, #508]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 8005572:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005574:	4b7e      	ldr	r3, [pc, #504]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 8005576:	2101      	movs	r1, #1
 8005578:	438a      	bics	r2, r1
 800557a:	65da      	str	r2, [r3, #92]	; 0x5c
 800557c:	4b7c      	ldr	r3, [pc, #496]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 800557e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005580:	4b7b      	ldr	r3, [pc, #492]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 8005582:	2104      	movs	r1, #4
 8005584:	438a      	bics	r2, r1
 8005586:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d014      	beq.n	80055ba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005590:	f7fe fee2 	bl	8004358 <HAL_GetTick>
 8005594:	0003      	movs	r3, r0
 8005596:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005598:	e009      	b.n	80055ae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800559a:	f7fe fedd 	bl	8004358 <HAL_GetTick>
 800559e:	0002      	movs	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	4a74      	ldr	r2, [pc, #464]	; (8005778 <HAL_RCC_OscConfig+0x60c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e0db      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ae:	4b70      	ldr	r3, [pc, #448]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 80055b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b2:	2202      	movs	r2, #2
 80055b4:	4013      	ands	r3, r2
 80055b6:	d0f0      	beq.n	800559a <HAL_RCC_OscConfig+0x42e>
 80055b8:	e013      	b.n	80055e2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ba:	f7fe fecd 	bl	8004358 <HAL_GetTick>
 80055be:	0003      	movs	r3, r0
 80055c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055c2:	e009      	b.n	80055d8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055c4:	f7fe fec8 	bl	8004358 <HAL_GetTick>
 80055c8:	0002      	movs	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	4a6a      	ldr	r2, [pc, #424]	; (8005778 <HAL_RCC_OscConfig+0x60c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e0c6      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055d8:	4b65      	ldr	r3, [pc, #404]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 80055da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055dc:	2202      	movs	r2, #2
 80055de:	4013      	ands	r3, r2
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80055e2:	231f      	movs	r3, #31
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d105      	bne.n	80055f8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80055ec:	4b60      	ldr	r3, [pc, #384]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 80055ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055f0:	4b5f      	ldr	r3, [pc, #380]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 80055f2:	4962      	ldr	r1, [pc, #392]	; (800577c <HAL_RCC_OscConfig+0x610>)
 80055f4:	400a      	ands	r2, r1
 80055f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d100      	bne.n	8005602 <HAL_RCC_OscConfig+0x496>
 8005600:	e0b0      	b.n	8005764 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005602:	4b5b      	ldr	r3, [pc, #364]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	2238      	movs	r2, #56	; 0x38
 8005608:	4013      	ands	r3, r2
 800560a:	2b10      	cmp	r3, #16
 800560c:	d100      	bne.n	8005610 <HAL_RCC_OscConfig+0x4a4>
 800560e:	e078      	b.n	8005702 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d153      	bne.n	80056c0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005618:	4b55      	ldr	r3, [pc, #340]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	4b54      	ldr	r3, [pc, #336]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 800561e:	4958      	ldr	r1, [pc, #352]	; (8005780 <HAL_RCC_OscConfig+0x614>)
 8005620:	400a      	ands	r2, r1
 8005622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005624:	f7fe fe98 	bl	8004358 <HAL_GetTick>
 8005628:	0003      	movs	r3, r0
 800562a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800562e:	f7fe fe93 	bl	8004358 <HAL_GetTick>
 8005632:	0002      	movs	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e092      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005640:	4b4b      	ldr	r3, [pc, #300]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	2380      	movs	r3, #128	; 0x80
 8005646:	049b      	lsls	r3, r3, #18
 8005648:	4013      	ands	r3, r2
 800564a:	d1f0      	bne.n	800562e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800564c:	4b48      	ldr	r3, [pc, #288]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4a4c      	ldr	r2, [pc, #304]	; (8005784 <HAL_RCC_OscConfig+0x618>)
 8005652:	4013      	ands	r3, r2
 8005654:	0019      	movs	r1, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1a      	ldr	r2, [r3, #32]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	021b      	lsls	r3, r3, #8
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	431a      	orrs	r2, r3
 8005674:	4b3e      	ldr	r3, [pc, #248]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 8005676:	430a      	orrs	r2, r1
 8005678:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800567a:	4b3d      	ldr	r3, [pc, #244]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	4b3c      	ldr	r3, [pc, #240]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 8005680:	2180      	movs	r1, #128	; 0x80
 8005682:	0449      	lsls	r1, r1, #17
 8005684:	430a      	orrs	r2, r1
 8005686:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005688:	4b39      	ldr	r3, [pc, #228]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	4b38      	ldr	r3, [pc, #224]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 800568e:	2180      	movs	r1, #128	; 0x80
 8005690:	0549      	lsls	r1, r1, #21
 8005692:	430a      	orrs	r2, r1
 8005694:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005696:	f7fe fe5f 	bl	8004358 <HAL_GetTick>
 800569a:	0003      	movs	r3, r0
 800569c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a0:	f7fe fe5a 	bl	8004358 <HAL_GetTick>
 80056a4:	0002      	movs	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e059      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056b2:	4b2f      	ldr	r3, [pc, #188]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	2380      	movs	r3, #128	; 0x80
 80056b8:	049b      	lsls	r3, r3, #18
 80056ba:	4013      	ands	r3, r2
 80056bc:	d0f0      	beq.n	80056a0 <HAL_RCC_OscConfig+0x534>
 80056be:	e051      	b.n	8005764 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c0:	4b2b      	ldr	r3, [pc, #172]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	4b2a      	ldr	r3, [pc, #168]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 80056c6:	492e      	ldr	r1, [pc, #184]	; (8005780 <HAL_RCC_OscConfig+0x614>)
 80056c8:	400a      	ands	r2, r1
 80056ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056cc:	f7fe fe44 	bl	8004358 <HAL_GetTick>
 80056d0:	0003      	movs	r3, r0
 80056d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056d4:	e008      	b.n	80056e8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d6:	f7fe fe3f 	bl	8004358 <HAL_GetTick>
 80056da:	0002      	movs	r2, r0
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e03e      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056e8:	4b21      	ldr	r3, [pc, #132]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	2380      	movs	r3, #128	; 0x80
 80056ee:	049b      	lsls	r3, r3, #18
 80056f0:	4013      	ands	r3, r2
 80056f2:	d1f0      	bne.n	80056d6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80056f4:	4b1e      	ldr	r3, [pc, #120]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 80056fa:	4923      	ldr	r1, [pc, #140]	; (8005788 <HAL_RCC_OscConfig+0x61c>)
 80056fc:	400a      	ands	r2, r1
 80056fe:	60da      	str	r2, [r3, #12]
 8005700:	e030      	b.n	8005764 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e02b      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800570e:	4b18      	ldr	r3, [pc, #96]	; (8005770 <HAL_RCC_OscConfig+0x604>)
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2203      	movs	r2, #3
 8005718:	401a      	ands	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	429a      	cmp	r2, r3
 8005720:	d11e      	bne.n	8005760 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2270      	movs	r2, #112	; 0x70
 8005726:	401a      	ands	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800572c:	429a      	cmp	r2, r3
 800572e:	d117      	bne.n	8005760 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	23fe      	movs	r3, #254	; 0xfe
 8005734:	01db      	lsls	r3, r3, #7
 8005736:	401a      	ands	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800573e:	429a      	cmp	r2, r3
 8005740:	d10e      	bne.n	8005760 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	23f8      	movs	r3, #248	; 0xf8
 8005746:	039b      	lsls	r3, r3, #14
 8005748:	401a      	ands	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800574e:	429a      	cmp	r2, r3
 8005750:	d106      	bne.n	8005760 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	0f5b      	lsrs	r3, r3, #29
 8005756:	075a      	lsls	r2, r3, #29
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800575c:	429a      	cmp	r2, r3
 800575e:	d001      	beq.n	8005764 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e000      	b.n	8005766 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	0018      	movs	r0, r3
 8005768:	46bd      	mov	sp, r7
 800576a:	b008      	add	sp, #32
 800576c:	bd80      	pop	{r7, pc}
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	40021000 	.word	0x40021000
 8005774:	40007000 	.word	0x40007000
 8005778:	00001388 	.word	0x00001388
 800577c:	efffffff 	.word	0xefffffff
 8005780:	feffffff 	.word	0xfeffffff
 8005784:	1fc1808c 	.word	0x1fc1808c
 8005788:	effefffc 	.word	0xeffefffc

0800578c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e0e9      	b.n	8005974 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057a0:	4b76      	ldr	r3, [pc, #472]	; (800597c <HAL_RCC_ClockConfig+0x1f0>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2207      	movs	r2, #7
 80057a6:	4013      	ands	r3, r2
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d91e      	bls.n	80057ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ae:	4b73      	ldr	r3, [pc, #460]	; (800597c <HAL_RCC_ClockConfig+0x1f0>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2207      	movs	r2, #7
 80057b4:	4393      	bics	r3, r2
 80057b6:	0019      	movs	r1, r3
 80057b8:	4b70      	ldr	r3, [pc, #448]	; (800597c <HAL_RCC_ClockConfig+0x1f0>)
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057c0:	f7fe fdca 	bl	8004358 <HAL_GetTick>
 80057c4:	0003      	movs	r3, r0
 80057c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80057c8:	e009      	b.n	80057de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ca:	f7fe fdc5 	bl	8004358 <HAL_GetTick>
 80057ce:	0002      	movs	r2, r0
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	4a6a      	ldr	r2, [pc, #424]	; (8005980 <HAL_RCC_ClockConfig+0x1f4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e0ca      	b.n	8005974 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80057de:	4b67      	ldr	r3, [pc, #412]	; (800597c <HAL_RCC_ClockConfig+0x1f0>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2207      	movs	r2, #7
 80057e4:	4013      	ands	r3, r2
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d1ee      	bne.n	80057ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2202      	movs	r2, #2
 80057f2:	4013      	ands	r3, r2
 80057f4:	d015      	beq.n	8005822 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2204      	movs	r2, #4
 80057fc:	4013      	ands	r3, r2
 80057fe:	d006      	beq.n	800580e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005800:	4b60      	ldr	r3, [pc, #384]	; (8005984 <HAL_RCC_ClockConfig+0x1f8>)
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	4b5f      	ldr	r3, [pc, #380]	; (8005984 <HAL_RCC_ClockConfig+0x1f8>)
 8005806:	21e0      	movs	r1, #224	; 0xe0
 8005808:	01c9      	lsls	r1, r1, #7
 800580a:	430a      	orrs	r2, r1
 800580c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800580e:	4b5d      	ldr	r3, [pc, #372]	; (8005984 <HAL_RCC_ClockConfig+0x1f8>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	4a5d      	ldr	r2, [pc, #372]	; (8005988 <HAL_RCC_ClockConfig+0x1fc>)
 8005814:	4013      	ands	r3, r2
 8005816:	0019      	movs	r1, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	4b59      	ldr	r3, [pc, #356]	; (8005984 <HAL_RCC_ClockConfig+0x1f8>)
 800581e:	430a      	orrs	r2, r1
 8005820:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2201      	movs	r2, #1
 8005828:	4013      	ands	r3, r2
 800582a:	d057      	beq.n	80058dc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d107      	bne.n	8005844 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005834:	4b53      	ldr	r3, [pc, #332]	; (8005984 <HAL_RCC_ClockConfig+0x1f8>)
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	2380      	movs	r3, #128	; 0x80
 800583a:	029b      	lsls	r3, r3, #10
 800583c:	4013      	ands	r3, r2
 800583e:	d12b      	bne.n	8005898 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e097      	b.n	8005974 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d107      	bne.n	800585c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800584c:	4b4d      	ldr	r3, [pc, #308]	; (8005984 <HAL_RCC_ClockConfig+0x1f8>)
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	2380      	movs	r3, #128	; 0x80
 8005852:	049b      	lsls	r3, r3, #18
 8005854:	4013      	ands	r3, r2
 8005856:	d11f      	bne.n	8005898 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e08b      	b.n	8005974 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d107      	bne.n	8005874 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005864:	4b47      	ldr	r3, [pc, #284]	; (8005984 <HAL_RCC_ClockConfig+0x1f8>)
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	2380      	movs	r3, #128	; 0x80
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	4013      	ands	r3, r2
 800586e:	d113      	bne.n	8005898 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e07f      	b.n	8005974 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2b03      	cmp	r3, #3
 800587a:	d106      	bne.n	800588a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800587c:	4b41      	ldr	r3, [pc, #260]	; (8005984 <HAL_RCC_ClockConfig+0x1f8>)
 800587e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005880:	2202      	movs	r2, #2
 8005882:	4013      	ands	r3, r2
 8005884:	d108      	bne.n	8005898 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e074      	b.n	8005974 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800588a:	4b3e      	ldr	r3, [pc, #248]	; (8005984 <HAL_RCC_ClockConfig+0x1f8>)
 800588c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588e:	2202      	movs	r2, #2
 8005890:	4013      	ands	r3, r2
 8005892:	d101      	bne.n	8005898 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e06d      	b.n	8005974 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005898:	4b3a      	ldr	r3, [pc, #232]	; (8005984 <HAL_RCC_ClockConfig+0x1f8>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2207      	movs	r2, #7
 800589e:	4393      	bics	r3, r2
 80058a0:	0019      	movs	r1, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	4b37      	ldr	r3, [pc, #220]	; (8005984 <HAL_RCC_ClockConfig+0x1f8>)
 80058a8:	430a      	orrs	r2, r1
 80058aa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058ac:	f7fe fd54 	bl	8004358 <HAL_GetTick>
 80058b0:	0003      	movs	r3, r0
 80058b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b4:	e009      	b.n	80058ca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b6:	f7fe fd4f 	bl	8004358 <HAL_GetTick>
 80058ba:	0002      	movs	r2, r0
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	4a2f      	ldr	r2, [pc, #188]	; (8005980 <HAL_RCC_ClockConfig+0x1f4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e054      	b.n	8005974 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ca:	4b2e      	ldr	r3, [pc, #184]	; (8005984 <HAL_RCC_ClockConfig+0x1f8>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	2238      	movs	r2, #56	; 0x38
 80058d0:	401a      	ands	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	429a      	cmp	r2, r3
 80058da:	d1ec      	bne.n	80058b6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058dc:	4b27      	ldr	r3, [pc, #156]	; (800597c <HAL_RCC_ClockConfig+0x1f0>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2207      	movs	r2, #7
 80058e2:	4013      	ands	r3, r2
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d21e      	bcs.n	8005928 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ea:	4b24      	ldr	r3, [pc, #144]	; (800597c <HAL_RCC_ClockConfig+0x1f0>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2207      	movs	r2, #7
 80058f0:	4393      	bics	r3, r2
 80058f2:	0019      	movs	r1, r3
 80058f4:	4b21      	ldr	r3, [pc, #132]	; (800597c <HAL_RCC_ClockConfig+0x1f0>)
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058fc:	f7fe fd2c 	bl	8004358 <HAL_GetTick>
 8005900:	0003      	movs	r3, r0
 8005902:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005904:	e009      	b.n	800591a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005906:	f7fe fd27 	bl	8004358 <HAL_GetTick>
 800590a:	0002      	movs	r2, r0
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	4a1b      	ldr	r2, [pc, #108]	; (8005980 <HAL_RCC_ClockConfig+0x1f4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e02c      	b.n	8005974 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800591a:	4b18      	ldr	r3, [pc, #96]	; (800597c <HAL_RCC_ClockConfig+0x1f0>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2207      	movs	r2, #7
 8005920:	4013      	ands	r3, r2
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d1ee      	bne.n	8005906 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2204      	movs	r2, #4
 800592e:	4013      	ands	r3, r2
 8005930:	d009      	beq.n	8005946 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005932:	4b14      	ldr	r3, [pc, #80]	; (8005984 <HAL_RCC_ClockConfig+0x1f8>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	4a15      	ldr	r2, [pc, #84]	; (800598c <HAL_RCC_ClockConfig+0x200>)
 8005938:	4013      	ands	r3, r2
 800593a:	0019      	movs	r1, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	4b10      	ldr	r3, [pc, #64]	; (8005984 <HAL_RCC_ClockConfig+0x1f8>)
 8005942:	430a      	orrs	r2, r1
 8005944:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005946:	f000 f829 	bl	800599c <HAL_RCC_GetSysClockFreq>
 800594a:	0001      	movs	r1, r0
 800594c:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <HAL_RCC_ClockConfig+0x1f8>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	0a1b      	lsrs	r3, r3, #8
 8005952:	220f      	movs	r2, #15
 8005954:	401a      	ands	r2, r3
 8005956:	4b0e      	ldr	r3, [pc, #56]	; (8005990 <HAL_RCC_ClockConfig+0x204>)
 8005958:	0092      	lsls	r2, r2, #2
 800595a:	58d3      	ldr	r3, [r2, r3]
 800595c:	221f      	movs	r2, #31
 800595e:	4013      	ands	r3, r2
 8005960:	000a      	movs	r2, r1
 8005962:	40da      	lsrs	r2, r3
 8005964:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <HAL_RCC_ClockConfig+0x208>)
 8005966:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005968:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <HAL_RCC_ClockConfig+0x20c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	0018      	movs	r0, r3
 800596e:	f7fe fc97 	bl	80042a0 <HAL_InitTick>
 8005972:	0003      	movs	r3, r0
}
 8005974:	0018      	movs	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	b004      	add	sp, #16
 800597a:	bd80      	pop	{r7, pc}
 800597c:	40022000 	.word	0x40022000
 8005980:	00001388 	.word	0x00001388
 8005984:	40021000 	.word	0x40021000
 8005988:	fffff0ff 	.word	0xfffff0ff
 800598c:	ffff8fff 	.word	0xffff8fff
 8005990:	0800d528 	.word	0x0800d528
 8005994:	20000000 	.word	0x20000000
 8005998:	20000004 	.word	0x20000004

0800599c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059a2:	4b3c      	ldr	r3, [pc, #240]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2238      	movs	r2, #56	; 0x38
 80059a8:	4013      	ands	r3, r2
 80059aa:	d10f      	bne.n	80059cc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80059ac:	4b39      	ldr	r3, [pc, #228]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	0adb      	lsrs	r3, r3, #11
 80059b2:	2207      	movs	r2, #7
 80059b4:	4013      	ands	r3, r2
 80059b6:	2201      	movs	r2, #1
 80059b8:	409a      	lsls	r2, r3
 80059ba:	0013      	movs	r3, r2
 80059bc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	4835      	ldr	r0, [pc, #212]	; (8005a98 <HAL_RCC_GetSysClockFreq+0xfc>)
 80059c2:	f7fa fbab 	bl	800011c <__udivsi3>
 80059c6:	0003      	movs	r3, r0
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	e05d      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059cc:	4b31      	ldr	r3, [pc, #196]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	2238      	movs	r2, #56	; 0x38
 80059d2:	4013      	ands	r3, r2
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d102      	bne.n	80059de <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059d8:	4b30      	ldr	r3, [pc, #192]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x100>)
 80059da:	613b      	str	r3, [r7, #16]
 80059dc:	e054      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059de:	4b2d      	ldr	r3, [pc, #180]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	2238      	movs	r2, #56	; 0x38
 80059e4:	4013      	ands	r3, r2
 80059e6:	2b10      	cmp	r3, #16
 80059e8:	d138      	bne.n	8005a5c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80059ea:	4b2a      	ldr	r3, [pc, #168]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	2203      	movs	r2, #3
 80059f0:	4013      	ands	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059f4:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	091b      	lsrs	r3, r3, #4
 80059fa:	2207      	movs	r2, #7
 80059fc:	4013      	ands	r3, r2
 80059fe:	3301      	adds	r3, #1
 8005a00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d10d      	bne.n	8005a24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a08:	68b9      	ldr	r1, [r7, #8]
 8005a0a:	4824      	ldr	r0, [pc, #144]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x100>)
 8005a0c:	f7fa fb86 	bl	800011c <__udivsi3>
 8005a10:	0003      	movs	r3, r0
 8005a12:	0019      	movs	r1, r3
 8005a14:	4b1f      	ldr	r3, [pc, #124]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	0a1b      	lsrs	r3, r3, #8
 8005a1a:	227f      	movs	r2, #127	; 0x7f
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	434b      	muls	r3, r1
 8005a20:	617b      	str	r3, [r7, #20]
        break;
 8005a22:	e00d      	b.n	8005a40 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	481c      	ldr	r0, [pc, #112]	; (8005a98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005a28:	f7fa fb78 	bl	800011c <__udivsi3>
 8005a2c:	0003      	movs	r3, r0
 8005a2e:	0019      	movs	r1, r3
 8005a30:	4b18      	ldr	r3, [pc, #96]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	0a1b      	lsrs	r3, r3, #8
 8005a36:	227f      	movs	r2, #127	; 0x7f
 8005a38:	4013      	ands	r3, r2
 8005a3a:	434b      	muls	r3, r1
 8005a3c:	617b      	str	r3, [r7, #20]
        break;
 8005a3e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005a40:	4b14      	ldr	r3, [pc, #80]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	0f5b      	lsrs	r3, r3, #29
 8005a46:	2207      	movs	r2, #7
 8005a48:	4013      	ands	r3, r2
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	6978      	ldr	r0, [r7, #20]
 8005a52:	f7fa fb63 	bl	800011c <__udivsi3>
 8005a56:	0003      	movs	r3, r0
 8005a58:	613b      	str	r3, [r7, #16]
 8005a5a:	e015      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005a5c:	4b0d      	ldr	r3, [pc, #52]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	2238      	movs	r2, #56	; 0x38
 8005a62:	4013      	ands	r3, r2
 8005a64:	2b20      	cmp	r3, #32
 8005a66:	d103      	bne.n	8005a70 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005a68:	2380      	movs	r3, #128	; 0x80
 8005a6a:	021b      	lsls	r3, r3, #8
 8005a6c:	613b      	str	r3, [r7, #16]
 8005a6e:	e00b      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005a70:	4b08      	ldr	r3, [pc, #32]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	2238      	movs	r2, #56	; 0x38
 8005a76:	4013      	ands	r3, r2
 8005a78:	2b18      	cmp	r3, #24
 8005a7a:	d103      	bne.n	8005a84 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005a7c:	23fa      	movs	r3, #250	; 0xfa
 8005a7e:	01db      	lsls	r3, r3, #7
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	e001      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a88:	693b      	ldr	r3, [r7, #16]
}
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	b006      	add	sp, #24
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	40021000 	.word	0x40021000
 8005a98:	00f42400 	.word	0x00f42400
 8005a9c:	007a1200 	.word	0x007a1200

08005aa0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005aa4:	4b02      	ldr	r3, [pc, #8]	; (8005ab0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
}
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	20000000 	.word	0x20000000

08005ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ab4:	b5b0      	push	{r4, r5, r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005ab8:	f7ff fff2 	bl	8005aa0 <HAL_RCC_GetHCLKFreq>
 8005abc:	0004      	movs	r4, r0
 8005abe:	f7ff fb49 	bl	8005154 <LL_RCC_GetAPB1Prescaler>
 8005ac2:	0003      	movs	r3, r0
 8005ac4:	0b1a      	lsrs	r2, r3, #12
 8005ac6:	4b05      	ldr	r3, [pc, #20]	; (8005adc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ac8:	0092      	lsls	r2, r2, #2
 8005aca:	58d3      	ldr	r3, [r2, r3]
 8005acc:	221f      	movs	r2, #31
 8005ace:	4013      	ands	r3, r2
 8005ad0:	40dc      	lsrs	r4, r3
 8005ad2:	0023      	movs	r3, r4
}
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	0800d568 	.word	0x0800d568

08005ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005ae8:	2313      	movs	r3, #19
 8005aea:	18fb      	adds	r3, r7, r3
 8005aec:	2200      	movs	r2, #0
 8005aee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005af0:	2312      	movs	r3, #18
 8005af2:	18fb      	adds	r3, r7, r3
 8005af4:	2200      	movs	r2, #0
 8005af6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	2380      	movs	r3, #128	; 0x80
 8005afe:	029b      	lsls	r3, r3, #10
 8005b00:	4013      	ands	r3, r2
 8005b02:	d100      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005b04:	e0a3      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b06:	2011      	movs	r0, #17
 8005b08:	183b      	adds	r3, r7, r0
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b0e:	4b86      	ldr	r3, [pc, #536]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b12:	2380      	movs	r3, #128	; 0x80
 8005b14:	055b      	lsls	r3, r3, #21
 8005b16:	4013      	ands	r3, r2
 8005b18:	d110      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b1a:	4b83      	ldr	r3, [pc, #524]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b1e:	4b82      	ldr	r3, [pc, #520]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b20:	2180      	movs	r1, #128	; 0x80
 8005b22:	0549      	lsls	r1, r1, #21
 8005b24:	430a      	orrs	r2, r1
 8005b26:	63da      	str	r2, [r3, #60]	; 0x3c
 8005b28:	4b7f      	ldr	r3, [pc, #508]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b2c:	2380      	movs	r3, #128	; 0x80
 8005b2e:	055b      	lsls	r3, r3, #21
 8005b30:	4013      	ands	r3, r2
 8005b32:	60bb      	str	r3, [r7, #8]
 8005b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b36:	183b      	adds	r3, r7, r0
 8005b38:	2201      	movs	r2, #1
 8005b3a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b3c:	4b7b      	ldr	r3, [pc, #492]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	4b7a      	ldr	r3, [pc, #488]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005b42:	2180      	movs	r1, #128	; 0x80
 8005b44:	0049      	lsls	r1, r1, #1
 8005b46:	430a      	orrs	r2, r1
 8005b48:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b4a:	f7fe fc05 	bl	8004358 <HAL_GetTick>
 8005b4e:	0003      	movs	r3, r0
 8005b50:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b52:	e00b      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b54:	f7fe fc00 	bl	8004358 <HAL_GetTick>
 8005b58:	0002      	movs	r2, r0
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d904      	bls.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005b62:	2313      	movs	r3, #19
 8005b64:	18fb      	adds	r3, r7, r3
 8005b66:	2203      	movs	r2, #3
 8005b68:	701a      	strb	r2, [r3, #0]
        break;
 8005b6a:	e005      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b6c:	4b6f      	ldr	r3, [pc, #444]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	4013      	ands	r3, r2
 8005b76:	d0ed      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005b78:	2313      	movs	r3, #19
 8005b7a:	18fb      	adds	r3, r7, r3
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d154      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b82:	4b69      	ldr	r3, [pc, #420]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005b84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b86:	23c0      	movs	r3, #192	; 0xc0
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d019      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d014      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b9e:	4b62      	ldr	r3, [pc, #392]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba2:	4a63      	ldr	r2, [pc, #396]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ba8:	4b5f      	ldr	r3, [pc, #380]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005baa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005bac:	4b5e      	ldr	r3, [pc, #376]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005bae:	2180      	movs	r1, #128	; 0x80
 8005bb0:	0249      	lsls	r1, r1, #9
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bb6:	4b5c      	ldr	r3, [pc, #368]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005bb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005bba:	4b5b      	ldr	r3, [pc, #364]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005bbc:	495d      	ldr	r1, [pc, #372]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bbe:	400a      	ands	r2, r1
 8005bc0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bc2:	4b59      	ldr	r3, [pc, #356]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d016      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd0:	f7fe fbc2 	bl	8004358 <HAL_GetTick>
 8005bd4:	0003      	movs	r3, r0
 8005bd6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bd8:	e00c      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bda:	f7fe fbbd 	bl	8004358 <HAL_GetTick>
 8005bde:	0002      	movs	r2, r0
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	4a54      	ldr	r2, [pc, #336]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d904      	bls.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005bea:	2313      	movs	r3, #19
 8005bec:	18fb      	adds	r3, r7, r3
 8005bee:	2203      	movs	r2, #3
 8005bf0:	701a      	strb	r2, [r3, #0]
            break;
 8005bf2:	e004      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bf4:	4b4c      	ldr	r3, [pc, #304]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d0ed      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005bfe:	2313      	movs	r3, #19
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10a      	bne.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c08:	4b47      	ldr	r3, [pc, #284]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c0c:	4a48      	ldr	r2, [pc, #288]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	0019      	movs	r1, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	4b44      	ldr	r3, [pc, #272]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c1c:	e00c      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c1e:	2312      	movs	r3, #18
 8005c20:	18fb      	adds	r3, r7, r3
 8005c22:	2213      	movs	r2, #19
 8005c24:	18ba      	adds	r2, r7, r2
 8005c26:	7812      	ldrb	r2, [r2, #0]
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	e005      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2c:	2312      	movs	r3, #18
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	2213      	movs	r2, #19
 8005c32:	18ba      	adds	r2, r7, r2
 8005c34:	7812      	ldrb	r2, [r2, #0]
 8005c36:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c38:	2311      	movs	r3, #17
 8005c3a:	18fb      	adds	r3, r7, r3
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d105      	bne.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c42:	4b39      	ldr	r3, [pc, #228]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c46:	4b38      	ldr	r3, [pc, #224]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c48:	493c      	ldr	r1, [pc, #240]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005c4a:	400a      	ands	r2, r1
 8005c4c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2201      	movs	r2, #1
 8005c54:	4013      	ands	r3, r2
 8005c56:	d009      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c58:	4b33      	ldr	r3, [pc, #204]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5c:	2203      	movs	r2, #3
 8005c5e:	4393      	bics	r3, r2
 8005c60:	0019      	movs	r1, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	4b30      	ldr	r3, [pc, #192]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2202      	movs	r2, #2
 8005c72:	4013      	ands	r3, r2
 8005c74:	d009      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c76:	4b2c      	ldr	r3, [pc, #176]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7a:	220c      	movs	r2, #12
 8005c7c:	4393      	bics	r3, r2
 8005c7e:	0019      	movs	r1, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	4b28      	ldr	r3, [pc, #160]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c86:	430a      	orrs	r2, r1
 8005c88:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	4013      	ands	r3, r2
 8005c92:	d009      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c94:	4b24      	ldr	r3, [pc, #144]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c98:	4a29      	ldr	r2, [pc, #164]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	0019      	movs	r1, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	4b21      	ldr	r3, [pc, #132]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	2380      	movs	r3, #128	; 0x80
 8005cae:	01db      	lsls	r3, r3, #7
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	d015      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cb4:	4b1c      	ldr	r3, [pc, #112]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	0899      	lsrs	r1, r3, #2
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	695a      	ldr	r2, [r3, #20]
 8005cc0:	4b19      	ldr	r3, [pc, #100]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695a      	ldr	r2, [r3, #20]
 8005cca:	2380      	movs	r3, #128	; 0x80
 8005ccc:	05db      	lsls	r3, r3, #23
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d106      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005cd2:	4b15      	ldr	r3, [pc, #84]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	4b14      	ldr	r3, [pc, #80]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005cd8:	2180      	movs	r1, #128	; 0x80
 8005cda:	0249      	lsls	r1, r1, #9
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	2380      	movs	r3, #128	; 0x80
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	4013      	ands	r3, r2
 8005cea:	d016      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005cec:	4b0e      	ldr	r3, [pc, #56]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf0:	4a14      	ldr	r2, [pc, #80]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	0019      	movs	r1, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691a      	ldr	r2, [r3, #16]
 8005cfa:	4b0b      	ldr	r3, [pc, #44]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	2380      	movs	r3, #128	; 0x80
 8005d06:	01db      	lsls	r3, r3, #7
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d106      	bne.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005d0c:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d12:	2180      	movs	r1, #128	; 0x80
 8005d14:	0249      	lsls	r1, r1, #9
 8005d16:	430a      	orrs	r2, r1
 8005d18:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005d1a:	2312      	movs	r3, #18
 8005d1c:	18fb      	adds	r3, r7, r3
 8005d1e:	781b      	ldrb	r3, [r3, #0]
}
 8005d20:	0018      	movs	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	b006      	add	sp, #24
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40021000 	.word	0x40021000
 8005d2c:	40007000 	.word	0x40007000
 8005d30:	fffffcff 	.word	0xfffffcff
 8005d34:	fffeffff 	.word	0xfffeffff
 8005d38:	00001388 	.word	0x00001388
 8005d3c:	efffffff 	.word	0xefffffff
 8005d40:	ffffcfff 	.word	0xffffcfff
 8005d44:	ffff3fff 	.word	0xffff3fff

08005d48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e04a      	b.n	8005df0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	223d      	movs	r2, #61	; 0x3d
 8005d5e:	5c9b      	ldrb	r3, [r3, r2]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d107      	bne.n	8005d76 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	223c      	movs	r2, #60	; 0x3c
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	0018      	movs	r0, r3
 8005d72:	f7fd fa29 	bl	80031c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	223d      	movs	r2, #61	; 0x3d
 8005d7a:	2102      	movs	r1, #2
 8005d7c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3304      	adds	r3, #4
 8005d86:	0019      	movs	r1, r3
 8005d88:	0010      	movs	r0, r2
 8005d8a:	f000 fbf9 	bl	8006580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2248      	movs	r2, #72	; 0x48
 8005d92:	2101      	movs	r1, #1
 8005d94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	223e      	movs	r2, #62	; 0x3e
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	5499      	strb	r1, [r3, r2]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	223f      	movs	r2, #63	; 0x3f
 8005da2:	2101      	movs	r1, #1
 8005da4:	5499      	strb	r1, [r3, r2]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2240      	movs	r2, #64	; 0x40
 8005daa:	2101      	movs	r1, #1
 8005dac:	5499      	strb	r1, [r3, r2]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2241      	movs	r2, #65	; 0x41
 8005db2:	2101      	movs	r1, #1
 8005db4:	5499      	strb	r1, [r3, r2]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2242      	movs	r2, #66	; 0x42
 8005dba:	2101      	movs	r1, #1
 8005dbc:	5499      	strb	r1, [r3, r2]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2243      	movs	r2, #67	; 0x43
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2244      	movs	r2, #68	; 0x44
 8005dca:	2101      	movs	r1, #1
 8005dcc:	5499      	strb	r1, [r3, r2]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2245      	movs	r2, #69	; 0x45
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	5499      	strb	r1, [r3, r2]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2246      	movs	r2, #70	; 0x46
 8005dda:	2101      	movs	r1, #1
 8005ddc:	5499      	strb	r1, [r3, r2]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2247      	movs	r2, #71	; 0x47
 8005de2:	2101      	movs	r1, #1
 8005de4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	223d      	movs	r2, #61	; 0x3d
 8005dea:	2101      	movs	r1, #1
 8005dec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	0018      	movs	r0, r3
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b002      	add	sp, #8
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d108      	bne.n	8005e1a <HAL_TIM_PWM_Start+0x22>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	223e      	movs	r2, #62	; 0x3e
 8005e0c:	5c9b      	ldrb	r3, [r3, r2]
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	1e5a      	subs	r2, r3, #1
 8005e14:	4193      	sbcs	r3, r2
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	e037      	b.n	8005e8a <HAL_TIM_PWM_Start+0x92>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d108      	bne.n	8005e32 <HAL_TIM_PWM_Start+0x3a>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	223f      	movs	r2, #63	; 0x3f
 8005e24:	5c9b      	ldrb	r3, [r3, r2]
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	1e5a      	subs	r2, r3, #1
 8005e2c:	4193      	sbcs	r3, r2
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	e02b      	b.n	8005e8a <HAL_TIM_PWM_Start+0x92>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d108      	bne.n	8005e4a <HAL_TIM_PWM_Start+0x52>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2240      	movs	r2, #64	; 0x40
 8005e3c:	5c9b      	ldrb	r3, [r3, r2]
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	3b01      	subs	r3, #1
 8005e42:	1e5a      	subs	r2, r3, #1
 8005e44:	4193      	sbcs	r3, r2
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	e01f      	b.n	8005e8a <HAL_TIM_PWM_Start+0x92>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b0c      	cmp	r3, #12
 8005e4e:	d108      	bne.n	8005e62 <HAL_TIM_PWM_Start+0x6a>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2241      	movs	r2, #65	; 0x41
 8005e54:	5c9b      	ldrb	r3, [r3, r2]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	1e5a      	subs	r2, r3, #1
 8005e5c:	4193      	sbcs	r3, r2
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	e013      	b.n	8005e8a <HAL_TIM_PWM_Start+0x92>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b10      	cmp	r3, #16
 8005e66:	d108      	bne.n	8005e7a <HAL_TIM_PWM_Start+0x82>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2242      	movs	r2, #66	; 0x42
 8005e6c:	5c9b      	ldrb	r3, [r3, r2]
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	1e5a      	subs	r2, r3, #1
 8005e74:	4193      	sbcs	r3, r2
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	e007      	b.n	8005e8a <HAL_TIM_PWM_Start+0x92>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2243      	movs	r2, #67	; 0x43
 8005e7e:	5c9b      	ldrb	r3, [r3, r2]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	3b01      	subs	r3, #1
 8005e84:	1e5a      	subs	r2, r3, #1
 8005e86:	4193      	sbcs	r3, r2
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e085      	b.n	8005f9e <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d104      	bne.n	8005ea2 <HAL_TIM_PWM_Start+0xaa>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	223e      	movs	r2, #62	; 0x3e
 8005e9c:	2102      	movs	r1, #2
 8005e9e:	5499      	strb	r1, [r3, r2]
 8005ea0:	e023      	b.n	8005eea <HAL_TIM_PWM_Start+0xf2>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b04      	cmp	r3, #4
 8005ea6:	d104      	bne.n	8005eb2 <HAL_TIM_PWM_Start+0xba>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	223f      	movs	r2, #63	; 0x3f
 8005eac:	2102      	movs	r1, #2
 8005eae:	5499      	strb	r1, [r3, r2]
 8005eb0:	e01b      	b.n	8005eea <HAL_TIM_PWM_Start+0xf2>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d104      	bne.n	8005ec2 <HAL_TIM_PWM_Start+0xca>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2240      	movs	r2, #64	; 0x40
 8005ebc:	2102      	movs	r1, #2
 8005ebe:	5499      	strb	r1, [r3, r2]
 8005ec0:	e013      	b.n	8005eea <HAL_TIM_PWM_Start+0xf2>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b0c      	cmp	r3, #12
 8005ec6:	d104      	bne.n	8005ed2 <HAL_TIM_PWM_Start+0xda>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2241      	movs	r2, #65	; 0x41
 8005ecc:	2102      	movs	r1, #2
 8005ece:	5499      	strb	r1, [r3, r2]
 8005ed0:	e00b      	b.n	8005eea <HAL_TIM_PWM_Start+0xf2>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b10      	cmp	r3, #16
 8005ed6:	d104      	bne.n	8005ee2 <HAL_TIM_PWM_Start+0xea>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2242      	movs	r2, #66	; 0x42
 8005edc:	2102      	movs	r1, #2
 8005ede:	5499      	strb	r1, [r3, r2]
 8005ee0:	e003      	b.n	8005eea <HAL_TIM_PWM_Start+0xf2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2243      	movs	r2, #67	; 0x43
 8005ee6:	2102      	movs	r1, #2
 8005ee8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f000 fe7e 	bl	8006bf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a2a      	ldr	r2, [pc, #168]	; (8005fa8 <HAL_TIM_PWM_Start+0x1b0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d00e      	beq.n	8005f20 <HAL_TIM_PWM_Start+0x128>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a29      	ldr	r2, [pc, #164]	; (8005fac <HAL_TIM_PWM_Start+0x1b4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d009      	beq.n	8005f20 <HAL_TIM_PWM_Start+0x128>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a27      	ldr	r2, [pc, #156]	; (8005fb0 <HAL_TIM_PWM_Start+0x1b8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d004      	beq.n	8005f20 <HAL_TIM_PWM_Start+0x128>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a26      	ldr	r2, [pc, #152]	; (8005fb4 <HAL_TIM_PWM_Start+0x1bc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d101      	bne.n	8005f24 <HAL_TIM_PWM_Start+0x12c>
 8005f20:	2301      	movs	r3, #1
 8005f22:	e000      	b.n	8005f26 <HAL_TIM_PWM_Start+0x12e>
 8005f24:	2300      	movs	r3, #0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d008      	beq.n	8005f3c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2180      	movs	r1, #128	; 0x80
 8005f36:	0209      	lsls	r1, r1, #8
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a19      	ldr	r2, [pc, #100]	; (8005fa8 <HAL_TIM_PWM_Start+0x1b0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d009      	beq.n	8005f5a <HAL_TIM_PWM_Start+0x162>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a1b      	ldr	r2, [pc, #108]	; (8005fb8 <HAL_TIM_PWM_Start+0x1c0>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d004      	beq.n	8005f5a <HAL_TIM_PWM_Start+0x162>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a15      	ldr	r2, [pc, #84]	; (8005fac <HAL_TIM_PWM_Start+0x1b4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d116      	bne.n	8005f88 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	4a16      	ldr	r2, [pc, #88]	; (8005fbc <HAL_TIM_PWM_Start+0x1c4>)
 8005f62:	4013      	ands	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b06      	cmp	r3, #6
 8005f6a:	d016      	beq.n	8005f9a <HAL_TIM_PWM_Start+0x1a2>
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	2380      	movs	r3, #128	; 0x80
 8005f70:	025b      	lsls	r3, r3, #9
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d011      	beq.n	8005f9a <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2101      	movs	r1, #1
 8005f82:	430a      	orrs	r2, r1
 8005f84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f86:	e008      	b.n	8005f9a <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2101      	movs	r1, #1
 8005f94:	430a      	orrs	r2, r1
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	e000      	b.n	8005f9c <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	0018      	movs	r0, r3
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	b004      	add	sp, #16
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	46c0      	nop			; (mov r8, r8)
 8005fa8:	40012c00 	.word	0x40012c00
 8005fac:	40014000 	.word	0x40014000
 8005fb0:	40014400 	.word	0x40014400
 8005fb4:	40014800 	.word	0x40014800
 8005fb8:	40000400 	.word	0x40000400
 8005fbc:	00010007 	.word	0x00010007

08005fc0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f000 fe0e 	bl	8006bf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a37      	ldr	r2, [pc, #220]	; (80060bc <HAL_TIM_PWM_Stop+0xfc>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00e      	beq.n	8006000 <HAL_TIM_PWM_Stop+0x40>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a36      	ldr	r2, [pc, #216]	; (80060c0 <HAL_TIM_PWM_Stop+0x100>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d009      	beq.n	8006000 <HAL_TIM_PWM_Stop+0x40>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a34      	ldr	r2, [pc, #208]	; (80060c4 <HAL_TIM_PWM_Stop+0x104>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d004      	beq.n	8006000 <HAL_TIM_PWM_Stop+0x40>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a33      	ldr	r2, [pc, #204]	; (80060c8 <HAL_TIM_PWM_Stop+0x108>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d101      	bne.n	8006004 <HAL_TIM_PWM_Stop+0x44>
 8006000:	2301      	movs	r3, #1
 8006002:	e000      	b.n	8006006 <HAL_TIM_PWM_Stop+0x46>
 8006004:	2300      	movs	r3, #0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d013      	beq.n	8006032 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	4a2e      	ldr	r2, [pc, #184]	; (80060cc <HAL_TIM_PWM_Stop+0x10c>)
 8006012:	4013      	ands	r3, r2
 8006014:	d10d      	bne.n	8006032 <HAL_TIM_PWM_Stop+0x72>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	4a2c      	ldr	r2, [pc, #176]	; (80060d0 <HAL_TIM_PWM_Stop+0x110>)
 800601e:	4013      	ands	r3, r2
 8006020:	d107      	bne.n	8006032 <HAL_TIM_PWM_Stop+0x72>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4929      	ldr	r1, [pc, #164]	; (80060d4 <HAL_TIM_PWM_Stop+0x114>)
 800602e:	400a      	ands	r2, r1
 8006030:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	4a24      	ldr	r2, [pc, #144]	; (80060cc <HAL_TIM_PWM_Stop+0x10c>)
 800603a:	4013      	ands	r3, r2
 800603c:	d10d      	bne.n	800605a <HAL_TIM_PWM_Stop+0x9a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	4a22      	ldr	r2, [pc, #136]	; (80060d0 <HAL_TIM_PWM_Stop+0x110>)
 8006046:	4013      	ands	r3, r2
 8006048:	d107      	bne.n	800605a <HAL_TIM_PWM_Stop+0x9a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2101      	movs	r1, #1
 8006056:	438a      	bics	r2, r1
 8006058:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d104      	bne.n	800606a <HAL_TIM_PWM_Stop+0xaa>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	223e      	movs	r2, #62	; 0x3e
 8006064:	2101      	movs	r1, #1
 8006066:	5499      	strb	r1, [r3, r2]
 8006068:	e023      	b.n	80060b2 <HAL_TIM_PWM_Stop+0xf2>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b04      	cmp	r3, #4
 800606e:	d104      	bne.n	800607a <HAL_TIM_PWM_Stop+0xba>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	223f      	movs	r2, #63	; 0x3f
 8006074:	2101      	movs	r1, #1
 8006076:	5499      	strb	r1, [r3, r2]
 8006078:	e01b      	b.n	80060b2 <HAL_TIM_PWM_Stop+0xf2>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b08      	cmp	r3, #8
 800607e:	d104      	bne.n	800608a <HAL_TIM_PWM_Stop+0xca>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2240      	movs	r2, #64	; 0x40
 8006084:	2101      	movs	r1, #1
 8006086:	5499      	strb	r1, [r3, r2]
 8006088:	e013      	b.n	80060b2 <HAL_TIM_PWM_Stop+0xf2>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b0c      	cmp	r3, #12
 800608e:	d104      	bne.n	800609a <HAL_TIM_PWM_Stop+0xda>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2241      	movs	r2, #65	; 0x41
 8006094:	2101      	movs	r1, #1
 8006096:	5499      	strb	r1, [r3, r2]
 8006098:	e00b      	b.n	80060b2 <HAL_TIM_PWM_Stop+0xf2>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b10      	cmp	r3, #16
 800609e:	d104      	bne.n	80060aa <HAL_TIM_PWM_Stop+0xea>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2242      	movs	r2, #66	; 0x42
 80060a4:	2101      	movs	r1, #1
 80060a6:	5499      	strb	r1, [r3, r2]
 80060a8:	e003      	b.n	80060b2 <HAL_TIM_PWM_Stop+0xf2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2243      	movs	r2, #67	; 0x43
 80060ae:	2101      	movs	r1, #1
 80060b0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	0018      	movs	r0, r3
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b002      	add	sp, #8
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40012c00 	.word	0x40012c00
 80060c0:	40014000 	.word	0x40014000
 80060c4:	40014400 	.word	0x40014400
 80060c8:	40014800 	.word	0x40014800
 80060cc:	00001111 	.word	0x00001111
 80060d0:	00000444 	.word	0x00000444
 80060d4:	ffff7fff 	.word	0xffff7fff

080060d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e090      	b.n	800620e <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	223d      	movs	r2, #61	; 0x3d
 80060f0:	5c9b      	ldrb	r3, [r3, r2]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d107      	bne.n	8006108 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	223c      	movs	r2, #60	; 0x3c
 80060fc:	2100      	movs	r1, #0
 80060fe:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	0018      	movs	r0, r3
 8006104:	f000 f890 	bl	8006228 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	223d      	movs	r2, #61	; 0x3d
 800610c:	2102      	movs	r1, #2
 800610e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689a      	ldr	r2, [r3, #8]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	493f      	ldr	r1, [pc, #252]	; (8006218 <HAL_TIM_Encoder_Init+0x140>)
 800611c:	400a      	ands	r2, r1
 800611e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3304      	adds	r3, #4
 8006128:	0019      	movs	r1, r3
 800612a:	0010      	movs	r0, r2
 800612c:	f000 fa28 	bl	8006580 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	4a31      	ldr	r2, [pc, #196]	; (800621c <HAL_TIM_Encoder_Init+0x144>)
 8006156:	4013      	ands	r3, r2
 8006158:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	021b      	lsls	r3, r3, #8
 8006164:	4313      	orrs	r3, r2
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4a2c      	ldr	r2, [pc, #176]	; (8006220 <HAL_TIM_Encoder_Init+0x148>)
 8006170:	4013      	ands	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	4a2b      	ldr	r2, [pc, #172]	; (8006224 <HAL_TIM_Encoder_Init+0x14c>)
 8006178:	4013      	ands	r3, r2
 800617a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	021b      	lsls	r3, r3, #8
 8006186:	4313      	orrs	r3, r2
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	011a      	lsls	r2, r3, #4
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	031b      	lsls	r3, r3, #12
 800619a:	4313      	orrs	r3, r2
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4313      	orrs	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2222      	movs	r2, #34	; 0x22
 80061a6:	4393      	bics	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2288      	movs	r2, #136	; 0x88
 80061ae:	4393      	bics	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	011b      	lsls	r3, r3, #4
 80061bc:	4313      	orrs	r3, r2
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2248      	movs	r2, #72	; 0x48
 80061e0:	2101      	movs	r1, #1
 80061e2:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	223e      	movs	r2, #62	; 0x3e
 80061e8:	2101      	movs	r1, #1
 80061ea:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	223f      	movs	r2, #63	; 0x3f
 80061f0:	2101      	movs	r1, #1
 80061f2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2244      	movs	r2, #68	; 0x44
 80061f8:	2101      	movs	r1, #1
 80061fa:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2245      	movs	r2, #69	; 0x45
 8006200:	2101      	movs	r1, #1
 8006202:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	223d      	movs	r2, #61	; 0x3d
 8006208:	2101      	movs	r1, #1
 800620a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	0018      	movs	r0, r3
 8006210:	46bd      	mov	sp, r7
 8006212:	b006      	add	sp, #24
 8006214:	bd80      	pop	{r7, pc}
 8006216:	46c0      	nop			; (mov r8, r8)
 8006218:	fffebff8 	.word	0xfffebff8
 800621c:	fffffcfc 	.word	0xfffffcfc
 8006220:	fffff3f3 	.word	0xfffff3f3
 8006224:	ffff0f0f 	.word	0xffff0f0f

08006228 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8006230:	46c0      	nop			; (mov r8, r8)
 8006232:	46bd      	mov	sp, r7
 8006234:	b002      	add	sp, #8
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006238:	b590      	push	{r4, r7, lr}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006242:	200f      	movs	r0, #15
 8006244:	183b      	adds	r3, r7, r0
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	213e      	movs	r1, #62	; 0x3e
 800624a:	5c52      	ldrb	r2, [r2, r1]
 800624c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800624e:	230e      	movs	r3, #14
 8006250:	18fb      	adds	r3, r7, r3
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	213f      	movs	r1, #63	; 0x3f
 8006256:	5c52      	ldrb	r2, [r2, r1]
 8006258:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800625a:	240d      	movs	r4, #13
 800625c:	193b      	adds	r3, r7, r4
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	2144      	movs	r1, #68	; 0x44
 8006262:	5c52      	ldrb	r2, [r2, r1]
 8006264:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006266:	230c      	movs	r3, #12
 8006268:	18fb      	adds	r3, r7, r3
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	2145      	movs	r1, #69	; 0x45
 800626e:	5c52      	ldrb	r2, [r2, r1]
 8006270:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d112      	bne.n	800629e <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006278:	183b      	adds	r3, r7, r0
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d103      	bne.n	8006288 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006280:	193b      	adds	r3, r7, r4
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d001      	beq.n	800628c <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e075      	b.n	8006378 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	223e      	movs	r2, #62	; 0x3e
 8006290:	2102      	movs	r1, #2
 8006292:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2244      	movs	r2, #68	; 0x44
 8006298:	2102      	movs	r1, #2
 800629a:	5499      	strb	r1, [r3, r2]
 800629c:	e03d      	b.n	800631a <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	d114      	bne.n	80062ce <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062a4:	230e      	movs	r3, #14
 80062a6:	18fb      	adds	r3, r7, r3
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d104      	bne.n	80062b8 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062ae:	230c      	movs	r3, #12
 80062b0:	18fb      	adds	r3, r7, r3
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d001      	beq.n	80062bc <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e05d      	b.n	8006378 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	223f      	movs	r2, #63	; 0x3f
 80062c0:	2102      	movs	r1, #2
 80062c2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2245      	movs	r2, #69	; 0x45
 80062c8:	2102      	movs	r1, #2
 80062ca:	5499      	strb	r1, [r3, r2]
 80062cc:	e025      	b.n	800631a <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062ce:	230f      	movs	r3, #15
 80062d0:	18fb      	adds	r3, r7, r3
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d10e      	bne.n	80062f6 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062d8:	230e      	movs	r3, #14
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d109      	bne.n	80062f6 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062e2:	230d      	movs	r3, #13
 80062e4:	18fb      	adds	r3, r7, r3
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d104      	bne.n	80062f6 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062ec:	230c      	movs	r3, #12
 80062ee:	18fb      	adds	r3, r7, r3
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d001      	beq.n	80062fa <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e03e      	b.n	8006378 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	223e      	movs	r2, #62	; 0x3e
 80062fe:	2102      	movs	r1, #2
 8006300:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	223f      	movs	r2, #63	; 0x3f
 8006306:	2102      	movs	r1, #2
 8006308:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2244      	movs	r2, #68	; 0x44
 800630e:	2102      	movs	r1, #2
 8006310:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2245      	movs	r2, #69	; 0x45
 8006316:	2102      	movs	r1, #2
 8006318:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <HAL_TIM_Encoder_Start+0xf0>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b04      	cmp	r3, #4
 8006324:	d008      	beq.n	8006338 <HAL_TIM_Encoder_Start+0x100>
 8006326:	e00f      	b.n	8006348 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2201      	movs	r2, #1
 800632e:	2100      	movs	r1, #0
 8006330:	0018      	movs	r0, r3
 8006332:	f000 fc5f 	bl	8006bf4 <TIM_CCxChannelCmd>
      break;
 8006336:	e016      	b.n	8006366 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2201      	movs	r2, #1
 800633e:	2104      	movs	r1, #4
 8006340:	0018      	movs	r0, r3
 8006342:	f000 fc57 	bl	8006bf4 <TIM_CCxChannelCmd>
      break;
 8006346:	e00e      	b.n	8006366 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2201      	movs	r2, #1
 800634e:	2100      	movs	r1, #0
 8006350:	0018      	movs	r0, r3
 8006352:	f000 fc4f 	bl	8006bf4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2201      	movs	r2, #1
 800635c:	2104      	movs	r1, #4
 800635e:	0018      	movs	r0, r3
 8006360:	f000 fc48 	bl	8006bf4 <TIM_CCxChannelCmd>
      break;
 8006364:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2101      	movs	r1, #1
 8006372:	430a      	orrs	r2, r1
 8006374:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	0018      	movs	r0, r3
 800637a:	46bd      	mov	sp, r7
 800637c:	b005      	add	sp, #20
 800637e:	bd90      	pop	{r4, r7, pc}

08006380 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800638c:	2317      	movs	r3, #23
 800638e:	18fb      	adds	r3, r7, r3
 8006390:	2200      	movs	r2, #0
 8006392:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	223c      	movs	r2, #60	; 0x3c
 8006398:	5c9b      	ldrb	r3, [r3, r2]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d101      	bne.n	80063a2 <HAL_TIM_PWM_ConfigChannel+0x22>
 800639e:	2302      	movs	r3, #2
 80063a0:	e0e5      	b.n	800656e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	223c      	movs	r2, #60	; 0x3c
 80063a6:	2101      	movs	r1, #1
 80063a8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b14      	cmp	r3, #20
 80063ae:	d900      	bls.n	80063b2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80063b0:	e0d1      	b.n	8006556 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	009a      	lsls	r2, r3, #2
 80063b6:	4b70      	ldr	r3, [pc, #448]	; (8006578 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80063b8:	18d3      	adds	r3, r2, r3
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	0011      	movs	r1, r2
 80063c6:	0018      	movs	r0, r3
 80063c8:	f000 f950 	bl	800666c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2108      	movs	r1, #8
 80063d8:	430a      	orrs	r2, r1
 80063da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2104      	movs	r1, #4
 80063e8:	438a      	bics	r2, r1
 80063ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6999      	ldr	r1, [r3, #24]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	691a      	ldr	r2, [r3, #16]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	619a      	str	r2, [r3, #24]
      break;
 80063fe:	e0af      	b.n	8006560 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	0011      	movs	r1, r2
 8006408:	0018      	movs	r0, r3
 800640a:	f000 f9b9 	bl	8006780 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699a      	ldr	r2, [r3, #24]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2180      	movs	r1, #128	; 0x80
 800641a:	0109      	lsls	r1, r1, #4
 800641c:	430a      	orrs	r2, r1
 800641e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699a      	ldr	r2, [r3, #24]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4954      	ldr	r1, [pc, #336]	; (800657c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800642c:	400a      	ands	r2, r1
 800642e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6999      	ldr	r1, [r3, #24]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	021a      	lsls	r2, r3, #8
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	619a      	str	r2, [r3, #24]
      break;
 8006444:	e08c      	b.n	8006560 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	0011      	movs	r1, r2
 800644e:	0018      	movs	r0, r3
 8006450:	f000 fa1a 	bl	8006888 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	69da      	ldr	r2, [r3, #28]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2108      	movs	r1, #8
 8006460:	430a      	orrs	r2, r1
 8006462:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69da      	ldr	r2, [r3, #28]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2104      	movs	r1, #4
 8006470:	438a      	bics	r2, r1
 8006472:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69d9      	ldr	r1, [r3, #28]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	691a      	ldr	r2, [r3, #16]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	61da      	str	r2, [r3, #28]
      break;
 8006486:	e06b      	b.n	8006560 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	0011      	movs	r1, r2
 8006490:	0018      	movs	r0, r3
 8006492:	f000 fa81 	bl	8006998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69da      	ldr	r2, [r3, #28]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2180      	movs	r1, #128	; 0x80
 80064a2:	0109      	lsls	r1, r1, #4
 80064a4:	430a      	orrs	r2, r1
 80064a6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69da      	ldr	r2, [r3, #28]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4932      	ldr	r1, [pc, #200]	; (800657c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80064b4:	400a      	ands	r2, r1
 80064b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69d9      	ldr	r1, [r3, #28]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	021a      	lsls	r2, r3, #8
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	61da      	str	r2, [r3, #28]
      break;
 80064cc:	e048      	b.n	8006560 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	0011      	movs	r1, r2
 80064d6:	0018      	movs	r0, r3
 80064d8:	f000 fac8 	bl	8006a6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2108      	movs	r1, #8
 80064e8:	430a      	orrs	r2, r1
 80064ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2104      	movs	r1, #4
 80064f8:	438a      	bics	r2, r1
 80064fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	691a      	ldr	r2, [r3, #16]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800650e:	e027      	b.n	8006560 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	0011      	movs	r1, r2
 8006518:	0018      	movs	r0, r3
 800651a:	f000 fb07 	bl	8006b2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2180      	movs	r1, #128	; 0x80
 800652a:	0109      	lsls	r1, r1, #4
 800652c:	430a      	orrs	r2, r1
 800652e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4910      	ldr	r1, [pc, #64]	; (800657c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800653c:	400a      	ands	r2, r1
 800653e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	021a      	lsls	r2, r3, #8
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006554:	e004      	b.n	8006560 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8006556:	2317      	movs	r3, #23
 8006558:	18fb      	adds	r3, r7, r3
 800655a:	2201      	movs	r2, #1
 800655c:	701a      	strb	r2, [r3, #0]
      break;
 800655e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	223c      	movs	r2, #60	; 0x3c
 8006564:	2100      	movs	r1, #0
 8006566:	5499      	strb	r1, [r3, r2]

  return status;
 8006568:	2317      	movs	r3, #23
 800656a:	18fb      	adds	r3, r7, r3
 800656c:	781b      	ldrb	r3, [r3, #0]
}
 800656e:	0018      	movs	r0, r3
 8006570:	46bd      	mov	sp, r7
 8006572:	b006      	add	sp, #24
 8006574:	bd80      	pop	{r7, pc}
 8006576:	46c0      	nop			; (mov r8, r8)
 8006578:	0800d588 	.word	0x0800d588
 800657c:	fffffbff 	.word	0xfffffbff

08006580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a2f      	ldr	r2, [pc, #188]	; (8006650 <TIM_Base_SetConfig+0xd0>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d003      	beq.n	80065a0 <TIM_Base_SetConfig+0x20>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a2e      	ldr	r2, [pc, #184]	; (8006654 <TIM_Base_SetConfig+0xd4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d108      	bne.n	80065b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2270      	movs	r2, #112	; 0x70
 80065a4:	4393      	bics	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a26      	ldr	r2, [pc, #152]	; (8006650 <TIM_Base_SetConfig+0xd0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d013      	beq.n	80065e2 <TIM_Base_SetConfig+0x62>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a25      	ldr	r2, [pc, #148]	; (8006654 <TIM_Base_SetConfig+0xd4>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00f      	beq.n	80065e2 <TIM_Base_SetConfig+0x62>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a24      	ldr	r2, [pc, #144]	; (8006658 <TIM_Base_SetConfig+0xd8>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00b      	beq.n	80065e2 <TIM_Base_SetConfig+0x62>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a23      	ldr	r2, [pc, #140]	; (800665c <TIM_Base_SetConfig+0xdc>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d007      	beq.n	80065e2 <TIM_Base_SetConfig+0x62>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a22      	ldr	r2, [pc, #136]	; (8006660 <TIM_Base_SetConfig+0xe0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d003      	beq.n	80065e2 <TIM_Base_SetConfig+0x62>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a21      	ldr	r2, [pc, #132]	; (8006664 <TIM_Base_SetConfig+0xe4>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d108      	bne.n	80065f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4a20      	ldr	r2, [pc, #128]	; (8006668 <TIM_Base_SetConfig+0xe8>)
 80065e6:	4013      	ands	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2280      	movs	r2, #128	; 0x80
 80065f8:	4393      	bics	r3, r2
 80065fa:	001a      	movs	r2, r3
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a0c      	ldr	r2, [pc, #48]	; (8006650 <TIM_Base_SetConfig+0xd0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00b      	beq.n	800663a <TIM_Base_SetConfig+0xba>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a0d      	ldr	r2, [pc, #52]	; (800665c <TIM_Base_SetConfig+0xdc>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d007      	beq.n	800663a <TIM_Base_SetConfig+0xba>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a0c      	ldr	r2, [pc, #48]	; (8006660 <TIM_Base_SetConfig+0xe0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d003      	beq.n	800663a <TIM_Base_SetConfig+0xba>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a0b      	ldr	r2, [pc, #44]	; (8006664 <TIM_Base_SetConfig+0xe4>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d103      	bne.n	8006642 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	691a      	ldr	r2, [r3, #16]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	615a      	str	r2, [r3, #20]
}
 8006648:	46c0      	nop			; (mov r8, r8)
 800664a:	46bd      	mov	sp, r7
 800664c:	b004      	add	sp, #16
 800664e:	bd80      	pop	{r7, pc}
 8006650:	40012c00 	.word	0x40012c00
 8006654:	40000400 	.word	0x40000400
 8006658:	40002000 	.word	0x40002000
 800665c:	40014000 	.word	0x40014000
 8006660:	40014400 	.word	0x40014400
 8006664:	40014800 	.word	0x40014800
 8006668:	fffffcff 	.word	0xfffffcff

0800666c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	2201      	movs	r2, #1
 800667c:	4393      	bics	r3, r2
 800667e:	001a      	movs	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4a32      	ldr	r2, [pc, #200]	; (8006764 <TIM_OC1_SetConfig+0xf8>)
 800669a:	4013      	ands	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2203      	movs	r2, #3
 80066a2:	4393      	bics	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	2202      	movs	r2, #2
 80066b4:	4393      	bics	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	4313      	orrs	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a28      	ldr	r2, [pc, #160]	; (8006768 <TIM_OC1_SetConfig+0xfc>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00b      	beq.n	80066e2 <TIM_OC1_SetConfig+0x76>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a27      	ldr	r2, [pc, #156]	; (800676c <TIM_OC1_SetConfig+0x100>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d007      	beq.n	80066e2 <TIM_OC1_SetConfig+0x76>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a26      	ldr	r2, [pc, #152]	; (8006770 <TIM_OC1_SetConfig+0x104>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d003      	beq.n	80066e2 <TIM_OC1_SetConfig+0x76>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a25      	ldr	r2, [pc, #148]	; (8006774 <TIM_OC1_SetConfig+0x108>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d10c      	bne.n	80066fc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2208      	movs	r2, #8
 80066e6:	4393      	bics	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	2204      	movs	r2, #4
 80066f8:	4393      	bics	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a1a      	ldr	r2, [pc, #104]	; (8006768 <TIM_OC1_SetConfig+0xfc>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00b      	beq.n	800671c <TIM_OC1_SetConfig+0xb0>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a19      	ldr	r2, [pc, #100]	; (800676c <TIM_OC1_SetConfig+0x100>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d007      	beq.n	800671c <TIM_OC1_SetConfig+0xb0>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a18      	ldr	r2, [pc, #96]	; (8006770 <TIM_OC1_SetConfig+0x104>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d003      	beq.n	800671c <TIM_OC1_SetConfig+0xb0>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a17      	ldr	r2, [pc, #92]	; (8006774 <TIM_OC1_SetConfig+0x108>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d111      	bne.n	8006740 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	4a16      	ldr	r2, [pc, #88]	; (8006778 <TIM_OC1_SetConfig+0x10c>)
 8006720:	4013      	ands	r3, r2
 8006722:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	4a15      	ldr	r2, [pc, #84]	; (800677c <TIM_OC1_SetConfig+0x110>)
 8006728:	4013      	ands	r3, r2
 800672a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4313      	orrs	r3, r2
 8006734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	621a      	str	r2, [r3, #32]
}
 800675a:	46c0      	nop			; (mov r8, r8)
 800675c:	46bd      	mov	sp, r7
 800675e:	b006      	add	sp, #24
 8006760:	bd80      	pop	{r7, pc}
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	fffeff8f 	.word	0xfffeff8f
 8006768:	40012c00 	.word	0x40012c00
 800676c:	40014000 	.word	0x40014000
 8006770:	40014400 	.word	0x40014400
 8006774:	40014800 	.word	0x40014800
 8006778:	fffffeff 	.word	0xfffffeff
 800677c:	fffffdff 	.word	0xfffffdff

08006780 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	2210      	movs	r2, #16
 8006790:	4393      	bics	r3, r2
 8006792:	001a      	movs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4a2e      	ldr	r2, [pc, #184]	; (8006868 <TIM_OC2_SetConfig+0xe8>)
 80067ae:	4013      	ands	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4a2d      	ldr	r2, [pc, #180]	; (800686c <TIM_OC2_SetConfig+0xec>)
 80067b6:	4013      	ands	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	021b      	lsls	r3, r3, #8
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2220      	movs	r2, #32
 80067ca:	4393      	bics	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a24      	ldr	r2, [pc, #144]	; (8006870 <TIM_OC2_SetConfig+0xf0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d10d      	bne.n	80067fe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2280      	movs	r2, #128	; 0x80
 80067e6:	4393      	bics	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2240      	movs	r2, #64	; 0x40
 80067fa:	4393      	bics	r3, r2
 80067fc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a1b      	ldr	r2, [pc, #108]	; (8006870 <TIM_OC2_SetConfig+0xf0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00b      	beq.n	800681e <TIM_OC2_SetConfig+0x9e>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a1a      	ldr	r2, [pc, #104]	; (8006874 <TIM_OC2_SetConfig+0xf4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d007      	beq.n	800681e <TIM_OC2_SetConfig+0x9e>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a19      	ldr	r2, [pc, #100]	; (8006878 <TIM_OC2_SetConfig+0xf8>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d003      	beq.n	800681e <TIM_OC2_SetConfig+0x9e>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a18      	ldr	r2, [pc, #96]	; (800687c <TIM_OC2_SetConfig+0xfc>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d113      	bne.n	8006846 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	4a17      	ldr	r2, [pc, #92]	; (8006880 <TIM_OC2_SetConfig+0x100>)
 8006822:	4013      	ands	r3, r2
 8006824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	4a16      	ldr	r2, [pc, #88]	; (8006884 <TIM_OC2_SetConfig+0x104>)
 800682a:	4013      	ands	r3, r2
 800682c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4313      	orrs	r3, r2
 8006838:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	4313      	orrs	r3, r2
 8006844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	621a      	str	r2, [r3, #32]
}
 8006860:	46c0      	nop			; (mov r8, r8)
 8006862:	46bd      	mov	sp, r7
 8006864:	b006      	add	sp, #24
 8006866:	bd80      	pop	{r7, pc}
 8006868:	feff8fff 	.word	0xfeff8fff
 800686c:	fffffcff 	.word	0xfffffcff
 8006870:	40012c00 	.word	0x40012c00
 8006874:	40014000 	.word	0x40014000
 8006878:	40014400 	.word	0x40014400
 800687c:	40014800 	.word	0x40014800
 8006880:	fffffbff 	.word	0xfffffbff
 8006884:	fffff7ff 	.word	0xfffff7ff

08006888 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	4a35      	ldr	r2, [pc, #212]	; (800696c <TIM_OC3_SetConfig+0xe4>)
 8006898:	401a      	ands	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4a2f      	ldr	r2, [pc, #188]	; (8006970 <TIM_OC3_SetConfig+0xe8>)
 80068b4:	4013      	ands	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2203      	movs	r2, #3
 80068bc:	4393      	bics	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	4a29      	ldr	r2, [pc, #164]	; (8006974 <TIM_OC3_SetConfig+0xec>)
 80068ce:	4013      	ands	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	4313      	orrs	r3, r2
 80068dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a25      	ldr	r2, [pc, #148]	; (8006978 <TIM_OC3_SetConfig+0xf0>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d10d      	bne.n	8006902 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	4a24      	ldr	r2, [pc, #144]	; (800697c <TIM_OC3_SetConfig+0xf4>)
 80068ea:	4013      	ands	r3, r2
 80068ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	021b      	lsls	r3, r3, #8
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	4a20      	ldr	r2, [pc, #128]	; (8006980 <TIM_OC3_SetConfig+0xf8>)
 80068fe:	4013      	ands	r3, r2
 8006900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a1c      	ldr	r2, [pc, #112]	; (8006978 <TIM_OC3_SetConfig+0xf0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d00b      	beq.n	8006922 <TIM_OC3_SetConfig+0x9a>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a1d      	ldr	r2, [pc, #116]	; (8006984 <TIM_OC3_SetConfig+0xfc>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d007      	beq.n	8006922 <TIM_OC3_SetConfig+0x9a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a1c      	ldr	r2, [pc, #112]	; (8006988 <TIM_OC3_SetConfig+0x100>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d003      	beq.n	8006922 <TIM_OC3_SetConfig+0x9a>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a1b      	ldr	r2, [pc, #108]	; (800698c <TIM_OC3_SetConfig+0x104>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d113      	bne.n	800694a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	4a1a      	ldr	r2, [pc, #104]	; (8006990 <TIM_OC3_SetConfig+0x108>)
 8006926:	4013      	ands	r3, r2
 8006928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	4a19      	ldr	r2, [pc, #100]	; (8006994 <TIM_OC3_SetConfig+0x10c>)
 800692e:	4013      	ands	r3, r2
 8006930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	4313      	orrs	r3, r2
 8006948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	621a      	str	r2, [r3, #32]
}
 8006964:	46c0      	nop			; (mov r8, r8)
 8006966:	46bd      	mov	sp, r7
 8006968:	b006      	add	sp, #24
 800696a:	bd80      	pop	{r7, pc}
 800696c:	fffffeff 	.word	0xfffffeff
 8006970:	fffeff8f 	.word	0xfffeff8f
 8006974:	fffffdff 	.word	0xfffffdff
 8006978:	40012c00 	.word	0x40012c00
 800697c:	fffff7ff 	.word	0xfffff7ff
 8006980:	fffffbff 	.word	0xfffffbff
 8006984:	40014000 	.word	0x40014000
 8006988:	40014400 	.word	0x40014400
 800698c:	40014800 	.word	0x40014800
 8006990:	ffffefff 	.word	0xffffefff
 8006994:	ffffdfff 	.word	0xffffdfff

08006998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	4a28      	ldr	r2, [pc, #160]	; (8006a48 <TIM_OC4_SetConfig+0xb0>)
 80069a8:	401a      	ands	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4a22      	ldr	r2, [pc, #136]	; (8006a4c <TIM_OC4_SetConfig+0xb4>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4a21      	ldr	r2, [pc, #132]	; (8006a50 <TIM_OC4_SetConfig+0xb8>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	4a1d      	ldr	r2, [pc, #116]	; (8006a54 <TIM_OC4_SetConfig+0xbc>)
 80069e0:	4013      	ands	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	031b      	lsls	r3, r3, #12
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a19      	ldr	r2, [pc, #100]	; (8006a58 <TIM_OC4_SetConfig+0xc0>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d00b      	beq.n	8006a10 <TIM_OC4_SetConfig+0x78>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a18      	ldr	r2, [pc, #96]	; (8006a5c <TIM_OC4_SetConfig+0xc4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d007      	beq.n	8006a10 <TIM_OC4_SetConfig+0x78>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a17      	ldr	r2, [pc, #92]	; (8006a60 <TIM_OC4_SetConfig+0xc8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d003      	beq.n	8006a10 <TIM_OC4_SetConfig+0x78>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a16      	ldr	r2, [pc, #88]	; (8006a64 <TIM_OC4_SetConfig+0xcc>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d109      	bne.n	8006a24 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	4a15      	ldr	r2, [pc, #84]	; (8006a68 <TIM_OC4_SetConfig+0xd0>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	019b      	lsls	r3, r3, #6
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	621a      	str	r2, [r3, #32]
}
 8006a3e:	46c0      	nop			; (mov r8, r8)
 8006a40:	46bd      	mov	sp, r7
 8006a42:	b006      	add	sp, #24
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	46c0      	nop			; (mov r8, r8)
 8006a48:	ffffefff 	.word	0xffffefff
 8006a4c:	feff8fff 	.word	0xfeff8fff
 8006a50:	fffffcff 	.word	0xfffffcff
 8006a54:	ffffdfff 	.word	0xffffdfff
 8006a58:	40012c00 	.word	0x40012c00
 8006a5c:	40014000 	.word	0x40014000
 8006a60:	40014400 	.word	0x40014400
 8006a64:	40014800 	.word	0x40014800
 8006a68:	ffffbfff 	.word	0xffffbfff

08006a6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	4a25      	ldr	r2, [pc, #148]	; (8006b10 <TIM_OC5_SetConfig+0xa4>)
 8006a7c:	401a      	ands	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4a1f      	ldr	r2, [pc, #124]	; (8006b14 <TIM_OC5_SetConfig+0xa8>)
 8006a98:	4013      	ands	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	4a1b      	ldr	r2, [pc, #108]	; (8006b18 <TIM_OC5_SetConfig+0xac>)
 8006aaa:	4013      	ands	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	041b      	lsls	r3, r3, #16
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a17      	ldr	r2, [pc, #92]	; (8006b1c <TIM_OC5_SetConfig+0xb0>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d00b      	beq.n	8006ada <TIM_OC5_SetConfig+0x6e>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a16      	ldr	r2, [pc, #88]	; (8006b20 <TIM_OC5_SetConfig+0xb4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d007      	beq.n	8006ada <TIM_OC5_SetConfig+0x6e>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a15      	ldr	r2, [pc, #84]	; (8006b24 <TIM_OC5_SetConfig+0xb8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d003      	beq.n	8006ada <TIM_OC5_SetConfig+0x6e>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a14      	ldr	r2, [pc, #80]	; (8006b28 <TIM_OC5_SetConfig+0xbc>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d109      	bne.n	8006aee <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	4a0c      	ldr	r2, [pc, #48]	; (8006b10 <TIM_OC5_SetConfig+0xa4>)
 8006ade:	4013      	ands	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	021b      	lsls	r3, r3, #8
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	621a      	str	r2, [r3, #32]
}
 8006b08:	46c0      	nop			; (mov r8, r8)
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	b006      	add	sp, #24
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	fffeffff 	.word	0xfffeffff
 8006b14:	fffeff8f 	.word	0xfffeff8f
 8006b18:	fffdffff 	.word	0xfffdffff
 8006b1c:	40012c00 	.word	0x40012c00
 8006b20:	40014000 	.word	0x40014000
 8006b24:	40014400 	.word	0x40014400
 8006b28:	40014800 	.word	0x40014800

08006b2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	4a26      	ldr	r2, [pc, #152]	; (8006bd4 <TIM_OC6_SetConfig+0xa8>)
 8006b3c:	401a      	ands	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4a20      	ldr	r2, [pc, #128]	; (8006bd8 <TIM_OC6_SetConfig+0xac>)
 8006b58:	4013      	ands	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	021b      	lsls	r3, r3, #8
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	4a1c      	ldr	r2, [pc, #112]	; (8006bdc <TIM_OC6_SetConfig+0xb0>)
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	051b      	lsls	r3, r3, #20
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a18      	ldr	r2, [pc, #96]	; (8006be0 <TIM_OC6_SetConfig+0xb4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d00b      	beq.n	8006b9c <TIM_OC6_SetConfig+0x70>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a17      	ldr	r2, [pc, #92]	; (8006be4 <TIM_OC6_SetConfig+0xb8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d007      	beq.n	8006b9c <TIM_OC6_SetConfig+0x70>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a16      	ldr	r2, [pc, #88]	; (8006be8 <TIM_OC6_SetConfig+0xbc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d003      	beq.n	8006b9c <TIM_OC6_SetConfig+0x70>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a15      	ldr	r2, [pc, #84]	; (8006bec <TIM_OC6_SetConfig+0xc0>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d109      	bne.n	8006bb0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	4a14      	ldr	r2, [pc, #80]	; (8006bf0 <TIM_OC6_SetConfig+0xc4>)
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	029b      	lsls	r3, r3, #10
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	621a      	str	r2, [r3, #32]
}
 8006bca:	46c0      	nop			; (mov r8, r8)
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	b006      	add	sp, #24
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	46c0      	nop			; (mov r8, r8)
 8006bd4:	ffefffff 	.word	0xffefffff
 8006bd8:	feff8fff 	.word	0xfeff8fff
 8006bdc:	ffdfffff 	.word	0xffdfffff
 8006be0:	40012c00 	.word	0x40012c00
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40014400 	.word	0x40014400
 8006bec:	40014800 	.word	0x40014800
 8006bf0:	fffbffff 	.word	0xfffbffff

08006bf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	221f      	movs	r2, #31
 8006c04:	4013      	ands	r3, r2
 8006c06:	2201      	movs	r2, #1
 8006c08:	409a      	lsls	r2, r3
 8006c0a:	0013      	movs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	43d2      	mvns	r2, r2
 8006c16:	401a      	ands	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a1a      	ldr	r2, [r3, #32]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	211f      	movs	r1, #31
 8006c24:	400b      	ands	r3, r1
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	4099      	lsls	r1, r3
 8006c2a:	000b      	movs	r3, r1
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	621a      	str	r2, [r3, #32]
}
 8006c32:	46c0      	nop			; (mov r8, r8)
 8006c34:	46bd      	mov	sp, r7
 8006c36:	b006      	add	sp, #24
 8006c38:	bd80      	pop	{r7, pc}
	...

08006c3c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d108      	bne.n	8006c5e <HAL_TIMEx_PWMN_Start+0x22>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2244      	movs	r2, #68	; 0x44
 8006c50:	5c9b      	ldrb	r3, [r3, r2]
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	3b01      	subs	r3, #1
 8006c56:	1e5a      	subs	r2, r3, #1
 8006c58:	4193      	sbcs	r3, r2
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	e01f      	b.n	8006c9e <HAL_TIMEx_PWMN_Start+0x62>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	d108      	bne.n	8006c76 <HAL_TIMEx_PWMN_Start+0x3a>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2245      	movs	r2, #69	; 0x45
 8006c68:	5c9b      	ldrb	r3, [r3, r2]
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	1e5a      	subs	r2, r3, #1
 8006c70:	4193      	sbcs	r3, r2
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	e013      	b.n	8006c9e <HAL_TIMEx_PWMN_Start+0x62>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	d108      	bne.n	8006c8e <HAL_TIMEx_PWMN_Start+0x52>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2246      	movs	r2, #70	; 0x46
 8006c80:	5c9b      	ldrb	r3, [r3, r2]
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	1e5a      	subs	r2, r3, #1
 8006c88:	4193      	sbcs	r3, r2
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	e007      	b.n	8006c9e <HAL_TIMEx_PWMN_Start+0x62>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2247      	movs	r2, #71	; 0x47
 8006c92:	5c9b      	ldrb	r3, [r3, r2]
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	1e5a      	subs	r2, r3, #1
 8006c9a:	4193      	sbcs	r3, r2
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d001      	beq.n	8006ca6 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e05c      	b.n	8006d60 <HAL_TIMEx_PWMN_Start+0x124>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d104      	bne.n	8006cb6 <HAL_TIMEx_PWMN_Start+0x7a>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2244      	movs	r2, #68	; 0x44
 8006cb0:	2102      	movs	r1, #2
 8006cb2:	5499      	strb	r1, [r3, r2]
 8006cb4:	e013      	b.n	8006cde <HAL_TIMEx_PWMN_Start+0xa2>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b04      	cmp	r3, #4
 8006cba:	d104      	bne.n	8006cc6 <HAL_TIMEx_PWMN_Start+0x8a>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2245      	movs	r2, #69	; 0x45
 8006cc0:	2102      	movs	r1, #2
 8006cc2:	5499      	strb	r1, [r3, r2]
 8006cc4:	e00b      	b.n	8006cde <HAL_TIMEx_PWMN_Start+0xa2>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d104      	bne.n	8006cd6 <HAL_TIMEx_PWMN_Start+0x9a>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2246      	movs	r2, #70	; 0x46
 8006cd0:	2102      	movs	r1, #2
 8006cd2:	5499      	strb	r1, [r3, r2]
 8006cd4:	e003      	b.n	8006cde <HAL_TIMEx_PWMN_Start+0xa2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2247      	movs	r2, #71	; 0x47
 8006cda:	2102      	movs	r1, #2
 8006cdc:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	2204      	movs	r2, #4
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	f000 f9b0 	bl	800704c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2180      	movs	r1, #128	; 0x80
 8006cf8:	0209      	lsls	r1, r1, #8
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a19      	ldr	r2, [pc, #100]	; (8006d68 <HAL_TIMEx_PWMN_Start+0x12c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d009      	beq.n	8006d1c <HAL_TIMEx_PWMN_Start+0xe0>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a17      	ldr	r2, [pc, #92]	; (8006d6c <HAL_TIMEx_PWMN_Start+0x130>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d004      	beq.n	8006d1c <HAL_TIMEx_PWMN_Start+0xe0>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a16      	ldr	r2, [pc, #88]	; (8006d70 <HAL_TIMEx_PWMN_Start+0x134>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d116      	bne.n	8006d4a <HAL_TIMEx_PWMN_Start+0x10e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	4a14      	ldr	r2, [pc, #80]	; (8006d74 <HAL_TIMEx_PWMN_Start+0x138>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2b06      	cmp	r3, #6
 8006d2c:	d016      	beq.n	8006d5c <HAL_TIMEx_PWMN_Start+0x120>
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	2380      	movs	r3, #128	; 0x80
 8006d32:	025b      	lsls	r3, r3, #9
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d011      	beq.n	8006d5c <HAL_TIMEx_PWMN_Start+0x120>
    {
      __HAL_TIM_ENABLE(htim);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2101      	movs	r1, #1
 8006d44:	430a      	orrs	r2, r1
 8006d46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d48:	e008      	b.n	8006d5c <HAL_TIMEx_PWMN_Start+0x120>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2101      	movs	r1, #1
 8006d56:	430a      	orrs	r2, r1
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	e000      	b.n	8006d5e <HAL_TIMEx_PWMN_Start+0x122>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d5c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	0018      	movs	r0, r3
 8006d62:	46bd      	mov	sp, r7
 8006d64:	b004      	add	sp, #16
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	40012c00 	.word	0x40012c00
 8006d6c:	40000400 	.word	0x40000400
 8006d70:	40014000 	.word	0x40014000
 8006d74:	00010007 	.word	0x00010007

08006d78 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f000 f95e 	bl	800704c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	4a23      	ldr	r2, [pc, #140]	; (8006e24 <HAL_TIMEx_PWMN_Stop+0xac>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	d10d      	bne.n	8006db8 <HAL_TIMEx_PWMN_Stop+0x40>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	4a21      	ldr	r2, [pc, #132]	; (8006e28 <HAL_TIMEx_PWMN_Stop+0xb0>)
 8006da4:	4013      	ands	r3, r2
 8006da6:	d107      	bne.n	8006db8 <HAL_TIMEx_PWMN_Stop+0x40>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	491e      	ldr	r1, [pc, #120]	; (8006e2c <HAL_TIMEx_PWMN_Stop+0xb4>)
 8006db4:	400a      	ands	r2, r1
 8006db6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	4a19      	ldr	r2, [pc, #100]	; (8006e24 <HAL_TIMEx_PWMN_Stop+0xac>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	d10d      	bne.n	8006de0 <HAL_TIMEx_PWMN_Stop+0x68>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	4a17      	ldr	r2, [pc, #92]	; (8006e28 <HAL_TIMEx_PWMN_Stop+0xb0>)
 8006dcc:	4013      	ands	r3, r2
 8006dce:	d107      	bne.n	8006de0 <HAL_TIMEx_PWMN_Stop+0x68>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2101      	movs	r1, #1
 8006ddc:	438a      	bics	r2, r1
 8006dde:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d104      	bne.n	8006df0 <HAL_TIMEx_PWMN_Stop+0x78>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2244      	movs	r2, #68	; 0x44
 8006dea:	2101      	movs	r1, #1
 8006dec:	5499      	strb	r1, [r3, r2]
 8006dee:	e013      	b.n	8006e18 <HAL_TIMEx_PWMN_Stop+0xa0>
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d104      	bne.n	8006e00 <HAL_TIMEx_PWMN_Stop+0x88>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2245      	movs	r2, #69	; 0x45
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	5499      	strb	r1, [r3, r2]
 8006dfe:	e00b      	b.n	8006e18 <HAL_TIMEx_PWMN_Stop+0xa0>
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d104      	bne.n	8006e10 <HAL_TIMEx_PWMN_Stop+0x98>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2246      	movs	r2, #70	; 0x46
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	5499      	strb	r1, [r3, r2]
 8006e0e:	e003      	b.n	8006e18 <HAL_TIMEx_PWMN_Stop+0xa0>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2247      	movs	r2, #71	; 0x47
 8006e14:	2101      	movs	r1, #1
 8006e16:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	b002      	add	sp, #8
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	46c0      	nop			; (mov r8, r8)
 8006e24:	00001111 	.word	0x00001111
 8006e28:	00000444 	.word	0x00000444
 8006e2c:	ffff7fff 	.word	0xffff7fff

08006e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	223c      	movs	r2, #60	; 0x3c
 8006e3e:	5c9b      	ldrb	r3, [r3, r2]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d101      	bne.n	8006e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e44:	2302      	movs	r3, #2
 8006e46:	e04f      	b.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	223c      	movs	r2, #60	; 0x3c
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	223d      	movs	r2, #61	; 0x3d
 8006e54:	2102      	movs	r1, #2
 8006e56:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a20      	ldr	r2, [pc, #128]	; (8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d108      	bne.n	8006e84 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4a1f      	ldr	r2, [pc, #124]	; (8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006e76:	4013      	ands	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2270      	movs	r2, #112	; 0x70
 8006e88:	4393      	bics	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a13      	ldr	r2, [pc, #76]	; (8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d009      	beq.n	8006ebc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a12      	ldr	r2, [pc, #72]	; (8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d004      	beq.n	8006ebc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a11      	ldr	r2, [pc, #68]	; (8006efc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d10c      	bne.n	8006ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2280      	movs	r2, #128	; 0x80
 8006ec0:	4393      	bics	r3, r2
 8006ec2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	223d      	movs	r2, #61	; 0x3d
 8006eda:	2101      	movs	r1, #1
 8006edc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	223c      	movs	r2, #60	; 0x3c
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	0018      	movs	r0, r3
 8006eea:	46bd      	mov	sp, r7
 8006eec:	b004      	add	sp, #16
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	40012c00 	.word	0x40012c00
 8006ef4:	ff0fffff 	.word	0xff0fffff
 8006ef8:	40000400 	.word	0x40000400
 8006efc:	40014000 	.word	0x40014000

08006f00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	223c      	movs	r2, #60	; 0x3c
 8006f12:	5c9b      	ldrb	r3, [r3, r2]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d101      	bne.n	8006f1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f18:	2302      	movs	r3, #2
 8006f1a:	e079      	b.n	8007010 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	223c      	movs	r2, #60	; 0x3c
 8006f20:	2101      	movs	r1, #1
 8006f22:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	22ff      	movs	r2, #255	; 0xff
 8006f28:	4393      	bics	r3, r2
 8006f2a:	001a      	movs	r2, r3
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4a38      	ldr	r2, [pc, #224]	; (8007018 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006f38:	401a      	ands	r2, r3
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4a35      	ldr	r2, [pc, #212]	; (800701c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006f46:	401a      	ands	r2, r3
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4a33      	ldr	r2, [pc, #204]	; (8007020 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006f54:	401a      	ands	r2, r3
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4a30      	ldr	r2, [pc, #192]	; (8007024 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006f62:	401a      	ands	r2, r3
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4a2e      	ldr	r2, [pc, #184]	; (8007028 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006f70:	401a      	ands	r2, r3
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4a2b      	ldr	r2, [pc, #172]	; (800702c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006f7e:	401a      	ands	r2, r3
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4a29      	ldr	r2, [pc, #164]	; (8007030 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006f8c:	401a      	ands	r2, r3
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	041b      	lsls	r3, r3, #16
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a25      	ldr	r2, [pc, #148]	; (8007034 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d106      	bne.n	8006fb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	4a24      	ldr	r2, [pc, #144]	; (8007038 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006fa6:	401a      	ands	r2, r3
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a1f      	ldr	r2, [pc, #124]	; (8007034 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d121      	bne.n	8006ffe <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4a1f      	ldr	r2, [pc, #124]	; (800703c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006fbe:	401a      	ands	r2, r3
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc4:	051b      	lsls	r3, r3, #20
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4a1c      	ldr	r2, [pc, #112]	; (8007040 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006fce:	401a      	ands	r2, r3
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4a1a      	ldr	r2, [pc, #104]	; (8007044 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006fdc:	401a      	ands	r2, r3
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a12      	ldr	r2, [pc, #72]	; (8007034 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d106      	bne.n	8006ffe <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4a15      	ldr	r2, [pc, #84]	; (8007048 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006ff4:	401a      	ands	r2, r3
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	223c      	movs	r2, #60	; 0x3c
 800700a:	2100      	movs	r1, #0
 800700c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	0018      	movs	r0, r3
 8007012:	46bd      	mov	sp, r7
 8007014:	b004      	add	sp, #16
 8007016:	bd80      	pop	{r7, pc}
 8007018:	fffffcff 	.word	0xfffffcff
 800701c:	fffffbff 	.word	0xfffffbff
 8007020:	fffff7ff 	.word	0xfffff7ff
 8007024:	ffffefff 	.word	0xffffefff
 8007028:	ffffdfff 	.word	0xffffdfff
 800702c:	ffffbfff 	.word	0xffffbfff
 8007030:	fff0ffff 	.word	0xfff0ffff
 8007034:	40012c00 	.word	0x40012c00
 8007038:	efffffff 	.word	0xefffffff
 800703c:	ff0fffff 	.word	0xff0fffff
 8007040:	feffffff 	.word	0xfeffffff
 8007044:	fdffffff 	.word	0xfdffffff
 8007048:	dfffffff 	.word	0xdfffffff

0800704c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	221f      	movs	r2, #31
 800705c:	4013      	ands	r3, r2
 800705e:	2204      	movs	r2, #4
 8007060:	409a      	lsls	r2, r3
 8007062:	0013      	movs	r3, r2
 8007064:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	43d2      	mvns	r2, r2
 800706e:	401a      	ands	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6a1a      	ldr	r2, [r3, #32]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	211f      	movs	r1, #31
 800707c:	400b      	ands	r3, r1
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	4099      	lsls	r1, r3
 8007082:	000b      	movs	r3, r1
 8007084:	431a      	orrs	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	621a      	str	r2, [r3, #32]
}
 800708a:	46c0      	nop			; (mov r8, r8)
 800708c:	46bd      	mov	sp, r7
 800708e:	b006      	add	sp, #24
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e046      	b.n	8007134 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2288      	movs	r2, #136	; 0x88
 80070aa:	589b      	ldr	r3, [r3, r2]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d107      	bne.n	80070c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2284      	movs	r2, #132	; 0x84
 80070b4:	2100      	movs	r1, #0
 80070b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	0018      	movs	r0, r3
 80070bc:	f7fc f9c2 	bl	8003444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2288      	movs	r2, #136	; 0x88
 80070c4:	2124      	movs	r1, #36	; 0x24
 80070c6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2101      	movs	r1, #1
 80070d4:	438a      	bics	r2, r1
 80070d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	0018      	movs	r0, r3
 80070dc:	f000 f93e 	bl	800735c <UART_SetConfig>
 80070e0:	0003      	movs	r3, r0
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d101      	bne.n	80070ea <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e024      	b.n	8007134 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	0018      	movs	r0, r3
 80070f6:	f000 fad5 	bl	80076a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	490d      	ldr	r1, [pc, #52]	; (800713c <HAL_UART_Init+0xa8>)
 8007106:	400a      	ands	r2, r1
 8007108:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	212a      	movs	r1, #42	; 0x2a
 8007116:	438a      	bics	r2, r1
 8007118:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2101      	movs	r1, #1
 8007126:	430a      	orrs	r2, r1
 8007128:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	0018      	movs	r0, r3
 800712e:	f000 fb6d 	bl	800780c <UART_CheckIdleState>
 8007132:	0003      	movs	r3, r0
}
 8007134:	0018      	movs	r0, r3
 8007136:	46bd      	mov	sp, r7
 8007138:	b002      	add	sp, #8
 800713a:	bd80      	pop	{r7, pc}
 800713c:	ffffb7ff 	.word	0xffffb7ff

08007140 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b08a      	sub	sp, #40	; 0x28
 8007144:	af02      	add	r7, sp, #8
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	603b      	str	r3, [r7, #0]
 800714c:	1dbb      	adds	r3, r7, #6
 800714e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2288      	movs	r2, #136	; 0x88
 8007154:	589b      	ldr	r3, [r3, r2]
 8007156:	2b20      	cmp	r3, #32
 8007158:	d000      	beq.n	800715c <HAL_UART_Transmit+0x1c>
 800715a:	e088      	b.n	800726e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <HAL_UART_Transmit+0x2a>
 8007162:	1dbb      	adds	r3, r7, #6
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e080      	b.n	8007270 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	689a      	ldr	r2, [r3, #8]
 8007172:	2380      	movs	r3, #128	; 0x80
 8007174:	015b      	lsls	r3, r3, #5
 8007176:	429a      	cmp	r2, r3
 8007178:	d109      	bne.n	800718e <HAL_UART_Transmit+0x4e>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d105      	bne.n	800718e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2201      	movs	r2, #1
 8007186:	4013      	ands	r3, r2
 8007188:	d001      	beq.n	800718e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e070      	b.n	8007270 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2290      	movs	r2, #144	; 0x90
 8007192:	2100      	movs	r1, #0
 8007194:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2288      	movs	r2, #136	; 0x88
 800719a:	2121      	movs	r1, #33	; 0x21
 800719c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800719e:	f7fd f8db 	bl	8004358 <HAL_GetTick>
 80071a2:	0003      	movs	r3, r0
 80071a4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	1dba      	adds	r2, r7, #6
 80071aa:	2154      	movs	r1, #84	; 0x54
 80071ac:	8812      	ldrh	r2, [r2, #0]
 80071ae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	1dba      	adds	r2, r7, #6
 80071b4:	2156      	movs	r1, #86	; 0x56
 80071b6:	8812      	ldrh	r2, [r2, #0]
 80071b8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	2380      	movs	r3, #128	; 0x80
 80071c0:	015b      	lsls	r3, r3, #5
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d108      	bne.n	80071d8 <HAL_UART_Transmit+0x98>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d104      	bne.n	80071d8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	61bb      	str	r3, [r7, #24]
 80071d6:	e003      	b.n	80071e0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071dc:	2300      	movs	r3, #0
 80071de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071e0:	e02c      	b.n	800723c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	0013      	movs	r3, r2
 80071ec:	2200      	movs	r2, #0
 80071ee:	2180      	movs	r1, #128	; 0x80
 80071f0:	f000 fb5a 	bl	80078a8 <UART_WaitOnFlagUntilTimeout>
 80071f4:	1e03      	subs	r3, r0, #0
 80071f6:	d001      	beq.n	80071fc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e039      	b.n	8007270 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10b      	bne.n	800721a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	001a      	movs	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	05d2      	lsls	r2, r2, #23
 800720e:	0dd2      	lsrs	r2, r2, #23
 8007210:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	3302      	adds	r3, #2
 8007216:	61bb      	str	r3, [r7, #24]
 8007218:	e007      	b.n	800722a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	781a      	ldrb	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	3301      	adds	r3, #1
 8007228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2256      	movs	r2, #86	; 0x56
 800722e:	5a9b      	ldrh	r3, [r3, r2]
 8007230:	b29b      	uxth	r3, r3
 8007232:	3b01      	subs	r3, #1
 8007234:	b299      	uxth	r1, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2256      	movs	r2, #86	; 0x56
 800723a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2256      	movs	r2, #86	; 0x56
 8007240:	5a9b      	ldrh	r3, [r3, r2]
 8007242:	b29b      	uxth	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1cc      	bne.n	80071e2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	0013      	movs	r3, r2
 8007252:	2200      	movs	r2, #0
 8007254:	2140      	movs	r1, #64	; 0x40
 8007256:	f000 fb27 	bl	80078a8 <UART_WaitOnFlagUntilTimeout>
 800725a:	1e03      	subs	r3, r0, #0
 800725c:	d001      	beq.n	8007262 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e006      	b.n	8007270 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2288      	movs	r2, #136	; 0x88
 8007266:	2120      	movs	r1, #32
 8007268:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	e000      	b.n	8007270 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800726e:	2302      	movs	r3, #2
  }
}
 8007270:	0018      	movs	r0, r3
 8007272:	46bd      	mov	sp, r7
 8007274:	b008      	add	sp, #32
 8007276:	bd80      	pop	{r7, pc}

08007278 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b088      	sub	sp, #32
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	1dbb      	adds	r3, r7, #6
 8007284:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	228c      	movs	r2, #140	; 0x8c
 800728a:	589b      	ldr	r3, [r3, r2]
 800728c:	2b20      	cmp	r3, #32
 800728e:	d145      	bne.n	800731c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <HAL_UART_Receive_IT+0x26>
 8007296:	1dbb      	adds	r3, r7, #6
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e03d      	b.n	800731e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	689a      	ldr	r2, [r3, #8]
 80072a6:	2380      	movs	r3, #128	; 0x80
 80072a8:	015b      	lsls	r3, r3, #5
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d109      	bne.n	80072c2 <HAL_UART_Receive_IT+0x4a>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d105      	bne.n	80072c2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2201      	movs	r2, #1
 80072ba:	4013      	ands	r3, r2
 80072bc:	d001      	beq.n	80072c2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e02d      	b.n	800731e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	2380      	movs	r3, #128	; 0x80
 80072d0:	041b      	lsls	r3, r3, #16
 80072d2:	4013      	ands	r3, r2
 80072d4:	d019      	beq.n	800730a <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072d6:	f3ef 8310 	mrs	r3, PRIMASK
 80072da:	613b      	str	r3, [r7, #16]
  return(result);
 80072dc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072de:	61fb      	str	r3, [r7, #28]
 80072e0:	2301      	movs	r3, #1
 80072e2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f383 8810 	msr	PRIMASK, r3
}
 80072ea:	46c0      	nop			; (mov r8, r8)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2180      	movs	r1, #128	; 0x80
 80072f8:	04c9      	lsls	r1, r1, #19
 80072fa:	430a      	orrs	r2, r1
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	f383 8810 	msr	PRIMASK, r3
}
 8007308:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800730a:	1dbb      	adds	r3, r7, #6
 800730c:	881a      	ldrh	r2, [r3, #0]
 800730e:	68b9      	ldr	r1, [r7, #8]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	0018      	movs	r0, r3
 8007314:	f000 fb90 	bl	8007a38 <UART_Start_Receive_IT>
 8007318:	0003      	movs	r3, r0
 800731a:	e000      	b.n	800731e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800731c:	2302      	movs	r3, #2
  }
}
 800731e:	0018      	movs	r0, r3
 8007320:	46bd      	mov	sp, r7
 8007322:	b008      	add	sp, #32
 8007324:	bd80      	pop	{r7, pc}

08007326 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800732e:	46c0      	nop			; (mov r8, r8)
 8007330:	46bd      	mov	sp, r7
 8007332:	b002      	add	sp, #8
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800733e:	46c0      	nop			; (mov r8, r8)
 8007340:	46bd      	mov	sp, r7
 8007342:	b002      	add	sp, #8
 8007344:	bd80      	pop	{r7, pc}

08007346 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	000a      	movs	r2, r1
 8007350:	1cbb      	adds	r3, r7, #2
 8007352:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007354:	46c0      	nop			; (mov r8, r8)
 8007356:	46bd      	mov	sp, r7
 8007358:	b002      	add	sp, #8
 800735a:	bd80      	pop	{r7, pc}

0800735c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b088      	sub	sp, #32
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007364:	231a      	movs	r3, #26
 8007366:	18fb      	adds	r3, r7, r3
 8007368:	2200      	movs	r2, #0
 800736a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	4313      	orrs	r3, r2
 8007382:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4abc      	ldr	r2, [pc, #752]	; (800767c <UART_SetConfig+0x320>)
 800738c:	4013      	ands	r3, r2
 800738e:	0019      	movs	r1, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	69fa      	ldr	r2, [r7, #28]
 8007396:	430a      	orrs	r2, r1
 8007398:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	4ab7      	ldr	r2, [pc, #732]	; (8007680 <UART_SetConfig+0x324>)
 80073a2:	4013      	ands	r3, r2
 80073a4:	0019      	movs	r1, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68da      	ldr	r2, [r3, #12]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a1b      	ldr	r3, [r3, #32]
 80073bc:	69fa      	ldr	r2, [r7, #28]
 80073be:	4313      	orrs	r3, r2
 80073c0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	4aae      	ldr	r2, [pc, #696]	; (8007684 <UART_SetConfig+0x328>)
 80073ca:	4013      	ands	r3, r2
 80073cc:	0019      	movs	r1, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69fa      	ldr	r2, [r7, #28]
 80073d4:	430a      	orrs	r2, r1
 80073d6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073de:	220f      	movs	r2, #15
 80073e0:	4393      	bics	r3, r2
 80073e2:	0019      	movs	r1, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4aa4      	ldr	r2, [pc, #656]	; (8007688 <UART_SetConfig+0x32c>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d127      	bne.n	800744a <UART_SetConfig+0xee>
 80073fa:	4ba4      	ldr	r3, [pc, #656]	; (800768c <UART_SetConfig+0x330>)
 80073fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fe:	2203      	movs	r2, #3
 8007400:	4013      	ands	r3, r2
 8007402:	2b03      	cmp	r3, #3
 8007404:	d017      	beq.n	8007436 <UART_SetConfig+0xda>
 8007406:	d81b      	bhi.n	8007440 <UART_SetConfig+0xe4>
 8007408:	2b02      	cmp	r3, #2
 800740a:	d00a      	beq.n	8007422 <UART_SetConfig+0xc6>
 800740c:	d818      	bhi.n	8007440 <UART_SetConfig+0xe4>
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <UART_SetConfig+0xbc>
 8007412:	2b01      	cmp	r3, #1
 8007414:	d00a      	beq.n	800742c <UART_SetConfig+0xd0>
 8007416:	e013      	b.n	8007440 <UART_SetConfig+0xe4>
 8007418:	231b      	movs	r3, #27
 800741a:	18fb      	adds	r3, r7, r3
 800741c:	2200      	movs	r2, #0
 800741e:	701a      	strb	r2, [r3, #0]
 8007420:	e058      	b.n	80074d4 <UART_SetConfig+0x178>
 8007422:	231b      	movs	r3, #27
 8007424:	18fb      	adds	r3, r7, r3
 8007426:	2202      	movs	r2, #2
 8007428:	701a      	strb	r2, [r3, #0]
 800742a:	e053      	b.n	80074d4 <UART_SetConfig+0x178>
 800742c:	231b      	movs	r3, #27
 800742e:	18fb      	adds	r3, r7, r3
 8007430:	2204      	movs	r2, #4
 8007432:	701a      	strb	r2, [r3, #0]
 8007434:	e04e      	b.n	80074d4 <UART_SetConfig+0x178>
 8007436:	231b      	movs	r3, #27
 8007438:	18fb      	adds	r3, r7, r3
 800743a:	2208      	movs	r2, #8
 800743c:	701a      	strb	r2, [r3, #0]
 800743e:	e049      	b.n	80074d4 <UART_SetConfig+0x178>
 8007440:	231b      	movs	r3, #27
 8007442:	18fb      	adds	r3, r7, r3
 8007444:	2210      	movs	r2, #16
 8007446:	701a      	strb	r2, [r3, #0]
 8007448:	e044      	b.n	80074d4 <UART_SetConfig+0x178>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a90      	ldr	r2, [pc, #576]	; (8007690 <UART_SetConfig+0x334>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d127      	bne.n	80074a4 <UART_SetConfig+0x148>
 8007454:	4b8d      	ldr	r3, [pc, #564]	; (800768c <UART_SetConfig+0x330>)
 8007456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007458:	220c      	movs	r2, #12
 800745a:	4013      	ands	r3, r2
 800745c:	2b0c      	cmp	r3, #12
 800745e:	d017      	beq.n	8007490 <UART_SetConfig+0x134>
 8007460:	d81b      	bhi.n	800749a <UART_SetConfig+0x13e>
 8007462:	2b08      	cmp	r3, #8
 8007464:	d00a      	beq.n	800747c <UART_SetConfig+0x120>
 8007466:	d818      	bhi.n	800749a <UART_SetConfig+0x13e>
 8007468:	2b00      	cmp	r3, #0
 800746a:	d002      	beq.n	8007472 <UART_SetConfig+0x116>
 800746c:	2b04      	cmp	r3, #4
 800746e:	d00a      	beq.n	8007486 <UART_SetConfig+0x12a>
 8007470:	e013      	b.n	800749a <UART_SetConfig+0x13e>
 8007472:	231b      	movs	r3, #27
 8007474:	18fb      	adds	r3, r7, r3
 8007476:	2200      	movs	r2, #0
 8007478:	701a      	strb	r2, [r3, #0]
 800747a:	e02b      	b.n	80074d4 <UART_SetConfig+0x178>
 800747c:	231b      	movs	r3, #27
 800747e:	18fb      	adds	r3, r7, r3
 8007480:	2202      	movs	r2, #2
 8007482:	701a      	strb	r2, [r3, #0]
 8007484:	e026      	b.n	80074d4 <UART_SetConfig+0x178>
 8007486:	231b      	movs	r3, #27
 8007488:	18fb      	adds	r3, r7, r3
 800748a:	2204      	movs	r2, #4
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	e021      	b.n	80074d4 <UART_SetConfig+0x178>
 8007490:	231b      	movs	r3, #27
 8007492:	18fb      	adds	r3, r7, r3
 8007494:	2208      	movs	r2, #8
 8007496:	701a      	strb	r2, [r3, #0]
 8007498:	e01c      	b.n	80074d4 <UART_SetConfig+0x178>
 800749a:	231b      	movs	r3, #27
 800749c:	18fb      	adds	r3, r7, r3
 800749e:	2210      	movs	r2, #16
 80074a0:	701a      	strb	r2, [r3, #0]
 80074a2:	e017      	b.n	80074d4 <UART_SetConfig+0x178>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a7a      	ldr	r2, [pc, #488]	; (8007694 <UART_SetConfig+0x338>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d104      	bne.n	80074b8 <UART_SetConfig+0x15c>
 80074ae:	231b      	movs	r3, #27
 80074b0:	18fb      	adds	r3, r7, r3
 80074b2:	2200      	movs	r2, #0
 80074b4:	701a      	strb	r2, [r3, #0]
 80074b6:	e00d      	b.n	80074d4 <UART_SetConfig+0x178>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a76      	ldr	r2, [pc, #472]	; (8007698 <UART_SetConfig+0x33c>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d104      	bne.n	80074cc <UART_SetConfig+0x170>
 80074c2:	231b      	movs	r3, #27
 80074c4:	18fb      	adds	r3, r7, r3
 80074c6:	2200      	movs	r2, #0
 80074c8:	701a      	strb	r2, [r3, #0]
 80074ca:	e003      	b.n	80074d4 <UART_SetConfig+0x178>
 80074cc:	231b      	movs	r3, #27
 80074ce:	18fb      	adds	r3, r7, r3
 80074d0:	2210      	movs	r2, #16
 80074d2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	69da      	ldr	r2, [r3, #28]
 80074d8:	2380      	movs	r3, #128	; 0x80
 80074da:	021b      	lsls	r3, r3, #8
 80074dc:	429a      	cmp	r2, r3
 80074de:	d000      	beq.n	80074e2 <UART_SetConfig+0x186>
 80074e0:	e065      	b.n	80075ae <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80074e2:	231b      	movs	r3, #27
 80074e4:	18fb      	adds	r3, r7, r3
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d015      	beq.n	8007518 <UART_SetConfig+0x1bc>
 80074ec:	dc18      	bgt.n	8007520 <UART_SetConfig+0x1c4>
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	d00d      	beq.n	800750e <UART_SetConfig+0x1b2>
 80074f2:	dc15      	bgt.n	8007520 <UART_SetConfig+0x1c4>
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <UART_SetConfig+0x1a2>
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d005      	beq.n	8007508 <UART_SetConfig+0x1ac>
 80074fc:	e010      	b.n	8007520 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074fe:	f7fe fad9 	bl	8005ab4 <HAL_RCC_GetPCLK1Freq>
 8007502:	0003      	movs	r3, r0
 8007504:	617b      	str	r3, [r7, #20]
        break;
 8007506:	e012      	b.n	800752e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007508:	4b64      	ldr	r3, [pc, #400]	; (800769c <UART_SetConfig+0x340>)
 800750a:	617b      	str	r3, [r7, #20]
        break;
 800750c:	e00f      	b.n	800752e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800750e:	f7fe fa45 	bl	800599c <HAL_RCC_GetSysClockFreq>
 8007512:	0003      	movs	r3, r0
 8007514:	617b      	str	r3, [r7, #20]
        break;
 8007516:	e00a      	b.n	800752e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007518:	2380      	movs	r3, #128	; 0x80
 800751a:	021b      	lsls	r3, r3, #8
 800751c:	617b      	str	r3, [r7, #20]
        break;
 800751e:	e006      	b.n	800752e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007520:	2300      	movs	r3, #0
 8007522:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007524:	231a      	movs	r3, #26
 8007526:	18fb      	adds	r3, r7, r3
 8007528:	2201      	movs	r2, #1
 800752a:	701a      	strb	r2, [r3, #0]
        break;
 800752c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d100      	bne.n	8007536 <UART_SetConfig+0x1da>
 8007534:	e08d      	b.n	8007652 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800753a:	4b59      	ldr	r3, [pc, #356]	; (80076a0 <UART_SetConfig+0x344>)
 800753c:	0052      	lsls	r2, r2, #1
 800753e:	5ad3      	ldrh	r3, [r2, r3]
 8007540:	0019      	movs	r1, r3
 8007542:	6978      	ldr	r0, [r7, #20]
 8007544:	f7f8 fdea 	bl	800011c <__udivsi3>
 8007548:	0003      	movs	r3, r0
 800754a:	005a      	lsls	r2, r3, #1
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	085b      	lsrs	r3, r3, #1
 8007552:	18d2      	adds	r2, r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	0019      	movs	r1, r3
 800755a:	0010      	movs	r0, r2
 800755c:	f7f8 fdde 	bl	800011c <__udivsi3>
 8007560:	0003      	movs	r3, r0
 8007562:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	2b0f      	cmp	r3, #15
 8007568:	d91c      	bls.n	80075a4 <UART_SetConfig+0x248>
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	2380      	movs	r3, #128	; 0x80
 800756e:	025b      	lsls	r3, r3, #9
 8007570:	429a      	cmp	r2, r3
 8007572:	d217      	bcs.n	80075a4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	b29a      	uxth	r2, r3
 8007578:	200e      	movs	r0, #14
 800757a:	183b      	adds	r3, r7, r0
 800757c:	210f      	movs	r1, #15
 800757e:	438a      	bics	r2, r1
 8007580:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	085b      	lsrs	r3, r3, #1
 8007586:	b29b      	uxth	r3, r3
 8007588:	2207      	movs	r2, #7
 800758a:	4013      	ands	r3, r2
 800758c:	b299      	uxth	r1, r3
 800758e:	183b      	adds	r3, r7, r0
 8007590:	183a      	adds	r2, r7, r0
 8007592:	8812      	ldrh	r2, [r2, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	183a      	adds	r2, r7, r0
 800759e:	8812      	ldrh	r2, [r2, #0]
 80075a0:	60da      	str	r2, [r3, #12]
 80075a2:	e056      	b.n	8007652 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80075a4:	231a      	movs	r3, #26
 80075a6:	18fb      	adds	r3, r7, r3
 80075a8:	2201      	movs	r2, #1
 80075aa:	701a      	strb	r2, [r3, #0]
 80075ac:	e051      	b.n	8007652 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075ae:	231b      	movs	r3, #27
 80075b0:	18fb      	adds	r3, r7, r3
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	2b08      	cmp	r3, #8
 80075b6:	d015      	beq.n	80075e4 <UART_SetConfig+0x288>
 80075b8:	dc18      	bgt.n	80075ec <UART_SetConfig+0x290>
 80075ba:	2b04      	cmp	r3, #4
 80075bc:	d00d      	beq.n	80075da <UART_SetConfig+0x27e>
 80075be:	dc15      	bgt.n	80075ec <UART_SetConfig+0x290>
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <UART_SetConfig+0x26e>
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d005      	beq.n	80075d4 <UART_SetConfig+0x278>
 80075c8:	e010      	b.n	80075ec <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075ca:	f7fe fa73 	bl	8005ab4 <HAL_RCC_GetPCLK1Freq>
 80075ce:	0003      	movs	r3, r0
 80075d0:	617b      	str	r3, [r7, #20]
        break;
 80075d2:	e012      	b.n	80075fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075d4:	4b31      	ldr	r3, [pc, #196]	; (800769c <UART_SetConfig+0x340>)
 80075d6:	617b      	str	r3, [r7, #20]
        break;
 80075d8:	e00f      	b.n	80075fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075da:	f7fe f9df 	bl	800599c <HAL_RCC_GetSysClockFreq>
 80075de:	0003      	movs	r3, r0
 80075e0:	617b      	str	r3, [r7, #20]
        break;
 80075e2:	e00a      	b.n	80075fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075e4:	2380      	movs	r3, #128	; 0x80
 80075e6:	021b      	lsls	r3, r3, #8
 80075e8:	617b      	str	r3, [r7, #20]
        break;
 80075ea:	e006      	b.n	80075fa <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80075ec:	2300      	movs	r3, #0
 80075ee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80075f0:	231a      	movs	r3, #26
 80075f2:	18fb      	adds	r3, r7, r3
 80075f4:	2201      	movs	r2, #1
 80075f6:	701a      	strb	r2, [r3, #0]
        break;
 80075f8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d028      	beq.n	8007652 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007604:	4b26      	ldr	r3, [pc, #152]	; (80076a0 <UART_SetConfig+0x344>)
 8007606:	0052      	lsls	r2, r2, #1
 8007608:	5ad3      	ldrh	r3, [r2, r3]
 800760a:	0019      	movs	r1, r3
 800760c:	6978      	ldr	r0, [r7, #20]
 800760e:	f7f8 fd85 	bl	800011c <__udivsi3>
 8007612:	0003      	movs	r3, r0
 8007614:	001a      	movs	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	085b      	lsrs	r3, r3, #1
 800761c:	18d2      	adds	r2, r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	0019      	movs	r1, r3
 8007624:	0010      	movs	r0, r2
 8007626:	f7f8 fd79 	bl	800011c <__udivsi3>
 800762a:	0003      	movs	r3, r0
 800762c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	2b0f      	cmp	r3, #15
 8007632:	d90a      	bls.n	800764a <UART_SetConfig+0x2ee>
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	2380      	movs	r3, #128	; 0x80
 8007638:	025b      	lsls	r3, r3, #9
 800763a:	429a      	cmp	r2, r3
 800763c:	d205      	bcs.n	800764a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	b29a      	uxth	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	60da      	str	r2, [r3, #12]
 8007648:	e003      	b.n	8007652 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800764a:	231a      	movs	r3, #26
 800764c:	18fb      	adds	r3, r7, r3
 800764e:	2201      	movs	r2, #1
 8007650:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	226a      	movs	r2, #106	; 0x6a
 8007656:	2101      	movs	r1, #1
 8007658:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2268      	movs	r2, #104	; 0x68
 800765e:	2101      	movs	r1, #1
 8007660:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800766e:	231a      	movs	r3, #26
 8007670:	18fb      	adds	r3, r7, r3
 8007672:	781b      	ldrb	r3, [r3, #0]
}
 8007674:	0018      	movs	r0, r3
 8007676:	46bd      	mov	sp, r7
 8007678:	b008      	add	sp, #32
 800767a:	bd80      	pop	{r7, pc}
 800767c:	cfff69f3 	.word	0xcfff69f3
 8007680:	ffffcfff 	.word	0xffffcfff
 8007684:	11fff4ff 	.word	0x11fff4ff
 8007688:	40013800 	.word	0x40013800
 800768c:	40021000 	.word	0x40021000
 8007690:	40004400 	.word	0x40004400
 8007694:	40004800 	.word	0x40004800
 8007698:	40004c00 	.word	0x40004c00
 800769c:	00f42400 	.word	0x00f42400
 80076a0:	0800d5dc 	.word	0x0800d5dc

080076a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b0:	2201      	movs	r2, #1
 80076b2:	4013      	ands	r3, r2
 80076b4:	d00b      	beq.n	80076ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	4a4a      	ldr	r2, [pc, #296]	; (80077e8 <UART_AdvFeatureConfig+0x144>)
 80076be:	4013      	ands	r3, r2
 80076c0:	0019      	movs	r1, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d2:	2202      	movs	r2, #2
 80076d4:	4013      	ands	r3, r2
 80076d6:	d00b      	beq.n	80076f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	4a43      	ldr	r2, [pc, #268]	; (80077ec <UART_AdvFeatureConfig+0x148>)
 80076e0:	4013      	ands	r3, r2
 80076e2:	0019      	movs	r1, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f4:	2204      	movs	r2, #4
 80076f6:	4013      	ands	r3, r2
 80076f8:	d00b      	beq.n	8007712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	4a3b      	ldr	r2, [pc, #236]	; (80077f0 <UART_AdvFeatureConfig+0x14c>)
 8007702:	4013      	ands	r3, r2
 8007704:	0019      	movs	r1, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007716:	2208      	movs	r2, #8
 8007718:	4013      	ands	r3, r2
 800771a:	d00b      	beq.n	8007734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	4a34      	ldr	r2, [pc, #208]	; (80077f4 <UART_AdvFeatureConfig+0x150>)
 8007724:	4013      	ands	r3, r2
 8007726:	0019      	movs	r1, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007738:	2210      	movs	r2, #16
 800773a:	4013      	ands	r3, r2
 800773c:	d00b      	beq.n	8007756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	4a2c      	ldr	r2, [pc, #176]	; (80077f8 <UART_AdvFeatureConfig+0x154>)
 8007746:	4013      	ands	r3, r2
 8007748:	0019      	movs	r1, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	2220      	movs	r2, #32
 800775c:	4013      	ands	r3, r2
 800775e:	d00b      	beq.n	8007778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	4a25      	ldr	r2, [pc, #148]	; (80077fc <UART_AdvFeatureConfig+0x158>)
 8007768:	4013      	ands	r3, r2
 800776a:	0019      	movs	r1, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777c:	2240      	movs	r2, #64	; 0x40
 800777e:	4013      	ands	r3, r2
 8007780:	d01d      	beq.n	80077be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	4a1d      	ldr	r2, [pc, #116]	; (8007800 <UART_AdvFeatureConfig+0x15c>)
 800778a:	4013      	ands	r3, r2
 800778c:	0019      	movs	r1, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800779e:	2380      	movs	r3, #128	; 0x80
 80077a0:	035b      	lsls	r3, r3, #13
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d10b      	bne.n	80077be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	4a15      	ldr	r2, [pc, #84]	; (8007804 <UART_AdvFeatureConfig+0x160>)
 80077ae:	4013      	ands	r3, r2
 80077b0:	0019      	movs	r1, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c2:	2280      	movs	r2, #128	; 0x80
 80077c4:	4013      	ands	r3, r2
 80077c6:	d00b      	beq.n	80077e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	4a0e      	ldr	r2, [pc, #56]	; (8007808 <UART_AdvFeatureConfig+0x164>)
 80077d0:	4013      	ands	r3, r2
 80077d2:	0019      	movs	r1, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	430a      	orrs	r2, r1
 80077de:	605a      	str	r2, [r3, #4]
  }
}
 80077e0:	46c0      	nop			; (mov r8, r8)
 80077e2:	46bd      	mov	sp, r7
 80077e4:	b002      	add	sp, #8
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	fffdffff 	.word	0xfffdffff
 80077ec:	fffeffff 	.word	0xfffeffff
 80077f0:	fffbffff 	.word	0xfffbffff
 80077f4:	ffff7fff 	.word	0xffff7fff
 80077f8:	ffffefff 	.word	0xffffefff
 80077fc:	ffffdfff 	.word	0xffffdfff
 8007800:	ffefffff 	.word	0xffefffff
 8007804:	ff9fffff 	.word	0xff9fffff
 8007808:	fff7ffff 	.word	0xfff7ffff

0800780c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af02      	add	r7, sp, #8
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2290      	movs	r2, #144	; 0x90
 8007818:	2100      	movs	r1, #0
 800781a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800781c:	f7fc fd9c 	bl	8004358 <HAL_GetTick>
 8007820:	0003      	movs	r3, r0
 8007822:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2208      	movs	r2, #8
 800782c:	4013      	ands	r3, r2
 800782e:	2b08      	cmp	r3, #8
 8007830:	d10c      	bne.n	800784c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2280      	movs	r2, #128	; 0x80
 8007836:	0391      	lsls	r1, r2, #14
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	4a1a      	ldr	r2, [pc, #104]	; (80078a4 <UART_CheckIdleState+0x98>)
 800783c:	9200      	str	r2, [sp, #0]
 800783e:	2200      	movs	r2, #0
 8007840:	f000 f832 	bl	80078a8 <UART_WaitOnFlagUntilTimeout>
 8007844:	1e03      	subs	r3, r0, #0
 8007846:	d001      	beq.n	800784c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e026      	b.n	800789a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2204      	movs	r2, #4
 8007854:	4013      	ands	r3, r2
 8007856:	2b04      	cmp	r3, #4
 8007858:	d10c      	bne.n	8007874 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2280      	movs	r2, #128	; 0x80
 800785e:	03d1      	lsls	r1, r2, #15
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	4a10      	ldr	r2, [pc, #64]	; (80078a4 <UART_CheckIdleState+0x98>)
 8007864:	9200      	str	r2, [sp, #0]
 8007866:	2200      	movs	r2, #0
 8007868:	f000 f81e 	bl	80078a8 <UART_WaitOnFlagUntilTimeout>
 800786c:	1e03      	subs	r3, r0, #0
 800786e:	d001      	beq.n	8007874 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e012      	b.n	800789a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2288      	movs	r2, #136	; 0x88
 8007878:	2120      	movs	r1, #32
 800787a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	228c      	movs	r2, #140	; 0x8c
 8007880:	2120      	movs	r1, #32
 8007882:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2284      	movs	r2, #132	; 0x84
 8007894:	2100      	movs	r1, #0
 8007896:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	0018      	movs	r0, r3
 800789c:	46bd      	mov	sp, r7
 800789e:	b004      	add	sp, #16
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	46c0      	nop			; (mov r8, r8)
 80078a4:	01ffffff 	.word	0x01ffffff

080078a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b094      	sub	sp, #80	; 0x50
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	1dfb      	adds	r3, r7, #7
 80078b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078b8:	e0a7      	b.n	8007a0a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078bc:	3301      	adds	r3, #1
 80078be:	d100      	bne.n	80078c2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80078c0:	e0a3      	b.n	8007a0a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078c2:	f7fc fd49 	bl	8004358 <HAL_GetTick>
 80078c6:	0002      	movs	r2, r0
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d302      	bcc.n	80078d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80078d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d13f      	bne.n	8007958 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078d8:	f3ef 8310 	mrs	r3, PRIMASK
 80078dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80078de:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80078e0:	647b      	str	r3, [r7, #68]	; 0x44
 80078e2:	2301      	movs	r3, #1
 80078e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	f383 8810 	msr	PRIMASK, r3
}
 80078ec:	46c0      	nop			; (mov r8, r8)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	494e      	ldr	r1, [pc, #312]	; (8007a34 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80078fa:	400a      	ands	r2, r1
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007900:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007904:	f383 8810 	msr	PRIMASK, r3
}
 8007908:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800790a:	f3ef 8310 	mrs	r3, PRIMASK
 800790e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007912:	643b      	str	r3, [r7, #64]	; 0x40
 8007914:	2301      	movs	r3, #1
 8007916:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791a:	f383 8810 	msr	PRIMASK, r3
}
 800791e:	46c0      	nop			; (mov r8, r8)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689a      	ldr	r2, [r3, #8]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2101      	movs	r1, #1
 800792c:	438a      	bics	r2, r1
 800792e:	609a      	str	r2, [r3, #8]
 8007930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007932:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007936:	f383 8810 	msr	PRIMASK, r3
}
 800793a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2288      	movs	r2, #136	; 0x88
 8007940:	2120      	movs	r1, #32
 8007942:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	228c      	movs	r2, #140	; 0x8c
 8007948:	2120      	movs	r1, #32
 800794a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2284      	movs	r2, #132	; 0x84
 8007950:	2100      	movs	r1, #0
 8007952:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e069      	b.n	8007a2c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2204      	movs	r2, #4
 8007960:	4013      	ands	r3, r2
 8007962:	d052      	beq.n	8007a0a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	69da      	ldr	r2, [r3, #28]
 800796a:	2380      	movs	r3, #128	; 0x80
 800796c:	011b      	lsls	r3, r3, #4
 800796e:	401a      	ands	r2, r3
 8007970:	2380      	movs	r3, #128	; 0x80
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	429a      	cmp	r2, r3
 8007976:	d148      	bne.n	8007a0a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2280      	movs	r2, #128	; 0x80
 800797e:	0112      	lsls	r2, r2, #4
 8007980:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007982:	f3ef 8310 	mrs	r3, PRIMASK
 8007986:	613b      	str	r3, [r7, #16]
  return(result);
 8007988:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800798a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800798c:	2301      	movs	r3, #1
 800798e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f383 8810 	msr	PRIMASK, r3
}
 8007996:	46c0      	nop			; (mov r8, r8)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4924      	ldr	r1, [pc, #144]	; (8007a34 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80079a4:	400a      	ands	r2, r1
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	f383 8810 	msr	PRIMASK, r3
}
 80079b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079b4:	f3ef 8310 	mrs	r3, PRIMASK
 80079b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80079ba:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80079be:	2301      	movs	r3, #1
 80079c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	f383 8810 	msr	PRIMASK, r3
}
 80079c8:	46c0      	nop			; (mov r8, r8)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2101      	movs	r1, #1
 80079d6:	438a      	bics	r2, r1
 80079d8:	609a      	str	r2, [r3, #8]
 80079da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	f383 8810 	msr	PRIMASK, r3
}
 80079e4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2288      	movs	r2, #136	; 0x88
 80079ea:	2120      	movs	r1, #32
 80079ec:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	228c      	movs	r2, #140	; 0x8c
 80079f2:	2120      	movs	r1, #32
 80079f4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2290      	movs	r2, #144	; 0x90
 80079fa:	2120      	movs	r1, #32
 80079fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2284      	movs	r2, #132	; 0x84
 8007a02:	2100      	movs	r1, #0
 8007a04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e010      	b.n	8007a2c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	4013      	ands	r3, r2
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	425a      	negs	r2, r3
 8007a1a:	4153      	adcs	r3, r2
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	001a      	movs	r2, r3
 8007a20:	1dfb      	adds	r3, r7, #7
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d100      	bne.n	8007a2a <UART_WaitOnFlagUntilTimeout+0x182>
 8007a28:	e747      	b.n	80078ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	0018      	movs	r0, r3
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	b014      	add	sp, #80	; 0x50
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	fffffe5f 	.word	0xfffffe5f

08007a38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b098      	sub	sp, #96	; 0x60
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	1dbb      	adds	r3, r7, #6
 8007a44:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	1dba      	adds	r2, r7, #6
 8007a50:	215c      	movs	r1, #92	; 0x5c
 8007a52:	8812      	ldrh	r2, [r2, #0]
 8007a54:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	1dba      	adds	r2, r7, #6
 8007a5a:	215e      	movs	r1, #94	; 0x5e
 8007a5c:	8812      	ldrh	r2, [r2, #0]
 8007a5e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689a      	ldr	r2, [r3, #8]
 8007a6a:	2380      	movs	r3, #128	; 0x80
 8007a6c:	015b      	lsls	r3, r3, #5
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d10d      	bne.n	8007a8e <UART_Start_Receive_IT+0x56>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d104      	bne.n	8007a84 <UART_Start_Receive_IT+0x4c>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2260      	movs	r2, #96	; 0x60
 8007a7e:	497b      	ldr	r1, [pc, #492]	; (8007c6c <UART_Start_Receive_IT+0x234>)
 8007a80:	5299      	strh	r1, [r3, r2]
 8007a82:	e02e      	b.n	8007ae2 <UART_Start_Receive_IT+0xaa>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2260      	movs	r2, #96	; 0x60
 8007a88:	21ff      	movs	r1, #255	; 0xff
 8007a8a:	5299      	strh	r1, [r3, r2]
 8007a8c:	e029      	b.n	8007ae2 <UART_Start_Receive_IT+0xaa>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10d      	bne.n	8007ab2 <UART_Start_Receive_IT+0x7a>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d104      	bne.n	8007aa8 <UART_Start_Receive_IT+0x70>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2260      	movs	r2, #96	; 0x60
 8007aa2:	21ff      	movs	r1, #255	; 0xff
 8007aa4:	5299      	strh	r1, [r3, r2]
 8007aa6:	e01c      	b.n	8007ae2 <UART_Start_Receive_IT+0xaa>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2260      	movs	r2, #96	; 0x60
 8007aac:	217f      	movs	r1, #127	; 0x7f
 8007aae:	5299      	strh	r1, [r3, r2]
 8007ab0:	e017      	b.n	8007ae2 <UART_Start_Receive_IT+0xaa>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	689a      	ldr	r2, [r3, #8]
 8007ab6:	2380      	movs	r3, #128	; 0x80
 8007ab8:	055b      	lsls	r3, r3, #21
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d10d      	bne.n	8007ada <UART_Start_Receive_IT+0xa2>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d104      	bne.n	8007ad0 <UART_Start_Receive_IT+0x98>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2260      	movs	r2, #96	; 0x60
 8007aca:	217f      	movs	r1, #127	; 0x7f
 8007acc:	5299      	strh	r1, [r3, r2]
 8007ace:	e008      	b.n	8007ae2 <UART_Start_Receive_IT+0xaa>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2260      	movs	r2, #96	; 0x60
 8007ad4:	213f      	movs	r1, #63	; 0x3f
 8007ad6:	5299      	strh	r1, [r3, r2]
 8007ad8:	e003      	b.n	8007ae2 <UART_Start_Receive_IT+0xaa>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2260      	movs	r2, #96	; 0x60
 8007ade:	2100      	movs	r1, #0
 8007ae0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2290      	movs	r2, #144	; 0x90
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	228c      	movs	r2, #140	; 0x8c
 8007aee:	2122      	movs	r1, #34	; 0x22
 8007af0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007af2:	f3ef 8310 	mrs	r3, PRIMASK
 8007af6:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8007af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007afa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007afc:	2301      	movs	r3, #1
 8007afe:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b02:	f383 8810 	msr	PRIMASK, r3
}
 8007b06:	46c0      	nop			; (mov r8, r8)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689a      	ldr	r2, [r3, #8]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2101      	movs	r1, #1
 8007b14:	430a      	orrs	r2, r1
 8007b16:	609a      	str	r2, [r3, #8]
 8007b18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b1e:	f383 8810 	msr	PRIMASK, r3
}
 8007b22:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007b28:	2380      	movs	r3, #128	; 0x80
 8007b2a:	059b      	lsls	r3, r3, #22
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d150      	bne.n	8007bd2 <UART_Start_Receive_IT+0x19a>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2268      	movs	r2, #104	; 0x68
 8007b34:	5a9b      	ldrh	r3, [r3, r2]
 8007b36:	1dba      	adds	r2, r7, #6
 8007b38:	8812      	ldrh	r2, [r2, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d349      	bcc.n	8007bd2 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	689a      	ldr	r2, [r3, #8]
 8007b42:	2380      	movs	r3, #128	; 0x80
 8007b44:	015b      	lsls	r3, r3, #5
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d107      	bne.n	8007b5a <UART_Start_Receive_IT+0x122>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d103      	bne.n	8007b5a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	4a46      	ldr	r2, [pc, #280]	; (8007c70 <UART_Start_Receive_IT+0x238>)
 8007b56:	675a      	str	r2, [r3, #116]	; 0x74
 8007b58:	e002      	b.n	8007b60 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4a45      	ldr	r2, [pc, #276]	; (8007c74 <UART_Start_Receive_IT+0x23c>)
 8007b5e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d019      	beq.n	8007b9c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b68:	f3ef 8310 	mrs	r3, PRIMASK
 8007b6c:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b70:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b72:	2301      	movs	r3, #1
 8007b74:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b78:	f383 8810 	msr	PRIMASK, r3
}
 8007b7c:	46c0      	nop			; (mov r8, r8)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2180      	movs	r1, #128	; 0x80
 8007b8a:	0049      	lsls	r1, r1, #1
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b96:	f383 8810 	msr	PRIMASK, r3
}
 8007b9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8007ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ba4:	657b      	str	r3, [r7, #84]	; 0x54
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	f383 8810 	msr	PRIMASK, r3
}
 8007bb0:	46c0      	nop			; (mov r8, r8)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689a      	ldr	r2, [r3, #8]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2180      	movs	r1, #128	; 0x80
 8007bbe:	0549      	lsls	r1, r1, #21
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	609a      	str	r2, [r3, #8]
 8007bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bc6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	f383 8810 	msr	PRIMASK, r3
}
 8007bce:	46c0      	nop			; (mov r8, r8)
 8007bd0:	e047      	b.n	8007c62 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	689a      	ldr	r2, [r3, #8]
 8007bd6:	2380      	movs	r3, #128	; 0x80
 8007bd8:	015b      	lsls	r3, r3, #5
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d107      	bne.n	8007bee <UART_Start_Receive_IT+0x1b6>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d103      	bne.n	8007bee <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4a23      	ldr	r2, [pc, #140]	; (8007c78 <UART_Start_Receive_IT+0x240>)
 8007bea:	675a      	str	r2, [r3, #116]	; 0x74
 8007bec:	e002      	b.n	8007bf4 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4a22      	ldr	r2, [pc, #136]	; (8007c7c <UART_Start_Receive_IT+0x244>)
 8007bf2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d019      	beq.n	8007c30 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8007c00:	61fb      	str	r3, [r7, #28]
  return(result);
 8007c02:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007c04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c06:	2301      	movs	r3, #1
 8007c08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c0a:	6a3b      	ldr	r3, [r7, #32]
 8007c0c:	f383 8810 	msr	PRIMASK, r3
}
 8007c10:	46c0      	nop			; (mov r8, r8)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2190      	movs	r1, #144	; 0x90
 8007c1e:	0049      	lsls	r1, r1, #1
 8007c20:	430a      	orrs	r2, r1
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c26:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2a:	f383 8810 	msr	PRIMASK, r3
}
 8007c2e:	e018      	b.n	8007c62 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c30:	f3ef 8310 	mrs	r3, PRIMASK
 8007c34:	613b      	str	r3, [r7, #16]
  return(result);
 8007c36:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c38:	653b      	str	r3, [r7, #80]	; 0x50
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f383 8810 	msr	PRIMASK, r3
}
 8007c44:	46c0      	nop			; (mov r8, r8)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2120      	movs	r1, #32
 8007c52:	430a      	orrs	r2, r1
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	f383 8810 	msr	PRIMASK, r3
}
 8007c60:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	0018      	movs	r0, r3
 8007c66:	46bd      	mov	sp, r7
 8007c68:	b018      	add	sp, #96	; 0x60
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	000001ff 	.word	0x000001ff
 8007c70:	08008255 	.word	0x08008255
 8007c74:	08007f69 	.word	0x08007f69
 8007c78:	08007df5 	.word	0x08007df5
 8007c7c:	08007c81 	.word	0x08007c81

08007c80 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b090      	sub	sp, #64	; 0x40
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c88:	203e      	movs	r0, #62	; 0x3e
 8007c8a:	183b      	adds	r3, r7, r0
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	2160      	movs	r1, #96	; 0x60
 8007c90:	5a52      	ldrh	r2, [r2, r1]
 8007c92:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	228c      	movs	r2, #140	; 0x8c
 8007c98:	589b      	ldr	r3, [r3, r2]
 8007c9a:	2b22      	cmp	r3, #34	; 0x22
 8007c9c:	d000      	beq.n	8007ca0 <UART_RxISR_8BIT+0x20>
 8007c9e:	e09a      	b.n	8007dd6 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ca6:	213c      	movs	r1, #60	; 0x3c
 8007ca8:	187b      	adds	r3, r7, r1
 8007caa:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007cac:	187b      	adds	r3, r7, r1
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	183b      	adds	r3, r7, r0
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	b2d9      	uxtb	r1, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cbc:	400a      	ands	r2, r1
 8007cbe:	b2d2      	uxtb	r2, r2
 8007cc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	225e      	movs	r2, #94	; 0x5e
 8007cd0:	5a9b      	ldrh	r3, [r3, r2]
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	b299      	uxth	r1, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	225e      	movs	r2, #94	; 0x5e
 8007cdc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	225e      	movs	r2, #94	; 0x5e
 8007ce2:	5a9b      	ldrh	r3, [r3, r2]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d000      	beq.n	8007cec <UART_RxISR_8BIT+0x6c>
 8007cea:	e07c      	b.n	8007de6 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cec:	f3ef 8310 	mrs	r3, PRIMASK
 8007cf0:	61bb      	str	r3, [r7, #24]
  return(result);
 8007cf2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	f383 8810 	msr	PRIMASK, r3
}
 8007d00:	46c0      	nop			; (mov r8, r8)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4938      	ldr	r1, [pc, #224]	; (8007df0 <UART_RxISR_8BIT+0x170>)
 8007d0e:	400a      	ands	r2, r1
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	f383 8810 	msr	PRIMASK, r3
}
 8007d1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d22:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d26:	637b      	str	r3, [r7, #52]	; 0x34
 8007d28:	2301      	movs	r3, #1
 8007d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2e:	f383 8810 	msr	PRIMASK, r3
}
 8007d32:	46c0      	nop			; (mov r8, r8)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689a      	ldr	r2, [r3, #8]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2101      	movs	r1, #1
 8007d40:	438a      	bics	r2, r1
 8007d42:	609a      	str	r2, [r3, #8]
 8007d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4a:	f383 8810 	msr	PRIMASK, r3
}
 8007d4e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	228c      	movs	r2, #140	; 0x8c
 8007d54:	2120      	movs	r1, #32
 8007d56:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d12f      	bne.n	8007dcc <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d72:	f3ef 8310 	mrs	r3, PRIMASK
 8007d76:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d78:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	f383 8810 	msr	PRIMASK, r3
}
 8007d86:	46c0      	nop			; (mov r8, r8)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2110      	movs	r1, #16
 8007d94:	438a      	bics	r2, r1
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	f383 8810 	msr	PRIMASK, r3
}
 8007da2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	2210      	movs	r2, #16
 8007dac:	4013      	ands	r3, r2
 8007dae:	2b10      	cmp	r3, #16
 8007db0:	d103      	bne.n	8007dba <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2210      	movs	r2, #16
 8007db8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	225c      	movs	r2, #92	; 0x5c
 8007dbe:	5a9a      	ldrh	r2, [r3, r2]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	0011      	movs	r1, r2
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	f7ff fabe 	bl	8007346 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007dca:	e00c      	b.n	8007de6 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	0018      	movs	r0, r3
 8007dd0:	f7ff faa9 	bl	8007326 <HAL_UART_RxCpltCallback>
}
 8007dd4:	e007      	b.n	8007de6 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	699a      	ldr	r2, [r3, #24]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2108      	movs	r1, #8
 8007de2:	430a      	orrs	r2, r1
 8007de4:	619a      	str	r2, [r3, #24]
}
 8007de6:	46c0      	nop			; (mov r8, r8)
 8007de8:	46bd      	mov	sp, r7
 8007dea:	b010      	add	sp, #64	; 0x40
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	46c0      	nop			; (mov r8, r8)
 8007df0:	fffffedf 	.word	0xfffffedf

08007df4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b090      	sub	sp, #64	; 0x40
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007dfc:	203e      	movs	r0, #62	; 0x3e
 8007dfe:	183b      	adds	r3, r7, r0
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	2160      	movs	r1, #96	; 0x60
 8007e04:	5a52      	ldrh	r2, [r2, r1]
 8007e06:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	228c      	movs	r2, #140	; 0x8c
 8007e0c:	589b      	ldr	r3, [r3, r2]
 8007e0e:	2b22      	cmp	r3, #34	; 0x22
 8007e10:	d000      	beq.n	8007e14 <UART_RxISR_16BIT+0x20>
 8007e12:	e09a      	b.n	8007f4a <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e1a:	213c      	movs	r1, #60	; 0x3c
 8007e1c:	187b      	adds	r3, r7, r1
 8007e1e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e24:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e26:	187b      	adds	r3, r7, r1
 8007e28:	183a      	adds	r2, r7, r0
 8007e2a:	881b      	ldrh	r3, [r3, #0]
 8007e2c:	8812      	ldrh	r2, [r2, #0]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e34:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e3a:	1c9a      	adds	r2, r3, #2
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	225e      	movs	r2, #94	; 0x5e
 8007e44:	5a9b      	ldrh	r3, [r3, r2]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	b299      	uxth	r1, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	225e      	movs	r2, #94	; 0x5e
 8007e50:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	225e      	movs	r2, #94	; 0x5e
 8007e56:	5a9b      	ldrh	r3, [r3, r2]
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d000      	beq.n	8007e60 <UART_RxISR_16BIT+0x6c>
 8007e5e:	e07c      	b.n	8007f5a <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e60:	f3ef 8310 	mrs	r3, PRIMASK
 8007e64:	617b      	str	r3, [r7, #20]
  return(result);
 8007e66:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e68:	637b      	str	r3, [r7, #52]	; 0x34
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	f383 8810 	msr	PRIMASK, r3
}
 8007e74:	46c0      	nop			; (mov r8, r8)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4938      	ldr	r1, [pc, #224]	; (8007f64 <UART_RxISR_16BIT+0x170>)
 8007e82:	400a      	ands	r2, r1
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	f383 8810 	msr	PRIMASK, r3
}
 8007e90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e92:	f3ef 8310 	mrs	r3, PRIMASK
 8007e96:	623b      	str	r3, [r7, #32]
  return(result);
 8007e98:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e9a:	633b      	str	r3, [r7, #48]	; 0x30
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	f383 8810 	msr	PRIMASK, r3
}
 8007ea6:	46c0      	nop			; (mov r8, r8)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689a      	ldr	r2, [r3, #8]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	438a      	bics	r2, r1
 8007eb6:	609a      	str	r2, [r3, #8]
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebe:	f383 8810 	msr	PRIMASK, r3
}
 8007ec2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	228c      	movs	r2, #140	; 0x8c
 8007ec8:	2120      	movs	r1, #32
 8007eca:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d12f      	bne.n	8007f40 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8007eea:	60bb      	str	r3, [r7, #8]
  return(result);
 8007eec:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f383 8810 	msr	PRIMASK, r3
}
 8007efa:	46c0      	nop			; (mov r8, r8)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2110      	movs	r1, #16
 8007f08:	438a      	bics	r2, r1
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f383 8810 	msr	PRIMASK, r3
}
 8007f16:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	2210      	movs	r2, #16
 8007f20:	4013      	ands	r3, r2
 8007f22:	2b10      	cmp	r3, #16
 8007f24:	d103      	bne.n	8007f2e <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2210      	movs	r2, #16
 8007f2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	225c      	movs	r2, #92	; 0x5c
 8007f32:	5a9a      	ldrh	r2, [r3, r2]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	0011      	movs	r1, r2
 8007f38:	0018      	movs	r0, r3
 8007f3a:	f7ff fa04 	bl	8007346 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f3e:	e00c      	b.n	8007f5a <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	0018      	movs	r0, r3
 8007f44:	f7ff f9ef 	bl	8007326 <HAL_UART_RxCpltCallback>
}
 8007f48:	e007      	b.n	8007f5a <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	699a      	ldr	r2, [r3, #24]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2108      	movs	r1, #8
 8007f56:	430a      	orrs	r2, r1
 8007f58:	619a      	str	r2, [r3, #24]
}
 8007f5a:	46c0      	nop			; (mov r8, r8)
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	b010      	add	sp, #64	; 0x40
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	46c0      	nop			; (mov r8, r8)
 8007f64:	fffffedf 	.word	0xfffffedf

08007f68 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b09c      	sub	sp, #112	; 0x70
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007f70:	236a      	movs	r3, #106	; 0x6a
 8007f72:	18fb      	adds	r3, r7, r3
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	2160      	movs	r1, #96	; 0x60
 8007f78:	5a52      	ldrh	r2, [r2, r1]
 8007f7a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	228c      	movs	r2, #140	; 0x8c
 8007f98:	589b      	ldr	r3, [r3, r2]
 8007f9a:	2b22      	cmp	r3, #34	; 0x22
 8007f9c:	d000      	beq.n	8007fa0 <UART_RxISR_8BIT_FIFOEN+0x38>
 8007f9e:	e144      	b.n	800822a <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007fa0:	235e      	movs	r3, #94	; 0x5e
 8007fa2:	18fb      	adds	r3, r7, r3
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	2168      	movs	r1, #104	; 0x68
 8007fa8:	5a52      	ldrh	r2, [r2, r1]
 8007faa:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007fac:	e0eb      	b.n	8008186 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fb4:	215c      	movs	r1, #92	; 0x5c
 8007fb6:	187b      	adds	r3, r7, r1
 8007fb8:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007fba:	187b      	adds	r3, r7, r1
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	236a      	movs	r3, #106	; 0x6a
 8007fc2:	18fb      	adds	r3, r7, r3
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	b2d9      	uxtb	r1, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fcc:	400a      	ands	r2, r1
 8007fce:	b2d2      	uxtb	r2, r2
 8007fd0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	225e      	movs	r2, #94	; 0x5e
 8007fe0:	5a9b      	ldrh	r3, [r3, r2]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	b299      	uxth	r1, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	225e      	movs	r2, #94	; 0x5e
 8007fec:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff8:	2207      	movs	r2, #7
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	d049      	beq.n	8008092 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008000:	2201      	movs	r2, #1
 8008002:	4013      	ands	r3, r2
 8008004:	d010      	beq.n	8008028 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8008006:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008008:	2380      	movs	r3, #128	; 0x80
 800800a:	005b      	lsls	r3, r3, #1
 800800c:	4013      	ands	r3, r2
 800800e:	d00b      	beq.n	8008028 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2201      	movs	r2, #1
 8008016:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2290      	movs	r2, #144	; 0x90
 800801c:	589b      	ldr	r3, [r3, r2]
 800801e:	2201      	movs	r2, #1
 8008020:	431a      	orrs	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2190      	movs	r1, #144	; 0x90
 8008026:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800802a:	2202      	movs	r2, #2
 800802c:	4013      	ands	r3, r2
 800802e:	d00f      	beq.n	8008050 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8008030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008032:	2201      	movs	r2, #1
 8008034:	4013      	ands	r3, r2
 8008036:	d00b      	beq.n	8008050 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2202      	movs	r2, #2
 800803e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2290      	movs	r2, #144	; 0x90
 8008044:	589b      	ldr	r3, [r3, r2]
 8008046:	2204      	movs	r2, #4
 8008048:	431a      	orrs	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2190      	movs	r1, #144	; 0x90
 800804e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008052:	2204      	movs	r2, #4
 8008054:	4013      	ands	r3, r2
 8008056:	d00f      	beq.n	8008078 <UART_RxISR_8BIT_FIFOEN+0x110>
 8008058:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800805a:	2201      	movs	r2, #1
 800805c:	4013      	ands	r3, r2
 800805e:	d00b      	beq.n	8008078 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2204      	movs	r2, #4
 8008066:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2290      	movs	r2, #144	; 0x90
 800806c:	589b      	ldr	r3, [r3, r2]
 800806e:	2202      	movs	r2, #2
 8008070:	431a      	orrs	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2190      	movs	r1, #144	; 0x90
 8008076:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2290      	movs	r2, #144	; 0x90
 800807c:	589b      	ldr	r3, [r3, r2]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d007      	beq.n	8008092 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	0018      	movs	r0, r3
 8008086:	f7ff f956 	bl	8007336 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2290      	movs	r2, #144	; 0x90
 800808e:	2100      	movs	r1, #0
 8008090:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	225e      	movs	r2, #94	; 0x5e
 8008096:	5a9b      	ldrh	r3, [r3, r2]
 8008098:	b29b      	uxth	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d173      	bne.n	8008186 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800809e:	f3ef 8310 	mrs	r3, PRIMASK
 80080a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80080a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80080a8:	2301      	movs	r3, #1
 80080aa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ae:	f383 8810 	msr	PRIMASK, r3
}
 80080b2:	46c0      	nop			; (mov r8, r8)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4961      	ldr	r1, [pc, #388]	; (8008244 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80080c0:	400a      	ands	r2, r1
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080c6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ca:	f383 8810 	msr	PRIMASK, r3
}
 80080ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080d0:	f3ef 8310 	mrs	r3, PRIMASK
 80080d4:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80080d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080d8:	657b      	str	r3, [r7, #84]	; 0x54
 80080da:	2301      	movs	r3, #1
 80080dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e0:	f383 8810 	msr	PRIMASK, r3
}
 80080e4:	46c0      	nop			; (mov r8, r8)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689a      	ldr	r2, [r3, #8]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4955      	ldr	r1, [pc, #340]	; (8008248 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80080f2:	400a      	ands	r2, r1
 80080f4:	609a      	str	r2, [r3, #8]
 80080f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080f8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080fc:	f383 8810 	msr	PRIMASK, r3
}
 8008100:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	228c      	movs	r2, #140	; 0x8c
 8008106:	2120      	movs	r1, #32
 8008108:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800811a:	2b01      	cmp	r3, #1
 800811c:	d12f      	bne.n	800817e <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008124:	f3ef 8310 	mrs	r3, PRIMASK
 8008128:	623b      	str	r3, [r7, #32]
  return(result);
 800812a:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800812c:	653b      	str	r3, [r7, #80]	; 0x50
 800812e:	2301      	movs	r3, #1
 8008130:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008134:	f383 8810 	msr	PRIMASK, r3
}
 8008138:	46c0      	nop			; (mov r8, r8)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2110      	movs	r1, #16
 8008146:	438a      	bics	r2, r1
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800814c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800814e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008150:	f383 8810 	msr	PRIMASK, r3
}
 8008154:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	69db      	ldr	r3, [r3, #28]
 800815c:	2210      	movs	r2, #16
 800815e:	4013      	ands	r3, r2
 8008160:	2b10      	cmp	r3, #16
 8008162:	d103      	bne.n	800816c <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2210      	movs	r2, #16
 800816a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	225c      	movs	r2, #92	; 0x5c
 8008170:	5a9a      	ldrh	r2, [r3, r2]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	0011      	movs	r1, r2
 8008176:	0018      	movs	r0, r3
 8008178:	f7ff f8e5 	bl	8007346 <HAL_UARTEx_RxEventCallback>
 800817c:	e003      	b.n	8008186 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	0018      	movs	r0, r3
 8008182:	f7ff f8d0 	bl	8007326 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008186:	235e      	movs	r3, #94	; 0x5e
 8008188:	18fb      	adds	r3, r7, r3
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d004      	beq.n	800819a <UART_RxISR_8BIT_FIFOEN+0x232>
 8008190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008192:	2220      	movs	r2, #32
 8008194:	4013      	ands	r3, r2
 8008196:	d000      	beq.n	800819a <UART_RxISR_8BIT_FIFOEN+0x232>
 8008198:	e709      	b.n	8007fae <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800819a:	204e      	movs	r0, #78	; 0x4e
 800819c:	183b      	adds	r3, r7, r0
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	215e      	movs	r1, #94	; 0x5e
 80081a2:	5a52      	ldrh	r2, [r2, r1]
 80081a4:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80081a6:	0001      	movs	r1, r0
 80081a8:	187b      	adds	r3, r7, r1
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d044      	beq.n	800823a <UART_RxISR_8BIT_FIFOEN+0x2d2>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2268      	movs	r2, #104	; 0x68
 80081b4:	5a9b      	ldrh	r3, [r3, r2]
 80081b6:	187a      	adds	r2, r7, r1
 80081b8:	8812      	ldrh	r2, [r2, #0]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d23d      	bcs.n	800823a <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081be:	f3ef 8310 	mrs	r3, PRIMASK
 80081c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80081c4:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80081c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80081c8:	2301      	movs	r3, #1
 80081ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f383 8810 	msr	PRIMASK, r3
}
 80081d2:	46c0      	nop			; (mov r8, r8)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	689a      	ldr	r2, [r3, #8]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	491b      	ldr	r1, [pc, #108]	; (800824c <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80081e0:	400a      	ands	r2, r1
 80081e2:	609a      	str	r2, [r3, #8]
 80081e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f383 8810 	msr	PRIMASK, r3
}
 80081ee:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a17      	ldr	r2, [pc, #92]	; (8008250 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 80081f4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081f6:	f3ef 8310 	mrs	r3, PRIMASK
 80081fa:	617b      	str	r3, [r7, #20]
  return(result);
 80081fc:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80081fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008200:	2301      	movs	r3, #1
 8008202:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	f383 8810 	msr	PRIMASK, r3
}
 800820a:	46c0      	nop			; (mov r8, r8)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2120      	movs	r1, #32
 8008218:	430a      	orrs	r2, r1
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800821e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	f383 8810 	msr	PRIMASK, r3
}
 8008226:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008228:	e007      	b.n	800823a <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	699a      	ldr	r2, [r3, #24]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2108      	movs	r1, #8
 8008236:	430a      	orrs	r2, r1
 8008238:	619a      	str	r2, [r3, #24]
}
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	46bd      	mov	sp, r7
 800823e:	b01c      	add	sp, #112	; 0x70
 8008240:	bd80      	pop	{r7, pc}
 8008242:	46c0      	nop			; (mov r8, r8)
 8008244:	fffffeff 	.word	0xfffffeff
 8008248:	effffffe 	.word	0xeffffffe
 800824c:	efffffff 	.word	0xefffffff
 8008250:	08007c81 	.word	0x08007c81

08008254 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b09e      	sub	sp, #120	; 0x78
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800825c:	2372      	movs	r3, #114	; 0x72
 800825e:	18fb      	adds	r3, r7, r3
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	2160      	movs	r1, #96	; 0x60
 8008264:	5a52      	ldrh	r2, [r2, r1]
 8008266:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	228c      	movs	r2, #140	; 0x8c
 8008284:	589b      	ldr	r3, [r3, r2]
 8008286:	2b22      	cmp	r3, #34	; 0x22
 8008288:	d000      	beq.n	800828c <UART_RxISR_16BIT_FIFOEN+0x38>
 800828a:	e144      	b.n	8008516 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800828c:	2366      	movs	r3, #102	; 0x66
 800828e:	18fb      	adds	r3, r7, r3
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	2168      	movs	r1, #104	; 0x68
 8008294:	5a52      	ldrh	r2, [r2, r1]
 8008296:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008298:	e0eb      	b.n	8008472 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082a0:	2164      	movs	r1, #100	; 0x64
 80082a2:	187b      	adds	r3, r7, r1
 80082a4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082aa:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80082ac:	187b      	adds	r3, r7, r1
 80082ae:	2272      	movs	r2, #114	; 0x72
 80082b0:	18ba      	adds	r2, r7, r2
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	8812      	ldrh	r2, [r2, #0]
 80082b6:	4013      	ands	r3, r2
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082c2:	1c9a      	adds	r2, r3, #2
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	225e      	movs	r2, #94	; 0x5e
 80082cc:	5a9b      	ldrh	r3, [r3, r2]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	3b01      	subs	r3, #1
 80082d2:	b299      	uxth	r1, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	225e      	movs	r2, #94	; 0x5e
 80082d8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	69db      	ldr	r3, [r3, #28]
 80082e0:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80082e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082e4:	2207      	movs	r2, #7
 80082e6:	4013      	ands	r3, r2
 80082e8:	d049      	beq.n	800837e <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082ec:	2201      	movs	r2, #1
 80082ee:	4013      	ands	r3, r2
 80082f0:	d010      	beq.n	8008314 <UART_RxISR_16BIT_FIFOEN+0xc0>
 80082f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082f4:	2380      	movs	r3, #128	; 0x80
 80082f6:	005b      	lsls	r3, r3, #1
 80082f8:	4013      	ands	r3, r2
 80082fa:	d00b      	beq.n	8008314 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2201      	movs	r2, #1
 8008302:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2290      	movs	r2, #144	; 0x90
 8008308:	589b      	ldr	r3, [r3, r2]
 800830a:	2201      	movs	r2, #1
 800830c:	431a      	orrs	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2190      	movs	r1, #144	; 0x90
 8008312:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008314:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008316:	2202      	movs	r2, #2
 8008318:	4013      	ands	r3, r2
 800831a:	d00f      	beq.n	800833c <UART_RxISR_16BIT_FIFOEN+0xe8>
 800831c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800831e:	2201      	movs	r2, #1
 8008320:	4013      	ands	r3, r2
 8008322:	d00b      	beq.n	800833c <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2202      	movs	r2, #2
 800832a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2290      	movs	r2, #144	; 0x90
 8008330:	589b      	ldr	r3, [r3, r2]
 8008332:	2204      	movs	r2, #4
 8008334:	431a      	orrs	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2190      	movs	r1, #144	; 0x90
 800833a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800833c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800833e:	2204      	movs	r2, #4
 8008340:	4013      	ands	r3, r2
 8008342:	d00f      	beq.n	8008364 <UART_RxISR_16BIT_FIFOEN+0x110>
 8008344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008346:	2201      	movs	r2, #1
 8008348:	4013      	ands	r3, r2
 800834a:	d00b      	beq.n	8008364 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2204      	movs	r2, #4
 8008352:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2290      	movs	r2, #144	; 0x90
 8008358:	589b      	ldr	r3, [r3, r2]
 800835a:	2202      	movs	r2, #2
 800835c:	431a      	orrs	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2190      	movs	r1, #144	; 0x90
 8008362:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2290      	movs	r2, #144	; 0x90
 8008368:	589b      	ldr	r3, [r3, r2]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d007      	beq.n	800837e <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	0018      	movs	r0, r3
 8008372:	f7fe ffe0 	bl	8007336 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2290      	movs	r2, #144	; 0x90
 800837a:	2100      	movs	r1, #0
 800837c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	225e      	movs	r2, #94	; 0x5e
 8008382:	5a9b      	ldrh	r3, [r3, r2]
 8008384:	b29b      	uxth	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	d173      	bne.n	8008472 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800838a:	f3ef 8310 	mrs	r3, PRIMASK
 800838e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008392:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008394:	2301      	movs	r3, #1
 8008396:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839a:	f383 8810 	msr	PRIMASK, r3
}
 800839e:	46c0      	nop			; (mov r8, r8)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4961      	ldr	r1, [pc, #388]	; (8008530 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80083ac:	400a      	ands	r2, r1
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b6:	f383 8810 	msr	PRIMASK, r3
}
 80083ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083bc:	f3ef 8310 	mrs	r3, PRIMASK
 80083c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80083c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80083c6:	2301      	movs	r3, #1
 80083c8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083cc:	f383 8810 	msr	PRIMASK, r3
}
 80083d0:	46c0      	nop			; (mov r8, r8)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	689a      	ldr	r2, [r3, #8]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4955      	ldr	r1, [pc, #340]	; (8008534 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80083de:	400a      	ands	r2, r1
 80083e0:	609a      	str	r2, [r3, #8]
 80083e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083e4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083e8:	f383 8810 	msr	PRIMASK, r3
}
 80083ec:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	228c      	movs	r2, #140	; 0x8c
 80083f2:	2120      	movs	r1, #32
 80083f4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008406:	2b01      	cmp	r3, #1
 8008408:	d12f      	bne.n	800846a <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008410:	f3ef 8310 	mrs	r3, PRIMASK
 8008414:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008418:	657b      	str	r3, [r7, #84]	; 0x54
 800841a:	2301      	movs	r3, #1
 800841c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800841e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008420:	f383 8810 	msr	PRIMASK, r3
}
 8008424:	46c0      	nop			; (mov r8, r8)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2110      	movs	r1, #16
 8008432:	438a      	bics	r2, r1
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008438:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800843a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843c:	f383 8810 	msr	PRIMASK, r3
}
 8008440:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69db      	ldr	r3, [r3, #28]
 8008448:	2210      	movs	r2, #16
 800844a:	4013      	ands	r3, r2
 800844c:	2b10      	cmp	r3, #16
 800844e:	d103      	bne.n	8008458 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2210      	movs	r2, #16
 8008456:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	225c      	movs	r2, #92	; 0x5c
 800845c:	5a9a      	ldrh	r2, [r3, r2]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	0011      	movs	r1, r2
 8008462:	0018      	movs	r0, r3
 8008464:	f7fe ff6f 	bl	8007346 <HAL_UARTEx_RxEventCallback>
 8008468:	e003      	b.n	8008472 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	0018      	movs	r0, r3
 800846e:	f7fe ff5a 	bl	8007326 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008472:	2366      	movs	r3, #102	; 0x66
 8008474:	18fb      	adds	r3, r7, r3
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d004      	beq.n	8008486 <UART_RxISR_16BIT_FIFOEN+0x232>
 800847c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800847e:	2220      	movs	r2, #32
 8008480:	4013      	ands	r3, r2
 8008482:	d000      	beq.n	8008486 <UART_RxISR_16BIT_FIFOEN+0x232>
 8008484:	e709      	b.n	800829a <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008486:	2052      	movs	r0, #82	; 0x52
 8008488:	183b      	adds	r3, r7, r0
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	215e      	movs	r1, #94	; 0x5e
 800848e:	5a52      	ldrh	r2, [r2, r1]
 8008490:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008492:	0001      	movs	r1, r0
 8008494:	187b      	adds	r3, r7, r1
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d044      	beq.n	8008526 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2268      	movs	r2, #104	; 0x68
 80084a0:	5a9b      	ldrh	r3, [r3, r2]
 80084a2:	187a      	adds	r2, r7, r1
 80084a4:	8812      	ldrh	r2, [r2, #0]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d23d      	bcs.n	8008526 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084aa:	f3ef 8310 	mrs	r3, PRIMASK
 80084ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80084b0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80084b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084b4:	2301      	movs	r3, #1
 80084b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f383 8810 	msr	PRIMASK, r3
}
 80084be:	46c0      	nop			; (mov r8, r8)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689a      	ldr	r2, [r3, #8]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	491b      	ldr	r1, [pc, #108]	; (8008538 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80084cc:	400a      	ands	r2, r1
 80084ce:	609a      	str	r2, [r3, #8]
 80084d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	f383 8810 	msr	PRIMASK, r3
}
 80084da:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a17      	ldr	r2, [pc, #92]	; (800853c <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80084e0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084e2:	f3ef 8310 	mrs	r3, PRIMASK
 80084e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80084e8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80084ec:	2301      	movs	r3, #1
 80084ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	f383 8810 	msr	PRIMASK, r3
}
 80084f6:	46c0      	nop			; (mov r8, r8)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2120      	movs	r1, #32
 8008504:	430a      	orrs	r2, r1
 8008506:	601a      	str	r2, [r3, #0]
 8008508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800850a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	f383 8810 	msr	PRIMASK, r3
}
 8008512:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008514:	e007      	b.n	8008526 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	699a      	ldr	r2, [r3, #24]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2108      	movs	r1, #8
 8008522:	430a      	orrs	r2, r1
 8008524:	619a      	str	r2, [r3, #24]
}
 8008526:	46c0      	nop			; (mov r8, r8)
 8008528:	46bd      	mov	sp, r7
 800852a:	b01e      	add	sp, #120	; 0x78
 800852c:	bd80      	pop	{r7, pc}
 800852e:	46c0      	nop			; (mov r8, r8)
 8008530:	fffffeff 	.word	0xfffffeff
 8008534:	effffffe 	.word	0xeffffffe
 8008538:	efffffff 	.word	0xefffffff
 800853c:	08007df5 	.word	0x08007df5

08008540 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2284      	movs	r2, #132	; 0x84
 800854c:	5c9b      	ldrb	r3, [r3, r2]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d101      	bne.n	8008556 <HAL_UARTEx_DisableFifoMode+0x16>
 8008552:	2302      	movs	r3, #2
 8008554:	e027      	b.n	80085a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2284      	movs	r2, #132	; 0x84
 800855a:	2101      	movs	r1, #1
 800855c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2288      	movs	r2, #136	; 0x88
 8008562:	2124      	movs	r1, #36	; 0x24
 8008564:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2101      	movs	r1, #1
 800857a:	438a      	bics	r2, r1
 800857c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	4a0b      	ldr	r2, [pc, #44]	; (80085b0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008582:	4013      	ands	r3, r2
 8008584:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2288      	movs	r2, #136	; 0x88
 8008598:	2120      	movs	r1, #32
 800859a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2284      	movs	r2, #132	; 0x84
 80085a0:	2100      	movs	r1, #0
 80085a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	0018      	movs	r0, r3
 80085a8:	46bd      	mov	sp, r7
 80085aa:	b004      	add	sp, #16
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	46c0      	nop			; (mov r8, r8)
 80085b0:	dfffffff 	.word	0xdfffffff

080085b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2284      	movs	r2, #132	; 0x84
 80085c2:	5c9b      	ldrb	r3, [r3, r2]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d101      	bne.n	80085cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085c8:	2302      	movs	r3, #2
 80085ca:	e02e      	b.n	800862a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2284      	movs	r2, #132	; 0x84
 80085d0:	2101      	movs	r1, #1
 80085d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2288      	movs	r2, #136	; 0x88
 80085d8:	2124      	movs	r1, #36	; 0x24
 80085da:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2101      	movs	r1, #1
 80085f0:	438a      	bics	r2, r1
 80085f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	08d9      	lsrs	r1, r3, #3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	430a      	orrs	r2, r1
 8008606:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	0018      	movs	r0, r3
 800860c:	f000 f854 	bl	80086b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2288      	movs	r2, #136	; 0x88
 800861c:	2120      	movs	r1, #32
 800861e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2284      	movs	r2, #132	; 0x84
 8008624:	2100      	movs	r1, #0
 8008626:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	0018      	movs	r0, r3
 800862c:	46bd      	mov	sp, r7
 800862e:	b004      	add	sp, #16
 8008630:	bd80      	pop	{r7, pc}
	...

08008634 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2284      	movs	r2, #132	; 0x84
 8008642:	5c9b      	ldrb	r3, [r3, r2]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d101      	bne.n	800864c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008648:	2302      	movs	r3, #2
 800864a:	e02f      	b.n	80086ac <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2284      	movs	r2, #132	; 0x84
 8008650:	2101      	movs	r1, #1
 8008652:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2288      	movs	r2, #136	; 0x88
 8008658:	2124      	movs	r1, #36	; 0x24
 800865a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2101      	movs	r1, #1
 8008670:	438a      	bics	r2, r1
 8008672:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	4a0e      	ldr	r2, [pc, #56]	; (80086b4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800867c:	4013      	ands	r3, r2
 800867e:	0019      	movs	r1, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	430a      	orrs	r2, r1
 8008688:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	0018      	movs	r0, r3
 800868e:	f000 f813 	bl	80086b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2288      	movs	r2, #136	; 0x88
 800869e:	2120      	movs	r1, #32
 80086a0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2284      	movs	r2, #132	; 0x84
 80086a6:	2100      	movs	r1, #0
 80086a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	0018      	movs	r0, r3
 80086ae:	46bd      	mov	sp, r7
 80086b0:	b004      	add	sp, #16
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	f1ffffff 	.word	0xf1ffffff

080086b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d108      	bne.n	80086da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	226a      	movs	r2, #106	; 0x6a
 80086cc:	2101      	movs	r1, #1
 80086ce:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2268      	movs	r2, #104	; 0x68
 80086d4:	2101      	movs	r1, #1
 80086d6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086d8:	e043      	b.n	8008762 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086da:	260f      	movs	r6, #15
 80086dc:	19bb      	adds	r3, r7, r6
 80086de:	2208      	movs	r2, #8
 80086e0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086e2:	200e      	movs	r0, #14
 80086e4:	183b      	adds	r3, r7, r0
 80086e6:	2208      	movs	r2, #8
 80086e8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	0e5b      	lsrs	r3, r3, #25
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	240d      	movs	r4, #13
 80086f6:	193b      	adds	r3, r7, r4
 80086f8:	2107      	movs	r1, #7
 80086fa:	400a      	ands	r2, r1
 80086fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	0f5b      	lsrs	r3, r3, #29
 8008706:	b2da      	uxtb	r2, r3
 8008708:	250c      	movs	r5, #12
 800870a:	197b      	adds	r3, r7, r5
 800870c:	2107      	movs	r1, #7
 800870e:	400a      	ands	r2, r1
 8008710:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008712:	183b      	adds	r3, r7, r0
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	197a      	adds	r2, r7, r5
 8008718:	7812      	ldrb	r2, [r2, #0]
 800871a:	4914      	ldr	r1, [pc, #80]	; (800876c <UARTEx_SetNbDataToProcess+0xb4>)
 800871c:	5c8a      	ldrb	r2, [r1, r2]
 800871e:	435a      	muls	r2, r3
 8008720:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008722:	197b      	adds	r3, r7, r5
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	4a12      	ldr	r2, [pc, #72]	; (8008770 <UARTEx_SetNbDataToProcess+0xb8>)
 8008728:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800872a:	0019      	movs	r1, r3
 800872c:	f7f7 fd80 	bl	8000230 <__divsi3>
 8008730:	0003      	movs	r3, r0
 8008732:	b299      	uxth	r1, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	226a      	movs	r2, #106	; 0x6a
 8008738:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800873a:	19bb      	adds	r3, r7, r6
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	193a      	adds	r2, r7, r4
 8008740:	7812      	ldrb	r2, [r2, #0]
 8008742:	490a      	ldr	r1, [pc, #40]	; (800876c <UARTEx_SetNbDataToProcess+0xb4>)
 8008744:	5c8a      	ldrb	r2, [r1, r2]
 8008746:	435a      	muls	r2, r3
 8008748:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800874a:	193b      	adds	r3, r7, r4
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	4a08      	ldr	r2, [pc, #32]	; (8008770 <UARTEx_SetNbDataToProcess+0xb8>)
 8008750:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008752:	0019      	movs	r1, r3
 8008754:	f7f7 fd6c 	bl	8000230 <__divsi3>
 8008758:	0003      	movs	r3, r0
 800875a:	b299      	uxth	r1, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2268      	movs	r2, #104	; 0x68
 8008760:	5299      	strh	r1, [r3, r2]
}
 8008762:	46c0      	nop			; (mov r8, r8)
 8008764:	46bd      	mov	sp, r7
 8008766:	b005      	add	sp, #20
 8008768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800876a:	46c0      	nop			; (mov r8, r8)
 800876c:	0800d5f4 	.word	0x0800d5f4
 8008770:	0800d5fc 	.word	0x0800d5fc

08008774 <uart_read>:
	xSemaphoreGiveFromISR(h_shell->sem_uart_read, &pxHigherPriorityTaskWoken);

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
}

static char uart_read(h_shell_t *h_shell) {
 8008774:	b590      	push	{r4, r7, lr}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
	char c;

	//HAL_UART_Receive_IT(&huart3, (uint8_t*)(&c), 1);//stlink
	HAL_UART_Receive_IT(&huart2, (uint8_t*)(&c), 1);
 800877c:	240f      	movs	r4, #15
 800877e:	1939      	adds	r1, r7, r4
 8008780:	4b0a      	ldr	r3, [pc, #40]	; (80087ac <uart_read+0x38>)
 8008782:	2201      	movs	r2, #1
 8008784:	0018      	movs	r0, r3
 8008786:	f7fe fd77 	bl	8007278 <HAL_UART_Receive_IT>
	// il faut mettre la tâche shell dans l'état bloqué, jusqu'à l'interruption de réception de caractère
	// prendre un sémaphore vide par exemple
	xSemaphoreTake(h_shell->sem_uart_read, portMAX_DELAY);
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	23cb      	movs	r3, #203	; 0xcb
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	58d3      	ldr	r3, [r2, r3]
 8008792:	2201      	movs	r2, #1
 8008794:	4252      	negs	r2, r2
 8008796:	0011      	movs	r1, r2
 8008798:	0018      	movs	r0, r3
 800879a:	f000 fc39 	bl	8009010 <xQueueSemaphoreTake>

	return c;
 800879e:	193b      	adds	r3, r7, r4
 80087a0:	781b      	ldrb	r3, [r3, #0]
}
 80087a2:	0018      	movs	r0, r3
 80087a4:	46bd      	mov	sp, r7
 80087a6:	b005      	add	sp, #20
 80087a8:	bd90      	pop	{r4, r7, pc}
 80087aa:	46c0      	nop			; (mov r8, r8)
 80087ac:	20000698 	.word	0x20000698

080087b0 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 80087b0:	b590      	push	{r4, r7, lr}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	000a      	movs	r2, r1
 80087ba:	1cbb      	adds	r3, r7, #2
 80087bc:	801a      	strh	r2, [r3, #0]
	//HAL_UART_Transmit(&huart3, (uint8_t*)s, size, HAL_MAX_DELAY); stlink
	HAL_UART_Transmit(&huart2, (uint8_t*)s, size, HAL_MAX_DELAY);
 80087be:	2301      	movs	r3, #1
 80087c0:	425c      	negs	r4, r3
 80087c2:	1cbb      	adds	r3, r7, #2
 80087c4:	881a      	ldrh	r2, [r3, #0]
 80087c6:	6879      	ldr	r1, [r7, #4]
 80087c8:	4804      	ldr	r0, [pc, #16]	; (80087dc <uart_write+0x2c>)
 80087ca:	0023      	movs	r3, r4
 80087cc:	f7fe fcb8 	bl	8007140 <HAL_UART_Transmit>
	return size;
 80087d0:	1cbb      	adds	r3, r7, #2
 80087d2:	881b      	ldrh	r3, [r3, #0]
}
 80087d4:	0018      	movs	r0, r3
 80087d6:	46bd      	mov	sp, r7
 80087d8:	b003      	add	sp, #12
 80087da:	bd90      	pop	{r4, r7, pc}
 80087dc:	20000698 	.word	0x20000698

080087e0 <sh_help>:

static int sh_help(h_shell_t *h_shell,int argc, char ** argv) {
 80087e0:	b590      	push	{r4, r7, lr}
 80087e2:	b089      	sub	sp, #36	; 0x24
 80087e4:	af02      	add	r7, sp, #8
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i <h_shell->shell_func_list_size ; i++) {
 80087ec:	2300      	movs	r3, #0
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	e02c      	b.n	800884c <sh_help+0x6c>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->shell_func_list[i].c,h_shell-> shell_func_list[i].description);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	22c1      	movs	r2, #193	; 0xc1
 80087f6:	0092      	lsls	r2, r2, #2
 80087f8:	1898      	adds	r0, r3, r2
 80087fa:	68f9      	ldr	r1, [r7, #12]
 80087fc:	697a      	ldr	r2, [r7, #20]
 80087fe:	0013      	movs	r3, r2
 8008800:	005b      	lsls	r3, r3, #1
 8008802:	189b      	adds	r3, r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	18cb      	adds	r3, r1, r3
 8008808:	3304      	adds	r3, #4
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	001c      	movs	r4, r3
 800880e:	68f9      	ldr	r1, [r7, #12]
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	0013      	movs	r3, r2
 8008814:	005b      	lsls	r3, r3, #1
 8008816:	189b      	adds	r3, r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	18cb      	adds	r3, r1, r3
 800881c:	330c      	adds	r3, #12
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a0f      	ldr	r2, [pc, #60]	; (8008860 <sh_help+0x80>)
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	0023      	movs	r3, r4
 8008826:	2128      	movs	r1, #40	; 0x28
 8008828:	f002 f8ee 	bl	800aa08 <sniprintf>
 800882c:	0003      	movs	r3, r0
 800882e:	613b      	str	r3, [r7, #16]
		uart_write(h_shell->print_buffer, size);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	22c1      	movs	r2, #193	; 0xc1
 8008834:	0092      	lsls	r2, r2, #2
 8008836:	4694      	mov	ip, r2
 8008838:	4463      	add	r3, ip
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	b292      	uxth	r2, r2
 800883e:	0011      	movs	r1, r2
 8008840:	0018      	movs	r0, r3
 8008842:	f7ff ffb5 	bl	80087b0 <uart_write>
	for(i = 0 ; i <h_shell->shell_func_list_size ; i++) {
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	3301      	adds	r3, #1
 800884a:	617b      	str	r3, [r7, #20]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	429a      	cmp	r2, r3
 8008854:	dbcd      	blt.n	80087f2 <sh_help+0x12>
	}

	return 0;
 8008856:	2300      	movs	r3, #0
}
 8008858:	0018      	movs	r0, r3
 800885a:	46bd      	mov	sp, r7
 800885c:	b007      	add	sp, #28
 800885e:	bd90      	pop	{r4, r7, pc}
 8008860:	0800d490 	.word	0x0800d490

08008864 <shell_init>:

void shell_init(h_shell_t *h_shell) {
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]


//	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n== Démonstration Robot CARY ==\r\n");
//	uart_write(h_shell->print_buffer, size);

	h_shell->sem_uart_read = xSemaphoreCreateBinary();
 800886c:	2203      	movs	r2, #3
 800886e:	2100      	movs	r1, #0
 8008870:	2001      	movs	r0, #1
 8008872:	f000 fab9 	bl	8008de8 <xQueueGenericCreate>
 8008876:	0001      	movs	r1, r0
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	23cb      	movs	r3, #203	; 0xcb
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	50d1      	str	r1, [r2, r3]
	if (h_shell->sem_uart_read == NULL)
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	23cb      	movs	r3, #203	; 0xcb
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	58d3      	ldr	r3, [r2, r3]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d104      	bne.n	8008896 <shell_init+0x32>
	{
		printf("Error semaphore shell\r\n");
 800888c:	4b07      	ldr	r3, [pc, #28]	; (80088ac <shell_init+0x48>)
 800888e:	0018      	movs	r0, r3
 8008890:	f002 f8b0 	bl	800a9f4 <puts>
		while(1);
 8008894:	e7fe      	b.n	8008894 <shell_init+0x30>
	}

	shell_add(h_shell,'h', sh_help, "Help");
 8008896:	4b06      	ldr	r3, [pc, #24]	; (80088b0 <shell_init+0x4c>)
 8008898:	4a06      	ldr	r2, [pc, #24]	; (80088b4 <shell_init+0x50>)
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	2168      	movs	r1, #104	; 0x68
 800889e:	f000 f80b 	bl	80088b8 <shell_add>
}
 80088a2:	46c0      	nop			; (mov r8, r8)
 80088a4:	46bd      	mov	sp, r7
 80088a6:	b002      	add	sp, #8
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	46c0      	nop			; (mov r8, r8)
 80088ac:	0800d49c 	.word	0x0800d49c
 80088b0:	0800d4b4 	.word	0x0800d4b4
 80088b4:	080087e1 	.word	0x080087e1

080088b8 <shell_add>:

int shell_add(h_shell_t *h_shell,char c, int (* pfunc)(int argc, char ** argv), char * description) {
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	607a      	str	r2, [r7, #4]
 80088c2:	603b      	str	r3, [r7, #0]
 80088c4:	200b      	movs	r0, #11
 80088c6:	183b      	adds	r3, r7, r0
 80088c8:	1c0a      	adds	r2, r1, #0
 80088ca:	701a      	strb	r2, [r3, #0]
	if (h_shell->shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b3f      	cmp	r3, #63	; 0x3f
 80088d2:	dc28      	bgt.n	8008926 <shell_add+0x6e>
		h_shell->shell_func_list[h_shell->shell_func_list_size].c = c;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	68f9      	ldr	r1, [r7, #12]
 80088da:	0013      	movs	r3, r2
 80088dc:	005b      	lsls	r3, r3, #1
 80088de:	189b      	adds	r3, r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	18cb      	adds	r3, r1, r3
 80088e4:	3304      	adds	r3, #4
 80088e6:	183a      	adds	r2, r7, r0
 80088e8:	7812      	ldrb	r2, [r2, #0]
 80088ea:	701a      	strb	r2, [r3, #0]
		h_shell->shell_func_list[h_shell->shell_func_list_size].func = pfunc;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	68f9      	ldr	r1, [r7, #12]
 80088f2:	0013      	movs	r3, r2
 80088f4:	005b      	lsls	r3, r3, #1
 80088f6:	189b      	adds	r3, r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	18cb      	adds	r3, r1, r3
 80088fc:	3308      	adds	r3, #8
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	601a      	str	r2, [r3, #0]
		h_shell->shell_func_list[h_shell->shell_func_list_size].description = description;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	68f9      	ldr	r1, [r7, #12]
 8008908:	0013      	movs	r3, r2
 800890a:	005b      	lsls	r3, r3, #1
 800890c:	189b      	adds	r3, r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	18cb      	adds	r3, r1, r3
 8008912:	330c      	adds	r3, #12
 8008914:	683a      	ldr	r2, [r7, #0]
 8008916:	601a      	str	r2, [r3, #0]
		h_shell->shell_func_list_size++;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	1c5a      	adds	r2, r3, #1
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	601a      	str	r2, [r3, #0]
		return 0;
 8008922:	2300      	movs	r3, #0
 8008924:	e001      	b.n	800892a <shell_add+0x72>
	}

	return -1;
 8008926:	2301      	movs	r3, #1
 8008928:	425b      	negs	r3, r3
}
 800892a:	0018      	movs	r0, r3
 800892c:	46bd      	mov	sp, r7
 800892e:	b004      	add	sp, #16
 8008930:	bd80      	pop	{r7, pc}
	...

08008934 <shell_exec>:

static int shell_exec(char * buf,h_shell_t *h_shell) {
 8008934:	b580      	push	{r7, lr}
 8008936:	b090      	sub	sp, #64	; 0x40
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 800893e:	2333      	movs	r3, #51	; 0x33
 8008940:	18fb      	adds	r3, r7, r3
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	7812      	ldrb	r2, [r2, #0]
 8008946:	701a      	strb	r2, [r3, #0]

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->shell_func_list_size ; i++) {
 8008948:	2300      	movs	r3, #0
 800894a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800894c:	e043      	b.n	80089d6 <shell_exec+0xa2>
		if (h_shell->shell_func_list[i].c == c) {
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008952:	0013      	movs	r3, r2
 8008954:	005b      	lsls	r3, r3, #1
 8008956:	189b      	adds	r3, r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	18cb      	adds	r3, r1, r3
 800895c:	3304      	adds	r3, #4
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2233      	movs	r2, #51	; 0x33
 8008962:	18ba      	adds	r2, r7, r2
 8008964:	7812      	ldrb	r2, [r2, #0]
 8008966:	429a      	cmp	r2, r3
 8008968:	d132      	bne.n	80089d0 <shell_exec+0x9c>
			argc = 1;
 800896a:	2301      	movs	r3, #1
 800896c:	63bb      	str	r3, [r7, #56]	; 0x38
			argv[0] = buf;
 800896e:	230c      	movs	r3, #12
 8008970:	18fb      	adds	r3, r7, r3
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	601a      	str	r2, [r3, #0]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	637b      	str	r3, [r7, #52]	; 0x34
 800897a:	e012      	b.n	80089a2 <shell_exec+0x6e>
				if(*p == ' ') {
 800897c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	2b20      	cmp	r3, #32
 8008982:	d10b      	bne.n	800899c <shell_exec+0x68>
					*p = '\0';
 8008984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008986:	2200      	movs	r2, #0
 8008988:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 800898a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	63ba      	str	r2, [r7, #56]	; 0x38
 8008990:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008992:	1c51      	adds	r1, r2, #1
 8008994:	220c      	movs	r2, #12
 8008996:	18ba      	adds	r2, r7, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	5099      	str	r1, [r3, r2]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800899c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800899e:	3301      	adds	r3, #1
 80089a0:	637b      	str	r3, [r7, #52]	; 0x34
 80089a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d002      	beq.n	80089b0 <shell_exec+0x7c>
 80089aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ac:	2b07      	cmp	r3, #7
 80089ae:	dde5      	ble.n	800897c <shell_exec+0x48>
				}
			}

			return h_shell->shell_func_list[i].func(h_shell, argc, argv);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089b4:	0013      	movs	r3, r2
 80089b6:	005b      	lsls	r3, r3, #1
 80089b8:	189b      	adds	r3, r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	18cb      	adds	r3, r1, r3
 80089be:	3308      	adds	r3, #8
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	220c      	movs	r2, #12
 80089c4:	18ba      	adds	r2, r7, r2
 80089c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089c8:	6838      	ldr	r0, [r7, #0]
 80089ca:	4798      	blx	r3
 80089cc:	0003      	movs	r3, r0
 80089ce:	e021      	b.n	8008a14 <shell_exec+0xe0>
	for(i = 0 ; i < h_shell->shell_func_list_size ; i++) {
 80089d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d2:	3301      	adds	r3, #1
 80089d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089dc:	429a      	cmp	r2, r3
 80089de:	dbb6      	blt.n	800894e <shell_exec+0x1a>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	22c1      	movs	r2, #193	; 0xc1
 80089e4:	0092      	lsls	r2, r2, #2
 80089e6:	1898      	adds	r0, r3, r2
 80089e8:	2333      	movs	r3, #51	; 0x33
 80089ea:	18fb      	adds	r3, r7, r3
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	4a0b      	ldr	r2, [pc, #44]	; (8008a1c <shell_exec+0xe8>)
 80089f0:	2128      	movs	r1, #40	; 0x28
 80089f2:	f002 f809 	bl	800aa08 <sniprintf>
 80089f6:	0003      	movs	r3, r0
 80089f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uart_write(h_shell->print_buffer, size);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	22c1      	movs	r2, #193	; 0xc1
 80089fe:	0092      	lsls	r2, r2, #2
 8008a00:	4694      	mov	ip, r2
 8008a02:	4463      	add	r3, ip
 8008a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a06:	b292      	uxth	r2, r2
 8008a08:	0011      	movs	r1, r2
 8008a0a:	0018      	movs	r0, r3
 8008a0c:	f7ff fed0 	bl	80087b0 <uart_write>
	return -1;
 8008a10:	2301      	movs	r3, #1
 8008a12:	425b      	negs	r3, r3
}
 8008a14:	0018      	movs	r0, r3
 8008a16:	46bd      	mov	sp, r7
 8008a18:	b010      	add	sp, #64	; 0x40
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	0800d4bc 	.word	0x0800d4bc

08008a20 <shell_run>:
//static char backspace[] = "\b \b";
static char backspace[] = "";
//static char prompt[] = "> ";
static char prompt[] = "";

int shell_run(h_shell_t *h_shell) {
 8008a20:	b590      	push	{r4, r7, lr}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	613b      	str	r3, [r7, #16]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 8008a30:	4b3b      	ldr	r3, [pc, #236]	; (8008b20 <shell_run+0x100>)
 8008a32:	2102      	movs	r1, #2
 8008a34:	0018      	movs	r0, r3
 8008a36:	f7ff febb 	bl	80087b0 <uart_write>
		reading = 1;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	617b      	str	r3, [r7, #20]

		while(reading) {
 8008a3e:	e064      	b.n	8008b0a <shell_run+0xea>
			char c = uart_read(h_shell);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	0018      	movs	r0, r3
 8008a44:	f7ff fe96 	bl	8008774 <uart_read>
 8008a48:	0003      	movs	r3, r0
 8008a4a:	001a      	movs	r2, r3
 8008a4c:	210b      	movs	r1, #11
 8008a4e:	187b      	adds	r3, r7, r1
 8008a50:	701a      	strb	r2, [r3, #0]
			int size;

			switch (c) {
 8008a52:	187b      	adds	r3, r7, r1
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	2b08      	cmp	r3, #8
 8008a58:	d039      	beq.n	8008ace <shell_run+0xae>
 8008a5a:	2b0d      	cmp	r3, #13
 8008a5c:	d143      	bne.n	8008ae6 <shell_run+0xc6>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	22c1      	movs	r2, #193	; 0xc1
 8008a62:	0092      	lsls	r2, r2, #2
 8008a64:	4694      	mov	ip, r2
 8008a66:	4463      	add	r3, ip
 8008a68:	4a2e      	ldr	r2, [pc, #184]	; (8008b24 <shell_run+0x104>)
 8008a6a:	2128      	movs	r1, #40	; 0x28
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	f001 ffcb 	bl	800aa08 <sniprintf>
 8008a72:	0003      	movs	r3, r0
 8008a74:	60fb      	str	r3, [r7, #12]
				uart_write(h_shell->print_buffer, size);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	22c1      	movs	r2, #193	; 0xc1
 8008a7a:	0092      	lsls	r2, r2, #2
 8008a7c:	4694      	mov	ip, r2
 8008a7e:	4463      	add	r3, ip
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	b292      	uxth	r2, r2
 8008a84:	0011      	movs	r1, r2
 8008a86:	0018      	movs	r0, r3
 8008a88:	f7ff fe92 	bl	80087b0 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	613a      	str	r2, [r7, #16]
 8008a92:	4a25      	ldr	r2, [pc, #148]	; (8008b28 <shell_run+0x108>)
 8008a94:	2100      	movs	r1, #0
 8008a96:	54d1      	strb	r1, [r2, r3]
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	22c1      	movs	r2, #193	; 0xc1
 8008a9c:	0092      	lsls	r2, r2, #2
 8008a9e:	1898      	adds	r0, r3, r2
 8008aa0:	4b21      	ldr	r3, [pc, #132]	; (8008b28 <shell_run+0x108>)
 8008aa2:	4a22      	ldr	r2, [pc, #136]	; (8008b2c <shell_run+0x10c>)
 8008aa4:	2128      	movs	r1, #40	; 0x28
 8008aa6:	f001 ffaf 	bl	800aa08 <sniprintf>
 8008aaa:	0003      	movs	r3, r0
 8008aac:	60fb      	str	r3, [r7, #12]
				uart_write(h_shell->print_buffer, size);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	22c1      	movs	r2, #193	; 0xc1
 8008ab2:	0092      	lsls	r2, r2, #2
 8008ab4:	4694      	mov	ip, r2
 8008ab6:	4463      	add	r3, ip
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	b292      	uxth	r2, r2
 8008abc:	0011      	movs	r1, r2
 8008abe:	0018      	movs	r0, r3
 8008ac0:	f7ff fe76 	bl	80087b0 <uart_write>
				reading = 0;        //exit read loop
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 8008ac8:	2300      	movs	r3, #0
 8008aca:	613b      	str	r3, [r7, #16]
				break;
 8008acc:	e01d      	b.n	8008b0a <shell_run+0xea>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	dd19      	ble.n	8008b08 <shell_run+0xe8>
					pos--;          //remove it in buffer
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	613b      	str	r3, [r7, #16]

					uart_write(backspace, 3);	// delete the char on the terminal
 8008ada:	4b15      	ldr	r3, [pc, #84]	; (8008b30 <shell_run+0x110>)
 8008adc:	2103      	movs	r1, #3
 8008ade:	0018      	movs	r0, r3
 8008ae0:	f7ff fe66 	bl	80087b0 <uart_write>
				}
				break;
 8008ae4:	e010      	b.n	8008b08 <shell_run+0xe8>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	2b27      	cmp	r3, #39	; 0x27
 8008aea:	dc0e      	bgt.n	8008b0a <shell_run+0xea>
					uart_write(&c, 1);
 8008aec:	240b      	movs	r4, #11
 8008aee:	193b      	adds	r3, r7, r4
 8008af0:	2101      	movs	r1, #1
 8008af2:	0018      	movs	r0, r3
 8008af4:	f7ff fe5c 	bl	80087b0 <uart_write>
					cmd_buffer[pos++] = c; //store
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	1c5a      	adds	r2, r3, #1
 8008afc:	613a      	str	r2, [r7, #16]
 8008afe:	193a      	adds	r2, r7, r4
 8008b00:	7811      	ldrb	r1, [r2, #0]
 8008b02:	4a09      	ldr	r2, [pc, #36]	; (8008b28 <shell_run+0x108>)
 8008b04:	54d1      	strb	r1, [r2, r3]
 8008b06:	e000      	b.n	8008b0a <shell_run+0xea>
				break;
 8008b08:	46c0      	nop			; (mov r8, r8)
		while(reading) {
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d197      	bne.n	8008a40 <shell_run+0x20>
				}
			}
		}
		shell_exec(cmd_buffer,h_shell);
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	4b05      	ldr	r3, [pc, #20]	; (8008b28 <shell_run+0x108>)
 8008b14:	0011      	movs	r1, r2
 8008b16:	0018      	movs	r0, r3
 8008b18:	f7ff ff0c 	bl	8008934 <shell_exec>
		uart_write(prompt, 2);
 8008b1c:	e788      	b.n	8008a30 <shell_run+0x10>
 8008b1e:	46c0      	nop			; (mov r8, r8)
 8008b20:	20000734 	.word	0x20000734
 8008b24:	0800d4d4 	.word	0x0800d4d4
 8008b28:	20000738 	.word	0x20000738
 8008b2c:	0800d4d8 	.word	0x0800d4d8
 8008b30:	20000730 	.word	0x20000730

08008b34 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	0002      	movs	r2, r0
 8008b3c:	1dbb      	adds	r3, r7, #6
 8008b3e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008b40:	2300      	movs	r3, #0
 8008b42:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008b44:	1dbb      	adds	r3, r7, #6
 8008b46:	2200      	movs	r2, #0
 8008b48:	5e9b      	ldrsh	r3, [r3, r2]
 8008b4a:	2b84      	cmp	r3, #132	; 0x84
 8008b4c:	d006      	beq.n	8008b5c <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8008b4e:	1dbb      	adds	r3, r7, #6
 8008b50:	2200      	movs	r2, #0
 8008b52:	5e9a      	ldrsh	r2, [r3, r2]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	18d3      	adds	r3, r2, r3
 8008b58:	3303      	adds	r3, #3
 8008b5a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
}
 8008b5e:	0018      	movs	r0, r3
 8008b60:	46bd      	mov	sp, r7
 8008b62:	b004      	add	sp, #16
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008b6a:	f000 fd8d 	bl	8009688 <vTaskStartScheduler>
  
  return osOK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	0018      	movs	r0, r3
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b78:	b087      	sub	sp, #28
 8008b7a:	af02      	add	r7, sp, #8
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685c      	ldr	r4, [r3, #4]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b8c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2208      	movs	r2, #8
 8008b92:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b94:	0018      	movs	r0, r3
 8008b96:	f7ff ffcd 	bl	8008b34 <makeFreeRtosPriority>
 8008b9a:	0001      	movs	r1, r0
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	230c      	movs	r3, #12
 8008ba0:	18fb      	adds	r3, r7, r3
 8008ba2:	9301      	str	r3, [sp, #4]
 8008ba4:	9100      	str	r1, [sp, #0]
 8008ba6:	0013      	movs	r3, r2
 8008ba8:	0032      	movs	r2, r6
 8008baa:	0029      	movs	r1, r5
 8008bac:	0020      	movs	r0, r4
 8008bae:	f000 fc16 	bl	80093de <xTaskCreate>
 8008bb2:	0003      	movs	r3, r0
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d001      	beq.n	8008bbc <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	e000      	b.n	8008bbe <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
}
 8008bbe:	0018      	movs	r0, r3
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	b005      	add	sp, #20
 8008bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008bc6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b084      	sub	sp, #16
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <osDelay+0x16>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	e000      	b.n	8008bde <osDelay+0x18>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	0018      	movs	r0, r3
 8008be0:	f000 fd2c 	bl	800963c <vTaskDelay>
  
  return osOK;
 8008be4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008be6:	0018      	movs	r0, r3
 8008be8:	46bd      	mov	sp, r7
 8008bea:	b004      	add	sp, #16
 8008bec:	bd80      	pop	{r7, pc}

08008bee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b082      	sub	sp, #8
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	3308      	adds	r3, #8
 8008bfa:	001a      	movs	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	4252      	negs	r2, r2
 8008c06:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	3308      	adds	r3, #8
 8008c0c:	001a      	movs	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	3308      	adds	r3, #8
 8008c16:	001a      	movs	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c22:	46c0      	nop			; (mov r8, r8)
 8008c24:	46bd      	mov	sp, r7
 8008c26:	b002      	add	sp, #8
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b082      	sub	sp, #8
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c38:	46c0      	nop			; (mov r8, r8)
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	b002      	add	sp, #8
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	689a      	ldr	r2, [r3, #8]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	1c5a      	adds	r2, r3, #1
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	601a      	str	r2, [r3, #0]
}
 8008c7c:	46c0      	nop			; (mov r8, r8)
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	b004      	add	sp, #16
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	3301      	adds	r3, #1
 8008c98:	d103      	bne.n	8008ca2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	e00c      	b.n	8008cbc <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	3308      	adds	r3, #8
 8008ca6:	60fb      	str	r3, [r7, #12]
 8008ca8:	e002      	b.n	8008cb0 <vListInsert+0x2c>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d2f6      	bcs.n	8008caa <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	683a      	ldr	r2, [r7, #0]
 8008cca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	1c5a      	adds	r2, r3, #1
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	601a      	str	r2, [r3, #0]
}
 8008ce8:	46c0      	nop			; (mov r8, r8)
 8008cea:	46bd      	mov	sp, r7
 8008cec:	b004      	add	sp, #16
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	6892      	ldr	r2, [r2, #8]
 8008d06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	6852      	ldr	r2, [r2, #4]
 8008d10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d103      	bne.n	8008d24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689a      	ldr	r2, [r3, #8]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	1e5a      	subs	r2, r3, #1
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
}
 8008d38:	0018      	movs	r0, r3
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	b004      	add	sp, #16
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d101      	bne.n	8008d58 <xQueueGenericReset+0x18>
 8008d54:	b672      	cpsid	i
 8008d56:	e7fe      	b.n	8008d56 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8008d58:	f001 fa52 	bl	800a200 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d68:	434b      	muls	r3, r1
 8008d6a:	18d2      	adds	r2, r2, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d86:	1e59      	subs	r1, r3, #1
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8c:	434b      	muls	r3, r1
 8008d8e:	18d2      	adds	r2, r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2244      	movs	r2, #68	; 0x44
 8008d98:	21ff      	movs	r1, #255	; 0xff
 8008d9a:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2245      	movs	r2, #69	; 0x45
 8008da0:	21ff      	movs	r1, #255	; 0xff
 8008da2:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10d      	bne.n	8008dc6 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d013      	beq.n	8008dda <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3310      	adds	r3, #16
 8008db6:	0018      	movs	r0, r3
 8008db8:	f000 fe54 	bl	8009a64 <xTaskRemoveFromEventList>
 8008dbc:	1e03      	subs	r3, r0, #0
 8008dbe:	d00c      	beq.n	8008dda <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008dc0:	f001 fa0e 	bl	800a1e0 <vPortYield>
 8008dc4:	e009      	b.n	8008dda <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	3310      	adds	r3, #16
 8008dca:	0018      	movs	r0, r3
 8008dcc:	f7ff ff0f 	bl	8008bee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	3324      	adds	r3, #36	; 0x24
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	f7ff ff0a 	bl	8008bee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008dda:	f001 fa23 	bl	800a224 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008dde:	2301      	movs	r3, #1
}
 8008de0:	0018      	movs	r0, r3
 8008de2:	46bd      	mov	sp, r7
 8008de4:	b004      	add	sp, #16
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008de8:	b590      	push	{r4, r7, lr}
 8008dea:	b08b      	sub	sp, #44	; 0x2c
 8008dec:	af02      	add	r7, sp, #8
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	1dfb      	adds	r3, r7, #7
 8008df4:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d101      	bne.n	8008e00 <xQueueGenericCreate+0x18>
 8008dfc:	b672      	cpsid	i
 8008dfe:	e7fe      	b.n	8008dfe <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	4353      	muls	r3, r2
 8008e06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	3348      	adds	r3, #72	; 0x48
 8008e0c:	0018      	movs	r0, r3
 8008e0e:	f001 fa8f 	bl	800a330 <pvPortMalloc>
 8008e12:	0003      	movs	r3, r0
 8008e14:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00e      	beq.n	8008e3a <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	3348      	adds	r3, #72	; 0x48
 8008e24:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e26:	1dfb      	adds	r3, r7, #7
 8008e28:	781c      	ldrb	r4, [r3, #0]
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	68b9      	ldr	r1, [r7, #8]
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	0023      	movs	r3, r4
 8008e36:	f000 f805 	bl	8008e44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e3a:	69bb      	ldr	r3, [r7, #24]
	}
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	b009      	add	sp, #36	; 0x24
 8008e42:	bd90      	pop	{r4, r7, pc}

08008e44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
 8008e50:	001a      	movs	r2, r3
 8008e52:	1cfb      	adds	r3, r7, #3
 8008e54:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d103      	bne.n	8008e64 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	69ba      	ldr	r2, [r7, #24]
 8008e60:	601a      	str	r2, [r3, #0]
 8008e62:	e002      	b.n	8008e6a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	2101      	movs	r1, #1
 8008e7a:	0018      	movs	r0, r3
 8008e7c:	f7ff ff60 	bl	8008d40 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e80:	46c0      	nop			; (mov r8, r8)
 8008e82:	46bd      	mov	sp, r7
 8008e84:	b004      	add	sp, #16
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b08a      	sub	sp, #40	; 0x28
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
 8008e94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008e96:	2300      	movs	r3, #0
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <xQueueGenericSend+0x20>
 8008ea4:	b672      	cpsid	i
 8008ea6:	e7fe      	b.n	8008ea6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d103      	bne.n	8008eb6 <xQueueGenericSend+0x2e>
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <xQueueGenericSend+0x32>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e000      	b.n	8008ebc <xQueueGenericSend+0x34>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d101      	bne.n	8008ec4 <xQueueGenericSend+0x3c>
 8008ec0:	b672      	cpsid	i
 8008ec2:	e7fe      	b.n	8008ec2 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d103      	bne.n	8008ed2 <xQueueGenericSend+0x4a>
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d101      	bne.n	8008ed6 <xQueueGenericSend+0x4e>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e000      	b.n	8008ed8 <xQueueGenericSend+0x50>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d101      	bne.n	8008ee0 <xQueueGenericSend+0x58>
 8008edc:	b672      	cpsid	i
 8008ede:	e7fe      	b.n	8008ede <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ee0:	f000 ff3c 	bl	8009d5c <xTaskGetSchedulerState>
 8008ee4:	1e03      	subs	r3, r0, #0
 8008ee6:	d102      	bne.n	8008eee <xQueueGenericSend+0x66>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <xQueueGenericSend+0x6a>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e000      	b.n	8008ef4 <xQueueGenericSend+0x6c>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d101      	bne.n	8008efc <xQueueGenericSend+0x74>
 8008ef8:	b672      	cpsid	i
 8008efa:	e7fe      	b.n	8008efa <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008efc:	f001 f980 	bl	800a200 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d302      	bcc.n	8008f12 <xQueueGenericSend+0x8a>
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d11e      	bne.n	8008f50 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	68b9      	ldr	r1, [r7, #8]
 8008f16:	6a3b      	ldr	r3, [r7, #32]
 8008f18:	0018      	movs	r0, r3
 8008f1a:	f000 f969 	bl	80091f0 <prvCopyDataToQueue>
 8008f1e:	0003      	movs	r3, r0
 8008f20:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f22:	6a3b      	ldr	r3, [r7, #32]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d009      	beq.n	8008f3e <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	3324      	adds	r3, #36	; 0x24
 8008f2e:	0018      	movs	r0, r3
 8008f30:	f000 fd98 	bl	8009a64 <xTaskRemoveFromEventList>
 8008f34:	1e03      	subs	r3, r0, #0
 8008f36:	d007      	beq.n	8008f48 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f38:	f001 f952 	bl	800a1e0 <vPortYield>
 8008f3c:	e004      	b.n	8008f48 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008f44:	f001 f94c 	bl	800a1e0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008f48:	f001 f96c 	bl	800a224 <vPortExitCritical>
				return pdPASS;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e05b      	b.n	8009008 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d103      	bne.n	8008f5e <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f56:	f001 f965 	bl	800a224 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	e054      	b.n	8009008 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d106      	bne.n	8008f72 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f64:	2314      	movs	r3, #20
 8008f66:	18fb      	adds	r3, r7, r3
 8008f68:	0018      	movs	r0, r3
 8008f6a:	f000 fdd7 	bl	8009b1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f72:	f001 f957 	bl	800a224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f76:	f000 fbbd 	bl	80096f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f7a:	f001 f941 	bl	800a200 <vPortEnterCritical>
 8008f7e:	6a3b      	ldr	r3, [r7, #32]
 8008f80:	2244      	movs	r2, #68	; 0x44
 8008f82:	5c9b      	ldrb	r3, [r3, r2]
 8008f84:	b25b      	sxtb	r3, r3
 8008f86:	3301      	adds	r3, #1
 8008f88:	d103      	bne.n	8008f92 <xQueueGenericSend+0x10a>
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	2244      	movs	r2, #68	; 0x44
 8008f8e:	2100      	movs	r1, #0
 8008f90:	5499      	strb	r1, [r3, r2]
 8008f92:	6a3b      	ldr	r3, [r7, #32]
 8008f94:	2245      	movs	r2, #69	; 0x45
 8008f96:	5c9b      	ldrb	r3, [r3, r2]
 8008f98:	b25b      	sxtb	r3, r3
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	d103      	bne.n	8008fa6 <xQueueGenericSend+0x11e>
 8008f9e:	6a3b      	ldr	r3, [r7, #32]
 8008fa0:	2245      	movs	r2, #69	; 0x45
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	5499      	strb	r1, [r3, r2]
 8008fa6:	f001 f93d 	bl	800a224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008faa:	1d3a      	adds	r2, r7, #4
 8008fac:	2314      	movs	r3, #20
 8008fae:	18fb      	adds	r3, r7, r3
 8008fb0:	0011      	movs	r1, r2
 8008fb2:	0018      	movs	r0, r3
 8008fb4:	f000 fdc6 	bl	8009b44 <xTaskCheckForTimeOut>
 8008fb8:	1e03      	subs	r3, r0, #0
 8008fba:	d11e      	bne.n	8008ffa <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	0018      	movs	r0, r3
 8008fc0:	f000 f9f5 	bl	80093ae <prvIsQueueFull>
 8008fc4:	1e03      	subs	r3, r0, #0
 8008fc6:	d011      	beq.n	8008fec <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	3310      	adds	r3, #16
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	0011      	movs	r1, r2
 8008fd0:	0018      	movs	r0, r3
 8008fd2:	f000 fd29 	bl	8009a28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008fd6:	6a3b      	ldr	r3, [r7, #32]
 8008fd8:	0018      	movs	r0, r3
 8008fda:	f000 f974 	bl	80092c6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008fde:	f000 fb95 	bl	800970c <xTaskResumeAll>
 8008fe2:	1e03      	subs	r3, r0, #0
 8008fe4:	d18a      	bne.n	8008efc <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8008fe6:	f001 f8fb 	bl	800a1e0 <vPortYield>
 8008fea:	e787      	b.n	8008efc <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	0018      	movs	r0, r3
 8008ff0:	f000 f969 	bl	80092c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ff4:	f000 fb8a 	bl	800970c <xTaskResumeAll>
 8008ff8:	e780      	b.n	8008efc <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ffa:	6a3b      	ldr	r3, [r7, #32]
 8008ffc:	0018      	movs	r0, r3
 8008ffe:	f000 f962 	bl	80092c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009002:	f000 fb83 	bl	800970c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009006:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009008:	0018      	movs	r0, r3
 800900a:	46bd      	mov	sp, r7
 800900c:	b00a      	add	sp, #40	; 0x28
 800900e:	bd80      	pop	{r7, pc}

08009010 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b08a      	sub	sp, #40	; 0x28
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800901a:	2300      	movs	r3, #0
 800901c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009022:	2300      	movs	r3, #0
 8009024:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d101      	bne.n	8009030 <xQueueSemaphoreTake+0x20>
 800902c:	b672      	cpsid	i
 800902e:	e7fe      	b.n	800902e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <xQueueSemaphoreTake+0x2c>
 8009038:	b672      	cpsid	i
 800903a:	e7fe      	b.n	800903a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800903c:	f000 fe8e 	bl	8009d5c <xTaskGetSchedulerState>
 8009040:	1e03      	subs	r3, r0, #0
 8009042:	d102      	bne.n	800904a <xQueueSemaphoreTake+0x3a>
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d101      	bne.n	800904e <xQueueSemaphoreTake+0x3e>
 800904a:	2301      	movs	r3, #1
 800904c:	e000      	b.n	8009050 <xQueueSemaphoreTake+0x40>
 800904e:	2300      	movs	r3, #0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <xQueueSemaphoreTake+0x48>
 8009054:	b672      	cpsid	i
 8009056:	e7fe      	b.n	8009056 <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009058:	f001 f8d2 	bl	800a200 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009060:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d01d      	beq.n	80090a4 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	1e5a      	subs	r2, r3, #1
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d104      	bne.n	8009082 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009078:	f000 ffc0 	bl	8009ffc <pvTaskIncrementMutexHeldCount>
 800907c:	0002      	movs	r2, r0
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d008      	beq.n	800909c <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	3310      	adds	r3, #16
 800908e:	0018      	movs	r0, r3
 8009090:	f000 fce8 	bl	8009a64 <xTaskRemoveFromEventList>
 8009094:	1e03      	subs	r3, r0, #0
 8009096:	d001      	beq.n	800909c <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009098:	f001 f8a2 	bl	800a1e0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800909c:	f001 f8c2 	bl	800a224 <vPortExitCritical>
				return pdPASS;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e08b      	b.n	80091bc <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d108      	bne.n	80090bc <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80090aa:	6a3b      	ldr	r3, [r7, #32]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <xQueueSemaphoreTake+0xa4>
 80090b0:	b672      	cpsid	i
 80090b2:	e7fe      	b.n	80090b2 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80090b4:	f001 f8b6 	bl	800a224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80090b8:	2300      	movs	r3, #0
 80090ba:	e07f      	b.n	80091bc <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d106      	bne.n	80090d0 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090c2:	230c      	movs	r3, #12
 80090c4:	18fb      	adds	r3, r7, r3
 80090c6:	0018      	movs	r0, r3
 80090c8:	f000 fd28 	bl	8009b1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090cc:	2301      	movs	r3, #1
 80090ce:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090d0:	f001 f8a8 	bl	800a224 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090d4:	f000 fb0e 	bl	80096f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090d8:	f001 f892 	bl	800a200 <vPortEnterCritical>
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	2244      	movs	r2, #68	; 0x44
 80090e0:	5c9b      	ldrb	r3, [r3, r2]
 80090e2:	b25b      	sxtb	r3, r3
 80090e4:	3301      	adds	r3, #1
 80090e6:	d103      	bne.n	80090f0 <xQueueSemaphoreTake+0xe0>
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	2244      	movs	r2, #68	; 0x44
 80090ec:	2100      	movs	r1, #0
 80090ee:	5499      	strb	r1, [r3, r2]
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	2245      	movs	r2, #69	; 0x45
 80090f4:	5c9b      	ldrb	r3, [r3, r2]
 80090f6:	b25b      	sxtb	r3, r3
 80090f8:	3301      	adds	r3, #1
 80090fa:	d103      	bne.n	8009104 <xQueueSemaphoreTake+0xf4>
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	2245      	movs	r2, #69	; 0x45
 8009100:	2100      	movs	r1, #0
 8009102:	5499      	strb	r1, [r3, r2]
 8009104:	f001 f88e 	bl	800a224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009108:	003a      	movs	r2, r7
 800910a:	230c      	movs	r3, #12
 800910c:	18fb      	adds	r3, r7, r3
 800910e:	0011      	movs	r1, r2
 8009110:	0018      	movs	r0, r3
 8009112:	f000 fd17 	bl	8009b44 <xTaskCheckForTimeOut>
 8009116:	1e03      	subs	r3, r0, #0
 8009118:	d12e      	bne.n	8009178 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	0018      	movs	r0, r3
 800911e:	f000 f930 	bl	8009382 <prvIsQueueEmpty>
 8009122:	1e03      	subs	r3, r0, #0
 8009124:	d021      	beq.n	800916a <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10a      	bne.n	8009144 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800912e:	f001 f867 	bl	800a200 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	0018      	movs	r0, r3
 8009138:	f000 fe2c 	bl	8009d94 <xTaskPriorityInherit>
 800913c:	0003      	movs	r3, r0
 800913e:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8009140:	f001 f870 	bl	800a224 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	3324      	adds	r3, #36	; 0x24
 8009148:	683a      	ldr	r2, [r7, #0]
 800914a:	0011      	movs	r1, r2
 800914c:	0018      	movs	r0, r3
 800914e:	f000 fc6b 	bl	8009a28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	0018      	movs	r0, r3
 8009156:	f000 f8b6 	bl	80092c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800915a:	f000 fad7 	bl	800970c <xTaskResumeAll>
 800915e:	1e03      	subs	r3, r0, #0
 8009160:	d000      	beq.n	8009164 <xQueueSemaphoreTake+0x154>
 8009162:	e779      	b.n	8009058 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8009164:	f001 f83c 	bl	800a1e0 <vPortYield>
 8009168:	e776      	b.n	8009058 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	0018      	movs	r0, r3
 800916e:	f000 f8aa 	bl	80092c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009172:	f000 facb 	bl	800970c <xTaskResumeAll>
 8009176:	e76f      	b.n	8009058 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	0018      	movs	r0, r3
 800917c:	f000 f8a3 	bl	80092c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009180:	f000 fac4 	bl	800970c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	0018      	movs	r0, r3
 8009188:	f000 f8fb 	bl	8009382 <prvIsQueueEmpty>
 800918c:	1e03      	subs	r3, r0, #0
 800918e:	d100      	bne.n	8009192 <xQueueSemaphoreTake+0x182>
 8009190:	e762      	b.n	8009058 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009192:	6a3b      	ldr	r3, [r7, #32]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d010      	beq.n	80091ba <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8009198:	f001 f832 	bl	800a200 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	0018      	movs	r0, r3
 80091a0:	f000 f810 	bl	80091c4 <prvGetDisinheritPriorityAfterTimeout>
 80091a4:	0003      	movs	r3, r0
 80091a6:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	0011      	movs	r1, r2
 80091b0:	0018      	movs	r0, r3
 80091b2:	f000 feb3 	bl	8009f1c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80091b6:	f001 f835 	bl	800a224 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80091ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80091bc:	0018      	movs	r0, r3
 80091be:	46bd      	mov	sp, r7
 80091c0:	b00a      	add	sp, #40	; 0x28
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d006      	beq.n	80091e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2207      	movs	r2, #7
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	e001      	b.n	80091e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80091e2:	2300      	movs	r3, #0
 80091e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80091e6:	68fb      	ldr	r3, [r7, #12]
	}
 80091e8:	0018      	movs	r0, r3
 80091ea:	46bd      	mov	sp, r7
 80091ec:	b004      	add	sp, #16
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80091fc:	2300      	movs	r3, #0
 80091fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009204:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10e      	bne.n	800922c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d14e      	bne.n	80092b4 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	0018      	movs	r0, r3
 800921c:	f000 fe22 	bl	8009e64 <xTaskPriorityDisinherit>
 8009220:	0003      	movs	r3, r0
 8009222:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	609a      	str	r2, [r3, #8]
 800922a:	e043      	b.n	80092b4 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d119      	bne.n	8009266 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6858      	ldr	r0, [r3, #4]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	0019      	movs	r1, r3
 800923e:	f001 fdbd 	bl	800adbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924a:	18d2      	adds	r2, r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	429a      	cmp	r2, r3
 800925a:	d32b      	bcc.n	80092b4 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	605a      	str	r2, [r3, #4]
 8009264:	e026      	b.n	80092b4 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	68d8      	ldr	r0, [r3, #12]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	0019      	movs	r1, r3
 8009272:	f001 fda3 	bl	800adbc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	68da      	ldr	r2, [r3, #12]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927e:	425b      	negs	r3, r3
 8009280:	18d2      	adds	r2, r2, r3
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	429a      	cmp	r2, r3
 8009290:	d207      	bcs.n	80092a2 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	689a      	ldr	r2, [r3, #8]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929a:	425b      	negs	r3, r3
 800929c:	18d2      	adds	r2, r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d105      	bne.n	80092b4 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d002      	beq.n	80092b4 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	3b01      	subs	r3, #1
 80092b2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80092bc:	697b      	ldr	r3, [r7, #20]
}
 80092be:	0018      	movs	r0, r3
 80092c0:	46bd      	mov	sp, r7
 80092c2:	b006      	add	sp, #24
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b084      	sub	sp, #16
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80092ce:	f000 ff97 	bl	800a200 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80092d2:	230f      	movs	r3, #15
 80092d4:	18fb      	adds	r3, r7, r3
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	2145      	movs	r1, #69	; 0x45
 80092da:	5c52      	ldrb	r2, [r2, r1]
 80092dc:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092de:	e013      	b.n	8009308 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d016      	beq.n	8009316 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	3324      	adds	r3, #36	; 0x24
 80092ec:	0018      	movs	r0, r3
 80092ee:	f000 fbb9 	bl	8009a64 <xTaskRemoveFromEventList>
 80092f2:	1e03      	subs	r3, r0, #0
 80092f4:	d001      	beq.n	80092fa <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80092f6:	f000 fc75 	bl	8009be4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80092fa:	210f      	movs	r1, #15
 80092fc:	187b      	adds	r3, r7, r1
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	3b01      	subs	r3, #1
 8009302:	b2da      	uxtb	r2, r3
 8009304:	187b      	adds	r3, r7, r1
 8009306:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009308:	230f      	movs	r3, #15
 800930a:	18fb      	adds	r3, r7, r3
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	b25b      	sxtb	r3, r3
 8009310:	2b00      	cmp	r3, #0
 8009312:	dce5      	bgt.n	80092e0 <prvUnlockQueue+0x1a>
 8009314:	e000      	b.n	8009318 <prvUnlockQueue+0x52>
					break;
 8009316:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2245      	movs	r2, #69	; 0x45
 800931c:	21ff      	movs	r1, #255	; 0xff
 800931e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8009320:	f000 ff80 	bl	800a224 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009324:	f000 ff6c 	bl	800a200 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009328:	230e      	movs	r3, #14
 800932a:	18fb      	adds	r3, r7, r3
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	2144      	movs	r1, #68	; 0x44
 8009330:	5c52      	ldrb	r2, [r2, r1]
 8009332:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009334:	e013      	b.n	800935e <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d016      	beq.n	800936c <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3310      	adds	r3, #16
 8009342:	0018      	movs	r0, r3
 8009344:	f000 fb8e 	bl	8009a64 <xTaskRemoveFromEventList>
 8009348:	1e03      	subs	r3, r0, #0
 800934a:	d001      	beq.n	8009350 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800934c:	f000 fc4a 	bl	8009be4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009350:	210e      	movs	r1, #14
 8009352:	187b      	adds	r3, r7, r1
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	3b01      	subs	r3, #1
 8009358:	b2da      	uxtb	r2, r3
 800935a:	187b      	adds	r3, r7, r1
 800935c:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800935e:	230e      	movs	r3, #14
 8009360:	18fb      	adds	r3, r7, r3
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	b25b      	sxtb	r3, r3
 8009366:	2b00      	cmp	r3, #0
 8009368:	dce5      	bgt.n	8009336 <prvUnlockQueue+0x70>
 800936a:	e000      	b.n	800936e <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800936c:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2244      	movs	r2, #68	; 0x44
 8009372:	21ff      	movs	r1, #255	; 0xff
 8009374:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8009376:	f000 ff55 	bl	800a224 <vPortExitCritical>
}
 800937a:	46c0      	nop			; (mov r8, r8)
 800937c:	46bd      	mov	sp, r7
 800937e:	b004      	add	sp, #16
 8009380:	bd80      	pop	{r7, pc}

08009382 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b084      	sub	sp, #16
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800938a:	f000 ff39 	bl	800a200 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009392:	2b00      	cmp	r3, #0
 8009394:	d102      	bne.n	800939c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009396:	2301      	movs	r3, #1
 8009398:	60fb      	str	r3, [r7, #12]
 800939a:	e001      	b.n	80093a0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800939c:	2300      	movs	r3, #0
 800939e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093a0:	f000 ff40 	bl	800a224 <vPortExitCritical>

	return xReturn;
 80093a4:	68fb      	ldr	r3, [r7, #12]
}
 80093a6:	0018      	movs	r0, r3
 80093a8:	46bd      	mov	sp, r7
 80093aa:	b004      	add	sp, #16
 80093ac:	bd80      	pop	{r7, pc}

080093ae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b084      	sub	sp, #16
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093b6:	f000 ff23 	bl	800a200 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d102      	bne.n	80093cc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80093c6:	2301      	movs	r3, #1
 80093c8:	60fb      	str	r3, [r7, #12]
 80093ca:	e001      	b.n	80093d0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80093cc:	2300      	movs	r3, #0
 80093ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093d0:	f000 ff28 	bl	800a224 <vPortExitCritical>

	return xReturn;
 80093d4:	68fb      	ldr	r3, [r7, #12]
}
 80093d6:	0018      	movs	r0, r3
 80093d8:	46bd      	mov	sp, r7
 80093da:	b004      	add	sp, #16
 80093dc:	bd80      	pop	{r7, pc}

080093de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80093de:	b590      	push	{r4, r7, lr}
 80093e0:	b08d      	sub	sp, #52	; 0x34
 80093e2:	af04      	add	r7, sp, #16
 80093e4:	60f8      	str	r0, [r7, #12]
 80093e6:	60b9      	str	r1, [r7, #8]
 80093e8:	603b      	str	r3, [r7, #0]
 80093ea:	1dbb      	adds	r3, r7, #6
 80093ec:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80093ee:	1dbb      	adds	r3, r7, #6
 80093f0:	881b      	ldrh	r3, [r3, #0]
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	0018      	movs	r0, r3
 80093f6:	f000 ff9b 	bl	800a330 <pvPortMalloc>
 80093fa:	0003      	movs	r3, r0
 80093fc:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d010      	beq.n	8009426 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009404:	2054      	movs	r0, #84	; 0x54
 8009406:	f000 ff93 	bl	800a330 <pvPortMalloc>
 800940a:	0003      	movs	r3, r0
 800940c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	697a      	ldr	r2, [r7, #20]
 8009418:	631a      	str	r2, [r3, #48]	; 0x30
 800941a:	e006      	b.n	800942a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	0018      	movs	r0, r3
 8009420:	f001 f832 	bl	800a488 <vPortFree>
 8009424:	e001      	b.n	800942a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009426:	2300      	movs	r3, #0
 8009428:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d016      	beq.n	800945e <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009430:	1dbb      	adds	r3, r7, #6
 8009432:	881a      	ldrh	r2, [r3, #0]
 8009434:	683c      	ldr	r4, [r7, #0]
 8009436:	68b9      	ldr	r1, [r7, #8]
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	2300      	movs	r3, #0
 800943c:	9303      	str	r3, [sp, #12]
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	9302      	str	r3, [sp, #8]
 8009442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009444:	9301      	str	r3, [sp, #4]
 8009446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	0023      	movs	r3, r4
 800944c:	f000 f810 	bl	8009470 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	0018      	movs	r0, r3
 8009454:	f000 f88e 	bl	8009574 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009458:	2301      	movs	r3, #1
 800945a:	61bb      	str	r3, [r7, #24]
 800945c:	e002      	b.n	8009464 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800945e:	2301      	movs	r3, #1
 8009460:	425b      	negs	r3, r3
 8009462:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009464:	69bb      	ldr	r3, [r7, #24]
	}
 8009466:	0018      	movs	r0, r3
 8009468:	46bd      	mov	sp, r7
 800946a:	b009      	add	sp, #36	; 0x24
 800946c:	bd90      	pop	{r4, r7, pc}
	...

08009470 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
 800947c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800947e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	493a      	ldr	r1, [pc, #232]	; (8009570 <prvInitialiseNewTask+0x100>)
 8009486:	468c      	mov	ip, r1
 8009488:	4463      	add	r3, ip
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	18d3      	adds	r3, r2, r3
 800948e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	2207      	movs	r2, #7
 8009494:	4393      	bics	r3, r2
 8009496:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	2207      	movs	r2, #7
 800949c:	4013      	ands	r3, r2
 800949e:	d001      	beq.n	80094a4 <prvInitialiseNewTask+0x34>
 80094a0:	b672      	cpsid	i
 80094a2:	e7fe      	b.n	80094a2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d020      	beq.n	80094ec <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094aa:	2300      	movs	r3, #0
 80094ac:	617b      	str	r3, [r7, #20]
 80094ae:	e013      	b.n	80094d8 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094b0:	68ba      	ldr	r2, [r7, #8]
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	18d3      	adds	r3, r2, r3
 80094b6:	7818      	ldrb	r0, [r3, #0]
 80094b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094ba:	2134      	movs	r1, #52	; 0x34
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	18d3      	adds	r3, r2, r3
 80094c0:	185b      	adds	r3, r3, r1
 80094c2:	1c02      	adds	r2, r0, #0
 80094c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	18d3      	adds	r3, r2, r3
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d006      	beq.n	80094e0 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	3301      	adds	r3, #1
 80094d6:	617b      	str	r3, [r7, #20]
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2b0f      	cmp	r3, #15
 80094dc:	d9e8      	bls.n	80094b0 <prvInitialiseNewTask+0x40>
 80094de:	e000      	b.n	80094e2 <prvInitialiseNewTask+0x72>
			{
				break;
 80094e0:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80094e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e4:	2243      	movs	r2, #67	; 0x43
 80094e6:	2100      	movs	r1, #0
 80094e8:	5499      	strb	r1, [r3, r2]
 80094ea:	e003      	b.n	80094f4 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	2234      	movs	r2, #52	; 0x34
 80094f0:	2100      	movs	r1, #0
 80094f2:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	2b06      	cmp	r3, #6
 80094f8:	d901      	bls.n	80094fe <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80094fa:	2306      	movs	r3, #6
 80094fc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80094fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009500:	6a3a      	ldr	r2, [r7, #32]
 8009502:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009506:	6a3a      	ldr	r2, [r7, #32]
 8009508:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800950a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950c:	2200      	movs	r2, #0
 800950e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009512:	3304      	adds	r3, #4
 8009514:	0018      	movs	r0, r3
 8009516:	f7ff fb88 	bl	8008c2a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800951a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951c:	3318      	adds	r3, #24
 800951e:	0018      	movs	r0, r3
 8009520:	f7ff fb83 	bl	8008c2a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009528:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	2207      	movs	r2, #7
 800952e:	1ad2      	subs	r2, r2, r3
 8009530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009532:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009538:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953c:	2200      	movs	r2, #0
 800953e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009542:	2250      	movs	r2, #80	; 0x50
 8009544:	2100      	movs	r1, #0
 8009546:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009548:	683a      	ldr	r2, [r7, #0]
 800954a:	68f9      	ldr	r1, [r7, #12]
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	0018      	movs	r0, r3
 8009550:	f000 fdba 	bl	800a0c8 <pxPortInitialiseStack>
 8009554:	0002      	movs	r2, r0
 8009556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009558:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800955a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955c:	2b00      	cmp	r3, #0
 800955e:	d002      	beq.n	8009566 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009566:	46c0      	nop			; (mov r8, r8)
 8009568:	46bd      	mov	sp, r7
 800956a:	b006      	add	sp, #24
 800956c:	bd80      	pop	{r7, pc}
 800956e:	46c0      	nop			; (mov r8, r8)
 8009570:	3fffffff 	.word	0x3fffffff

08009574 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800957c:	f000 fe40 	bl	800a200 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009580:	4b28      	ldr	r3, [pc, #160]	; (8009624 <prvAddNewTaskToReadyList+0xb0>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	1c5a      	adds	r2, r3, #1
 8009586:	4b27      	ldr	r3, [pc, #156]	; (8009624 <prvAddNewTaskToReadyList+0xb0>)
 8009588:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800958a:	4b27      	ldr	r3, [pc, #156]	; (8009628 <prvAddNewTaskToReadyList+0xb4>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d109      	bne.n	80095a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009592:	4b25      	ldr	r3, [pc, #148]	; (8009628 <prvAddNewTaskToReadyList+0xb4>)
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009598:	4b22      	ldr	r3, [pc, #136]	; (8009624 <prvAddNewTaskToReadyList+0xb0>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d110      	bne.n	80095c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80095a0:	f000 fb3a 	bl	8009c18 <prvInitialiseTaskLists>
 80095a4:	e00d      	b.n	80095c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80095a6:	4b21      	ldr	r3, [pc, #132]	; (800962c <prvAddNewTaskToReadyList+0xb8>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d109      	bne.n	80095c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80095ae:	4b1e      	ldr	r3, [pc, #120]	; (8009628 <prvAddNewTaskToReadyList+0xb4>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d802      	bhi.n	80095c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80095bc:	4b1a      	ldr	r3, [pc, #104]	; (8009628 <prvAddNewTaskToReadyList+0xb4>)
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80095c2:	4b1b      	ldr	r3, [pc, #108]	; (8009630 <prvAddNewTaskToReadyList+0xbc>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	1c5a      	adds	r2, r3, #1
 80095c8:	4b19      	ldr	r3, [pc, #100]	; (8009630 <prvAddNewTaskToReadyList+0xbc>)
 80095ca:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d0:	4b18      	ldr	r3, [pc, #96]	; (8009634 <prvAddNewTaskToReadyList+0xc0>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d903      	bls.n	80095e0 <prvAddNewTaskToReadyList+0x6c>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095dc:	4b15      	ldr	r3, [pc, #84]	; (8009634 <prvAddNewTaskToReadyList+0xc0>)
 80095de:	601a      	str	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e4:	0013      	movs	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	189b      	adds	r3, r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4a12      	ldr	r2, [pc, #72]	; (8009638 <prvAddNewTaskToReadyList+0xc4>)
 80095ee:	189a      	adds	r2, r3, r2
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	3304      	adds	r3, #4
 80095f4:	0019      	movs	r1, r3
 80095f6:	0010      	movs	r0, r2
 80095f8:	f7ff fb22 	bl	8008c40 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80095fc:	f000 fe12 	bl	800a224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009600:	4b0a      	ldr	r3, [pc, #40]	; (800962c <prvAddNewTaskToReadyList+0xb8>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d008      	beq.n	800961a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009608:	4b07      	ldr	r3, [pc, #28]	; (8009628 <prvAddNewTaskToReadyList+0xb4>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009612:	429a      	cmp	r2, r3
 8009614:	d201      	bcs.n	800961a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009616:	f000 fde3 	bl	800a1e0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800961a:	46c0      	nop			; (mov r8, r8)
 800961c:	46bd      	mov	sp, r7
 800961e:	b002      	add	sp, #8
 8009620:	bd80      	pop	{r7, pc}
 8009622:	46c0      	nop			; (mov r8, r8)
 8009624:	20000860 	.word	0x20000860
 8009628:	20000760 	.word	0x20000760
 800962c:	2000086c 	.word	0x2000086c
 8009630:	2000087c 	.word	0x2000087c
 8009634:	20000868 	.word	0x20000868
 8009638:	20000764 	.word	0x20000764

0800963c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009644:	2300      	movs	r3, #0
 8009646:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d010      	beq.n	8009670 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800964e:	4b0d      	ldr	r3, [pc, #52]	; (8009684 <vTaskDelay+0x48>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <vTaskDelay+0x1e>
 8009656:	b672      	cpsid	i
 8009658:	e7fe      	b.n	8009658 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800965a:	f000 f84b 	bl	80096f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2100      	movs	r1, #0
 8009662:	0018      	movs	r0, r3
 8009664:	f000 fcdc 	bl	800a020 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009668:	f000 f850 	bl	800970c <xTaskResumeAll>
 800966c:	0003      	movs	r3, r0
 800966e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d101      	bne.n	800967a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8009676:	f000 fdb3 	bl	800a1e0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800967a:	46c0      	nop			; (mov r8, r8)
 800967c:	46bd      	mov	sp, r7
 800967e:	b004      	add	sp, #16
 8009680:	bd80      	pop	{r7, pc}
 8009682:	46c0      	nop			; (mov r8, r8)
 8009684:	20000888 	.word	0x20000888

08009688 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800968e:	4913      	ldr	r1, [pc, #76]	; (80096dc <vTaskStartScheduler+0x54>)
 8009690:	4813      	ldr	r0, [pc, #76]	; (80096e0 <vTaskStartScheduler+0x58>)
 8009692:	4b14      	ldr	r3, [pc, #80]	; (80096e4 <vTaskStartScheduler+0x5c>)
 8009694:	9301      	str	r3, [sp, #4]
 8009696:	2300      	movs	r3, #0
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	2300      	movs	r3, #0
 800969c:	2280      	movs	r2, #128	; 0x80
 800969e:	f7ff fe9e 	bl	80093de <xTaskCreate>
 80096a2:	0003      	movs	r3, r0
 80096a4:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d10d      	bne.n	80096c8 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80096ac:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80096ae:	4b0e      	ldr	r3, [pc, #56]	; (80096e8 <vTaskStartScheduler+0x60>)
 80096b0:	2201      	movs	r2, #1
 80096b2:	4252      	negs	r2, r2
 80096b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80096b6:	4b0d      	ldr	r3, [pc, #52]	; (80096ec <vTaskStartScheduler+0x64>)
 80096b8:	2201      	movs	r2, #1
 80096ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80096bc:	4b0c      	ldr	r3, [pc, #48]	; (80096f0 <vTaskStartScheduler+0x68>)
 80096be:	2200      	movs	r2, #0
 80096c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80096c2:	f000 fd69 	bl	800a198 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80096c6:	e004      	b.n	80096d2 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	3301      	adds	r3, #1
 80096cc:	d101      	bne.n	80096d2 <vTaskStartScheduler+0x4a>
 80096ce:	b672      	cpsid	i
 80096d0:	e7fe      	b.n	80096d0 <vTaskStartScheduler+0x48>
}
 80096d2:	46c0      	nop			; (mov r8, r8)
 80096d4:	46bd      	mov	sp, r7
 80096d6:	b002      	add	sp, #8
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	46c0      	nop			; (mov r8, r8)
 80096dc:	0800d4e0 	.word	0x0800d4e0
 80096e0:	08009bf9 	.word	0x08009bf9
 80096e4:	20000884 	.word	0x20000884
 80096e8:	20000880 	.word	0x20000880
 80096ec:	2000086c 	.word	0x2000086c
 80096f0:	20000864 	.word	0x20000864

080096f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80096f8:	4b03      	ldr	r3, [pc, #12]	; (8009708 <vTaskSuspendAll+0x14>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	1c5a      	adds	r2, r3, #1
 80096fe:	4b02      	ldr	r3, [pc, #8]	; (8009708 <vTaskSuspendAll+0x14>)
 8009700:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009702:	46c0      	nop			; (mov r8, r8)
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	20000888 	.word	0x20000888

0800970c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009716:	2300      	movs	r3, #0
 8009718:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800971a:	4b3a      	ldr	r3, [pc, #232]	; (8009804 <xTaskResumeAll+0xf8>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <xTaskResumeAll+0x1a>
 8009722:	b672      	cpsid	i
 8009724:	e7fe      	b.n	8009724 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009726:	f000 fd6b 	bl	800a200 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800972a:	4b36      	ldr	r3, [pc, #216]	; (8009804 <xTaskResumeAll+0xf8>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	1e5a      	subs	r2, r3, #1
 8009730:	4b34      	ldr	r3, [pc, #208]	; (8009804 <xTaskResumeAll+0xf8>)
 8009732:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009734:	4b33      	ldr	r3, [pc, #204]	; (8009804 <xTaskResumeAll+0xf8>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d15b      	bne.n	80097f4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800973c:	4b32      	ldr	r3, [pc, #200]	; (8009808 <xTaskResumeAll+0xfc>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d057      	beq.n	80097f4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009744:	e02f      	b.n	80097a6 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009746:	4b31      	ldr	r3, [pc, #196]	; (800980c <xTaskResumeAll+0x100>)
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3318      	adds	r3, #24
 8009752:	0018      	movs	r0, r3
 8009754:	f7ff facc 	bl	8008cf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	3304      	adds	r3, #4
 800975c:	0018      	movs	r0, r3
 800975e:	f7ff fac7 	bl	8008cf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009766:	4b2a      	ldr	r3, [pc, #168]	; (8009810 <xTaskResumeAll+0x104>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	429a      	cmp	r2, r3
 800976c:	d903      	bls.n	8009776 <xTaskResumeAll+0x6a>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009772:	4b27      	ldr	r3, [pc, #156]	; (8009810 <xTaskResumeAll+0x104>)
 8009774:	601a      	str	r2, [r3, #0]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800977a:	0013      	movs	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	189b      	adds	r3, r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4a24      	ldr	r2, [pc, #144]	; (8009814 <xTaskResumeAll+0x108>)
 8009784:	189a      	adds	r2, r3, r2
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	3304      	adds	r3, #4
 800978a:	0019      	movs	r1, r3
 800978c:	0010      	movs	r0, r2
 800978e:	f7ff fa57 	bl	8008c40 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009796:	4b20      	ldr	r3, [pc, #128]	; (8009818 <xTaskResumeAll+0x10c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979c:	429a      	cmp	r2, r3
 800979e:	d302      	bcc.n	80097a6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80097a0:	4b1e      	ldr	r3, [pc, #120]	; (800981c <xTaskResumeAll+0x110>)
 80097a2:	2201      	movs	r2, #1
 80097a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097a6:	4b19      	ldr	r3, [pc, #100]	; (800980c <xTaskResumeAll+0x100>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1cb      	bne.n	8009746 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d001      	beq.n	80097b8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80097b4:	f000 fab4 	bl	8009d20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80097b8:	4b19      	ldr	r3, [pc, #100]	; (8009820 <xTaskResumeAll+0x114>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00f      	beq.n	80097e4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80097c4:	f000 f82e 	bl	8009824 <xTaskIncrementTick>
 80097c8:	1e03      	subs	r3, r0, #0
 80097ca:	d002      	beq.n	80097d2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80097cc:	4b13      	ldr	r3, [pc, #76]	; (800981c <xTaskResumeAll+0x110>)
 80097ce:	2201      	movs	r2, #1
 80097d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	3b01      	subs	r3, #1
 80097d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d1f2      	bne.n	80097c4 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80097de:	4b10      	ldr	r3, [pc, #64]	; (8009820 <xTaskResumeAll+0x114>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097e4:	4b0d      	ldr	r3, [pc, #52]	; (800981c <xTaskResumeAll+0x110>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d003      	beq.n	80097f4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80097ec:	2301      	movs	r3, #1
 80097ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80097f0:	f000 fcf6 	bl	800a1e0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097f4:	f000 fd16 	bl	800a224 <vPortExitCritical>

	return xAlreadyYielded;
 80097f8:	68bb      	ldr	r3, [r7, #8]
}
 80097fa:	0018      	movs	r0, r3
 80097fc:	46bd      	mov	sp, r7
 80097fe:	b004      	add	sp, #16
 8009800:	bd80      	pop	{r7, pc}
 8009802:	46c0      	nop			; (mov r8, r8)
 8009804:	20000888 	.word	0x20000888
 8009808:	20000860 	.word	0x20000860
 800980c:	20000820 	.word	0x20000820
 8009810:	20000868 	.word	0x20000868
 8009814:	20000764 	.word	0x20000764
 8009818:	20000760 	.word	0x20000760
 800981c:	20000874 	.word	0x20000874
 8009820:	20000870 	.word	0x20000870

08009824 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800982a:	2300      	movs	r3, #0
 800982c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800982e:	4b4a      	ldr	r3, [pc, #296]	; (8009958 <xTaskIncrementTick+0x134>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d000      	beq.n	8009838 <xTaskIncrementTick+0x14>
 8009836:	e084      	b.n	8009942 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009838:	4b48      	ldr	r3, [pc, #288]	; (800995c <xTaskIncrementTick+0x138>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	3301      	adds	r3, #1
 800983e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009840:	4b46      	ldr	r3, [pc, #280]	; (800995c <xTaskIncrementTick+0x138>)
 8009842:	693a      	ldr	r2, [r7, #16]
 8009844:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d117      	bne.n	800987c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800984c:	4b44      	ldr	r3, [pc, #272]	; (8009960 <xTaskIncrementTick+0x13c>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <xTaskIncrementTick+0x36>
 8009856:	b672      	cpsid	i
 8009858:	e7fe      	b.n	8009858 <xTaskIncrementTick+0x34>
 800985a:	4b41      	ldr	r3, [pc, #260]	; (8009960 <xTaskIncrementTick+0x13c>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	60fb      	str	r3, [r7, #12]
 8009860:	4b40      	ldr	r3, [pc, #256]	; (8009964 <xTaskIncrementTick+0x140>)
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	4b3e      	ldr	r3, [pc, #248]	; (8009960 <xTaskIncrementTick+0x13c>)
 8009866:	601a      	str	r2, [r3, #0]
 8009868:	4b3e      	ldr	r3, [pc, #248]	; (8009964 <xTaskIncrementTick+0x140>)
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	4b3e      	ldr	r3, [pc, #248]	; (8009968 <xTaskIncrementTick+0x144>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	4b3c      	ldr	r3, [pc, #240]	; (8009968 <xTaskIncrementTick+0x144>)
 8009876:	601a      	str	r2, [r3, #0]
 8009878:	f000 fa52 	bl	8009d20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800987c:	4b3b      	ldr	r3, [pc, #236]	; (800996c <xTaskIncrementTick+0x148>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	429a      	cmp	r2, r3
 8009884:	d349      	bcc.n	800991a <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009886:	4b36      	ldr	r3, [pc, #216]	; (8009960 <xTaskIncrementTick+0x13c>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d104      	bne.n	800989a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009890:	4b36      	ldr	r3, [pc, #216]	; (800996c <xTaskIncrementTick+0x148>)
 8009892:	2201      	movs	r2, #1
 8009894:	4252      	negs	r2, r2
 8009896:	601a      	str	r2, [r3, #0]
					break;
 8009898:	e03f      	b.n	800991a <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800989a:	4b31      	ldr	r3, [pc, #196]	; (8009960 <xTaskIncrementTick+0x13c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80098aa:	693a      	ldr	r2, [r7, #16]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d203      	bcs.n	80098ba <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80098b2:	4b2e      	ldr	r3, [pc, #184]	; (800996c <xTaskIncrementTick+0x148>)
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80098b8:	e02f      	b.n	800991a <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	3304      	adds	r3, #4
 80098be:	0018      	movs	r0, r3
 80098c0:	f7ff fa16 	bl	8008cf0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d004      	beq.n	80098d6 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	3318      	adds	r3, #24
 80098d0:	0018      	movs	r0, r3
 80098d2:	f7ff fa0d 	bl	8008cf0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098da:	4b25      	ldr	r3, [pc, #148]	; (8009970 <xTaskIncrementTick+0x14c>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d903      	bls.n	80098ea <xTaskIncrementTick+0xc6>
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e6:	4b22      	ldr	r3, [pc, #136]	; (8009970 <xTaskIncrementTick+0x14c>)
 80098e8:	601a      	str	r2, [r3, #0]
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ee:	0013      	movs	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	189b      	adds	r3, r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4a1f      	ldr	r2, [pc, #124]	; (8009974 <xTaskIncrementTick+0x150>)
 80098f8:	189a      	adds	r2, r3, r2
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	3304      	adds	r3, #4
 80098fe:	0019      	movs	r1, r3
 8009900:	0010      	movs	r0, r2
 8009902:	f7ff f99d 	bl	8008c40 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990a:	4b1b      	ldr	r3, [pc, #108]	; (8009978 <xTaskIncrementTick+0x154>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009910:	429a      	cmp	r2, r3
 8009912:	d3b8      	bcc.n	8009886 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8009914:	2301      	movs	r3, #1
 8009916:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009918:	e7b5      	b.n	8009886 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800991a:	4b17      	ldr	r3, [pc, #92]	; (8009978 <xTaskIncrementTick+0x154>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009920:	4914      	ldr	r1, [pc, #80]	; (8009974 <xTaskIncrementTick+0x150>)
 8009922:	0013      	movs	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	189b      	adds	r3, r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	585b      	ldr	r3, [r3, r1]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d901      	bls.n	8009934 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8009930:	2301      	movs	r3, #1
 8009932:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009934:	4b11      	ldr	r3, [pc, #68]	; (800997c <xTaskIncrementTick+0x158>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d007      	beq.n	800994c <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800993c:	2301      	movs	r3, #1
 800993e:	617b      	str	r3, [r7, #20]
 8009940:	e004      	b.n	800994c <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009942:	4b0f      	ldr	r3, [pc, #60]	; (8009980 <xTaskIncrementTick+0x15c>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	1c5a      	adds	r2, r3, #1
 8009948:	4b0d      	ldr	r3, [pc, #52]	; (8009980 <xTaskIncrementTick+0x15c>)
 800994a:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800994c:	697b      	ldr	r3, [r7, #20]
}
 800994e:	0018      	movs	r0, r3
 8009950:	46bd      	mov	sp, r7
 8009952:	b006      	add	sp, #24
 8009954:	bd80      	pop	{r7, pc}
 8009956:	46c0      	nop			; (mov r8, r8)
 8009958:	20000888 	.word	0x20000888
 800995c:	20000864 	.word	0x20000864
 8009960:	20000818 	.word	0x20000818
 8009964:	2000081c 	.word	0x2000081c
 8009968:	20000878 	.word	0x20000878
 800996c:	20000880 	.word	0x20000880
 8009970:	20000868 	.word	0x20000868
 8009974:	20000764 	.word	0x20000764
 8009978:	20000760 	.word	0x20000760
 800997c:	20000874 	.word	0x20000874
 8009980:	20000870 	.word	0x20000870

08009984 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800998a:	4b22      	ldr	r3, [pc, #136]	; (8009a14 <vTaskSwitchContext+0x90>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d003      	beq.n	800999a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009992:	4b21      	ldr	r3, [pc, #132]	; (8009a18 <vTaskSwitchContext+0x94>)
 8009994:	2201      	movs	r2, #1
 8009996:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009998:	e037      	b.n	8009a0a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800999a:	4b1f      	ldr	r3, [pc, #124]	; (8009a18 <vTaskSwitchContext+0x94>)
 800999c:	2200      	movs	r2, #0
 800999e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099a0:	4b1e      	ldr	r3, [pc, #120]	; (8009a1c <vTaskSwitchContext+0x98>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	607b      	str	r3, [r7, #4]
 80099a6:	e007      	b.n	80099b8 <vTaskSwitchContext+0x34>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d101      	bne.n	80099b2 <vTaskSwitchContext+0x2e>
 80099ae:	b672      	cpsid	i
 80099b0:	e7fe      	b.n	80099b0 <vTaskSwitchContext+0x2c>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	3b01      	subs	r3, #1
 80099b6:	607b      	str	r3, [r7, #4]
 80099b8:	4919      	ldr	r1, [pc, #100]	; (8009a20 <vTaskSwitchContext+0x9c>)
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	0013      	movs	r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	189b      	adds	r3, r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	585b      	ldr	r3, [r3, r1]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d0ee      	beq.n	80099a8 <vTaskSwitchContext+0x24>
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	0013      	movs	r3, r2
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	189b      	adds	r3, r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4a12      	ldr	r2, [pc, #72]	; (8009a20 <vTaskSwitchContext+0x9c>)
 80099d6:	189b      	adds	r3, r3, r2
 80099d8:	603b      	str	r3, [r7, #0]
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	605a      	str	r2, [r3, #4]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	685a      	ldr	r2, [r3, #4]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	3308      	adds	r3, #8
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d104      	bne.n	80099fa <vTaskSwitchContext+0x76>
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	605a      	str	r2, [r3, #4]
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	68da      	ldr	r2, [r3, #12]
 8009a00:	4b08      	ldr	r3, [pc, #32]	; (8009a24 <vTaskSwitchContext+0xa0>)
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	4b05      	ldr	r3, [pc, #20]	; (8009a1c <vTaskSwitchContext+0x98>)
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	601a      	str	r2, [r3, #0]
}
 8009a0a:	46c0      	nop			; (mov r8, r8)
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	b002      	add	sp, #8
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	46c0      	nop			; (mov r8, r8)
 8009a14:	20000888 	.word	0x20000888
 8009a18:	20000874 	.word	0x20000874
 8009a1c:	20000868 	.word	0x20000868
 8009a20:	20000764 	.word	0x20000764
 8009a24:	20000760 	.word	0x20000760

08009a28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d101      	bne.n	8009a3c <vTaskPlaceOnEventList+0x14>
 8009a38:	b672      	cpsid	i
 8009a3a:	e7fe      	b.n	8009a3a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a3c:	4b08      	ldr	r3, [pc, #32]	; (8009a60 <vTaskPlaceOnEventList+0x38>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3318      	adds	r3, #24
 8009a42:	001a      	movs	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	0011      	movs	r1, r2
 8009a48:	0018      	movs	r0, r3
 8009a4a:	f7ff f91b 	bl	8008c84 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	2101      	movs	r1, #1
 8009a52:	0018      	movs	r0, r3
 8009a54:	f000 fae4 	bl	800a020 <prvAddCurrentTaskToDelayedList>
}
 8009a58:	46c0      	nop			; (mov r8, r8)
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	b002      	add	sp, #8
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	20000760 	.word	0x20000760

08009a64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d101      	bne.n	8009a7e <xTaskRemoveFromEventList+0x1a>
 8009a7a:	b672      	cpsid	i
 8009a7c:	e7fe      	b.n	8009a7c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	3318      	adds	r3, #24
 8009a82:	0018      	movs	r0, r3
 8009a84:	f7ff f934 	bl	8008cf0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a88:	4b1e      	ldr	r3, [pc, #120]	; (8009b04 <xTaskRemoveFromEventList+0xa0>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d11d      	bne.n	8009acc <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	3304      	adds	r3, #4
 8009a94:	0018      	movs	r0, r3
 8009a96:	f7ff f92b 	bl	8008cf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a9e:	4b1a      	ldr	r3, [pc, #104]	; (8009b08 <xTaskRemoveFromEventList+0xa4>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d903      	bls.n	8009aae <xTaskRemoveFromEventList+0x4a>
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aaa:	4b17      	ldr	r3, [pc, #92]	; (8009b08 <xTaskRemoveFromEventList+0xa4>)
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab2:	0013      	movs	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	189b      	adds	r3, r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4a14      	ldr	r2, [pc, #80]	; (8009b0c <xTaskRemoveFromEventList+0xa8>)
 8009abc:	189a      	adds	r2, r3, r2
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	3304      	adds	r3, #4
 8009ac2:	0019      	movs	r1, r3
 8009ac4:	0010      	movs	r0, r2
 8009ac6:	f7ff f8bb 	bl	8008c40 <vListInsertEnd>
 8009aca:	e007      	b.n	8009adc <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	3318      	adds	r3, #24
 8009ad0:	001a      	movs	r2, r3
 8009ad2:	4b0f      	ldr	r3, [pc, #60]	; (8009b10 <xTaskRemoveFromEventList+0xac>)
 8009ad4:	0011      	movs	r1, r2
 8009ad6:	0018      	movs	r0, r3
 8009ad8:	f7ff f8b2 	bl	8008c40 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae0:	4b0c      	ldr	r3, [pc, #48]	; (8009b14 <xTaskRemoveFromEventList+0xb0>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d905      	bls.n	8009af6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009aea:	2301      	movs	r3, #1
 8009aec:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009aee:	4b0a      	ldr	r3, [pc, #40]	; (8009b18 <xTaskRemoveFromEventList+0xb4>)
 8009af0:	2201      	movs	r2, #1
 8009af2:	601a      	str	r2, [r3, #0]
 8009af4:	e001      	b.n	8009afa <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8009af6:	2300      	movs	r3, #0
 8009af8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8009afa:	68fb      	ldr	r3, [r7, #12]
}
 8009afc:	0018      	movs	r0, r3
 8009afe:	46bd      	mov	sp, r7
 8009b00:	b004      	add	sp, #16
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	20000888 	.word	0x20000888
 8009b08:	20000868 	.word	0x20000868
 8009b0c:	20000764 	.word	0x20000764
 8009b10:	20000820 	.word	0x20000820
 8009b14:	20000760 	.word	0x20000760
 8009b18:	20000874 	.word	0x20000874

08009b1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b24:	4b05      	ldr	r3, [pc, #20]	; (8009b3c <vTaskInternalSetTimeOutState+0x20>)
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b2c:	4b04      	ldr	r3, [pc, #16]	; (8009b40 <vTaskInternalSetTimeOutState+0x24>)
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	605a      	str	r2, [r3, #4]
}
 8009b34:	46c0      	nop			; (mov r8, r8)
 8009b36:	46bd      	mov	sp, r7
 8009b38:	b002      	add	sp, #8
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	20000878 	.word	0x20000878
 8009b40:	20000864 	.word	0x20000864

08009b44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d101      	bne.n	8009b58 <xTaskCheckForTimeOut+0x14>
 8009b54:	b672      	cpsid	i
 8009b56:	e7fe      	b.n	8009b56 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <xTaskCheckForTimeOut+0x1e>
 8009b5e:	b672      	cpsid	i
 8009b60:	e7fe      	b.n	8009b60 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8009b62:	f000 fb4d 	bl	800a200 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b66:	4b1d      	ldr	r3, [pc, #116]	; (8009bdc <xTaskCheckForTimeOut+0x98>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	d102      	bne.n	8009b84 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	617b      	str	r3, [r7, #20]
 8009b82:	e024      	b.n	8009bce <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	4b15      	ldr	r3, [pc, #84]	; (8009be0 <xTaskCheckForTimeOut+0x9c>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d007      	beq.n	8009ba0 <xTaskCheckForTimeOut+0x5c>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d302      	bcc.n	8009ba0 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	617b      	str	r3, [r7, #20]
 8009b9e:	e016      	b.n	8009bce <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d20c      	bcs.n	8009bc4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	1ad2      	subs	r2, r2, r3
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	0018      	movs	r0, r3
 8009bba:	f7ff ffaf 	bl	8009b1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	617b      	str	r3, [r7, #20]
 8009bc2:	e004      	b.n	8009bce <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8009bce:	f000 fb29 	bl	800a224 <vPortExitCritical>

	return xReturn;
 8009bd2:	697b      	ldr	r3, [r7, #20]
}
 8009bd4:	0018      	movs	r0, r3
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	b006      	add	sp, #24
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	20000864 	.word	0x20000864
 8009be0:	20000878 	.word	0x20000878

08009be4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009be8:	4b02      	ldr	r3, [pc, #8]	; (8009bf4 <vTaskMissedYield+0x10>)
 8009bea:	2201      	movs	r2, #1
 8009bec:	601a      	str	r2, [r3, #0]
}
 8009bee:	46c0      	nop			; (mov r8, r8)
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	20000874 	.word	0x20000874

08009bf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c00:	f000 f84e 	bl	8009ca0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c04:	4b03      	ldr	r3, [pc, #12]	; (8009c14 <prvIdleTask+0x1c>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d9f9      	bls.n	8009c00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c0c:	f000 fae8 	bl	800a1e0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8009c10:	e7f6      	b.n	8009c00 <prvIdleTask+0x8>
 8009c12:	46c0      	nop			; (mov r8, r8)
 8009c14:	20000764 	.word	0x20000764

08009c18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c1e:	2300      	movs	r3, #0
 8009c20:	607b      	str	r3, [r7, #4]
 8009c22:	e00c      	b.n	8009c3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	0013      	movs	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	189b      	adds	r3, r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4a14      	ldr	r2, [pc, #80]	; (8009c80 <prvInitialiseTaskLists+0x68>)
 8009c30:	189b      	adds	r3, r3, r2
 8009c32:	0018      	movs	r0, r3
 8009c34:	f7fe ffdb 	bl	8008bee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	607b      	str	r3, [r7, #4]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b06      	cmp	r3, #6
 8009c42:	d9ef      	bls.n	8009c24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c44:	4b0f      	ldr	r3, [pc, #60]	; (8009c84 <prvInitialiseTaskLists+0x6c>)
 8009c46:	0018      	movs	r0, r3
 8009c48:	f7fe ffd1 	bl	8008bee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c4c:	4b0e      	ldr	r3, [pc, #56]	; (8009c88 <prvInitialiseTaskLists+0x70>)
 8009c4e:	0018      	movs	r0, r3
 8009c50:	f7fe ffcd 	bl	8008bee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c54:	4b0d      	ldr	r3, [pc, #52]	; (8009c8c <prvInitialiseTaskLists+0x74>)
 8009c56:	0018      	movs	r0, r3
 8009c58:	f7fe ffc9 	bl	8008bee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c5c:	4b0c      	ldr	r3, [pc, #48]	; (8009c90 <prvInitialiseTaskLists+0x78>)
 8009c5e:	0018      	movs	r0, r3
 8009c60:	f7fe ffc5 	bl	8008bee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c64:	4b0b      	ldr	r3, [pc, #44]	; (8009c94 <prvInitialiseTaskLists+0x7c>)
 8009c66:	0018      	movs	r0, r3
 8009c68:	f7fe ffc1 	bl	8008bee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c6c:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <prvInitialiseTaskLists+0x80>)
 8009c6e:	4a05      	ldr	r2, [pc, #20]	; (8009c84 <prvInitialiseTaskLists+0x6c>)
 8009c70:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c72:	4b0a      	ldr	r3, [pc, #40]	; (8009c9c <prvInitialiseTaskLists+0x84>)
 8009c74:	4a04      	ldr	r2, [pc, #16]	; (8009c88 <prvInitialiseTaskLists+0x70>)
 8009c76:	601a      	str	r2, [r3, #0]
}
 8009c78:	46c0      	nop			; (mov r8, r8)
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	b002      	add	sp, #8
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	20000764 	.word	0x20000764
 8009c84:	200007f0 	.word	0x200007f0
 8009c88:	20000804 	.word	0x20000804
 8009c8c:	20000820 	.word	0x20000820
 8009c90:	20000834 	.word	0x20000834
 8009c94:	2000084c 	.word	0x2000084c
 8009c98:	20000818 	.word	0x20000818
 8009c9c:	2000081c 	.word	0x2000081c

08009ca0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ca6:	e01a      	b.n	8009cde <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8009ca8:	f000 faaa 	bl	800a200 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cac:	4b10      	ldr	r3, [pc, #64]	; (8009cf0 <prvCheckTasksWaitingTermination+0x50>)
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	0018      	movs	r0, r3
 8009cba:	f7ff f819 	bl	8008cf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cbe:	4b0d      	ldr	r3, [pc, #52]	; (8009cf4 <prvCheckTasksWaitingTermination+0x54>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	1e5a      	subs	r2, r3, #1
 8009cc4:	4b0b      	ldr	r3, [pc, #44]	; (8009cf4 <prvCheckTasksWaitingTermination+0x54>)
 8009cc6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009cc8:	4b0b      	ldr	r3, [pc, #44]	; (8009cf8 <prvCheckTasksWaitingTermination+0x58>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	1e5a      	subs	r2, r3, #1
 8009cce:	4b0a      	ldr	r3, [pc, #40]	; (8009cf8 <prvCheckTasksWaitingTermination+0x58>)
 8009cd0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8009cd2:	f000 faa7 	bl	800a224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	0018      	movs	r0, r3
 8009cda:	f000 f80f 	bl	8009cfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cde:	4b06      	ldr	r3, [pc, #24]	; (8009cf8 <prvCheckTasksWaitingTermination+0x58>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1e0      	bne.n	8009ca8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ce6:	46c0      	nop			; (mov r8, r8)
 8009ce8:	46c0      	nop			; (mov r8, r8)
 8009cea:	46bd      	mov	sp, r7
 8009cec:	b002      	add	sp, #8
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	20000834 	.word	0x20000834
 8009cf4:	20000860 	.word	0x20000860
 8009cf8:	20000848 	.word	0x20000848

08009cfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d08:	0018      	movs	r0, r3
 8009d0a:	f000 fbbd 	bl	800a488 <vPortFree>
			vPortFree( pxTCB );
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	0018      	movs	r0, r3
 8009d12:	f000 fbb9 	bl	800a488 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d16:	46c0      	nop			; (mov r8, r8)
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	b002      	add	sp, #8
 8009d1c:	bd80      	pop	{r7, pc}
	...

08009d20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d26:	4b0b      	ldr	r3, [pc, #44]	; (8009d54 <prvResetNextTaskUnblockTime+0x34>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d104      	bne.n	8009d3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d30:	4b09      	ldr	r3, [pc, #36]	; (8009d58 <prvResetNextTaskUnblockTime+0x38>)
 8009d32:	2201      	movs	r2, #1
 8009d34:	4252      	negs	r2, r2
 8009d36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d38:	e008      	b.n	8009d4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d3a:	4b06      	ldr	r3, [pc, #24]	; (8009d54 <prvResetNextTaskUnblockTime+0x34>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	685a      	ldr	r2, [r3, #4]
 8009d48:	4b03      	ldr	r3, [pc, #12]	; (8009d58 <prvResetNextTaskUnblockTime+0x38>)
 8009d4a:	601a      	str	r2, [r3, #0]
}
 8009d4c:	46c0      	nop			; (mov r8, r8)
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	b002      	add	sp, #8
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	20000818 	.word	0x20000818
 8009d58:	20000880 	.word	0x20000880

08009d5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d62:	4b0a      	ldr	r3, [pc, #40]	; (8009d8c <xTaskGetSchedulerState+0x30>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d102      	bne.n	8009d70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	607b      	str	r3, [r7, #4]
 8009d6e:	e008      	b.n	8009d82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d70:	4b07      	ldr	r3, [pc, #28]	; (8009d90 <xTaskGetSchedulerState+0x34>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d102      	bne.n	8009d7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d78:	2302      	movs	r3, #2
 8009d7a:	607b      	str	r3, [r7, #4]
 8009d7c:	e001      	b.n	8009d82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d82:	687b      	ldr	r3, [r7, #4]
	}
 8009d84:	0018      	movs	r0, r3
 8009d86:	46bd      	mov	sp, r7
 8009d88:	b002      	add	sp, #8
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	2000086c 	.word	0x2000086c
 8009d90:	20000888 	.word	0x20000888

08009d94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009da0:	2300      	movs	r3, #0
 8009da2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d051      	beq.n	8009e4e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dae:	4b2a      	ldr	r3, [pc, #168]	; (8009e58 <xTaskPriorityInherit+0xc4>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d241      	bcs.n	8009e3c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	699b      	ldr	r3, [r3, #24]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	db06      	blt.n	8009dce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dc0:	4b25      	ldr	r3, [pc, #148]	; (8009e58 <xTaskPriorityInherit+0xc4>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc6:	2207      	movs	r2, #7
 8009dc8:	1ad2      	subs	r2, r2, r3
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	6959      	ldr	r1, [r3, #20]
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dd6:	0013      	movs	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	189b      	adds	r3, r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4a1f      	ldr	r2, [pc, #124]	; (8009e5c <xTaskPriorityInherit+0xc8>)
 8009de0:	189b      	adds	r3, r3, r2
 8009de2:	4299      	cmp	r1, r3
 8009de4:	d122      	bne.n	8009e2c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	3304      	adds	r3, #4
 8009dea:	0018      	movs	r0, r3
 8009dec:	f7fe ff80 	bl	8008cf0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009df0:	4b19      	ldr	r3, [pc, #100]	; (8009e58 <xTaskPriorityInherit+0xc4>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dfe:	4b18      	ldr	r3, [pc, #96]	; (8009e60 <xTaskPriorityInherit+0xcc>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d903      	bls.n	8009e0e <xTaskPriorityInherit+0x7a>
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e0a:	4b15      	ldr	r3, [pc, #84]	; (8009e60 <xTaskPriorityInherit+0xcc>)
 8009e0c:	601a      	str	r2, [r3, #0]
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e12:	0013      	movs	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	189b      	adds	r3, r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4a10      	ldr	r2, [pc, #64]	; (8009e5c <xTaskPriorityInherit+0xc8>)
 8009e1c:	189a      	adds	r2, r3, r2
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	3304      	adds	r3, #4
 8009e22:	0019      	movs	r1, r3
 8009e24:	0010      	movs	r0, r2
 8009e26:	f7fe ff0b 	bl	8008c40 <vListInsertEnd>
 8009e2a:	e004      	b.n	8009e36 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e2c:	4b0a      	ldr	r3, [pc, #40]	; (8009e58 <xTaskPriorityInherit+0xc4>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009e36:	2301      	movs	r3, #1
 8009e38:	60fb      	str	r3, [r7, #12]
 8009e3a:	e008      	b.n	8009e4e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e40:	4b05      	ldr	r3, [pc, #20]	; (8009e58 <xTaskPriorityInherit+0xc4>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d201      	bcs.n	8009e4e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
	}
 8009e50:	0018      	movs	r0, r3
 8009e52:	46bd      	mov	sp, r7
 8009e54:	b004      	add	sp, #16
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	20000760 	.word	0x20000760
 8009e5c:	20000764 	.word	0x20000764
 8009e60:	20000868 	.word	0x20000868

08009e64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009e70:	2300      	movs	r3, #0
 8009e72:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d044      	beq.n	8009f04 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e7a:	4b25      	ldr	r3, [pc, #148]	; (8009f10 <xTaskPriorityDisinherit+0xac>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d001      	beq.n	8009e88 <xTaskPriorityDisinherit+0x24>
 8009e84:	b672      	cpsid	i
 8009e86:	e7fe      	b.n	8009e86 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d101      	bne.n	8009e94 <xTaskPriorityDisinherit+0x30>
 8009e90:	b672      	cpsid	i
 8009e92:	e7fe      	b.n	8009e92 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e98:	1e5a      	subs	r2, r3, #1
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d02c      	beq.n	8009f04 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d128      	bne.n	8009f04 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	0018      	movs	r0, r3
 8009eb8:	f7fe ff1a 	bl	8008cf0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec8:	2207      	movs	r2, #7
 8009eca:	1ad2      	subs	r2, r2, r3
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed4:	4b0f      	ldr	r3, [pc, #60]	; (8009f14 <xTaskPriorityDisinherit+0xb0>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d903      	bls.n	8009ee4 <xTaskPriorityDisinherit+0x80>
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee0:	4b0c      	ldr	r3, [pc, #48]	; (8009f14 <xTaskPriorityDisinherit+0xb0>)
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee8:	0013      	movs	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	189b      	adds	r3, r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4a09      	ldr	r2, [pc, #36]	; (8009f18 <xTaskPriorityDisinherit+0xb4>)
 8009ef2:	189a      	adds	r2, r3, r2
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	0019      	movs	r1, r3
 8009efa:	0010      	movs	r0, r2
 8009efc:	f7fe fea0 	bl	8008c40 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f00:	2301      	movs	r3, #1
 8009f02:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f04:	68fb      	ldr	r3, [r7, #12]
	}
 8009f06:	0018      	movs	r0, r3
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	b004      	add	sp, #16
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	46c0      	nop			; (mov r8, r8)
 8009f10:	20000760 	.word	0x20000760
 8009f14:	20000868 	.word	0x20000868
 8009f18:	20000764 	.word	0x20000764

08009f1c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b086      	sub	sp, #24
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d058      	beq.n	8009fe6 <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d101      	bne.n	8009f40 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8009f3c:	b672      	cpsid	i
 8009f3e:	e7fe      	b.n	8009f3e <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d902      	bls.n	8009f50 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	617b      	str	r3, [r7, #20]
 8009f4e:	e002      	b.n	8009f56 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f54:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d042      	beq.n	8009fe6 <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d13d      	bne.n	8009fe6 <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009f6a:	4b21      	ldr	r3, [pc, #132]	; (8009ff0 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d101      	bne.n	8009f78 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8009f74:	b672      	cpsid	i
 8009f76:	e7fe      	b.n	8009f76 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	db04      	blt.n	8009f96 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	2207      	movs	r2, #7
 8009f90:	1ad2      	subs	r2, r2, r3
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	6959      	ldr	r1, [r3, #20]
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	0013      	movs	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	189b      	adds	r3, r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4a13      	ldr	r2, [pc, #76]	; (8009ff4 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8009fa6:	189b      	adds	r3, r3, r2
 8009fa8:	4299      	cmp	r1, r3
 8009faa:	d11c      	bne.n	8009fe6 <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	3304      	adds	r3, #4
 8009fb0:	0018      	movs	r0, r3
 8009fb2:	f7fe fe9d 	bl	8008cf0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fba:	4b0f      	ldr	r3, [pc, #60]	; (8009ff8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d903      	bls.n	8009fca <vTaskPriorityDisinheritAfterTimeout+0xae>
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc6:	4b0c      	ldr	r3, [pc, #48]	; (8009ff8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8009fc8:	601a      	str	r2, [r3, #0]
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fce:	0013      	movs	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	189b      	adds	r3, r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	4a07      	ldr	r2, [pc, #28]	; (8009ff4 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8009fd8:	189a      	adds	r2, r3, r2
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	3304      	adds	r3, #4
 8009fde:	0019      	movs	r1, r3
 8009fe0:	0010      	movs	r0, r2
 8009fe2:	f7fe fe2d 	bl	8008c40 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fe6:	46c0      	nop			; (mov r8, r8)
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	b006      	add	sp, #24
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	46c0      	nop			; (mov r8, r8)
 8009ff0:	20000760 	.word	0x20000760
 8009ff4:	20000764 	.word	0x20000764
 8009ff8:	20000868 	.word	0x20000868

08009ffc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a000:	4b06      	ldr	r3, [pc, #24]	; (800a01c <pvTaskIncrementMutexHeldCount+0x20>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d004      	beq.n	800a012 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a008:	4b04      	ldr	r3, [pc, #16]	; (800a01c <pvTaskIncrementMutexHeldCount+0x20>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a00e:	3201      	adds	r2, #1
 800a010:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a012:	4b02      	ldr	r3, [pc, #8]	; (800a01c <pvTaskIncrementMutexHeldCount+0x20>)
 800a014:	681b      	ldr	r3, [r3, #0]
	}
 800a016:	0018      	movs	r0, r3
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	20000760 	.word	0x20000760

0800a020 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a02a:	4b21      	ldr	r3, [pc, #132]	; (800a0b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a030:	4b20      	ldr	r3, [pc, #128]	; (800a0b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3304      	adds	r3, #4
 800a036:	0018      	movs	r0, r3
 800a038:	f7fe fe5a 	bl	8008cf0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	3301      	adds	r3, #1
 800a040:	d10b      	bne.n	800a05a <prvAddCurrentTaskToDelayedList+0x3a>
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d008      	beq.n	800a05a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a048:	4b1a      	ldr	r3, [pc, #104]	; (800a0b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	1d1a      	adds	r2, r3, #4
 800a04e:	4b1a      	ldr	r3, [pc, #104]	; (800a0b8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a050:	0011      	movs	r1, r2
 800a052:	0018      	movs	r0, r3
 800a054:	f7fe fdf4 	bl	8008c40 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a058:	e026      	b.n	800a0a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	18d3      	adds	r3, r2, r3
 800a060:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a062:	4b14      	ldr	r3, [pc, #80]	; (800a0b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d209      	bcs.n	800a086 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a072:	4b12      	ldr	r3, [pc, #72]	; (800a0bc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	4b0f      	ldr	r3, [pc, #60]	; (800a0b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3304      	adds	r3, #4
 800a07c:	0019      	movs	r1, r3
 800a07e:	0010      	movs	r0, r2
 800a080:	f7fe fe00 	bl	8008c84 <vListInsert>
}
 800a084:	e010      	b.n	800a0a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a086:	4b0e      	ldr	r3, [pc, #56]	; (800a0c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	4b0a      	ldr	r3, [pc, #40]	; (800a0b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	3304      	adds	r3, #4
 800a090:	0019      	movs	r1, r3
 800a092:	0010      	movs	r0, r2
 800a094:	f7fe fdf6 	bl	8008c84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a098:	4b0a      	ldr	r3, [pc, #40]	; (800a0c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d202      	bcs.n	800a0a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a0a2:	4b08      	ldr	r3, [pc, #32]	; (800a0c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	601a      	str	r2, [r3, #0]
}
 800a0a8:	46c0      	nop			; (mov r8, r8)
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	b004      	add	sp, #16
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	20000864 	.word	0x20000864
 800a0b4:	20000760 	.word	0x20000760
 800a0b8:	2000084c 	.word	0x2000084c
 800a0bc:	2000081c 	.word	0x2000081c
 800a0c0:	20000818 	.word	0x20000818
 800a0c4:	20000880 	.word	0x20000880

0800a0c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	3b04      	subs	r3, #4
 800a0d8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2280      	movs	r2, #128	; 0x80
 800a0de:	0452      	lsls	r2, r2, #17
 800a0e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3b04      	subs	r3, #4
 800a0e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	3b04      	subs	r3, #4
 800a0f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0f4:	4a08      	ldr	r2, [pc, #32]	; (800a118 <pxPortInitialiseStack+0x50>)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	3b14      	subs	r3, #20
 800a0fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	3b20      	subs	r3, #32
 800a10a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a10c:	68fb      	ldr	r3, [r7, #12]
}
 800a10e:	0018      	movs	r0, r3
 800a110:	46bd      	mov	sp, r7
 800a112:	b004      	add	sp, #16
 800a114:	bd80      	pop	{r7, pc}
 800a116:	46c0      	nop			; (mov r8, r8)
 800a118:	0800a11d 	.word	0x0800a11d

0800a11c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a122:	2300      	movs	r3, #0
 800a124:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a126:	4b08      	ldr	r3, [pc, #32]	; (800a148 <prvTaskExitError+0x2c>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	3301      	adds	r3, #1
 800a12c:	d001      	beq.n	800a132 <prvTaskExitError+0x16>
 800a12e:	b672      	cpsid	i
 800a130:	e7fe      	b.n	800a130 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800a132:	b672      	cpsid	i
	while( ulDummy == 0 )
 800a134:	46c0      	nop			; (mov r8, r8)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d0fc      	beq.n	800a136 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a13c:	46c0      	nop			; (mov r8, r8)
 800a13e:	46c0      	nop			; (mov r8, r8)
 800a140:	46bd      	mov	sp, r7
 800a142:	b002      	add	sp, #8
 800a144:	bd80      	pop	{r7, pc}
 800a146:	46c0      	nop			; (mov r8, r8)
 800a148:	2000000c 	.word	0x2000000c

0800a14c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800a150:	46c0      	nop			; (mov r8, r8)
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
	...

0800a160 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800a160:	4a0b      	ldr	r2, [pc, #44]	; (800a190 <pxCurrentTCBConst2>)
 800a162:	6813      	ldr	r3, [r2, #0]
 800a164:	6818      	ldr	r0, [r3, #0]
 800a166:	3020      	adds	r0, #32
 800a168:	f380 8809 	msr	PSP, r0
 800a16c:	2002      	movs	r0, #2
 800a16e:	f380 8814 	msr	CONTROL, r0
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800a178:	46ae      	mov	lr, r5
 800a17a:	bc08      	pop	{r3}
 800a17c:	bc04      	pop	{r2}
 800a17e:	b662      	cpsie	i
 800a180:	4718      	bx	r3
 800a182:	46c0      	nop			; (mov r8, r8)
 800a184:	46c0      	nop			; (mov r8, r8)
 800a186:	46c0      	nop			; (mov r8, r8)
 800a188:	46c0      	nop			; (mov r8, r8)
 800a18a:	46c0      	nop			; (mov r8, r8)
 800a18c:	46c0      	nop			; (mov r8, r8)
 800a18e:	46c0      	nop			; (mov r8, r8)

0800a190 <pxCurrentTCBConst2>:
 800a190:	20000760 	.word	0x20000760
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800a194:	46c0      	nop			; (mov r8, r8)
 800a196:	46c0      	nop			; (mov r8, r8)

0800a198 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a19c:	4b0e      	ldr	r3, [pc, #56]	; (800a1d8 <xPortStartScheduler+0x40>)
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	4b0d      	ldr	r3, [pc, #52]	; (800a1d8 <xPortStartScheduler+0x40>)
 800a1a2:	21ff      	movs	r1, #255	; 0xff
 800a1a4:	0409      	lsls	r1, r1, #16
 800a1a6:	430a      	orrs	r2, r1
 800a1a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1aa:	4b0b      	ldr	r3, [pc, #44]	; (800a1d8 <xPortStartScheduler+0x40>)
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	4b0a      	ldr	r3, [pc, #40]	; (800a1d8 <xPortStartScheduler+0x40>)
 800a1b0:	21ff      	movs	r1, #255	; 0xff
 800a1b2:	0609      	lsls	r1, r1, #24
 800a1b4:	430a      	orrs	r2, r1
 800a1b6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1b8:	f000 f898 	bl	800a2ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1bc:	4b07      	ldr	r3, [pc, #28]	; (800a1dc <xPortStartScheduler+0x44>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800a1c2:	f7ff ffcd 	bl	800a160 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a1c6:	f7ff fbdd 	bl	8009984 <vTaskSwitchContext>
	prvTaskExitError();
 800a1ca:	f7ff ffa7 	bl	800a11c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1ce:	2300      	movs	r3, #0
}
 800a1d0:	0018      	movs	r0, r3
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	46c0      	nop			; (mov r8, r8)
 800a1d8:	e000ed20 	.word	0xe000ed20
 800a1dc:	2000000c 	.word	0x2000000c

0800a1e0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1e4:	4b05      	ldr	r3, [pc, #20]	; (800a1fc <vPortYield+0x1c>)
 800a1e6:	2280      	movs	r2, #128	; 0x80
 800a1e8:	0552      	lsls	r2, r2, #21
 800a1ea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800a1ec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a1f0:	f3bf 8f6f 	isb	sy
}
 800a1f4:	46c0      	nop			; (mov r8, r8)
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	46c0      	nop			; (mov r8, r8)
 800a1fc:	e000ed04 	.word	0xe000ed04

0800a200 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800a204:	b672      	cpsid	i
	uxCriticalNesting++;
 800a206:	4b06      	ldr	r3, [pc, #24]	; (800a220 <vPortEnterCritical+0x20>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	1c5a      	adds	r2, r3, #1
 800a20c:	4b04      	ldr	r3, [pc, #16]	; (800a220 <vPortEnterCritical+0x20>)
 800a20e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800a210:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a214:	f3bf 8f6f 	isb	sy
}
 800a218:	46c0      	nop			; (mov r8, r8)
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	46c0      	nop			; (mov r8, r8)
 800a220:	2000000c 	.word	0x2000000c

0800a224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a228:	4b09      	ldr	r3, [pc, #36]	; (800a250 <vPortExitCritical+0x2c>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d101      	bne.n	800a234 <vPortExitCritical+0x10>
 800a230:	b672      	cpsid	i
 800a232:	e7fe      	b.n	800a232 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 800a234:	4b06      	ldr	r3, [pc, #24]	; (800a250 <vPortExitCritical+0x2c>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	1e5a      	subs	r2, r3, #1
 800a23a:	4b05      	ldr	r3, [pc, #20]	; (800a250 <vPortExitCritical+0x2c>)
 800a23c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800a23e:	4b04      	ldr	r3, [pc, #16]	; (800a250 <vPortExitCritical+0x2c>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d100      	bne.n	800a248 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 800a246:	b662      	cpsie	i
	}
}
 800a248:	46c0      	nop			; (mov r8, r8)
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	46c0      	nop			; (mov r8, r8)
 800a250:	2000000c 	.word	0x2000000c

0800a254 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800a254:	f3ef 8010 	mrs	r0, PRIMASK
 800a258:	b672      	cpsid	i
 800a25a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800a25c:	46c0      	nop			; (mov r8, r8)
 800a25e:	0018      	movs	r0, r3

0800a260 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800a260:	f380 8810 	msr	PRIMASK, r0
 800a264:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800a266:	46c0      	nop			; (mov r8, r8)
	...

0800a270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a270:	f3ef 8009 	mrs	r0, PSP
 800a274:	4b0e      	ldr	r3, [pc, #56]	; (800a2b0 <pxCurrentTCBConst>)
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	3820      	subs	r0, #32
 800a27a:	6010      	str	r0, [r2, #0]
 800a27c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800a27e:	4644      	mov	r4, r8
 800a280:	464d      	mov	r5, r9
 800a282:	4656      	mov	r6, sl
 800a284:	465f      	mov	r7, fp
 800a286:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800a288:	b508      	push	{r3, lr}
 800a28a:	b672      	cpsid	i
 800a28c:	f7ff fb7a 	bl	8009984 <vTaskSwitchContext>
 800a290:	b662      	cpsie	i
 800a292:	bc0c      	pop	{r2, r3}
 800a294:	6811      	ldr	r1, [r2, #0]
 800a296:	6808      	ldr	r0, [r1, #0]
 800a298:	3010      	adds	r0, #16
 800a29a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800a29c:	46a0      	mov	r8, r4
 800a29e:	46a9      	mov	r9, r5
 800a2a0:	46b2      	mov	sl, r6
 800a2a2:	46bb      	mov	fp, r7
 800a2a4:	f380 8809 	msr	PSP, r0
 800a2a8:	3820      	subs	r0, #32
 800a2aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800a2ac:	4718      	bx	r3
 800a2ae:	46c0      	nop			; (mov r8, r8)

0800a2b0 <pxCurrentTCBConst>:
 800a2b0:	20000760 	.word	0x20000760
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800a2b4:	46c0      	nop			; (mov r8, r8)
 800a2b6:	46c0      	nop			; (mov r8, r8)

0800a2b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2be:	f7ff ffc9 	bl	800a254 <ulSetInterruptMaskFromISR>
 800a2c2:	0003      	movs	r3, r0
 800a2c4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2c6:	f7ff faad 	bl	8009824 <xTaskIncrementTick>
 800a2ca:	1e03      	subs	r3, r0, #0
 800a2cc:	d003      	beq.n	800a2d6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2ce:	4b06      	ldr	r3, [pc, #24]	; (800a2e8 <xPortSysTickHandler+0x30>)
 800a2d0:	2280      	movs	r2, #128	; 0x80
 800a2d2:	0552      	lsls	r2, r2, #21
 800a2d4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	0018      	movs	r0, r3
 800a2da:	f7ff ffc1 	bl	800a260 <vClearInterruptMaskFromISR>
}
 800a2de:	46c0      	nop			; (mov r8, r8)
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	b002      	add	sp, #8
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	46c0      	nop			; (mov r8, r8)
 800a2e8:	e000ed04 	.word	0xe000ed04

0800a2ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2f0:	4b0b      	ldr	r3, [pc, #44]	; (800a320 <vPortSetupTimerInterrupt+0x34>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2f6:	4b0b      	ldr	r3, [pc, #44]	; (800a324 <vPortSetupTimerInterrupt+0x38>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2fc:	4b0a      	ldr	r3, [pc, #40]	; (800a328 <vPortSetupTimerInterrupt+0x3c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	22fa      	movs	r2, #250	; 0xfa
 800a302:	0091      	lsls	r1, r2, #2
 800a304:	0018      	movs	r0, r3
 800a306:	f7f5 ff09 	bl	800011c <__udivsi3>
 800a30a:	0003      	movs	r3, r0
 800a30c:	001a      	movs	r2, r3
 800a30e:	4b07      	ldr	r3, [pc, #28]	; (800a32c <vPortSetupTimerInterrupt+0x40>)
 800a310:	3a01      	subs	r2, #1
 800a312:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800a314:	4b02      	ldr	r3, [pc, #8]	; (800a320 <vPortSetupTimerInterrupt+0x34>)
 800a316:	2207      	movs	r2, #7
 800a318:	601a      	str	r2, [r3, #0]
}
 800a31a:	46c0      	nop			; (mov r8, r8)
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	e000e010 	.word	0xe000e010
 800a324:	e000e018 	.word	0xe000e018
 800a328:	20000000 	.word	0x20000000
 800a32c:	e000e014 	.word	0xe000e014

0800a330 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a338:	2300      	movs	r3, #0
 800a33a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800a33c:	f7ff f9da 	bl	80096f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a340:	4b4b      	ldr	r3, [pc, #300]	; (800a470 <pvPortMalloc+0x140>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d101      	bne.n	800a34c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a348:	f000 f8ec 	bl	800a524 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a34c:	4b49      	ldr	r3, [pc, #292]	; (800a474 <pvPortMalloc+0x144>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	4013      	ands	r3, r2
 800a354:	d000      	beq.n	800a358 <pvPortMalloc+0x28>
 800a356:	e07e      	b.n	800a456 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d012      	beq.n	800a384 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800a35e:	2208      	movs	r2, #8
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	189b      	adds	r3, r3, r2
 800a364:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2207      	movs	r2, #7
 800a36a:	4013      	ands	r3, r2
 800a36c:	d00a      	beq.n	800a384 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2207      	movs	r2, #7
 800a372:	4393      	bics	r3, r2
 800a374:	3308      	adds	r3, #8
 800a376:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2207      	movs	r2, #7
 800a37c:	4013      	ands	r3, r2
 800a37e:	d001      	beq.n	800a384 <pvPortMalloc+0x54>
 800a380:	b672      	cpsid	i
 800a382:	e7fe      	b.n	800a382 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d065      	beq.n	800a456 <pvPortMalloc+0x126>
 800a38a:	4b3b      	ldr	r3, [pc, #236]	; (800a478 <pvPortMalloc+0x148>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	429a      	cmp	r2, r3
 800a392:	d860      	bhi.n	800a456 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a394:	4b39      	ldr	r3, [pc, #228]	; (800a47c <pvPortMalloc+0x14c>)
 800a396:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800a398:	4b38      	ldr	r3, [pc, #224]	; (800a47c <pvPortMalloc+0x14c>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a39e:	e004      	b.n	800a3aa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d903      	bls.n	800a3bc <pvPortMalloc+0x8c>
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d1f1      	bne.n	800a3a0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a3bc:	4b2c      	ldr	r3, [pc, #176]	; (800a470 <pvPortMalloc+0x140>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	697a      	ldr	r2, [r7, #20]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d047      	beq.n	800a456 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2208      	movs	r2, #8
 800a3cc:	189b      	adds	r3, r3, r2
 800a3ce:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	685a      	ldr	r2, [r3, #4]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	1ad2      	subs	r2, r2, r3
 800a3e0:	2308      	movs	r3, #8
 800a3e2:	005b      	lsls	r3, r3, #1
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d916      	bls.n	800a416 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	18d3      	adds	r3, r2, r3
 800a3ee:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	2207      	movs	r2, #7
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	d001      	beq.n	800a3fc <pvPortMalloc+0xcc>
 800a3f8:	b672      	cpsid	i
 800a3fa:	e7fe      	b.n	800a3fa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	1ad2      	subs	r2, r2, r3
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	0018      	movs	r0, r3
 800a412:	f000 f8e7 	bl	800a5e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a416:	4b18      	ldr	r3, [pc, #96]	; (800a478 <pvPortMalloc+0x148>)
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	1ad2      	subs	r2, r2, r3
 800a420:	4b15      	ldr	r3, [pc, #84]	; (800a478 <pvPortMalloc+0x148>)
 800a422:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a424:	4b14      	ldr	r3, [pc, #80]	; (800a478 <pvPortMalloc+0x148>)
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	4b15      	ldr	r3, [pc, #84]	; (800a480 <pvPortMalloc+0x150>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d203      	bcs.n	800a438 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a430:	4b11      	ldr	r3, [pc, #68]	; (800a478 <pvPortMalloc+0x148>)
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	4b12      	ldr	r3, [pc, #72]	; (800a480 <pvPortMalloc+0x150>)
 800a436:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	4b0d      	ldr	r3, [pc, #52]	; (800a474 <pvPortMalloc+0x144>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	431a      	orrs	r2, r3
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	2200      	movs	r2, #0
 800a44a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a44c:	4b0d      	ldr	r3, [pc, #52]	; (800a484 <pvPortMalloc+0x154>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	1c5a      	adds	r2, r3, #1
 800a452:	4b0c      	ldr	r3, [pc, #48]	; (800a484 <pvPortMalloc+0x154>)
 800a454:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a456:	f7ff f959 	bl	800970c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2207      	movs	r2, #7
 800a45e:	4013      	ands	r3, r2
 800a460:	d001      	beq.n	800a466 <pvPortMalloc+0x136>
 800a462:	b672      	cpsid	i
 800a464:	e7fe      	b.n	800a464 <pvPortMalloc+0x134>
	return pvReturn;
 800a466:	68fb      	ldr	r3, [r7, #12]
}
 800a468:	0018      	movs	r0, r3
 800a46a:	46bd      	mov	sp, r7
 800a46c:	b006      	add	sp, #24
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	20001494 	.word	0x20001494
 800a474:	200014a8 	.word	0x200014a8
 800a478:	20001498 	.word	0x20001498
 800a47c:	2000148c 	.word	0x2000148c
 800a480:	2000149c 	.word	0x2000149c
 800a484:	200014a0 	.word	0x200014a0

0800a488 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d03a      	beq.n	800a510 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a49a:	2308      	movs	r3, #8
 800a49c:	425b      	negs	r3, r3
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	18d3      	adds	r3, r2, r3
 800a4a2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	685a      	ldr	r2, [r3, #4]
 800a4ac:	4b1a      	ldr	r3, [pc, #104]	; (800a518 <vPortFree+0x90>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	d101      	bne.n	800a4b8 <vPortFree+0x30>
 800a4b4:	b672      	cpsid	i
 800a4b6:	e7fe      	b.n	800a4b6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <vPortFree+0x3c>
 800a4c0:	b672      	cpsid	i
 800a4c2:	e7fe      	b.n	800a4c2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	685a      	ldr	r2, [r3, #4]
 800a4c8:	4b13      	ldr	r3, [pc, #76]	; (800a518 <vPortFree+0x90>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	d01f      	beq.n	800a510 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d11b      	bne.n	800a510 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	4b0e      	ldr	r3, [pc, #56]	; (800a518 <vPortFree+0x90>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	43db      	mvns	r3, r3
 800a4e2:	401a      	ands	r2, r3
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a4e8:	f7ff f904 	bl	80096f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	685a      	ldr	r2, [r3, #4]
 800a4f0:	4b0a      	ldr	r3, [pc, #40]	; (800a51c <vPortFree+0x94>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	18d2      	adds	r2, r2, r3
 800a4f6:	4b09      	ldr	r3, [pc, #36]	; (800a51c <vPortFree+0x94>)
 800a4f8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	0018      	movs	r0, r3
 800a4fe:	f000 f871 	bl	800a5e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a502:	4b07      	ldr	r3, [pc, #28]	; (800a520 <vPortFree+0x98>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	1c5a      	adds	r2, r3, #1
 800a508:	4b05      	ldr	r3, [pc, #20]	; (800a520 <vPortFree+0x98>)
 800a50a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800a50c:	f7ff f8fe 	bl	800970c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a510:	46c0      	nop			; (mov r8, r8)
 800a512:	46bd      	mov	sp, r7
 800a514:	b004      	add	sp, #16
 800a516:	bd80      	pop	{r7, pc}
 800a518:	200014a8 	.word	0x200014a8
 800a51c:	20001498 	.word	0x20001498
 800a520:	200014a4 	.word	0x200014a4

0800a524 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a52a:	23c0      	movs	r3, #192	; 0xc0
 800a52c:	011b      	lsls	r3, r3, #4
 800a52e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a530:	4b26      	ldr	r3, [pc, #152]	; (800a5cc <prvHeapInit+0xa8>)
 800a532:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2207      	movs	r2, #7
 800a538:	4013      	ands	r3, r2
 800a53a:	d00c      	beq.n	800a556 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	3307      	adds	r3, #7
 800a540:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2207      	movs	r2, #7
 800a546:	4393      	bics	r3, r2
 800a548:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	1ad2      	subs	r2, r2, r3
 800a550:	4b1e      	ldr	r3, [pc, #120]	; (800a5cc <prvHeapInit+0xa8>)
 800a552:	18d3      	adds	r3, r2, r3
 800a554:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a55a:	4b1d      	ldr	r3, [pc, #116]	; (800a5d0 <prvHeapInit+0xac>)
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a560:	4b1b      	ldr	r3, [pc, #108]	; (800a5d0 <prvHeapInit+0xac>)
 800a562:	2200      	movs	r2, #0
 800a564:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	18d3      	adds	r3, r2, r3
 800a56c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a56e:	2208      	movs	r2, #8
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	1a9b      	subs	r3, r3, r2
 800a574:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2207      	movs	r2, #7
 800a57a:	4393      	bics	r3, r2
 800a57c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	4b14      	ldr	r3, [pc, #80]	; (800a5d4 <prvHeapInit+0xb0>)
 800a582:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800a584:	4b13      	ldr	r3, [pc, #76]	; (800a5d4 <prvHeapInit+0xb0>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2200      	movs	r2, #0
 800a58a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a58c:	4b11      	ldr	r3, [pc, #68]	; (800a5d4 <prvHeapInit+0xb0>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2200      	movs	r2, #0
 800a592:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	1ad2      	subs	r2, r2, r3
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5a2:	4b0c      	ldr	r3, [pc, #48]	; (800a5d4 <prvHeapInit+0xb0>)
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	685a      	ldr	r2, [r3, #4]
 800a5ae:	4b0a      	ldr	r3, [pc, #40]	; (800a5d8 <prvHeapInit+0xb4>)
 800a5b0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	685a      	ldr	r2, [r3, #4]
 800a5b6:	4b09      	ldr	r3, [pc, #36]	; (800a5dc <prvHeapInit+0xb8>)
 800a5b8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5ba:	4b09      	ldr	r3, [pc, #36]	; (800a5e0 <prvHeapInit+0xbc>)
 800a5bc:	2280      	movs	r2, #128	; 0x80
 800a5be:	0612      	lsls	r2, r2, #24
 800a5c0:	601a      	str	r2, [r3, #0]
}
 800a5c2:	46c0      	nop			; (mov r8, r8)
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	b004      	add	sp, #16
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	46c0      	nop			; (mov r8, r8)
 800a5cc:	2000088c 	.word	0x2000088c
 800a5d0:	2000148c 	.word	0x2000148c
 800a5d4:	20001494 	.word	0x20001494
 800a5d8:	2000149c 	.word	0x2000149c
 800a5dc:	20001498 	.word	0x20001498
 800a5e0:	200014a8 	.word	0x200014a8

0800a5e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5ec:	4b27      	ldr	r3, [pc, #156]	; (800a68c <prvInsertBlockIntoFreeList+0xa8>)
 800a5ee:	60fb      	str	r3, [r7, #12]
 800a5f0:	e002      	b.n	800a5f8 <prvInsertBlockIntoFreeList+0x14>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	60fb      	str	r3, [r7, #12]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d8f7      	bhi.n	800a5f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	18d3      	adds	r3, r2, r3
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	429a      	cmp	r2, r3
 800a612:	d108      	bne.n	800a626 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	18d2      	adds	r2, r2, r3
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	18d2      	adds	r2, r2, r3
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	429a      	cmp	r2, r3
 800a638:	d118      	bne.n	800a66c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	4b14      	ldr	r3, [pc, #80]	; (800a690 <prvInsertBlockIntoFreeList+0xac>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	429a      	cmp	r2, r3
 800a644:	d00d      	beq.n	800a662 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	18d2      	adds	r2, r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	e008      	b.n	800a674 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a662:	4b0b      	ldr	r3, [pc, #44]	; (800a690 <prvInsertBlockIntoFreeList+0xac>)
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	e003      	b.n	800a674 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d002      	beq.n	800a682 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a682:	46c0      	nop			; (mov r8, r8)
 800a684:	46bd      	mov	sp, r7
 800a686:	b004      	add	sp, #16
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	46c0      	nop			; (mov r8, r8)
 800a68c:	2000148c 	.word	0x2000148c
 800a690:	20001494 	.word	0x20001494

0800a694 <atoi>:
 800a694:	b510      	push	{r4, lr}
 800a696:	220a      	movs	r2, #10
 800a698:	2100      	movs	r1, #0
 800a69a:	f000 f887 	bl	800a7ac <strtol>
 800a69e:	bd10      	pop	{r4, pc}

0800a6a0 <_strtol_l.constprop.0>:
 800a6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6a2:	b087      	sub	sp, #28
 800a6a4:	001e      	movs	r6, r3
 800a6a6:	9005      	str	r0, [sp, #20]
 800a6a8:	9101      	str	r1, [sp, #4]
 800a6aa:	9202      	str	r2, [sp, #8]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d048      	beq.n	800a742 <_strtol_l.constprop.0+0xa2>
 800a6b0:	000b      	movs	r3, r1
 800a6b2:	2e24      	cmp	r6, #36	; 0x24
 800a6b4:	d845      	bhi.n	800a742 <_strtol_l.constprop.0+0xa2>
 800a6b6:	4a3b      	ldr	r2, [pc, #236]	; (800a7a4 <_strtol_l.constprop.0+0x104>)
 800a6b8:	2108      	movs	r1, #8
 800a6ba:	4694      	mov	ip, r2
 800a6bc:	001a      	movs	r2, r3
 800a6be:	4660      	mov	r0, ip
 800a6c0:	7814      	ldrb	r4, [r2, #0]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	5d00      	ldrb	r0, [r0, r4]
 800a6c6:	001d      	movs	r5, r3
 800a6c8:	0007      	movs	r7, r0
 800a6ca:	400f      	ands	r7, r1
 800a6cc:	4208      	tst	r0, r1
 800a6ce:	d1f5      	bne.n	800a6bc <_strtol_l.constprop.0+0x1c>
 800a6d0:	2c2d      	cmp	r4, #45	; 0x2d
 800a6d2:	d13d      	bne.n	800a750 <_strtol_l.constprop.0+0xb0>
 800a6d4:	2701      	movs	r7, #1
 800a6d6:	781c      	ldrb	r4, [r3, #0]
 800a6d8:	1c95      	adds	r5, r2, #2
 800a6da:	2e00      	cmp	r6, #0
 800a6dc:	d05e      	beq.n	800a79c <_strtol_l.constprop.0+0xfc>
 800a6de:	2e10      	cmp	r6, #16
 800a6e0:	d109      	bne.n	800a6f6 <_strtol_l.constprop.0+0x56>
 800a6e2:	2c30      	cmp	r4, #48	; 0x30
 800a6e4:	d107      	bne.n	800a6f6 <_strtol_l.constprop.0+0x56>
 800a6e6:	2220      	movs	r2, #32
 800a6e8:	782b      	ldrb	r3, [r5, #0]
 800a6ea:	4393      	bics	r3, r2
 800a6ec:	2b58      	cmp	r3, #88	; 0x58
 800a6ee:	d150      	bne.n	800a792 <_strtol_l.constprop.0+0xf2>
 800a6f0:	2610      	movs	r6, #16
 800a6f2:	786c      	ldrb	r4, [r5, #1]
 800a6f4:	3502      	adds	r5, #2
 800a6f6:	4b2c      	ldr	r3, [pc, #176]	; (800a7a8 <_strtol_l.constprop.0+0x108>)
 800a6f8:	0031      	movs	r1, r6
 800a6fa:	18fb      	adds	r3, r7, r3
 800a6fc:	0018      	movs	r0, r3
 800a6fe:	9303      	str	r3, [sp, #12]
 800a700:	f7f5 fd92 	bl	8000228 <__aeabi_uidivmod>
 800a704:	2200      	movs	r2, #0
 800a706:	9104      	str	r1, [sp, #16]
 800a708:	2101      	movs	r1, #1
 800a70a:	4684      	mov	ip, r0
 800a70c:	0010      	movs	r0, r2
 800a70e:	4249      	negs	r1, r1
 800a710:	0023      	movs	r3, r4
 800a712:	3b30      	subs	r3, #48	; 0x30
 800a714:	2b09      	cmp	r3, #9
 800a716:	d903      	bls.n	800a720 <_strtol_l.constprop.0+0x80>
 800a718:	3b11      	subs	r3, #17
 800a71a:	2b19      	cmp	r3, #25
 800a71c:	d81d      	bhi.n	800a75a <_strtol_l.constprop.0+0xba>
 800a71e:	330a      	adds	r3, #10
 800a720:	429e      	cmp	r6, r3
 800a722:	dd1e      	ble.n	800a762 <_strtol_l.constprop.0+0xc2>
 800a724:	1c54      	adds	r4, r2, #1
 800a726:	d009      	beq.n	800a73c <_strtol_l.constprop.0+0x9c>
 800a728:	000a      	movs	r2, r1
 800a72a:	4584      	cmp	ip, r0
 800a72c:	d306      	bcc.n	800a73c <_strtol_l.constprop.0+0x9c>
 800a72e:	d102      	bne.n	800a736 <_strtol_l.constprop.0+0x96>
 800a730:	9c04      	ldr	r4, [sp, #16]
 800a732:	429c      	cmp	r4, r3
 800a734:	db02      	blt.n	800a73c <_strtol_l.constprop.0+0x9c>
 800a736:	2201      	movs	r2, #1
 800a738:	4370      	muls	r0, r6
 800a73a:	1818      	adds	r0, r3, r0
 800a73c:	782c      	ldrb	r4, [r5, #0]
 800a73e:	3501      	adds	r5, #1
 800a740:	e7e6      	b.n	800a710 <_strtol_l.constprop.0+0x70>
 800a742:	f000 fb0f 	bl	800ad64 <__errno>
 800a746:	2316      	movs	r3, #22
 800a748:	6003      	str	r3, [r0, #0]
 800a74a:	2000      	movs	r0, #0
 800a74c:	b007      	add	sp, #28
 800a74e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a750:	2c2b      	cmp	r4, #43	; 0x2b
 800a752:	d1c2      	bne.n	800a6da <_strtol_l.constprop.0+0x3a>
 800a754:	781c      	ldrb	r4, [r3, #0]
 800a756:	1c95      	adds	r5, r2, #2
 800a758:	e7bf      	b.n	800a6da <_strtol_l.constprop.0+0x3a>
 800a75a:	0023      	movs	r3, r4
 800a75c:	3b61      	subs	r3, #97	; 0x61
 800a75e:	2b19      	cmp	r3, #25
 800a760:	d9dd      	bls.n	800a71e <_strtol_l.constprop.0+0x7e>
 800a762:	1c53      	adds	r3, r2, #1
 800a764:	d109      	bne.n	800a77a <_strtol_l.constprop.0+0xda>
 800a766:	2322      	movs	r3, #34	; 0x22
 800a768:	9a05      	ldr	r2, [sp, #20]
 800a76a:	9803      	ldr	r0, [sp, #12]
 800a76c:	6013      	str	r3, [r2, #0]
 800a76e:	9b02      	ldr	r3, [sp, #8]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d0eb      	beq.n	800a74c <_strtol_l.constprop.0+0xac>
 800a774:	1e6b      	subs	r3, r5, #1
 800a776:	9301      	str	r3, [sp, #4]
 800a778:	e007      	b.n	800a78a <_strtol_l.constprop.0+0xea>
 800a77a:	2f00      	cmp	r7, #0
 800a77c:	d000      	beq.n	800a780 <_strtol_l.constprop.0+0xe0>
 800a77e:	4240      	negs	r0, r0
 800a780:	9b02      	ldr	r3, [sp, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d0e2      	beq.n	800a74c <_strtol_l.constprop.0+0xac>
 800a786:	2a00      	cmp	r2, #0
 800a788:	d1f4      	bne.n	800a774 <_strtol_l.constprop.0+0xd4>
 800a78a:	9b02      	ldr	r3, [sp, #8]
 800a78c:	9a01      	ldr	r2, [sp, #4]
 800a78e:	601a      	str	r2, [r3, #0]
 800a790:	e7dc      	b.n	800a74c <_strtol_l.constprop.0+0xac>
 800a792:	2430      	movs	r4, #48	; 0x30
 800a794:	2e00      	cmp	r6, #0
 800a796:	d1ae      	bne.n	800a6f6 <_strtol_l.constprop.0+0x56>
 800a798:	3608      	adds	r6, #8
 800a79a:	e7ac      	b.n	800a6f6 <_strtol_l.constprop.0+0x56>
 800a79c:	2c30      	cmp	r4, #48	; 0x30
 800a79e:	d0a2      	beq.n	800a6e6 <_strtol_l.constprop.0+0x46>
 800a7a0:	260a      	movs	r6, #10
 800a7a2:	e7a8      	b.n	800a6f6 <_strtol_l.constprop.0+0x56>
 800a7a4:	0800d605 	.word	0x0800d605
 800a7a8:	7fffffff 	.word	0x7fffffff

0800a7ac <strtol>:
 800a7ac:	b510      	push	{r4, lr}
 800a7ae:	4c04      	ldr	r4, [pc, #16]	; (800a7c0 <strtol+0x14>)
 800a7b0:	0013      	movs	r3, r2
 800a7b2:	000a      	movs	r2, r1
 800a7b4:	0001      	movs	r1, r0
 800a7b6:	6820      	ldr	r0, [r4, #0]
 800a7b8:	f7ff ff72 	bl	800a6a0 <_strtol_l.constprop.0>
 800a7bc:	bd10      	pop	{r4, pc}
 800a7be:	46c0      	nop			; (mov r8, r8)
 800a7c0:	20000068 	.word	0x20000068

0800a7c4 <std>:
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	b510      	push	{r4, lr}
 800a7c8:	0004      	movs	r4, r0
 800a7ca:	6003      	str	r3, [r0, #0]
 800a7cc:	6043      	str	r3, [r0, #4]
 800a7ce:	6083      	str	r3, [r0, #8]
 800a7d0:	8181      	strh	r1, [r0, #12]
 800a7d2:	6643      	str	r3, [r0, #100]	; 0x64
 800a7d4:	0019      	movs	r1, r3
 800a7d6:	81c2      	strh	r2, [r0, #14]
 800a7d8:	6103      	str	r3, [r0, #16]
 800a7da:	6143      	str	r3, [r0, #20]
 800a7dc:	6183      	str	r3, [r0, #24]
 800a7de:	2208      	movs	r2, #8
 800a7e0:	305c      	adds	r0, #92	; 0x5c
 800a7e2:	f000 fa57 	bl	800ac94 <memset>
 800a7e6:	4b05      	ldr	r3, [pc, #20]	; (800a7fc <std+0x38>)
 800a7e8:	6224      	str	r4, [r4, #32]
 800a7ea:	6263      	str	r3, [r4, #36]	; 0x24
 800a7ec:	4b04      	ldr	r3, [pc, #16]	; (800a800 <std+0x3c>)
 800a7ee:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7f0:	4b04      	ldr	r3, [pc, #16]	; (800a804 <std+0x40>)
 800a7f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7f4:	4b04      	ldr	r3, [pc, #16]	; (800a808 <std+0x44>)
 800a7f6:	6323      	str	r3, [r4, #48]	; 0x30
 800a7f8:	bd10      	pop	{r4, pc}
 800a7fa:	46c0      	nop			; (mov r8, r8)
 800a7fc:	0800aab1 	.word	0x0800aab1
 800a800:	0800aad9 	.word	0x0800aad9
 800a804:	0800ab11 	.word	0x0800ab11
 800a808:	0800ab3d 	.word	0x0800ab3d

0800a80c <stdio_exit_handler>:
 800a80c:	b510      	push	{r4, lr}
 800a80e:	4a03      	ldr	r2, [pc, #12]	; (800a81c <stdio_exit_handler+0x10>)
 800a810:	4903      	ldr	r1, [pc, #12]	; (800a820 <stdio_exit_handler+0x14>)
 800a812:	4804      	ldr	r0, [pc, #16]	; (800a824 <stdio_exit_handler+0x18>)
 800a814:	f000 f86c 	bl	800a8f0 <_fwalk_sglue>
 800a818:	bd10      	pop	{r4, pc}
 800a81a:	46c0      	nop			; (mov r8, r8)
 800a81c:	20000010 	.word	0x20000010
 800a820:	0800b92d 	.word	0x0800b92d
 800a824:	2000001c 	.word	0x2000001c

0800a828 <cleanup_stdio>:
 800a828:	6841      	ldr	r1, [r0, #4]
 800a82a:	4b0b      	ldr	r3, [pc, #44]	; (800a858 <cleanup_stdio+0x30>)
 800a82c:	b510      	push	{r4, lr}
 800a82e:	0004      	movs	r4, r0
 800a830:	4299      	cmp	r1, r3
 800a832:	d001      	beq.n	800a838 <cleanup_stdio+0x10>
 800a834:	f001 f87a 	bl	800b92c <_fflush_r>
 800a838:	68a1      	ldr	r1, [r4, #8]
 800a83a:	4b08      	ldr	r3, [pc, #32]	; (800a85c <cleanup_stdio+0x34>)
 800a83c:	4299      	cmp	r1, r3
 800a83e:	d002      	beq.n	800a846 <cleanup_stdio+0x1e>
 800a840:	0020      	movs	r0, r4
 800a842:	f001 f873 	bl	800b92c <_fflush_r>
 800a846:	68e1      	ldr	r1, [r4, #12]
 800a848:	4b05      	ldr	r3, [pc, #20]	; (800a860 <cleanup_stdio+0x38>)
 800a84a:	4299      	cmp	r1, r3
 800a84c:	d002      	beq.n	800a854 <cleanup_stdio+0x2c>
 800a84e:	0020      	movs	r0, r4
 800a850:	f001 f86c 	bl	800b92c <_fflush_r>
 800a854:	bd10      	pop	{r4, pc}
 800a856:	46c0      	nop			; (mov r8, r8)
 800a858:	200014ac 	.word	0x200014ac
 800a85c:	20001514 	.word	0x20001514
 800a860:	2000157c 	.word	0x2000157c

0800a864 <global_stdio_init.part.0>:
 800a864:	b510      	push	{r4, lr}
 800a866:	4b09      	ldr	r3, [pc, #36]	; (800a88c <global_stdio_init.part.0+0x28>)
 800a868:	4a09      	ldr	r2, [pc, #36]	; (800a890 <global_stdio_init.part.0+0x2c>)
 800a86a:	2104      	movs	r1, #4
 800a86c:	601a      	str	r2, [r3, #0]
 800a86e:	4809      	ldr	r0, [pc, #36]	; (800a894 <global_stdio_init.part.0+0x30>)
 800a870:	2200      	movs	r2, #0
 800a872:	f7ff ffa7 	bl	800a7c4 <std>
 800a876:	2201      	movs	r2, #1
 800a878:	2109      	movs	r1, #9
 800a87a:	4807      	ldr	r0, [pc, #28]	; (800a898 <global_stdio_init.part.0+0x34>)
 800a87c:	f7ff ffa2 	bl	800a7c4 <std>
 800a880:	2202      	movs	r2, #2
 800a882:	2112      	movs	r1, #18
 800a884:	4805      	ldr	r0, [pc, #20]	; (800a89c <global_stdio_init.part.0+0x38>)
 800a886:	f7ff ff9d 	bl	800a7c4 <std>
 800a88a:	bd10      	pop	{r4, pc}
 800a88c:	200015e4 	.word	0x200015e4
 800a890:	0800a80d 	.word	0x0800a80d
 800a894:	200014ac 	.word	0x200014ac
 800a898:	20001514 	.word	0x20001514
 800a89c:	2000157c 	.word	0x2000157c

0800a8a0 <__sfp_lock_acquire>:
 800a8a0:	b510      	push	{r4, lr}
 800a8a2:	4802      	ldr	r0, [pc, #8]	; (800a8ac <__sfp_lock_acquire+0xc>)
 800a8a4:	f000 fa88 	bl	800adb8 <__retarget_lock_acquire_recursive>
 800a8a8:	bd10      	pop	{r4, pc}
 800a8aa:	46c0      	nop			; (mov r8, r8)
 800a8ac:	200015ed 	.word	0x200015ed

0800a8b0 <__sfp_lock_release>:
 800a8b0:	b510      	push	{r4, lr}
 800a8b2:	4802      	ldr	r0, [pc, #8]	; (800a8bc <__sfp_lock_release+0xc>)
 800a8b4:	f000 fa81 	bl	800adba <__retarget_lock_release_recursive>
 800a8b8:	bd10      	pop	{r4, pc}
 800a8ba:	46c0      	nop			; (mov r8, r8)
 800a8bc:	200015ed 	.word	0x200015ed

0800a8c0 <__sinit>:
 800a8c0:	b510      	push	{r4, lr}
 800a8c2:	0004      	movs	r4, r0
 800a8c4:	f7ff ffec 	bl	800a8a0 <__sfp_lock_acquire>
 800a8c8:	6a23      	ldr	r3, [r4, #32]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d002      	beq.n	800a8d4 <__sinit+0x14>
 800a8ce:	f7ff ffef 	bl	800a8b0 <__sfp_lock_release>
 800a8d2:	bd10      	pop	{r4, pc}
 800a8d4:	4b04      	ldr	r3, [pc, #16]	; (800a8e8 <__sinit+0x28>)
 800a8d6:	6223      	str	r3, [r4, #32]
 800a8d8:	4b04      	ldr	r3, [pc, #16]	; (800a8ec <__sinit+0x2c>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1f6      	bne.n	800a8ce <__sinit+0xe>
 800a8e0:	f7ff ffc0 	bl	800a864 <global_stdio_init.part.0>
 800a8e4:	e7f3      	b.n	800a8ce <__sinit+0xe>
 800a8e6:	46c0      	nop			; (mov r8, r8)
 800a8e8:	0800a829 	.word	0x0800a829
 800a8ec:	200015e4 	.word	0x200015e4

0800a8f0 <_fwalk_sglue>:
 800a8f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8f2:	0014      	movs	r4, r2
 800a8f4:	2600      	movs	r6, #0
 800a8f6:	9000      	str	r0, [sp, #0]
 800a8f8:	9101      	str	r1, [sp, #4]
 800a8fa:	68a5      	ldr	r5, [r4, #8]
 800a8fc:	6867      	ldr	r7, [r4, #4]
 800a8fe:	3f01      	subs	r7, #1
 800a900:	d504      	bpl.n	800a90c <_fwalk_sglue+0x1c>
 800a902:	6824      	ldr	r4, [r4, #0]
 800a904:	2c00      	cmp	r4, #0
 800a906:	d1f8      	bne.n	800a8fa <_fwalk_sglue+0xa>
 800a908:	0030      	movs	r0, r6
 800a90a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a90c:	89ab      	ldrh	r3, [r5, #12]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d908      	bls.n	800a924 <_fwalk_sglue+0x34>
 800a912:	220e      	movs	r2, #14
 800a914:	5eab      	ldrsh	r3, [r5, r2]
 800a916:	3301      	adds	r3, #1
 800a918:	d004      	beq.n	800a924 <_fwalk_sglue+0x34>
 800a91a:	0029      	movs	r1, r5
 800a91c:	9800      	ldr	r0, [sp, #0]
 800a91e:	9b01      	ldr	r3, [sp, #4]
 800a920:	4798      	blx	r3
 800a922:	4306      	orrs	r6, r0
 800a924:	3568      	adds	r5, #104	; 0x68
 800a926:	e7ea      	b.n	800a8fe <_fwalk_sglue+0xe>

0800a928 <iprintf>:
 800a928:	b40f      	push	{r0, r1, r2, r3}
 800a92a:	b507      	push	{r0, r1, r2, lr}
 800a92c:	4905      	ldr	r1, [pc, #20]	; (800a944 <iprintf+0x1c>)
 800a92e:	ab04      	add	r3, sp, #16
 800a930:	6808      	ldr	r0, [r1, #0]
 800a932:	cb04      	ldmia	r3!, {r2}
 800a934:	6881      	ldr	r1, [r0, #8]
 800a936:	9301      	str	r3, [sp, #4]
 800a938:	f000 fcd2 	bl	800b2e0 <_vfiprintf_r>
 800a93c:	b003      	add	sp, #12
 800a93e:	bc08      	pop	{r3}
 800a940:	b004      	add	sp, #16
 800a942:	4718      	bx	r3
 800a944:	20000068 	.word	0x20000068

0800a948 <_puts_r>:
 800a948:	6a03      	ldr	r3, [r0, #32]
 800a94a:	b570      	push	{r4, r5, r6, lr}
 800a94c:	0005      	movs	r5, r0
 800a94e:	000e      	movs	r6, r1
 800a950:	6884      	ldr	r4, [r0, #8]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d101      	bne.n	800a95a <_puts_r+0x12>
 800a956:	f7ff ffb3 	bl	800a8c0 <__sinit>
 800a95a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a95c:	07db      	lsls	r3, r3, #31
 800a95e:	d405      	bmi.n	800a96c <_puts_r+0x24>
 800a960:	89a3      	ldrh	r3, [r4, #12]
 800a962:	059b      	lsls	r3, r3, #22
 800a964:	d402      	bmi.n	800a96c <_puts_r+0x24>
 800a966:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a968:	f000 fa26 	bl	800adb8 <__retarget_lock_acquire_recursive>
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	071b      	lsls	r3, r3, #28
 800a970:	d502      	bpl.n	800a978 <_puts_r+0x30>
 800a972:	6923      	ldr	r3, [r4, #16]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d11f      	bne.n	800a9b8 <_puts_r+0x70>
 800a978:	0021      	movs	r1, r4
 800a97a:	0028      	movs	r0, r5
 800a97c:	f000 f926 	bl	800abcc <__swsetup_r>
 800a980:	2800      	cmp	r0, #0
 800a982:	d019      	beq.n	800a9b8 <_puts_r+0x70>
 800a984:	2501      	movs	r5, #1
 800a986:	426d      	negs	r5, r5
 800a988:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a98a:	07db      	lsls	r3, r3, #31
 800a98c:	d405      	bmi.n	800a99a <_puts_r+0x52>
 800a98e:	89a3      	ldrh	r3, [r4, #12]
 800a990:	059b      	lsls	r3, r3, #22
 800a992:	d402      	bmi.n	800a99a <_puts_r+0x52>
 800a994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a996:	f000 fa10 	bl	800adba <__retarget_lock_release_recursive>
 800a99a:	0028      	movs	r0, r5
 800a99c:	bd70      	pop	{r4, r5, r6, pc}
 800a99e:	3601      	adds	r6, #1
 800a9a0:	60a3      	str	r3, [r4, #8]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	da04      	bge.n	800a9b0 <_puts_r+0x68>
 800a9a6:	69a2      	ldr	r2, [r4, #24]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	dc16      	bgt.n	800a9da <_puts_r+0x92>
 800a9ac:	290a      	cmp	r1, #10
 800a9ae:	d014      	beq.n	800a9da <_puts_r+0x92>
 800a9b0:	6823      	ldr	r3, [r4, #0]
 800a9b2:	1c5a      	adds	r2, r3, #1
 800a9b4:	6022      	str	r2, [r4, #0]
 800a9b6:	7019      	strb	r1, [r3, #0]
 800a9b8:	68a3      	ldr	r3, [r4, #8]
 800a9ba:	7831      	ldrb	r1, [r6, #0]
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	2900      	cmp	r1, #0
 800a9c0:	d1ed      	bne.n	800a99e <_puts_r+0x56>
 800a9c2:	60a3      	str	r3, [r4, #8]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	da0f      	bge.n	800a9e8 <_puts_r+0xa0>
 800a9c8:	0028      	movs	r0, r5
 800a9ca:	0022      	movs	r2, r4
 800a9cc:	310a      	adds	r1, #10
 800a9ce:	f000 f8bb 	bl	800ab48 <__swbuf_r>
 800a9d2:	250a      	movs	r5, #10
 800a9d4:	3001      	adds	r0, #1
 800a9d6:	d1d7      	bne.n	800a988 <_puts_r+0x40>
 800a9d8:	e7d4      	b.n	800a984 <_puts_r+0x3c>
 800a9da:	0022      	movs	r2, r4
 800a9dc:	0028      	movs	r0, r5
 800a9de:	f000 f8b3 	bl	800ab48 <__swbuf_r>
 800a9e2:	3001      	adds	r0, #1
 800a9e4:	d1e8      	bne.n	800a9b8 <_puts_r+0x70>
 800a9e6:	e7cd      	b.n	800a984 <_puts_r+0x3c>
 800a9e8:	250a      	movs	r5, #10
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	1c5a      	adds	r2, r3, #1
 800a9ee:	6022      	str	r2, [r4, #0]
 800a9f0:	701d      	strb	r5, [r3, #0]
 800a9f2:	e7c9      	b.n	800a988 <_puts_r+0x40>

0800a9f4 <puts>:
 800a9f4:	b510      	push	{r4, lr}
 800a9f6:	4b03      	ldr	r3, [pc, #12]	; (800aa04 <puts+0x10>)
 800a9f8:	0001      	movs	r1, r0
 800a9fa:	6818      	ldr	r0, [r3, #0]
 800a9fc:	f7ff ffa4 	bl	800a948 <_puts_r>
 800aa00:	bd10      	pop	{r4, pc}
 800aa02:	46c0      	nop			; (mov r8, r8)
 800aa04:	20000068 	.word	0x20000068

0800aa08 <sniprintf>:
 800aa08:	b40c      	push	{r2, r3}
 800aa0a:	b530      	push	{r4, r5, lr}
 800aa0c:	4b17      	ldr	r3, [pc, #92]	; (800aa6c <sniprintf+0x64>)
 800aa0e:	000c      	movs	r4, r1
 800aa10:	681d      	ldr	r5, [r3, #0]
 800aa12:	b09d      	sub	sp, #116	; 0x74
 800aa14:	2900      	cmp	r1, #0
 800aa16:	da08      	bge.n	800aa2a <sniprintf+0x22>
 800aa18:	238b      	movs	r3, #139	; 0x8b
 800aa1a:	2001      	movs	r0, #1
 800aa1c:	602b      	str	r3, [r5, #0]
 800aa1e:	4240      	negs	r0, r0
 800aa20:	b01d      	add	sp, #116	; 0x74
 800aa22:	bc30      	pop	{r4, r5}
 800aa24:	bc08      	pop	{r3}
 800aa26:	b002      	add	sp, #8
 800aa28:	4718      	bx	r3
 800aa2a:	2382      	movs	r3, #130	; 0x82
 800aa2c:	466a      	mov	r2, sp
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	8293      	strh	r3, [r2, #20]
 800aa32:	2300      	movs	r3, #0
 800aa34:	9002      	str	r0, [sp, #8]
 800aa36:	9006      	str	r0, [sp, #24]
 800aa38:	4299      	cmp	r1, r3
 800aa3a:	d000      	beq.n	800aa3e <sniprintf+0x36>
 800aa3c:	1e4b      	subs	r3, r1, #1
 800aa3e:	9304      	str	r3, [sp, #16]
 800aa40:	9307      	str	r3, [sp, #28]
 800aa42:	2301      	movs	r3, #1
 800aa44:	466a      	mov	r2, sp
 800aa46:	425b      	negs	r3, r3
 800aa48:	82d3      	strh	r3, [r2, #22]
 800aa4a:	0028      	movs	r0, r5
 800aa4c:	ab21      	add	r3, sp, #132	; 0x84
 800aa4e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aa50:	a902      	add	r1, sp, #8
 800aa52:	9301      	str	r3, [sp, #4]
 800aa54:	f000 fb1c 	bl	800b090 <_svfiprintf_r>
 800aa58:	1c43      	adds	r3, r0, #1
 800aa5a:	da01      	bge.n	800aa60 <sniprintf+0x58>
 800aa5c:	238b      	movs	r3, #139	; 0x8b
 800aa5e:	602b      	str	r3, [r5, #0]
 800aa60:	2c00      	cmp	r4, #0
 800aa62:	d0dd      	beq.n	800aa20 <sniprintf+0x18>
 800aa64:	2200      	movs	r2, #0
 800aa66:	9b02      	ldr	r3, [sp, #8]
 800aa68:	701a      	strb	r2, [r3, #0]
 800aa6a:	e7d9      	b.n	800aa20 <sniprintf+0x18>
 800aa6c:	20000068 	.word	0x20000068

0800aa70 <siprintf>:
 800aa70:	b40e      	push	{r1, r2, r3}
 800aa72:	b500      	push	{lr}
 800aa74:	490b      	ldr	r1, [pc, #44]	; (800aaa4 <siprintf+0x34>)
 800aa76:	b09c      	sub	sp, #112	; 0x70
 800aa78:	ab1d      	add	r3, sp, #116	; 0x74
 800aa7a:	9002      	str	r0, [sp, #8]
 800aa7c:	9006      	str	r0, [sp, #24]
 800aa7e:	9107      	str	r1, [sp, #28]
 800aa80:	9104      	str	r1, [sp, #16]
 800aa82:	4809      	ldr	r0, [pc, #36]	; (800aaa8 <siprintf+0x38>)
 800aa84:	4909      	ldr	r1, [pc, #36]	; (800aaac <siprintf+0x3c>)
 800aa86:	cb04      	ldmia	r3!, {r2}
 800aa88:	9105      	str	r1, [sp, #20]
 800aa8a:	6800      	ldr	r0, [r0, #0]
 800aa8c:	a902      	add	r1, sp, #8
 800aa8e:	9301      	str	r3, [sp, #4]
 800aa90:	f000 fafe 	bl	800b090 <_svfiprintf_r>
 800aa94:	2200      	movs	r2, #0
 800aa96:	9b02      	ldr	r3, [sp, #8]
 800aa98:	701a      	strb	r2, [r3, #0]
 800aa9a:	b01c      	add	sp, #112	; 0x70
 800aa9c:	bc08      	pop	{r3}
 800aa9e:	b003      	add	sp, #12
 800aaa0:	4718      	bx	r3
 800aaa2:	46c0      	nop			; (mov r8, r8)
 800aaa4:	7fffffff 	.word	0x7fffffff
 800aaa8:	20000068 	.word	0x20000068
 800aaac:	ffff0208 	.word	0xffff0208

0800aab0 <__sread>:
 800aab0:	b570      	push	{r4, r5, r6, lr}
 800aab2:	000c      	movs	r4, r1
 800aab4:	250e      	movs	r5, #14
 800aab6:	5f49      	ldrsh	r1, [r1, r5]
 800aab8:	f000 f92c 	bl	800ad14 <_read_r>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	db03      	blt.n	800aac8 <__sread+0x18>
 800aac0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800aac2:	181b      	adds	r3, r3, r0
 800aac4:	6563      	str	r3, [r4, #84]	; 0x54
 800aac6:	bd70      	pop	{r4, r5, r6, pc}
 800aac8:	89a3      	ldrh	r3, [r4, #12]
 800aaca:	4a02      	ldr	r2, [pc, #8]	; (800aad4 <__sread+0x24>)
 800aacc:	4013      	ands	r3, r2
 800aace:	81a3      	strh	r3, [r4, #12]
 800aad0:	e7f9      	b.n	800aac6 <__sread+0x16>
 800aad2:	46c0      	nop			; (mov r8, r8)
 800aad4:	ffffefff 	.word	0xffffefff

0800aad8 <__swrite>:
 800aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aada:	001f      	movs	r7, r3
 800aadc:	898b      	ldrh	r3, [r1, #12]
 800aade:	0005      	movs	r5, r0
 800aae0:	000c      	movs	r4, r1
 800aae2:	0016      	movs	r6, r2
 800aae4:	05db      	lsls	r3, r3, #23
 800aae6:	d505      	bpl.n	800aaf4 <__swrite+0x1c>
 800aae8:	230e      	movs	r3, #14
 800aaea:	5ec9      	ldrsh	r1, [r1, r3]
 800aaec:	2200      	movs	r2, #0
 800aaee:	2302      	movs	r3, #2
 800aaf0:	f000 f8fc 	bl	800acec <_lseek_r>
 800aaf4:	89a3      	ldrh	r3, [r4, #12]
 800aaf6:	4a05      	ldr	r2, [pc, #20]	; (800ab0c <__swrite+0x34>)
 800aaf8:	0028      	movs	r0, r5
 800aafa:	4013      	ands	r3, r2
 800aafc:	81a3      	strh	r3, [r4, #12]
 800aafe:	0032      	movs	r2, r6
 800ab00:	230e      	movs	r3, #14
 800ab02:	5ee1      	ldrsh	r1, [r4, r3]
 800ab04:	003b      	movs	r3, r7
 800ab06:	f000 f919 	bl	800ad3c <_write_r>
 800ab0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab0c:	ffffefff 	.word	0xffffefff

0800ab10 <__sseek>:
 800ab10:	b570      	push	{r4, r5, r6, lr}
 800ab12:	000c      	movs	r4, r1
 800ab14:	250e      	movs	r5, #14
 800ab16:	5f49      	ldrsh	r1, [r1, r5]
 800ab18:	f000 f8e8 	bl	800acec <_lseek_r>
 800ab1c:	89a3      	ldrh	r3, [r4, #12]
 800ab1e:	1c42      	adds	r2, r0, #1
 800ab20:	d103      	bne.n	800ab2a <__sseek+0x1a>
 800ab22:	4a05      	ldr	r2, [pc, #20]	; (800ab38 <__sseek+0x28>)
 800ab24:	4013      	ands	r3, r2
 800ab26:	81a3      	strh	r3, [r4, #12]
 800ab28:	bd70      	pop	{r4, r5, r6, pc}
 800ab2a:	2280      	movs	r2, #128	; 0x80
 800ab2c:	0152      	lsls	r2, r2, #5
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	81a3      	strh	r3, [r4, #12]
 800ab32:	6560      	str	r0, [r4, #84]	; 0x54
 800ab34:	e7f8      	b.n	800ab28 <__sseek+0x18>
 800ab36:	46c0      	nop			; (mov r8, r8)
 800ab38:	ffffefff 	.word	0xffffefff

0800ab3c <__sclose>:
 800ab3c:	b510      	push	{r4, lr}
 800ab3e:	230e      	movs	r3, #14
 800ab40:	5ec9      	ldrsh	r1, [r1, r3]
 800ab42:	f000 f8c1 	bl	800acc8 <_close_r>
 800ab46:	bd10      	pop	{r4, pc}

0800ab48 <__swbuf_r>:
 800ab48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4a:	0006      	movs	r6, r0
 800ab4c:	000d      	movs	r5, r1
 800ab4e:	0014      	movs	r4, r2
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d004      	beq.n	800ab5e <__swbuf_r+0x16>
 800ab54:	6a03      	ldr	r3, [r0, #32]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d101      	bne.n	800ab5e <__swbuf_r+0x16>
 800ab5a:	f7ff feb1 	bl	800a8c0 <__sinit>
 800ab5e:	69a3      	ldr	r3, [r4, #24]
 800ab60:	60a3      	str	r3, [r4, #8]
 800ab62:	89a3      	ldrh	r3, [r4, #12]
 800ab64:	071b      	lsls	r3, r3, #28
 800ab66:	d528      	bpl.n	800abba <__swbuf_r+0x72>
 800ab68:	6923      	ldr	r3, [r4, #16]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d025      	beq.n	800abba <__swbuf_r+0x72>
 800ab6e:	6923      	ldr	r3, [r4, #16]
 800ab70:	6820      	ldr	r0, [r4, #0]
 800ab72:	b2ef      	uxtb	r7, r5
 800ab74:	1ac0      	subs	r0, r0, r3
 800ab76:	6963      	ldr	r3, [r4, #20]
 800ab78:	b2ed      	uxtb	r5, r5
 800ab7a:	4283      	cmp	r3, r0
 800ab7c:	dc05      	bgt.n	800ab8a <__swbuf_r+0x42>
 800ab7e:	0021      	movs	r1, r4
 800ab80:	0030      	movs	r0, r6
 800ab82:	f000 fed3 	bl	800b92c <_fflush_r>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	d11d      	bne.n	800abc6 <__swbuf_r+0x7e>
 800ab8a:	68a3      	ldr	r3, [r4, #8]
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	60a3      	str	r3, [r4, #8]
 800ab92:	6823      	ldr	r3, [r4, #0]
 800ab94:	1c5a      	adds	r2, r3, #1
 800ab96:	6022      	str	r2, [r4, #0]
 800ab98:	701f      	strb	r7, [r3, #0]
 800ab9a:	6963      	ldr	r3, [r4, #20]
 800ab9c:	4283      	cmp	r3, r0
 800ab9e:	d004      	beq.n	800abaa <__swbuf_r+0x62>
 800aba0:	89a3      	ldrh	r3, [r4, #12]
 800aba2:	07db      	lsls	r3, r3, #31
 800aba4:	d507      	bpl.n	800abb6 <__swbuf_r+0x6e>
 800aba6:	2d0a      	cmp	r5, #10
 800aba8:	d105      	bne.n	800abb6 <__swbuf_r+0x6e>
 800abaa:	0021      	movs	r1, r4
 800abac:	0030      	movs	r0, r6
 800abae:	f000 febd 	bl	800b92c <_fflush_r>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d107      	bne.n	800abc6 <__swbuf_r+0x7e>
 800abb6:	0028      	movs	r0, r5
 800abb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abba:	0021      	movs	r1, r4
 800abbc:	0030      	movs	r0, r6
 800abbe:	f000 f805 	bl	800abcc <__swsetup_r>
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d0d3      	beq.n	800ab6e <__swbuf_r+0x26>
 800abc6:	2501      	movs	r5, #1
 800abc8:	426d      	negs	r5, r5
 800abca:	e7f4      	b.n	800abb6 <__swbuf_r+0x6e>

0800abcc <__swsetup_r>:
 800abcc:	4b30      	ldr	r3, [pc, #192]	; (800ac90 <__swsetup_r+0xc4>)
 800abce:	b570      	push	{r4, r5, r6, lr}
 800abd0:	0005      	movs	r5, r0
 800abd2:	6818      	ldr	r0, [r3, #0]
 800abd4:	000c      	movs	r4, r1
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d004      	beq.n	800abe4 <__swsetup_r+0x18>
 800abda:	6a03      	ldr	r3, [r0, #32]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d101      	bne.n	800abe4 <__swsetup_r+0x18>
 800abe0:	f7ff fe6e 	bl	800a8c0 <__sinit>
 800abe4:	230c      	movs	r3, #12
 800abe6:	5ee2      	ldrsh	r2, [r4, r3]
 800abe8:	b293      	uxth	r3, r2
 800abea:	0711      	lsls	r1, r2, #28
 800abec:	d423      	bmi.n	800ac36 <__swsetup_r+0x6a>
 800abee:	06d9      	lsls	r1, r3, #27
 800abf0:	d407      	bmi.n	800ac02 <__swsetup_r+0x36>
 800abf2:	2309      	movs	r3, #9
 800abf4:	2001      	movs	r0, #1
 800abf6:	602b      	str	r3, [r5, #0]
 800abf8:	3337      	adds	r3, #55	; 0x37
 800abfa:	4313      	orrs	r3, r2
 800abfc:	81a3      	strh	r3, [r4, #12]
 800abfe:	4240      	negs	r0, r0
 800ac00:	bd70      	pop	{r4, r5, r6, pc}
 800ac02:	075b      	lsls	r3, r3, #29
 800ac04:	d513      	bpl.n	800ac2e <__swsetup_r+0x62>
 800ac06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac08:	2900      	cmp	r1, #0
 800ac0a:	d008      	beq.n	800ac1e <__swsetup_r+0x52>
 800ac0c:	0023      	movs	r3, r4
 800ac0e:	3344      	adds	r3, #68	; 0x44
 800ac10:	4299      	cmp	r1, r3
 800ac12:	d002      	beq.n	800ac1a <__swsetup_r+0x4e>
 800ac14:	0028      	movs	r0, r5
 800ac16:	f000 f8db 	bl	800add0 <_free_r>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	6363      	str	r3, [r4, #52]	; 0x34
 800ac1e:	2224      	movs	r2, #36	; 0x24
 800ac20:	89a3      	ldrh	r3, [r4, #12]
 800ac22:	4393      	bics	r3, r2
 800ac24:	81a3      	strh	r3, [r4, #12]
 800ac26:	2300      	movs	r3, #0
 800ac28:	6063      	str	r3, [r4, #4]
 800ac2a:	6923      	ldr	r3, [r4, #16]
 800ac2c:	6023      	str	r3, [r4, #0]
 800ac2e:	2308      	movs	r3, #8
 800ac30:	89a2      	ldrh	r2, [r4, #12]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	81a3      	strh	r3, [r4, #12]
 800ac36:	6923      	ldr	r3, [r4, #16]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10b      	bne.n	800ac54 <__swsetup_r+0x88>
 800ac3c:	21a0      	movs	r1, #160	; 0xa0
 800ac3e:	2280      	movs	r2, #128	; 0x80
 800ac40:	89a3      	ldrh	r3, [r4, #12]
 800ac42:	0089      	lsls	r1, r1, #2
 800ac44:	0092      	lsls	r2, r2, #2
 800ac46:	400b      	ands	r3, r1
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d003      	beq.n	800ac54 <__swsetup_r+0x88>
 800ac4c:	0021      	movs	r1, r4
 800ac4e:	0028      	movs	r0, r5
 800ac50:	f000 fec0 	bl	800b9d4 <__smakebuf_r>
 800ac54:	220c      	movs	r2, #12
 800ac56:	5ea3      	ldrsh	r3, [r4, r2]
 800ac58:	2001      	movs	r0, #1
 800ac5a:	001a      	movs	r2, r3
 800ac5c:	b299      	uxth	r1, r3
 800ac5e:	4002      	ands	r2, r0
 800ac60:	4203      	tst	r3, r0
 800ac62:	d00f      	beq.n	800ac84 <__swsetup_r+0xb8>
 800ac64:	2200      	movs	r2, #0
 800ac66:	60a2      	str	r2, [r4, #8]
 800ac68:	6962      	ldr	r2, [r4, #20]
 800ac6a:	4252      	negs	r2, r2
 800ac6c:	61a2      	str	r2, [r4, #24]
 800ac6e:	2000      	movs	r0, #0
 800ac70:	6922      	ldr	r2, [r4, #16]
 800ac72:	4282      	cmp	r2, r0
 800ac74:	d1c4      	bne.n	800ac00 <__swsetup_r+0x34>
 800ac76:	0609      	lsls	r1, r1, #24
 800ac78:	d5c2      	bpl.n	800ac00 <__swsetup_r+0x34>
 800ac7a:	2240      	movs	r2, #64	; 0x40
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	81a3      	strh	r3, [r4, #12]
 800ac80:	3801      	subs	r0, #1
 800ac82:	e7bd      	b.n	800ac00 <__swsetup_r+0x34>
 800ac84:	0788      	lsls	r0, r1, #30
 800ac86:	d400      	bmi.n	800ac8a <__swsetup_r+0xbe>
 800ac88:	6962      	ldr	r2, [r4, #20]
 800ac8a:	60a2      	str	r2, [r4, #8]
 800ac8c:	e7ef      	b.n	800ac6e <__swsetup_r+0xa2>
 800ac8e:	46c0      	nop			; (mov r8, r8)
 800ac90:	20000068 	.word	0x20000068

0800ac94 <memset>:
 800ac94:	0003      	movs	r3, r0
 800ac96:	1882      	adds	r2, r0, r2
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d100      	bne.n	800ac9e <memset+0xa>
 800ac9c:	4770      	bx	lr
 800ac9e:	7019      	strb	r1, [r3, #0]
 800aca0:	3301      	adds	r3, #1
 800aca2:	e7f9      	b.n	800ac98 <memset+0x4>

0800aca4 <strncmp>:
 800aca4:	b530      	push	{r4, r5, lr}
 800aca6:	0005      	movs	r5, r0
 800aca8:	1e10      	subs	r0, r2, #0
 800acaa:	d00b      	beq.n	800acc4 <strncmp+0x20>
 800acac:	2400      	movs	r4, #0
 800acae:	3a01      	subs	r2, #1
 800acb0:	5d2b      	ldrb	r3, [r5, r4]
 800acb2:	5d08      	ldrb	r0, [r1, r4]
 800acb4:	4283      	cmp	r3, r0
 800acb6:	d104      	bne.n	800acc2 <strncmp+0x1e>
 800acb8:	42a2      	cmp	r2, r4
 800acba:	d002      	beq.n	800acc2 <strncmp+0x1e>
 800acbc:	3401      	adds	r4, #1
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1f6      	bne.n	800acb0 <strncmp+0xc>
 800acc2:	1a18      	subs	r0, r3, r0
 800acc4:	bd30      	pop	{r4, r5, pc}
	...

0800acc8 <_close_r>:
 800acc8:	2300      	movs	r3, #0
 800acca:	b570      	push	{r4, r5, r6, lr}
 800accc:	4d06      	ldr	r5, [pc, #24]	; (800ace8 <_close_r+0x20>)
 800acce:	0004      	movs	r4, r0
 800acd0:	0008      	movs	r0, r1
 800acd2:	602b      	str	r3, [r5, #0]
 800acd4:	f7f8 f88d 	bl	8002df2 <_close>
 800acd8:	1c43      	adds	r3, r0, #1
 800acda:	d103      	bne.n	800ace4 <_close_r+0x1c>
 800acdc:	682b      	ldr	r3, [r5, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d000      	beq.n	800ace4 <_close_r+0x1c>
 800ace2:	6023      	str	r3, [r4, #0]
 800ace4:	bd70      	pop	{r4, r5, r6, pc}
 800ace6:	46c0      	nop			; (mov r8, r8)
 800ace8:	200015e8 	.word	0x200015e8

0800acec <_lseek_r>:
 800acec:	b570      	push	{r4, r5, r6, lr}
 800acee:	0004      	movs	r4, r0
 800acf0:	0008      	movs	r0, r1
 800acf2:	0011      	movs	r1, r2
 800acf4:	001a      	movs	r2, r3
 800acf6:	2300      	movs	r3, #0
 800acf8:	4d05      	ldr	r5, [pc, #20]	; (800ad10 <_lseek_r+0x24>)
 800acfa:	602b      	str	r3, [r5, #0]
 800acfc:	f7f8 f89a 	bl	8002e34 <_lseek>
 800ad00:	1c43      	adds	r3, r0, #1
 800ad02:	d103      	bne.n	800ad0c <_lseek_r+0x20>
 800ad04:	682b      	ldr	r3, [r5, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d000      	beq.n	800ad0c <_lseek_r+0x20>
 800ad0a:	6023      	str	r3, [r4, #0]
 800ad0c:	bd70      	pop	{r4, r5, r6, pc}
 800ad0e:	46c0      	nop			; (mov r8, r8)
 800ad10:	200015e8 	.word	0x200015e8

0800ad14 <_read_r>:
 800ad14:	b570      	push	{r4, r5, r6, lr}
 800ad16:	0004      	movs	r4, r0
 800ad18:	0008      	movs	r0, r1
 800ad1a:	0011      	movs	r1, r2
 800ad1c:	001a      	movs	r2, r3
 800ad1e:	2300      	movs	r3, #0
 800ad20:	4d05      	ldr	r5, [pc, #20]	; (800ad38 <_read_r+0x24>)
 800ad22:	602b      	str	r3, [r5, #0]
 800ad24:	f7f8 f82c 	bl	8002d80 <_read>
 800ad28:	1c43      	adds	r3, r0, #1
 800ad2a:	d103      	bne.n	800ad34 <_read_r+0x20>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d000      	beq.n	800ad34 <_read_r+0x20>
 800ad32:	6023      	str	r3, [r4, #0]
 800ad34:	bd70      	pop	{r4, r5, r6, pc}
 800ad36:	46c0      	nop			; (mov r8, r8)
 800ad38:	200015e8 	.word	0x200015e8

0800ad3c <_write_r>:
 800ad3c:	b570      	push	{r4, r5, r6, lr}
 800ad3e:	0004      	movs	r4, r0
 800ad40:	0008      	movs	r0, r1
 800ad42:	0011      	movs	r1, r2
 800ad44:	001a      	movs	r2, r3
 800ad46:	2300      	movs	r3, #0
 800ad48:	4d05      	ldr	r5, [pc, #20]	; (800ad60 <_write_r+0x24>)
 800ad4a:	602b      	str	r3, [r5, #0]
 800ad4c:	f7f8 f835 	bl	8002dba <_write>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d103      	bne.n	800ad5c <_write_r+0x20>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d000      	beq.n	800ad5c <_write_r+0x20>
 800ad5a:	6023      	str	r3, [r4, #0]
 800ad5c:	bd70      	pop	{r4, r5, r6, pc}
 800ad5e:	46c0      	nop			; (mov r8, r8)
 800ad60:	200015e8 	.word	0x200015e8

0800ad64 <__errno>:
 800ad64:	4b01      	ldr	r3, [pc, #4]	; (800ad6c <__errno+0x8>)
 800ad66:	6818      	ldr	r0, [r3, #0]
 800ad68:	4770      	bx	lr
 800ad6a:	46c0      	nop			; (mov r8, r8)
 800ad6c:	20000068 	.word	0x20000068

0800ad70 <__libc_init_array>:
 800ad70:	b570      	push	{r4, r5, r6, lr}
 800ad72:	2600      	movs	r6, #0
 800ad74:	4c0c      	ldr	r4, [pc, #48]	; (800ada8 <__libc_init_array+0x38>)
 800ad76:	4d0d      	ldr	r5, [pc, #52]	; (800adac <__libc_init_array+0x3c>)
 800ad78:	1b64      	subs	r4, r4, r5
 800ad7a:	10a4      	asrs	r4, r4, #2
 800ad7c:	42a6      	cmp	r6, r4
 800ad7e:	d109      	bne.n	800ad94 <__libc_init_array+0x24>
 800ad80:	2600      	movs	r6, #0
 800ad82:	f002 f9c9 	bl	800d118 <_init>
 800ad86:	4c0a      	ldr	r4, [pc, #40]	; (800adb0 <__libc_init_array+0x40>)
 800ad88:	4d0a      	ldr	r5, [pc, #40]	; (800adb4 <__libc_init_array+0x44>)
 800ad8a:	1b64      	subs	r4, r4, r5
 800ad8c:	10a4      	asrs	r4, r4, #2
 800ad8e:	42a6      	cmp	r6, r4
 800ad90:	d105      	bne.n	800ad9e <__libc_init_array+0x2e>
 800ad92:	bd70      	pop	{r4, r5, r6, pc}
 800ad94:	00b3      	lsls	r3, r6, #2
 800ad96:	58eb      	ldr	r3, [r5, r3]
 800ad98:	4798      	blx	r3
 800ad9a:	3601      	adds	r6, #1
 800ad9c:	e7ee      	b.n	800ad7c <__libc_init_array+0xc>
 800ad9e:	00b3      	lsls	r3, r6, #2
 800ada0:	58eb      	ldr	r3, [r5, r3]
 800ada2:	4798      	blx	r3
 800ada4:	3601      	adds	r6, #1
 800ada6:	e7f2      	b.n	800ad8e <__libc_init_array+0x1e>
 800ada8:	0800d950 	.word	0x0800d950
 800adac:	0800d950 	.word	0x0800d950
 800adb0:	0800d954 	.word	0x0800d954
 800adb4:	0800d950 	.word	0x0800d950

0800adb8 <__retarget_lock_acquire_recursive>:
 800adb8:	4770      	bx	lr

0800adba <__retarget_lock_release_recursive>:
 800adba:	4770      	bx	lr

0800adbc <memcpy>:
 800adbc:	2300      	movs	r3, #0
 800adbe:	b510      	push	{r4, lr}
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d100      	bne.n	800adc6 <memcpy+0xa>
 800adc4:	bd10      	pop	{r4, pc}
 800adc6:	5ccc      	ldrb	r4, [r1, r3]
 800adc8:	54c4      	strb	r4, [r0, r3]
 800adca:	3301      	adds	r3, #1
 800adcc:	e7f8      	b.n	800adc0 <memcpy+0x4>
	...

0800add0 <_free_r>:
 800add0:	b570      	push	{r4, r5, r6, lr}
 800add2:	0005      	movs	r5, r0
 800add4:	2900      	cmp	r1, #0
 800add6:	d010      	beq.n	800adfa <_free_r+0x2a>
 800add8:	1f0c      	subs	r4, r1, #4
 800adda:	6823      	ldr	r3, [r4, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	da00      	bge.n	800ade2 <_free_r+0x12>
 800ade0:	18e4      	adds	r4, r4, r3
 800ade2:	0028      	movs	r0, r5
 800ade4:	f000 f8e2 	bl	800afac <__malloc_lock>
 800ade8:	4a1d      	ldr	r2, [pc, #116]	; (800ae60 <_free_r+0x90>)
 800adea:	6813      	ldr	r3, [r2, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d105      	bne.n	800adfc <_free_r+0x2c>
 800adf0:	6063      	str	r3, [r4, #4]
 800adf2:	6014      	str	r4, [r2, #0]
 800adf4:	0028      	movs	r0, r5
 800adf6:	f000 f8e1 	bl	800afbc <__malloc_unlock>
 800adfa:	bd70      	pop	{r4, r5, r6, pc}
 800adfc:	42a3      	cmp	r3, r4
 800adfe:	d908      	bls.n	800ae12 <_free_r+0x42>
 800ae00:	6820      	ldr	r0, [r4, #0]
 800ae02:	1821      	adds	r1, r4, r0
 800ae04:	428b      	cmp	r3, r1
 800ae06:	d1f3      	bne.n	800adf0 <_free_r+0x20>
 800ae08:	6819      	ldr	r1, [r3, #0]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	1809      	adds	r1, r1, r0
 800ae0e:	6021      	str	r1, [r4, #0]
 800ae10:	e7ee      	b.n	800adf0 <_free_r+0x20>
 800ae12:	001a      	movs	r2, r3
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d001      	beq.n	800ae1e <_free_r+0x4e>
 800ae1a:	42a3      	cmp	r3, r4
 800ae1c:	d9f9      	bls.n	800ae12 <_free_r+0x42>
 800ae1e:	6811      	ldr	r1, [r2, #0]
 800ae20:	1850      	adds	r0, r2, r1
 800ae22:	42a0      	cmp	r0, r4
 800ae24:	d10b      	bne.n	800ae3e <_free_r+0x6e>
 800ae26:	6820      	ldr	r0, [r4, #0]
 800ae28:	1809      	adds	r1, r1, r0
 800ae2a:	1850      	adds	r0, r2, r1
 800ae2c:	6011      	str	r1, [r2, #0]
 800ae2e:	4283      	cmp	r3, r0
 800ae30:	d1e0      	bne.n	800adf4 <_free_r+0x24>
 800ae32:	6818      	ldr	r0, [r3, #0]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	1841      	adds	r1, r0, r1
 800ae38:	6011      	str	r1, [r2, #0]
 800ae3a:	6053      	str	r3, [r2, #4]
 800ae3c:	e7da      	b.n	800adf4 <_free_r+0x24>
 800ae3e:	42a0      	cmp	r0, r4
 800ae40:	d902      	bls.n	800ae48 <_free_r+0x78>
 800ae42:	230c      	movs	r3, #12
 800ae44:	602b      	str	r3, [r5, #0]
 800ae46:	e7d5      	b.n	800adf4 <_free_r+0x24>
 800ae48:	6820      	ldr	r0, [r4, #0]
 800ae4a:	1821      	adds	r1, r4, r0
 800ae4c:	428b      	cmp	r3, r1
 800ae4e:	d103      	bne.n	800ae58 <_free_r+0x88>
 800ae50:	6819      	ldr	r1, [r3, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	1809      	adds	r1, r1, r0
 800ae56:	6021      	str	r1, [r4, #0]
 800ae58:	6063      	str	r3, [r4, #4]
 800ae5a:	6054      	str	r4, [r2, #4]
 800ae5c:	e7ca      	b.n	800adf4 <_free_r+0x24>
 800ae5e:	46c0      	nop			; (mov r8, r8)
 800ae60:	200015f0 	.word	0x200015f0

0800ae64 <sbrk_aligned>:
 800ae64:	b570      	push	{r4, r5, r6, lr}
 800ae66:	4e0f      	ldr	r6, [pc, #60]	; (800aea4 <sbrk_aligned+0x40>)
 800ae68:	000d      	movs	r5, r1
 800ae6a:	6831      	ldr	r1, [r6, #0]
 800ae6c:	0004      	movs	r4, r0
 800ae6e:	2900      	cmp	r1, #0
 800ae70:	d102      	bne.n	800ae78 <sbrk_aligned+0x14>
 800ae72:	f000 fe25 	bl	800bac0 <_sbrk_r>
 800ae76:	6030      	str	r0, [r6, #0]
 800ae78:	0029      	movs	r1, r5
 800ae7a:	0020      	movs	r0, r4
 800ae7c:	f000 fe20 	bl	800bac0 <_sbrk_r>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d00a      	beq.n	800ae9a <sbrk_aligned+0x36>
 800ae84:	2303      	movs	r3, #3
 800ae86:	1cc5      	adds	r5, r0, #3
 800ae88:	439d      	bics	r5, r3
 800ae8a:	42a8      	cmp	r0, r5
 800ae8c:	d007      	beq.n	800ae9e <sbrk_aligned+0x3a>
 800ae8e:	1a29      	subs	r1, r5, r0
 800ae90:	0020      	movs	r0, r4
 800ae92:	f000 fe15 	bl	800bac0 <_sbrk_r>
 800ae96:	3001      	adds	r0, #1
 800ae98:	d101      	bne.n	800ae9e <sbrk_aligned+0x3a>
 800ae9a:	2501      	movs	r5, #1
 800ae9c:	426d      	negs	r5, r5
 800ae9e:	0028      	movs	r0, r5
 800aea0:	bd70      	pop	{r4, r5, r6, pc}
 800aea2:	46c0      	nop			; (mov r8, r8)
 800aea4:	200015f4 	.word	0x200015f4

0800aea8 <_malloc_r>:
 800aea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeaa:	2203      	movs	r2, #3
 800aeac:	1ccb      	adds	r3, r1, #3
 800aeae:	4393      	bics	r3, r2
 800aeb0:	3308      	adds	r3, #8
 800aeb2:	0006      	movs	r6, r0
 800aeb4:	001f      	movs	r7, r3
 800aeb6:	2b0c      	cmp	r3, #12
 800aeb8:	d238      	bcs.n	800af2c <_malloc_r+0x84>
 800aeba:	270c      	movs	r7, #12
 800aebc:	42b9      	cmp	r1, r7
 800aebe:	d837      	bhi.n	800af30 <_malloc_r+0x88>
 800aec0:	0030      	movs	r0, r6
 800aec2:	f000 f873 	bl	800afac <__malloc_lock>
 800aec6:	4b38      	ldr	r3, [pc, #224]	; (800afa8 <_malloc_r+0x100>)
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	001c      	movs	r4, r3
 800aece:	2c00      	cmp	r4, #0
 800aed0:	d133      	bne.n	800af3a <_malloc_r+0x92>
 800aed2:	0039      	movs	r1, r7
 800aed4:	0030      	movs	r0, r6
 800aed6:	f7ff ffc5 	bl	800ae64 <sbrk_aligned>
 800aeda:	0004      	movs	r4, r0
 800aedc:	1c43      	adds	r3, r0, #1
 800aede:	d15e      	bne.n	800af9e <_malloc_r+0xf6>
 800aee0:	9b00      	ldr	r3, [sp, #0]
 800aee2:	681c      	ldr	r4, [r3, #0]
 800aee4:	0025      	movs	r5, r4
 800aee6:	2d00      	cmp	r5, #0
 800aee8:	d14e      	bne.n	800af88 <_malloc_r+0xe0>
 800aeea:	2c00      	cmp	r4, #0
 800aeec:	d051      	beq.n	800af92 <_malloc_r+0xea>
 800aeee:	6823      	ldr	r3, [r4, #0]
 800aef0:	0029      	movs	r1, r5
 800aef2:	18e3      	adds	r3, r4, r3
 800aef4:	0030      	movs	r0, r6
 800aef6:	9301      	str	r3, [sp, #4]
 800aef8:	f000 fde2 	bl	800bac0 <_sbrk_r>
 800aefc:	9b01      	ldr	r3, [sp, #4]
 800aefe:	4283      	cmp	r3, r0
 800af00:	d147      	bne.n	800af92 <_malloc_r+0xea>
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	0030      	movs	r0, r6
 800af06:	1aff      	subs	r7, r7, r3
 800af08:	0039      	movs	r1, r7
 800af0a:	f7ff ffab 	bl	800ae64 <sbrk_aligned>
 800af0e:	3001      	adds	r0, #1
 800af10:	d03f      	beq.n	800af92 <_malloc_r+0xea>
 800af12:	6823      	ldr	r3, [r4, #0]
 800af14:	19db      	adds	r3, r3, r7
 800af16:	6023      	str	r3, [r4, #0]
 800af18:	9b00      	ldr	r3, [sp, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d040      	beq.n	800afa2 <_malloc_r+0xfa>
 800af20:	685a      	ldr	r2, [r3, #4]
 800af22:	42a2      	cmp	r2, r4
 800af24:	d133      	bne.n	800af8e <_malloc_r+0xe6>
 800af26:	2200      	movs	r2, #0
 800af28:	605a      	str	r2, [r3, #4]
 800af2a:	e014      	b.n	800af56 <_malloc_r+0xae>
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	dac5      	bge.n	800aebc <_malloc_r+0x14>
 800af30:	230c      	movs	r3, #12
 800af32:	2500      	movs	r5, #0
 800af34:	6033      	str	r3, [r6, #0]
 800af36:	0028      	movs	r0, r5
 800af38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af3a:	6821      	ldr	r1, [r4, #0]
 800af3c:	1bc9      	subs	r1, r1, r7
 800af3e:	d420      	bmi.n	800af82 <_malloc_r+0xda>
 800af40:	290b      	cmp	r1, #11
 800af42:	d918      	bls.n	800af76 <_malloc_r+0xce>
 800af44:	19e2      	adds	r2, r4, r7
 800af46:	6027      	str	r7, [r4, #0]
 800af48:	42a3      	cmp	r3, r4
 800af4a:	d112      	bne.n	800af72 <_malloc_r+0xca>
 800af4c:	9b00      	ldr	r3, [sp, #0]
 800af4e:	601a      	str	r2, [r3, #0]
 800af50:	6863      	ldr	r3, [r4, #4]
 800af52:	6011      	str	r1, [r2, #0]
 800af54:	6053      	str	r3, [r2, #4]
 800af56:	0030      	movs	r0, r6
 800af58:	0025      	movs	r5, r4
 800af5a:	f000 f82f 	bl	800afbc <__malloc_unlock>
 800af5e:	2207      	movs	r2, #7
 800af60:	350b      	adds	r5, #11
 800af62:	1d23      	adds	r3, r4, #4
 800af64:	4395      	bics	r5, r2
 800af66:	1aea      	subs	r2, r5, r3
 800af68:	429d      	cmp	r5, r3
 800af6a:	d0e4      	beq.n	800af36 <_malloc_r+0x8e>
 800af6c:	1b5b      	subs	r3, r3, r5
 800af6e:	50a3      	str	r3, [r4, r2]
 800af70:	e7e1      	b.n	800af36 <_malloc_r+0x8e>
 800af72:	605a      	str	r2, [r3, #4]
 800af74:	e7ec      	b.n	800af50 <_malloc_r+0xa8>
 800af76:	6862      	ldr	r2, [r4, #4]
 800af78:	42a3      	cmp	r3, r4
 800af7a:	d1d5      	bne.n	800af28 <_malloc_r+0x80>
 800af7c:	9b00      	ldr	r3, [sp, #0]
 800af7e:	601a      	str	r2, [r3, #0]
 800af80:	e7e9      	b.n	800af56 <_malloc_r+0xae>
 800af82:	0023      	movs	r3, r4
 800af84:	6864      	ldr	r4, [r4, #4]
 800af86:	e7a2      	b.n	800aece <_malloc_r+0x26>
 800af88:	002c      	movs	r4, r5
 800af8a:	686d      	ldr	r5, [r5, #4]
 800af8c:	e7ab      	b.n	800aee6 <_malloc_r+0x3e>
 800af8e:	0013      	movs	r3, r2
 800af90:	e7c4      	b.n	800af1c <_malloc_r+0x74>
 800af92:	230c      	movs	r3, #12
 800af94:	0030      	movs	r0, r6
 800af96:	6033      	str	r3, [r6, #0]
 800af98:	f000 f810 	bl	800afbc <__malloc_unlock>
 800af9c:	e7cb      	b.n	800af36 <_malloc_r+0x8e>
 800af9e:	6027      	str	r7, [r4, #0]
 800afa0:	e7d9      	b.n	800af56 <_malloc_r+0xae>
 800afa2:	605b      	str	r3, [r3, #4]
 800afa4:	deff      	udf	#255	; 0xff
 800afa6:	46c0      	nop			; (mov r8, r8)
 800afa8:	200015f0 	.word	0x200015f0

0800afac <__malloc_lock>:
 800afac:	b510      	push	{r4, lr}
 800afae:	4802      	ldr	r0, [pc, #8]	; (800afb8 <__malloc_lock+0xc>)
 800afb0:	f7ff ff02 	bl	800adb8 <__retarget_lock_acquire_recursive>
 800afb4:	bd10      	pop	{r4, pc}
 800afb6:	46c0      	nop			; (mov r8, r8)
 800afb8:	200015ec 	.word	0x200015ec

0800afbc <__malloc_unlock>:
 800afbc:	b510      	push	{r4, lr}
 800afbe:	4802      	ldr	r0, [pc, #8]	; (800afc8 <__malloc_unlock+0xc>)
 800afc0:	f7ff fefb 	bl	800adba <__retarget_lock_release_recursive>
 800afc4:	bd10      	pop	{r4, pc}
 800afc6:	46c0      	nop			; (mov r8, r8)
 800afc8:	200015ec 	.word	0x200015ec

0800afcc <__ssputs_r>:
 800afcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afce:	b085      	sub	sp, #20
 800afd0:	9301      	str	r3, [sp, #4]
 800afd2:	9203      	str	r2, [sp, #12]
 800afd4:	688e      	ldr	r6, [r1, #8]
 800afd6:	9a01      	ldr	r2, [sp, #4]
 800afd8:	0007      	movs	r7, r0
 800afda:	000c      	movs	r4, r1
 800afdc:	680b      	ldr	r3, [r1, #0]
 800afde:	4296      	cmp	r6, r2
 800afe0:	d831      	bhi.n	800b046 <__ssputs_r+0x7a>
 800afe2:	898a      	ldrh	r2, [r1, #12]
 800afe4:	2190      	movs	r1, #144	; 0x90
 800afe6:	00c9      	lsls	r1, r1, #3
 800afe8:	420a      	tst	r2, r1
 800afea:	d029      	beq.n	800b040 <__ssputs_r+0x74>
 800afec:	2003      	movs	r0, #3
 800afee:	6921      	ldr	r1, [r4, #16]
 800aff0:	1a5b      	subs	r3, r3, r1
 800aff2:	9302      	str	r3, [sp, #8]
 800aff4:	6963      	ldr	r3, [r4, #20]
 800aff6:	4343      	muls	r3, r0
 800aff8:	0fdd      	lsrs	r5, r3, #31
 800affa:	18ed      	adds	r5, r5, r3
 800affc:	9b01      	ldr	r3, [sp, #4]
 800affe:	9802      	ldr	r0, [sp, #8]
 800b000:	3301      	adds	r3, #1
 800b002:	181b      	adds	r3, r3, r0
 800b004:	106d      	asrs	r5, r5, #1
 800b006:	42ab      	cmp	r3, r5
 800b008:	d900      	bls.n	800b00c <__ssputs_r+0x40>
 800b00a:	001d      	movs	r5, r3
 800b00c:	0552      	lsls	r2, r2, #21
 800b00e:	d529      	bpl.n	800b064 <__ssputs_r+0x98>
 800b010:	0029      	movs	r1, r5
 800b012:	0038      	movs	r0, r7
 800b014:	f7ff ff48 	bl	800aea8 <_malloc_r>
 800b018:	1e06      	subs	r6, r0, #0
 800b01a:	d02d      	beq.n	800b078 <__ssputs_r+0xac>
 800b01c:	9a02      	ldr	r2, [sp, #8]
 800b01e:	6921      	ldr	r1, [r4, #16]
 800b020:	f7ff fecc 	bl	800adbc <memcpy>
 800b024:	89a2      	ldrh	r2, [r4, #12]
 800b026:	4b19      	ldr	r3, [pc, #100]	; (800b08c <__ssputs_r+0xc0>)
 800b028:	401a      	ands	r2, r3
 800b02a:	2380      	movs	r3, #128	; 0x80
 800b02c:	4313      	orrs	r3, r2
 800b02e:	81a3      	strh	r3, [r4, #12]
 800b030:	9b02      	ldr	r3, [sp, #8]
 800b032:	6126      	str	r6, [r4, #16]
 800b034:	18f6      	adds	r6, r6, r3
 800b036:	6026      	str	r6, [r4, #0]
 800b038:	6165      	str	r5, [r4, #20]
 800b03a:	9e01      	ldr	r6, [sp, #4]
 800b03c:	1aed      	subs	r5, r5, r3
 800b03e:	60a5      	str	r5, [r4, #8]
 800b040:	9b01      	ldr	r3, [sp, #4]
 800b042:	429e      	cmp	r6, r3
 800b044:	d900      	bls.n	800b048 <__ssputs_r+0x7c>
 800b046:	9e01      	ldr	r6, [sp, #4]
 800b048:	0032      	movs	r2, r6
 800b04a:	9903      	ldr	r1, [sp, #12]
 800b04c:	6820      	ldr	r0, [r4, #0]
 800b04e:	f000 fcff 	bl	800ba50 <memmove>
 800b052:	2000      	movs	r0, #0
 800b054:	68a3      	ldr	r3, [r4, #8]
 800b056:	1b9b      	subs	r3, r3, r6
 800b058:	60a3      	str	r3, [r4, #8]
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	199b      	adds	r3, r3, r6
 800b05e:	6023      	str	r3, [r4, #0]
 800b060:	b005      	add	sp, #20
 800b062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b064:	002a      	movs	r2, r5
 800b066:	0038      	movs	r0, r7
 800b068:	f000 fd47 	bl	800bafa <_realloc_r>
 800b06c:	1e06      	subs	r6, r0, #0
 800b06e:	d1df      	bne.n	800b030 <__ssputs_r+0x64>
 800b070:	0038      	movs	r0, r7
 800b072:	6921      	ldr	r1, [r4, #16]
 800b074:	f7ff feac 	bl	800add0 <_free_r>
 800b078:	230c      	movs	r3, #12
 800b07a:	2001      	movs	r0, #1
 800b07c:	603b      	str	r3, [r7, #0]
 800b07e:	89a2      	ldrh	r2, [r4, #12]
 800b080:	3334      	adds	r3, #52	; 0x34
 800b082:	4313      	orrs	r3, r2
 800b084:	81a3      	strh	r3, [r4, #12]
 800b086:	4240      	negs	r0, r0
 800b088:	e7ea      	b.n	800b060 <__ssputs_r+0x94>
 800b08a:	46c0      	nop			; (mov r8, r8)
 800b08c:	fffffb7f 	.word	0xfffffb7f

0800b090 <_svfiprintf_r>:
 800b090:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b092:	b0a1      	sub	sp, #132	; 0x84
 800b094:	9003      	str	r0, [sp, #12]
 800b096:	001d      	movs	r5, r3
 800b098:	898b      	ldrh	r3, [r1, #12]
 800b09a:	000f      	movs	r7, r1
 800b09c:	0016      	movs	r6, r2
 800b09e:	061b      	lsls	r3, r3, #24
 800b0a0:	d511      	bpl.n	800b0c6 <_svfiprintf_r+0x36>
 800b0a2:	690b      	ldr	r3, [r1, #16]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10e      	bne.n	800b0c6 <_svfiprintf_r+0x36>
 800b0a8:	2140      	movs	r1, #64	; 0x40
 800b0aa:	f7ff fefd 	bl	800aea8 <_malloc_r>
 800b0ae:	6038      	str	r0, [r7, #0]
 800b0b0:	6138      	str	r0, [r7, #16]
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	d105      	bne.n	800b0c2 <_svfiprintf_r+0x32>
 800b0b6:	230c      	movs	r3, #12
 800b0b8:	9a03      	ldr	r2, [sp, #12]
 800b0ba:	3801      	subs	r0, #1
 800b0bc:	6013      	str	r3, [r2, #0]
 800b0be:	b021      	add	sp, #132	; 0x84
 800b0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0c2:	2340      	movs	r3, #64	; 0x40
 800b0c4:	617b      	str	r3, [r7, #20]
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	ac08      	add	r4, sp, #32
 800b0ca:	6163      	str	r3, [r4, #20]
 800b0cc:	3320      	adds	r3, #32
 800b0ce:	7663      	strb	r3, [r4, #25]
 800b0d0:	3310      	adds	r3, #16
 800b0d2:	76a3      	strb	r3, [r4, #26]
 800b0d4:	9507      	str	r5, [sp, #28]
 800b0d6:	0035      	movs	r5, r6
 800b0d8:	782b      	ldrb	r3, [r5, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d001      	beq.n	800b0e2 <_svfiprintf_r+0x52>
 800b0de:	2b25      	cmp	r3, #37	; 0x25
 800b0e0:	d148      	bne.n	800b174 <_svfiprintf_r+0xe4>
 800b0e2:	1bab      	subs	r3, r5, r6
 800b0e4:	9305      	str	r3, [sp, #20]
 800b0e6:	42b5      	cmp	r5, r6
 800b0e8:	d00b      	beq.n	800b102 <_svfiprintf_r+0x72>
 800b0ea:	0032      	movs	r2, r6
 800b0ec:	0039      	movs	r1, r7
 800b0ee:	9803      	ldr	r0, [sp, #12]
 800b0f0:	f7ff ff6c 	bl	800afcc <__ssputs_r>
 800b0f4:	3001      	adds	r0, #1
 800b0f6:	d100      	bne.n	800b0fa <_svfiprintf_r+0x6a>
 800b0f8:	e0af      	b.n	800b25a <_svfiprintf_r+0x1ca>
 800b0fa:	6963      	ldr	r3, [r4, #20]
 800b0fc:	9a05      	ldr	r2, [sp, #20]
 800b0fe:	189b      	adds	r3, r3, r2
 800b100:	6163      	str	r3, [r4, #20]
 800b102:	782b      	ldrb	r3, [r5, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d100      	bne.n	800b10a <_svfiprintf_r+0x7a>
 800b108:	e0a7      	b.n	800b25a <_svfiprintf_r+0x1ca>
 800b10a:	2201      	movs	r2, #1
 800b10c:	2300      	movs	r3, #0
 800b10e:	4252      	negs	r2, r2
 800b110:	6062      	str	r2, [r4, #4]
 800b112:	a904      	add	r1, sp, #16
 800b114:	3254      	adds	r2, #84	; 0x54
 800b116:	1852      	adds	r2, r2, r1
 800b118:	1c6e      	adds	r6, r5, #1
 800b11a:	6023      	str	r3, [r4, #0]
 800b11c:	60e3      	str	r3, [r4, #12]
 800b11e:	60a3      	str	r3, [r4, #8]
 800b120:	7013      	strb	r3, [r2, #0]
 800b122:	65a3      	str	r3, [r4, #88]	; 0x58
 800b124:	4b55      	ldr	r3, [pc, #340]	; (800b27c <_svfiprintf_r+0x1ec>)
 800b126:	2205      	movs	r2, #5
 800b128:	0018      	movs	r0, r3
 800b12a:	7831      	ldrb	r1, [r6, #0]
 800b12c:	9305      	str	r3, [sp, #20]
 800b12e:	f000 fcd9 	bl	800bae4 <memchr>
 800b132:	1c75      	adds	r5, r6, #1
 800b134:	2800      	cmp	r0, #0
 800b136:	d11f      	bne.n	800b178 <_svfiprintf_r+0xe8>
 800b138:	6822      	ldr	r2, [r4, #0]
 800b13a:	06d3      	lsls	r3, r2, #27
 800b13c:	d504      	bpl.n	800b148 <_svfiprintf_r+0xb8>
 800b13e:	2353      	movs	r3, #83	; 0x53
 800b140:	a904      	add	r1, sp, #16
 800b142:	185b      	adds	r3, r3, r1
 800b144:	2120      	movs	r1, #32
 800b146:	7019      	strb	r1, [r3, #0]
 800b148:	0713      	lsls	r3, r2, #28
 800b14a:	d504      	bpl.n	800b156 <_svfiprintf_r+0xc6>
 800b14c:	2353      	movs	r3, #83	; 0x53
 800b14e:	a904      	add	r1, sp, #16
 800b150:	185b      	adds	r3, r3, r1
 800b152:	212b      	movs	r1, #43	; 0x2b
 800b154:	7019      	strb	r1, [r3, #0]
 800b156:	7833      	ldrb	r3, [r6, #0]
 800b158:	2b2a      	cmp	r3, #42	; 0x2a
 800b15a:	d016      	beq.n	800b18a <_svfiprintf_r+0xfa>
 800b15c:	0035      	movs	r5, r6
 800b15e:	2100      	movs	r1, #0
 800b160:	200a      	movs	r0, #10
 800b162:	68e3      	ldr	r3, [r4, #12]
 800b164:	782a      	ldrb	r2, [r5, #0]
 800b166:	1c6e      	adds	r6, r5, #1
 800b168:	3a30      	subs	r2, #48	; 0x30
 800b16a:	2a09      	cmp	r2, #9
 800b16c:	d94e      	bls.n	800b20c <_svfiprintf_r+0x17c>
 800b16e:	2900      	cmp	r1, #0
 800b170:	d111      	bne.n	800b196 <_svfiprintf_r+0x106>
 800b172:	e017      	b.n	800b1a4 <_svfiprintf_r+0x114>
 800b174:	3501      	adds	r5, #1
 800b176:	e7af      	b.n	800b0d8 <_svfiprintf_r+0x48>
 800b178:	9b05      	ldr	r3, [sp, #20]
 800b17a:	6822      	ldr	r2, [r4, #0]
 800b17c:	1ac0      	subs	r0, r0, r3
 800b17e:	2301      	movs	r3, #1
 800b180:	4083      	lsls	r3, r0
 800b182:	4313      	orrs	r3, r2
 800b184:	002e      	movs	r6, r5
 800b186:	6023      	str	r3, [r4, #0]
 800b188:	e7cc      	b.n	800b124 <_svfiprintf_r+0x94>
 800b18a:	9b07      	ldr	r3, [sp, #28]
 800b18c:	1d19      	adds	r1, r3, #4
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	9107      	str	r1, [sp, #28]
 800b192:	2b00      	cmp	r3, #0
 800b194:	db01      	blt.n	800b19a <_svfiprintf_r+0x10a>
 800b196:	930b      	str	r3, [sp, #44]	; 0x2c
 800b198:	e004      	b.n	800b1a4 <_svfiprintf_r+0x114>
 800b19a:	425b      	negs	r3, r3
 800b19c:	60e3      	str	r3, [r4, #12]
 800b19e:	2302      	movs	r3, #2
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	6023      	str	r3, [r4, #0]
 800b1a4:	782b      	ldrb	r3, [r5, #0]
 800b1a6:	2b2e      	cmp	r3, #46	; 0x2e
 800b1a8:	d10a      	bne.n	800b1c0 <_svfiprintf_r+0x130>
 800b1aa:	786b      	ldrb	r3, [r5, #1]
 800b1ac:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ae:	d135      	bne.n	800b21c <_svfiprintf_r+0x18c>
 800b1b0:	9b07      	ldr	r3, [sp, #28]
 800b1b2:	3502      	adds	r5, #2
 800b1b4:	1d1a      	adds	r2, r3, #4
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	9207      	str	r2, [sp, #28]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	db2b      	blt.n	800b216 <_svfiprintf_r+0x186>
 800b1be:	9309      	str	r3, [sp, #36]	; 0x24
 800b1c0:	4e2f      	ldr	r6, [pc, #188]	; (800b280 <_svfiprintf_r+0x1f0>)
 800b1c2:	2203      	movs	r2, #3
 800b1c4:	0030      	movs	r0, r6
 800b1c6:	7829      	ldrb	r1, [r5, #0]
 800b1c8:	f000 fc8c 	bl	800bae4 <memchr>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	d006      	beq.n	800b1de <_svfiprintf_r+0x14e>
 800b1d0:	2340      	movs	r3, #64	; 0x40
 800b1d2:	1b80      	subs	r0, r0, r6
 800b1d4:	4083      	lsls	r3, r0
 800b1d6:	6822      	ldr	r2, [r4, #0]
 800b1d8:	3501      	adds	r5, #1
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	6023      	str	r3, [r4, #0]
 800b1de:	7829      	ldrb	r1, [r5, #0]
 800b1e0:	2206      	movs	r2, #6
 800b1e2:	4828      	ldr	r0, [pc, #160]	; (800b284 <_svfiprintf_r+0x1f4>)
 800b1e4:	1c6e      	adds	r6, r5, #1
 800b1e6:	7621      	strb	r1, [r4, #24]
 800b1e8:	f000 fc7c 	bl	800bae4 <memchr>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	d03c      	beq.n	800b26a <_svfiprintf_r+0x1da>
 800b1f0:	4b25      	ldr	r3, [pc, #148]	; (800b288 <_svfiprintf_r+0x1f8>)
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d125      	bne.n	800b242 <_svfiprintf_r+0x1b2>
 800b1f6:	2207      	movs	r2, #7
 800b1f8:	9b07      	ldr	r3, [sp, #28]
 800b1fa:	3307      	adds	r3, #7
 800b1fc:	4393      	bics	r3, r2
 800b1fe:	3308      	adds	r3, #8
 800b200:	9307      	str	r3, [sp, #28]
 800b202:	6963      	ldr	r3, [r4, #20]
 800b204:	9a04      	ldr	r2, [sp, #16]
 800b206:	189b      	adds	r3, r3, r2
 800b208:	6163      	str	r3, [r4, #20]
 800b20a:	e764      	b.n	800b0d6 <_svfiprintf_r+0x46>
 800b20c:	4343      	muls	r3, r0
 800b20e:	0035      	movs	r5, r6
 800b210:	2101      	movs	r1, #1
 800b212:	189b      	adds	r3, r3, r2
 800b214:	e7a6      	b.n	800b164 <_svfiprintf_r+0xd4>
 800b216:	2301      	movs	r3, #1
 800b218:	425b      	negs	r3, r3
 800b21a:	e7d0      	b.n	800b1be <_svfiprintf_r+0x12e>
 800b21c:	2300      	movs	r3, #0
 800b21e:	200a      	movs	r0, #10
 800b220:	001a      	movs	r2, r3
 800b222:	3501      	adds	r5, #1
 800b224:	6063      	str	r3, [r4, #4]
 800b226:	7829      	ldrb	r1, [r5, #0]
 800b228:	1c6e      	adds	r6, r5, #1
 800b22a:	3930      	subs	r1, #48	; 0x30
 800b22c:	2909      	cmp	r1, #9
 800b22e:	d903      	bls.n	800b238 <_svfiprintf_r+0x1a8>
 800b230:	2b00      	cmp	r3, #0
 800b232:	d0c5      	beq.n	800b1c0 <_svfiprintf_r+0x130>
 800b234:	9209      	str	r2, [sp, #36]	; 0x24
 800b236:	e7c3      	b.n	800b1c0 <_svfiprintf_r+0x130>
 800b238:	4342      	muls	r2, r0
 800b23a:	0035      	movs	r5, r6
 800b23c:	2301      	movs	r3, #1
 800b23e:	1852      	adds	r2, r2, r1
 800b240:	e7f1      	b.n	800b226 <_svfiprintf_r+0x196>
 800b242:	aa07      	add	r2, sp, #28
 800b244:	9200      	str	r2, [sp, #0]
 800b246:	0021      	movs	r1, r4
 800b248:	003a      	movs	r2, r7
 800b24a:	4b10      	ldr	r3, [pc, #64]	; (800b28c <_svfiprintf_r+0x1fc>)
 800b24c:	9803      	ldr	r0, [sp, #12]
 800b24e:	e000      	b.n	800b252 <_svfiprintf_r+0x1c2>
 800b250:	bf00      	nop
 800b252:	9004      	str	r0, [sp, #16]
 800b254:	9b04      	ldr	r3, [sp, #16]
 800b256:	3301      	adds	r3, #1
 800b258:	d1d3      	bne.n	800b202 <_svfiprintf_r+0x172>
 800b25a:	89bb      	ldrh	r3, [r7, #12]
 800b25c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b25e:	065b      	lsls	r3, r3, #25
 800b260:	d400      	bmi.n	800b264 <_svfiprintf_r+0x1d4>
 800b262:	e72c      	b.n	800b0be <_svfiprintf_r+0x2e>
 800b264:	2001      	movs	r0, #1
 800b266:	4240      	negs	r0, r0
 800b268:	e729      	b.n	800b0be <_svfiprintf_r+0x2e>
 800b26a:	aa07      	add	r2, sp, #28
 800b26c:	9200      	str	r2, [sp, #0]
 800b26e:	0021      	movs	r1, r4
 800b270:	003a      	movs	r2, r7
 800b272:	4b06      	ldr	r3, [pc, #24]	; (800b28c <_svfiprintf_r+0x1fc>)
 800b274:	9803      	ldr	r0, [sp, #12]
 800b276:	f000 f9bf 	bl	800b5f8 <_printf_i>
 800b27a:	e7ea      	b.n	800b252 <_svfiprintf_r+0x1c2>
 800b27c:	0800d705 	.word	0x0800d705
 800b280:	0800d70b 	.word	0x0800d70b
 800b284:	0800d70f 	.word	0x0800d70f
 800b288:	00000000 	.word	0x00000000
 800b28c:	0800afcd 	.word	0x0800afcd

0800b290 <__sfputc_r>:
 800b290:	6893      	ldr	r3, [r2, #8]
 800b292:	b510      	push	{r4, lr}
 800b294:	3b01      	subs	r3, #1
 800b296:	6093      	str	r3, [r2, #8]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	da04      	bge.n	800b2a6 <__sfputc_r+0x16>
 800b29c:	6994      	ldr	r4, [r2, #24]
 800b29e:	42a3      	cmp	r3, r4
 800b2a0:	db07      	blt.n	800b2b2 <__sfputc_r+0x22>
 800b2a2:	290a      	cmp	r1, #10
 800b2a4:	d005      	beq.n	800b2b2 <__sfputc_r+0x22>
 800b2a6:	6813      	ldr	r3, [r2, #0]
 800b2a8:	1c58      	adds	r0, r3, #1
 800b2aa:	6010      	str	r0, [r2, #0]
 800b2ac:	7019      	strb	r1, [r3, #0]
 800b2ae:	0008      	movs	r0, r1
 800b2b0:	bd10      	pop	{r4, pc}
 800b2b2:	f7ff fc49 	bl	800ab48 <__swbuf_r>
 800b2b6:	0001      	movs	r1, r0
 800b2b8:	e7f9      	b.n	800b2ae <__sfputc_r+0x1e>

0800b2ba <__sfputs_r>:
 800b2ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2bc:	0006      	movs	r6, r0
 800b2be:	000f      	movs	r7, r1
 800b2c0:	0014      	movs	r4, r2
 800b2c2:	18d5      	adds	r5, r2, r3
 800b2c4:	42ac      	cmp	r4, r5
 800b2c6:	d101      	bne.n	800b2cc <__sfputs_r+0x12>
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	e007      	b.n	800b2dc <__sfputs_r+0x22>
 800b2cc:	7821      	ldrb	r1, [r4, #0]
 800b2ce:	003a      	movs	r2, r7
 800b2d0:	0030      	movs	r0, r6
 800b2d2:	f7ff ffdd 	bl	800b290 <__sfputc_r>
 800b2d6:	3401      	adds	r4, #1
 800b2d8:	1c43      	adds	r3, r0, #1
 800b2da:	d1f3      	bne.n	800b2c4 <__sfputs_r+0xa>
 800b2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b2e0 <_vfiprintf_r>:
 800b2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2e2:	b0a1      	sub	sp, #132	; 0x84
 800b2e4:	000f      	movs	r7, r1
 800b2e6:	0015      	movs	r5, r2
 800b2e8:	001e      	movs	r6, r3
 800b2ea:	9003      	str	r0, [sp, #12]
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d004      	beq.n	800b2fa <_vfiprintf_r+0x1a>
 800b2f0:	6a03      	ldr	r3, [r0, #32]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d101      	bne.n	800b2fa <_vfiprintf_r+0x1a>
 800b2f6:	f7ff fae3 	bl	800a8c0 <__sinit>
 800b2fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2fc:	07db      	lsls	r3, r3, #31
 800b2fe:	d405      	bmi.n	800b30c <_vfiprintf_r+0x2c>
 800b300:	89bb      	ldrh	r3, [r7, #12]
 800b302:	059b      	lsls	r3, r3, #22
 800b304:	d402      	bmi.n	800b30c <_vfiprintf_r+0x2c>
 800b306:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b308:	f7ff fd56 	bl	800adb8 <__retarget_lock_acquire_recursive>
 800b30c:	89bb      	ldrh	r3, [r7, #12]
 800b30e:	071b      	lsls	r3, r3, #28
 800b310:	d502      	bpl.n	800b318 <_vfiprintf_r+0x38>
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d113      	bne.n	800b340 <_vfiprintf_r+0x60>
 800b318:	0039      	movs	r1, r7
 800b31a:	9803      	ldr	r0, [sp, #12]
 800b31c:	f7ff fc56 	bl	800abcc <__swsetup_r>
 800b320:	2800      	cmp	r0, #0
 800b322:	d00d      	beq.n	800b340 <_vfiprintf_r+0x60>
 800b324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b326:	07db      	lsls	r3, r3, #31
 800b328:	d503      	bpl.n	800b332 <_vfiprintf_r+0x52>
 800b32a:	2001      	movs	r0, #1
 800b32c:	4240      	negs	r0, r0
 800b32e:	b021      	add	sp, #132	; 0x84
 800b330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b332:	89bb      	ldrh	r3, [r7, #12]
 800b334:	059b      	lsls	r3, r3, #22
 800b336:	d4f8      	bmi.n	800b32a <_vfiprintf_r+0x4a>
 800b338:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b33a:	f7ff fd3e 	bl	800adba <__retarget_lock_release_recursive>
 800b33e:	e7f4      	b.n	800b32a <_vfiprintf_r+0x4a>
 800b340:	2300      	movs	r3, #0
 800b342:	ac08      	add	r4, sp, #32
 800b344:	6163      	str	r3, [r4, #20]
 800b346:	3320      	adds	r3, #32
 800b348:	7663      	strb	r3, [r4, #25]
 800b34a:	3310      	adds	r3, #16
 800b34c:	76a3      	strb	r3, [r4, #26]
 800b34e:	9607      	str	r6, [sp, #28]
 800b350:	002e      	movs	r6, r5
 800b352:	7833      	ldrb	r3, [r6, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d001      	beq.n	800b35c <_vfiprintf_r+0x7c>
 800b358:	2b25      	cmp	r3, #37	; 0x25
 800b35a:	d148      	bne.n	800b3ee <_vfiprintf_r+0x10e>
 800b35c:	1b73      	subs	r3, r6, r5
 800b35e:	9305      	str	r3, [sp, #20]
 800b360:	42ae      	cmp	r6, r5
 800b362:	d00b      	beq.n	800b37c <_vfiprintf_r+0x9c>
 800b364:	002a      	movs	r2, r5
 800b366:	0039      	movs	r1, r7
 800b368:	9803      	ldr	r0, [sp, #12]
 800b36a:	f7ff ffa6 	bl	800b2ba <__sfputs_r>
 800b36e:	3001      	adds	r0, #1
 800b370:	d100      	bne.n	800b374 <_vfiprintf_r+0x94>
 800b372:	e0af      	b.n	800b4d4 <_vfiprintf_r+0x1f4>
 800b374:	6963      	ldr	r3, [r4, #20]
 800b376:	9a05      	ldr	r2, [sp, #20]
 800b378:	189b      	adds	r3, r3, r2
 800b37a:	6163      	str	r3, [r4, #20]
 800b37c:	7833      	ldrb	r3, [r6, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d100      	bne.n	800b384 <_vfiprintf_r+0xa4>
 800b382:	e0a7      	b.n	800b4d4 <_vfiprintf_r+0x1f4>
 800b384:	2201      	movs	r2, #1
 800b386:	2300      	movs	r3, #0
 800b388:	4252      	negs	r2, r2
 800b38a:	6062      	str	r2, [r4, #4]
 800b38c:	a904      	add	r1, sp, #16
 800b38e:	3254      	adds	r2, #84	; 0x54
 800b390:	1852      	adds	r2, r2, r1
 800b392:	1c75      	adds	r5, r6, #1
 800b394:	6023      	str	r3, [r4, #0]
 800b396:	60e3      	str	r3, [r4, #12]
 800b398:	60a3      	str	r3, [r4, #8]
 800b39a:	7013      	strb	r3, [r2, #0]
 800b39c:	65a3      	str	r3, [r4, #88]	; 0x58
 800b39e:	4b59      	ldr	r3, [pc, #356]	; (800b504 <_vfiprintf_r+0x224>)
 800b3a0:	2205      	movs	r2, #5
 800b3a2:	0018      	movs	r0, r3
 800b3a4:	7829      	ldrb	r1, [r5, #0]
 800b3a6:	9305      	str	r3, [sp, #20]
 800b3a8:	f000 fb9c 	bl	800bae4 <memchr>
 800b3ac:	1c6e      	adds	r6, r5, #1
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d11f      	bne.n	800b3f2 <_vfiprintf_r+0x112>
 800b3b2:	6822      	ldr	r2, [r4, #0]
 800b3b4:	06d3      	lsls	r3, r2, #27
 800b3b6:	d504      	bpl.n	800b3c2 <_vfiprintf_r+0xe2>
 800b3b8:	2353      	movs	r3, #83	; 0x53
 800b3ba:	a904      	add	r1, sp, #16
 800b3bc:	185b      	adds	r3, r3, r1
 800b3be:	2120      	movs	r1, #32
 800b3c0:	7019      	strb	r1, [r3, #0]
 800b3c2:	0713      	lsls	r3, r2, #28
 800b3c4:	d504      	bpl.n	800b3d0 <_vfiprintf_r+0xf0>
 800b3c6:	2353      	movs	r3, #83	; 0x53
 800b3c8:	a904      	add	r1, sp, #16
 800b3ca:	185b      	adds	r3, r3, r1
 800b3cc:	212b      	movs	r1, #43	; 0x2b
 800b3ce:	7019      	strb	r1, [r3, #0]
 800b3d0:	782b      	ldrb	r3, [r5, #0]
 800b3d2:	2b2a      	cmp	r3, #42	; 0x2a
 800b3d4:	d016      	beq.n	800b404 <_vfiprintf_r+0x124>
 800b3d6:	002e      	movs	r6, r5
 800b3d8:	2100      	movs	r1, #0
 800b3da:	200a      	movs	r0, #10
 800b3dc:	68e3      	ldr	r3, [r4, #12]
 800b3de:	7832      	ldrb	r2, [r6, #0]
 800b3e0:	1c75      	adds	r5, r6, #1
 800b3e2:	3a30      	subs	r2, #48	; 0x30
 800b3e4:	2a09      	cmp	r2, #9
 800b3e6:	d94e      	bls.n	800b486 <_vfiprintf_r+0x1a6>
 800b3e8:	2900      	cmp	r1, #0
 800b3ea:	d111      	bne.n	800b410 <_vfiprintf_r+0x130>
 800b3ec:	e017      	b.n	800b41e <_vfiprintf_r+0x13e>
 800b3ee:	3601      	adds	r6, #1
 800b3f0:	e7af      	b.n	800b352 <_vfiprintf_r+0x72>
 800b3f2:	9b05      	ldr	r3, [sp, #20]
 800b3f4:	6822      	ldr	r2, [r4, #0]
 800b3f6:	1ac0      	subs	r0, r0, r3
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	4083      	lsls	r3, r0
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	0035      	movs	r5, r6
 800b400:	6023      	str	r3, [r4, #0]
 800b402:	e7cc      	b.n	800b39e <_vfiprintf_r+0xbe>
 800b404:	9b07      	ldr	r3, [sp, #28]
 800b406:	1d19      	adds	r1, r3, #4
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	9107      	str	r1, [sp, #28]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	db01      	blt.n	800b414 <_vfiprintf_r+0x134>
 800b410:	930b      	str	r3, [sp, #44]	; 0x2c
 800b412:	e004      	b.n	800b41e <_vfiprintf_r+0x13e>
 800b414:	425b      	negs	r3, r3
 800b416:	60e3      	str	r3, [r4, #12]
 800b418:	2302      	movs	r3, #2
 800b41a:	4313      	orrs	r3, r2
 800b41c:	6023      	str	r3, [r4, #0]
 800b41e:	7833      	ldrb	r3, [r6, #0]
 800b420:	2b2e      	cmp	r3, #46	; 0x2e
 800b422:	d10a      	bne.n	800b43a <_vfiprintf_r+0x15a>
 800b424:	7873      	ldrb	r3, [r6, #1]
 800b426:	2b2a      	cmp	r3, #42	; 0x2a
 800b428:	d135      	bne.n	800b496 <_vfiprintf_r+0x1b6>
 800b42a:	9b07      	ldr	r3, [sp, #28]
 800b42c:	3602      	adds	r6, #2
 800b42e:	1d1a      	adds	r2, r3, #4
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	9207      	str	r2, [sp, #28]
 800b434:	2b00      	cmp	r3, #0
 800b436:	db2b      	blt.n	800b490 <_vfiprintf_r+0x1b0>
 800b438:	9309      	str	r3, [sp, #36]	; 0x24
 800b43a:	4d33      	ldr	r5, [pc, #204]	; (800b508 <_vfiprintf_r+0x228>)
 800b43c:	2203      	movs	r2, #3
 800b43e:	0028      	movs	r0, r5
 800b440:	7831      	ldrb	r1, [r6, #0]
 800b442:	f000 fb4f 	bl	800bae4 <memchr>
 800b446:	2800      	cmp	r0, #0
 800b448:	d006      	beq.n	800b458 <_vfiprintf_r+0x178>
 800b44a:	2340      	movs	r3, #64	; 0x40
 800b44c:	1b40      	subs	r0, r0, r5
 800b44e:	4083      	lsls	r3, r0
 800b450:	6822      	ldr	r2, [r4, #0]
 800b452:	3601      	adds	r6, #1
 800b454:	4313      	orrs	r3, r2
 800b456:	6023      	str	r3, [r4, #0]
 800b458:	7831      	ldrb	r1, [r6, #0]
 800b45a:	2206      	movs	r2, #6
 800b45c:	482b      	ldr	r0, [pc, #172]	; (800b50c <_vfiprintf_r+0x22c>)
 800b45e:	1c75      	adds	r5, r6, #1
 800b460:	7621      	strb	r1, [r4, #24]
 800b462:	f000 fb3f 	bl	800bae4 <memchr>
 800b466:	2800      	cmp	r0, #0
 800b468:	d043      	beq.n	800b4f2 <_vfiprintf_r+0x212>
 800b46a:	4b29      	ldr	r3, [pc, #164]	; (800b510 <_vfiprintf_r+0x230>)
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d125      	bne.n	800b4bc <_vfiprintf_r+0x1dc>
 800b470:	2207      	movs	r2, #7
 800b472:	9b07      	ldr	r3, [sp, #28]
 800b474:	3307      	adds	r3, #7
 800b476:	4393      	bics	r3, r2
 800b478:	3308      	adds	r3, #8
 800b47a:	9307      	str	r3, [sp, #28]
 800b47c:	6963      	ldr	r3, [r4, #20]
 800b47e:	9a04      	ldr	r2, [sp, #16]
 800b480:	189b      	adds	r3, r3, r2
 800b482:	6163      	str	r3, [r4, #20]
 800b484:	e764      	b.n	800b350 <_vfiprintf_r+0x70>
 800b486:	4343      	muls	r3, r0
 800b488:	002e      	movs	r6, r5
 800b48a:	2101      	movs	r1, #1
 800b48c:	189b      	adds	r3, r3, r2
 800b48e:	e7a6      	b.n	800b3de <_vfiprintf_r+0xfe>
 800b490:	2301      	movs	r3, #1
 800b492:	425b      	negs	r3, r3
 800b494:	e7d0      	b.n	800b438 <_vfiprintf_r+0x158>
 800b496:	2300      	movs	r3, #0
 800b498:	200a      	movs	r0, #10
 800b49a:	001a      	movs	r2, r3
 800b49c:	3601      	adds	r6, #1
 800b49e:	6063      	str	r3, [r4, #4]
 800b4a0:	7831      	ldrb	r1, [r6, #0]
 800b4a2:	1c75      	adds	r5, r6, #1
 800b4a4:	3930      	subs	r1, #48	; 0x30
 800b4a6:	2909      	cmp	r1, #9
 800b4a8:	d903      	bls.n	800b4b2 <_vfiprintf_r+0x1d2>
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d0c5      	beq.n	800b43a <_vfiprintf_r+0x15a>
 800b4ae:	9209      	str	r2, [sp, #36]	; 0x24
 800b4b0:	e7c3      	b.n	800b43a <_vfiprintf_r+0x15a>
 800b4b2:	4342      	muls	r2, r0
 800b4b4:	002e      	movs	r6, r5
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	1852      	adds	r2, r2, r1
 800b4ba:	e7f1      	b.n	800b4a0 <_vfiprintf_r+0x1c0>
 800b4bc:	aa07      	add	r2, sp, #28
 800b4be:	9200      	str	r2, [sp, #0]
 800b4c0:	0021      	movs	r1, r4
 800b4c2:	003a      	movs	r2, r7
 800b4c4:	4b13      	ldr	r3, [pc, #76]	; (800b514 <_vfiprintf_r+0x234>)
 800b4c6:	9803      	ldr	r0, [sp, #12]
 800b4c8:	e000      	b.n	800b4cc <_vfiprintf_r+0x1ec>
 800b4ca:	bf00      	nop
 800b4cc:	9004      	str	r0, [sp, #16]
 800b4ce:	9b04      	ldr	r3, [sp, #16]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	d1d3      	bne.n	800b47c <_vfiprintf_r+0x19c>
 800b4d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4d6:	07db      	lsls	r3, r3, #31
 800b4d8:	d405      	bmi.n	800b4e6 <_vfiprintf_r+0x206>
 800b4da:	89bb      	ldrh	r3, [r7, #12]
 800b4dc:	059b      	lsls	r3, r3, #22
 800b4de:	d402      	bmi.n	800b4e6 <_vfiprintf_r+0x206>
 800b4e0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b4e2:	f7ff fc6a 	bl	800adba <__retarget_lock_release_recursive>
 800b4e6:	89bb      	ldrh	r3, [r7, #12]
 800b4e8:	065b      	lsls	r3, r3, #25
 800b4ea:	d500      	bpl.n	800b4ee <_vfiprintf_r+0x20e>
 800b4ec:	e71d      	b.n	800b32a <_vfiprintf_r+0x4a>
 800b4ee:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b4f0:	e71d      	b.n	800b32e <_vfiprintf_r+0x4e>
 800b4f2:	aa07      	add	r2, sp, #28
 800b4f4:	9200      	str	r2, [sp, #0]
 800b4f6:	0021      	movs	r1, r4
 800b4f8:	003a      	movs	r2, r7
 800b4fa:	4b06      	ldr	r3, [pc, #24]	; (800b514 <_vfiprintf_r+0x234>)
 800b4fc:	9803      	ldr	r0, [sp, #12]
 800b4fe:	f000 f87b 	bl	800b5f8 <_printf_i>
 800b502:	e7e3      	b.n	800b4cc <_vfiprintf_r+0x1ec>
 800b504:	0800d705 	.word	0x0800d705
 800b508:	0800d70b 	.word	0x0800d70b
 800b50c:	0800d70f 	.word	0x0800d70f
 800b510:	00000000 	.word	0x00000000
 800b514:	0800b2bb 	.word	0x0800b2bb

0800b518 <_printf_common>:
 800b518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b51a:	0016      	movs	r6, r2
 800b51c:	9301      	str	r3, [sp, #4]
 800b51e:	688a      	ldr	r2, [r1, #8]
 800b520:	690b      	ldr	r3, [r1, #16]
 800b522:	000c      	movs	r4, r1
 800b524:	9000      	str	r0, [sp, #0]
 800b526:	4293      	cmp	r3, r2
 800b528:	da00      	bge.n	800b52c <_printf_common+0x14>
 800b52a:	0013      	movs	r3, r2
 800b52c:	0022      	movs	r2, r4
 800b52e:	6033      	str	r3, [r6, #0]
 800b530:	3243      	adds	r2, #67	; 0x43
 800b532:	7812      	ldrb	r2, [r2, #0]
 800b534:	2a00      	cmp	r2, #0
 800b536:	d001      	beq.n	800b53c <_printf_common+0x24>
 800b538:	3301      	adds	r3, #1
 800b53a:	6033      	str	r3, [r6, #0]
 800b53c:	6823      	ldr	r3, [r4, #0]
 800b53e:	069b      	lsls	r3, r3, #26
 800b540:	d502      	bpl.n	800b548 <_printf_common+0x30>
 800b542:	6833      	ldr	r3, [r6, #0]
 800b544:	3302      	adds	r3, #2
 800b546:	6033      	str	r3, [r6, #0]
 800b548:	6822      	ldr	r2, [r4, #0]
 800b54a:	2306      	movs	r3, #6
 800b54c:	0015      	movs	r5, r2
 800b54e:	401d      	ands	r5, r3
 800b550:	421a      	tst	r2, r3
 800b552:	d027      	beq.n	800b5a4 <_printf_common+0x8c>
 800b554:	0023      	movs	r3, r4
 800b556:	3343      	adds	r3, #67	; 0x43
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	1e5a      	subs	r2, r3, #1
 800b55c:	4193      	sbcs	r3, r2
 800b55e:	6822      	ldr	r2, [r4, #0]
 800b560:	0692      	lsls	r2, r2, #26
 800b562:	d430      	bmi.n	800b5c6 <_printf_common+0xae>
 800b564:	0022      	movs	r2, r4
 800b566:	9901      	ldr	r1, [sp, #4]
 800b568:	9800      	ldr	r0, [sp, #0]
 800b56a:	9d08      	ldr	r5, [sp, #32]
 800b56c:	3243      	adds	r2, #67	; 0x43
 800b56e:	47a8      	blx	r5
 800b570:	3001      	adds	r0, #1
 800b572:	d025      	beq.n	800b5c0 <_printf_common+0xa8>
 800b574:	2206      	movs	r2, #6
 800b576:	6823      	ldr	r3, [r4, #0]
 800b578:	2500      	movs	r5, #0
 800b57a:	4013      	ands	r3, r2
 800b57c:	2b04      	cmp	r3, #4
 800b57e:	d105      	bne.n	800b58c <_printf_common+0x74>
 800b580:	6833      	ldr	r3, [r6, #0]
 800b582:	68e5      	ldr	r5, [r4, #12]
 800b584:	1aed      	subs	r5, r5, r3
 800b586:	43eb      	mvns	r3, r5
 800b588:	17db      	asrs	r3, r3, #31
 800b58a:	401d      	ands	r5, r3
 800b58c:	68a3      	ldr	r3, [r4, #8]
 800b58e:	6922      	ldr	r2, [r4, #16]
 800b590:	4293      	cmp	r3, r2
 800b592:	dd01      	ble.n	800b598 <_printf_common+0x80>
 800b594:	1a9b      	subs	r3, r3, r2
 800b596:	18ed      	adds	r5, r5, r3
 800b598:	2600      	movs	r6, #0
 800b59a:	42b5      	cmp	r5, r6
 800b59c:	d120      	bne.n	800b5e0 <_printf_common+0xc8>
 800b59e:	2000      	movs	r0, #0
 800b5a0:	e010      	b.n	800b5c4 <_printf_common+0xac>
 800b5a2:	3501      	adds	r5, #1
 800b5a4:	68e3      	ldr	r3, [r4, #12]
 800b5a6:	6832      	ldr	r2, [r6, #0]
 800b5a8:	1a9b      	subs	r3, r3, r2
 800b5aa:	42ab      	cmp	r3, r5
 800b5ac:	ddd2      	ble.n	800b554 <_printf_common+0x3c>
 800b5ae:	0022      	movs	r2, r4
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	9901      	ldr	r1, [sp, #4]
 800b5b4:	9800      	ldr	r0, [sp, #0]
 800b5b6:	9f08      	ldr	r7, [sp, #32]
 800b5b8:	3219      	adds	r2, #25
 800b5ba:	47b8      	blx	r7
 800b5bc:	3001      	adds	r0, #1
 800b5be:	d1f0      	bne.n	800b5a2 <_printf_common+0x8a>
 800b5c0:	2001      	movs	r0, #1
 800b5c2:	4240      	negs	r0, r0
 800b5c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b5c6:	2030      	movs	r0, #48	; 0x30
 800b5c8:	18e1      	adds	r1, r4, r3
 800b5ca:	3143      	adds	r1, #67	; 0x43
 800b5cc:	7008      	strb	r0, [r1, #0]
 800b5ce:	0021      	movs	r1, r4
 800b5d0:	1c5a      	adds	r2, r3, #1
 800b5d2:	3145      	adds	r1, #69	; 0x45
 800b5d4:	7809      	ldrb	r1, [r1, #0]
 800b5d6:	18a2      	adds	r2, r4, r2
 800b5d8:	3243      	adds	r2, #67	; 0x43
 800b5da:	3302      	adds	r3, #2
 800b5dc:	7011      	strb	r1, [r2, #0]
 800b5de:	e7c1      	b.n	800b564 <_printf_common+0x4c>
 800b5e0:	0022      	movs	r2, r4
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	9901      	ldr	r1, [sp, #4]
 800b5e6:	9800      	ldr	r0, [sp, #0]
 800b5e8:	9f08      	ldr	r7, [sp, #32]
 800b5ea:	321a      	adds	r2, #26
 800b5ec:	47b8      	blx	r7
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	d0e6      	beq.n	800b5c0 <_printf_common+0xa8>
 800b5f2:	3601      	adds	r6, #1
 800b5f4:	e7d1      	b.n	800b59a <_printf_common+0x82>
	...

0800b5f8 <_printf_i>:
 800b5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5fa:	b08b      	sub	sp, #44	; 0x2c
 800b5fc:	9206      	str	r2, [sp, #24]
 800b5fe:	000a      	movs	r2, r1
 800b600:	3243      	adds	r2, #67	; 0x43
 800b602:	9307      	str	r3, [sp, #28]
 800b604:	9005      	str	r0, [sp, #20]
 800b606:	9204      	str	r2, [sp, #16]
 800b608:	7e0a      	ldrb	r2, [r1, #24]
 800b60a:	000c      	movs	r4, r1
 800b60c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b60e:	2a78      	cmp	r2, #120	; 0x78
 800b610:	d809      	bhi.n	800b626 <_printf_i+0x2e>
 800b612:	2a62      	cmp	r2, #98	; 0x62
 800b614:	d80b      	bhi.n	800b62e <_printf_i+0x36>
 800b616:	2a00      	cmp	r2, #0
 800b618:	d100      	bne.n	800b61c <_printf_i+0x24>
 800b61a:	e0be      	b.n	800b79a <_printf_i+0x1a2>
 800b61c:	497c      	ldr	r1, [pc, #496]	; (800b810 <_printf_i+0x218>)
 800b61e:	9103      	str	r1, [sp, #12]
 800b620:	2a58      	cmp	r2, #88	; 0x58
 800b622:	d100      	bne.n	800b626 <_printf_i+0x2e>
 800b624:	e093      	b.n	800b74e <_printf_i+0x156>
 800b626:	0026      	movs	r6, r4
 800b628:	3642      	adds	r6, #66	; 0x42
 800b62a:	7032      	strb	r2, [r6, #0]
 800b62c:	e022      	b.n	800b674 <_printf_i+0x7c>
 800b62e:	0010      	movs	r0, r2
 800b630:	3863      	subs	r0, #99	; 0x63
 800b632:	2815      	cmp	r0, #21
 800b634:	d8f7      	bhi.n	800b626 <_printf_i+0x2e>
 800b636:	f7f4 fd67 	bl	8000108 <__gnu_thumb1_case_shi>
 800b63a:	0016      	.short	0x0016
 800b63c:	fff6001f 	.word	0xfff6001f
 800b640:	fff6fff6 	.word	0xfff6fff6
 800b644:	001ffff6 	.word	0x001ffff6
 800b648:	fff6fff6 	.word	0xfff6fff6
 800b64c:	fff6fff6 	.word	0xfff6fff6
 800b650:	003600a3 	.word	0x003600a3
 800b654:	fff60083 	.word	0xfff60083
 800b658:	00b4fff6 	.word	0x00b4fff6
 800b65c:	0036fff6 	.word	0x0036fff6
 800b660:	fff6fff6 	.word	0xfff6fff6
 800b664:	0087      	.short	0x0087
 800b666:	0026      	movs	r6, r4
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	3642      	adds	r6, #66	; 0x42
 800b66c:	1d11      	adds	r1, r2, #4
 800b66e:	6019      	str	r1, [r3, #0]
 800b670:	6813      	ldr	r3, [r2, #0]
 800b672:	7033      	strb	r3, [r6, #0]
 800b674:	2301      	movs	r3, #1
 800b676:	e0a2      	b.n	800b7be <_printf_i+0x1c6>
 800b678:	6818      	ldr	r0, [r3, #0]
 800b67a:	6809      	ldr	r1, [r1, #0]
 800b67c:	1d02      	adds	r2, r0, #4
 800b67e:	060d      	lsls	r5, r1, #24
 800b680:	d50b      	bpl.n	800b69a <_printf_i+0xa2>
 800b682:	6805      	ldr	r5, [r0, #0]
 800b684:	601a      	str	r2, [r3, #0]
 800b686:	2d00      	cmp	r5, #0
 800b688:	da03      	bge.n	800b692 <_printf_i+0x9a>
 800b68a:	232d      	movs	r3, #45	; 0x2d
 800b68c:	9a04      	ldr	r2, [sp, #16]
 800b68e:	426d      	negs	r5, r5
 800b690:	7013      	strb	r3, [r2, #0]
 800b692:	4b5f      	ldr	r3, [pc, #380]	; (800b810 <_printf_i+0x218>)
 800b694:	270a      	movs	r7, #10
 800b696:	9303      	str	r3, [sp, #12]
 800b698:	e01b      	b.n	800b6d2 <_printf_i+0xda>
 800b69a:	6805      	ldr	r5, [r0, #0]
 800b69c:	601a      	str	r2, [r3, #0]
 800b69e:	0649      	lsls	r1, r1, #25
 800b6a0:	d5f1      	bpl.n	800b686 <_printf_i+0x8e>
 800b6a2:	b22d      	sxth	r5, r5
 800b6a4:	e7ef      	b.n	800b686 <_printf_i+0x8e>
 800b6a6:	680d      	ldr	r5, [r1, #0]
 800b6a8:	6819      	ldr	r1, [r3, #0]
 800b6aa:	1d08      	adds	r0, r1, #4
 800b6ac:	6018      	str	r0, [r3, #0]
 800b6ae:	062e      	lsls	r6, r5, #24
 800b6b0:	d501      	bpl.n	800b6b6 <_printf_i+0xbe>
 800b6b2:	680d      	ldr	r5, [r1, #0]
 800b6b4:	e003      	b.n	800b6be <_printf_i+0xc6>
 800b6b6:	066d      	lsls	r5, r5, #25
 800b6b8:	d5fb      	bpl.n	800b6b2 <_printf_i+0xba>
 800b6ba:	680d      	ldr	r5, [r1, #0]
 800b6bc:	b2ad      	uxth	r5, r5
 800b6be:	4b54      	ldr	r3, [pc, #336]	; (800b810 <_printf_i+0x218>)
 800b6c0:	2708      	movs	r7, #8
 800b6c2:	9303      	str	r3, [sp, #12]
 800b6c4:	2a6f      	cmp	r2, #111	; 0x6f
 800b6c6:	d000      	beq.n	800b6ca <_printf_i+0xd2>
 800b6c8:	3702      	adds	r7, #2
 800b6ca:	0023      	movs	r3, r4
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	3343      	adds	r3, #67	; 0x43
 800b6d0:	701a      	strb	r2, [r3, #0]
 800b6d2:	6863      	ldr	r3, [r4, #4]
 800b6d4:	60a3      	str	r3, [r4, #8]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	db03      	blt.n	800b6e2 <_printf_i+0xea>
 800b6da:	2104      	movs	r1, #4
 800b6dc:	6822      	ldr	r2, [r4, #0]
 800b6de:	438a      	bics	r2, r1
 800b6e0:	6022      	str	r2, [r4, #0]
 800b6e2:	2d00      	cmp	r5, #0
 800b6e4:	d102      	bne.n	800b6ec <_printf_i+0xf4>
 800b6e6:	9e04      	ldr	r6, [sp, #16]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00c      	beq.n	800b706 <_printf_i+0x10e>
 800b6ec:	9e04      	ldr	r6, [sp, #16]
 800b6ee:	0028      	movs	r0, r5
 800b6f0:	0039      	movs	r1, r7
 800b6f2:	f7f4 fd99 	bl	8000228 <__aeabi_uidivmod>
 800b6f6:	9b03      	ldr	r3, [sp, #12]
 800b6f8:	3e01      	subs	r6, #1
 800b6fa:	5c5b      	ldrb	r3, [r3, r1]
 800b6fc:	7033      	strb	r3, [r6, #0]
 800b6fe:	002b      	movs	r3, r5
 800b700:	0005      	movs	r5, r0
 800b702:	429f      	cmp	r7, r3
 800b704:	d9f3      	bls.n	800b6ee <_printf_i+0xf6>
 800b706:	2f08      	cmp	r7, #8
 800b708:	d109      	bne.n	800b71e <_printf_i+0x126>
 800b70a:	6823      	ldr	r3, [r4, #0]
 800b70c:	07db      	lsls	r3, r3, #31
 800b70e:	d506      	bpl.n	800b71e <_printf_i+0x126>
 800b710:	6862      	ldr	r2, [r4, #4]
 800b712:	6923      	ldr	r3, [r4, #16]
 800b714:	429a      	cmp	r2, r3
 800b716:	dc02      	bgt.n	800b71e <_printf_i+0x126>
 800b718:	2330      	movs	r3, #48	; 0x30
 800b71a:	3e01      	subs	r6, #1
 800b71c:	7033      	strb	r3, [r6, #0]
 800b71e:	9b04      	ldr	r3, [sp, #16]
 800b720:	1b9b      	subs	r3, r3, r6
 800b722:	6123      	str	r3, [r4, #16]
 800b724:	9b07      	ldr	r3, [sp, #28]
 800b726:	0021      	movs	r1, r4
 800b728:	9300      	str	r3, [sp, #0]
 800b72a:	9805      	ldr	r0, [sp, #20]
 800b72c:	9b06      	ldr	r3, [sp, #24]
 800b72e:	aa09      	add	r2, sp, #36	; 0x24
 800b730:	f7ff fef2 	bl	800b518 <_printf_common>
 800b734:	3001      	adds	r0, #1
 800b736:	d147      	bne.n	800b7c8 <_printf_i+0x1d0>
 800b738:	2001      	movs	r0, #1
 800b73a:	4240      	negs	r0, r0
 800b73c:	b00b      	add	sp, #44	; 0x2c
 800b73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b740:	2220      	movs	r2, #32
 800b742:	6809      	ldr	r1, [r1, #0]
 800b744:	430a      	orrs	r2, r1
 800b746:	6022      	str	r2, [r4, #0]
 800b748:	2278      	movs	r2, #120	; 0x78
 800b74a:	4932      	ldr	r1, [pc, #200]	; (800b814 <_printf_i+0x21c>)
 800b74c:	9103      	str	r1, [sp, #12]
 800b74e:	0021      	movs	r1, r4
 800b750:	3145      	adds	r1, #69	; 0x45
 800b752:	700a      	strb	r2, [r1, #0]
 800b754:	6819      	ldr	r1, [r3, #0]
 800b756:	6822      	ldr	r2, [r4, #0]
 800b758:	c920      	ldmia	r1!, {r5}
 800b75a:	0610      	lsls	r0, r2, #24
 800b75c:	d402      	bmi.n	800b764 <_printf_i+0x16c>
 800b75e:	0650      	lsls	r0, r2, #25
 800b760:	d500      	bpl.n	800b764 <_printf_i+0x16c>
 800b762:	b2ad      	uxth	r5, r5
 800b764:	6019      	str	r1, [r3, #0]
 800b766:	07d3      	lsls	r3, r2, #31
 800b768:	d502      	bpl.n	800b770 <_printf_i+0x178>
 800b76a:	2320      	movs	r3, #32
 800b76c:	4313      	orrs	r3, r2
 800b76e:	6023      	str	r3, [r4, #0]
 800b770:	2710      	movs	r7, #16
 800b772:	2d00      	cmp	r5, #0
 800b774:	d1a9      	bne.n	800b6ca <_printf_i+0xd2>
 800b776:	2220      	movs	r2, #32
 800b778:	6823      	ldr	r3, [r4, #0]
 800b77a:	4393      	bics	r3, r2
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	e7a4      	b.n	800b6ca <_printf_i+0xd2>
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	680d      	ldr	r5, [r1, #0]
 800b784:	1d10      	adds	r0, r2, #4
 800b786:	6949      	ldr	r1, [r1, #20]
 800b788:	6018      	str	r0, [r3, #0]
 800b78a:	6813      	ldr	r3, [r2, #0]
 800b78c:	062e      	lsls	r6, r5, #24
 800b78e:	d501      	bpl.n	800b794 <_printf_i+0x19c>
 800b790:	6019      	str	r1, [r3, #0]
 800b792:	e002      	b.n	800b79a <_printf_i+0x1a2>
 800b794:	066d      	lsls	r5, r5, #25
 800b796:	d5fb      	bpl.n	800b790 <_printf_i+0x198>
 800b798:	8019      	strh	r1, [r3, #0]
 800b79a:	2300      	movs	r3, #0
 800b79c:	9e04      	ldr	r6, [sp, #16]
 800b79e:	6123      	str	r3, [r4, #16]
 800b7a0:	e7c0      	b.n	800b724 <_printf_i+0x12c>
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	1d11      	adds	r1, r2, #4
 800b7a6:	6019      	str	r1, [r3, #0]
 800b7a8:	6816      	ldr	r6, [r2, #0]
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	0030      	movs	r0, r6
 800b7ae:	6862      	ldr	r2, [r4, #4]
 800b7b0:	f000 f998 	bl	800bae4 <memchr>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	d001      	beq.n	800b7bc <_printf_i+0x1c4>
 800b7b8:	1b80      	subs	r0, r0, r6
 800b7ba:	6060      	str	r0, [r4, #4]
 800b7bc:	6863      	ldr	r3, [r4, #4]
 800b7be:	6123      	str	r3, [r4, #16]
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	9a04      	ldr	r2, [sp, #16]
 800b7c4:	7013      	strb	r3, [r2, #0]
 800b7c6:	e7ad      	b.n	800b724 <_printf_i+0x12c>
 800b7c8:	0032      	movs	r2, r6
 800b7ca:	6923      	ldr	r3, [r4, #16]
 800b7cc:	9906      	ldr	r1, [sp, #24]
 800b7ce:	9805      	ldr	r0, [sp, #20]
 800b7d0:	9d07      	ldr	r5, [sp, #28]
 800b7d2:	47a8      	blx	r5
 800b7d4:	3001      	adds	r0, #1
 800b7d6:	d0af      	beq.n	800b738 <_printf_i+0x140>
 800b7d8:	6823      	ldr	r3, [r4, #0]
 800b7da:	079b      	lsls	r3, r3, #30
 800b7dc:	d415      	bmi.n	800b80a <_printf_i+0x212>
 800b7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e0:	68e0      	ldr	r0, [r4, #12]
 800b7e2:	4298      	cmp	r0, r3
 800b7e4:	daaa      	bge.n	800b73c <_printf_i+0x144>
 800b7e6:	0018      	movs	r0, r3
 800b7e8:	e7a8      	b.n	800b73c <_printf_i+0x144>
 800b7ea:	0022      	movs	r2, r4
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	9906      	ldr	r1, [sp, #24]
 800b7f0:	9805      	ldr	r0, [sp, #20]
 800b7f2:	9e07      	ldr	r6, [sp, #28]
 800b7f4:	3219      	adds	r2, #25
 800b7f6:	47b0      	blx	r6
 800b7f8:	3001      	adds	r0, #1
 800b7fa:	d09d      	beq.n	800b738 <_printf_i+0x140>
 800b7fc:	3501      	adds	r5, #1
 800b7fe:	68e3      	ldr	r3, [r4, #12]
 800b800:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b802:	1a9b      	subs	r3, r3, r2
 800b804:	42ab      	cmp	r3, r5
 800b806:	dcf0      	bgt.n	800b7ea <_printf_i+0x1f2>
 800b808:	e7e9      	b.n	800b7de <_printf_i+0x1e6>
 800b80a:	2500      	movs	r5, #0
 800b80c:	e7f7      	b.n	800b7fe <_printf_i+0x206>
 800b80e:	46c0      	nop			; (mov r8, r8)
 800b810:	0800d716 	.word	0x0800d716
 800b814:	0800d727 	.word	0x0800d727

0800b818 <__sflush_r>:
 800b818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b81a:	898b      	ldrh	r3, [r1, #12]
 800b81c:	0005      	movs	r5, r0
 800b81e:	000c      	movs	r4, r1
 800b820:	071a      	lsls	r2, r3, #28
 800b822:	d45c      	bmi.n	800b8de <__sflush_r+0xc6>
 800b824:	684a      	ldr	r2, [r1, #4]
 800b826:	2a00      	cmp	r2, #0
 800b828:	dc04      	bgt.n	800b834 <__sflush_r+0x1c>
 800b82a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b82c:	2a00      	cmp	r2, #0
 800b82e:	dc01      	bgt.n	800b834 <__sflush_r+0x1c>
 800b830:	2000      	movs	r0, #0
 800b832:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b834:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b836:	2f00      	cmp	r7, #0
 800b838:	d0fa      	beq.n	800b830 <__sflush_r+0x18>
 800b83a:	2200      	movs	r2, #0
 800b83c:	2080      	movs	r0, #128	; 0x80
 800b83e:	682e      	ldr	r6, [r5, #0]
 800b840:	602a      	str	r2, [r5, #0]
 800b842:	001a      	movs	r2, r3
 800b844:	0140      	lsls	r0, r0, #5
 800b846:	6a21      	ldr	r1, [r4, #32]
 800b848:	4002      	ands	r2, r0
 800b84a:	4203      	tst	r3, r0
 800b84c:	d034      	beq.n	800b8b8 <__sflush_r+0xa0>
 800b84e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b850:	89a3      	ldrh	r3, [r4, #12]
 800b852:	075b      	lsls	r3, r3, #29
 800b854:	d506      	bpl.n	800b864 <__sflush_r+0x4c>
 800b856:	6863      	ldr	r3, [r4, #4]
 800b858:	1ac0      	subs	r0, r0, r3
 800b85a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d001      	beq.n	800b864 <__sflush_r+0x4c>
 800b860:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b862:	1ac0      	subs	r0, r0, r3
 800b864:	0002      	movs	r2, r0
 800b866:	2300      	movs	r3, #0
 800b868:	0028      	movs	r0, r5
 800b86a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b86c:	6a21      	ldr	r1, [r4, #32]
 800b86e:	47b8      	blx	r7
 800b870:	89a2      	ldrh	r2, [r4, #12]
 800b872:	1c43      	adds	r3, r0, #1
 800b874:	d106      	bne.n	800b884 <__sflush_r+0x6c>
 800b876:	6829      	ldr	r1, [r5, #0]
 800b878:	291d      	cmp	r1, #29
 800b87a:	d82c      	bhi.n	800b8d6 <__sflush_r+0xbe>
 800b87c:	4b2a      	ldr	r3, [pc, #168]	; (800b928 <__sflush_r+0x110>)
 800b87e:	410b      	asrs	r3, r1
 800b880:	07db      	lsls	r3, r3, #31
 800b882:	d428      	bmi.n	800b8d6 <__sflush_r+0xbe>
 800b884:	2300      	movs	r3, #0
 800b886:	6063      	str	r3, [r4, #4]
 800b888:	6923      	ldr	r3, [r4, #16]
 800b88a:	6023      	str	r3, [r4, #0]
 800b88c:	04d2      	lsls	r2, r2, #19
 800b88e:	d505      	bpl.n	800b89c <__sflush_r+0x84>
 800b890:	1c43      	adds	r3, r0, #1
 800b892:	d102      	bne.n	800b89a <__sflush_r+0x82>
 800b894:	682b      	ldr	r3, [r5, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d100      	bne.n	800b89c <__sflush_r+0x84>
 800b89a:	6560      	str	r0, [r4, #84]	; 0x54
 800b89c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b89e:	602e      	str	r6, [r5, #0]
 800b8a0:	2900      	cmp	r1, #0
 800b8a2:	d0c5      	beq.n	800b830 <__sflush_r+0x18>
 800b8a4:	0023      	movs	r3, r4
 800b8a6:	3344      	adds	r3, #68	; 0x44
 800b8a8:	4299      	cmp	r1, r3
 800b8aa:	d002      	beq.n	800b8b2 <__sflush_r+0x9a>
 800b8ac:	0028      	movs	r0, r5
 800b8ae:	f7ff fa8f 	bl	800add0 <_free_r>
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	6360      	str	r0, [r4, #52]	; 0x34
 800b8b6:	e7bc      	b.n	800b832 <__sflush_r+0x1a>
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	0028      	movs	r0, r5
 800b8bc:	47b8      	blx	r7
 800b8be:	1c43      	adds	r3, r0, #1
 800b8c0:	d1c6      	bne.n	800b850 <__sflush_r+0x38>
 800b8c2:	682b      	ldr	r3, [r5, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d0c3      	beq.n	800b850 <__sflush_r+0x38>
 800b8c8:	2b1d      	cmp	r3, #29
 800b8ca:	d001      	beq.n	800b8d0 <__sflush_r+0xb8>
 800b8cc:	2b16      	cmp	r3, #22
 800b8ce:	d101      	bne.n	800b8d4 <__sflush_r+0xbc>
 800b8d0:	602e      	str	r6, [r5, #0]
 800b8d2:	e7ad      	b.n	800b830 <__sflush_r+0x18>
 800b8d4:	89a2      	ldrh	r2, [r4, #12]
 800b8d6:	2340      	movs	r3, #64	; 0x40
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	81a3      	strh	r3, [r4, #12]
 800b8dc:	e7a9      	b.n	800b832 <__sflush_r+0x1a>
 800b8de:	690e      	ldr	r6, [r1, #16]
 800b8e0:	2e00      	cmp	r6, #0
 800b8e2:	d0a5      	beq.n	800b830 <__sflush_r+0x18>
 800b8e4:	680f      	ldr	r7, [r1, #0]
 800b8e6:	600e      	str	r6, [r1, #0]
 800b8e8:	1bba      	subs	r2, r7, r6
 800b8ea:	9201      	str	r2, [sp, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	079b      	lsls	r3, r3, #30
 800b8f0:	d100      	bne.n	800b8f4 <__sflush_r+0xdc>
 800b8f2:	694a      	ldr	r2, [r1, #20]
 800b8f4:	60a2      	str	r2, [r4, #8]
 800b8f6:	9b01      	ldr	r3, [sp, #4]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	dd99      	ble.n	800b830 <__sflush_r+0x18>
 800b8fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b8fe:	0032      	movs	r2, r6
 800b900:	001f      	movs	r7, r3
 800b902:	0028      	movs	r0, r5
 800b904:	9b01      	ldr	r3, [sp, #4]
 800b906:	6a21      	ldr	r1, [r4, #32]
 800b908:	47b8      	blx	r7
 800b90a:	2800      	cmp	r0, #0
 800b90c:	dc06      	bgt.n	800b91c <__sflush_r+0x104>
 800b90e:	2340      	movs	r3, #64	; 0x40
 800b910:	2001      	movs	r0, #1
 800b912:	89a2      	ldrh	r2, [r4, #12]
 800b914:	4240      	negs	r0, r0
 800b916:	4313      	orrs	r3, r2
 800b918:	81a3      	strh	r3, [r4, #12]
 800b91a:	e78a      	b.n	800b832 <__sflush_r+0x1a>
 800b91c:	9b01      	ldr	r3, [sp, #4]
 800b91e:	1836      	adds	r6, r6, r0
 800b920:	1a1b      	subs	r3, r3, r0
 800b922:	9301      	str	r3, [sp, #4]
 800b924:	e7e7      	b.n	800b8f6 <__sflush_r+0xde>
 800b926:	46c0      	nop			; (mov r8, r8)
 800b928:	dfbffffe 	.word	0xdfbffffe

0800b92c <_fflush_r>:
 800b92c:	690b      	ldr	r3, [r1, #16]
 800b92e:	b570      	push	{r4, r5, r6, lr}
 800b930:	0005      	movs	r5, r0
 800b932:	000c      	movs	r4, r1
 800b934:	2b00      	cmp	r3, #0
 800b936:	d102      	bne.n	800b93e <_fflush_r+0x12>
 800b938:	2500      	movs	r5, #0
 800b93a:	0028      	movs	r0, r5
 800b93c:	bd70      	pop	{r4, r5, r6, pc}
 800b93e:	2800      	cmp	r0, #0
 800b940:	d004      	beq.n	800b94c <_fflush_r+0x20>
 800b942:	6a03      	ldr	r3, [r0, #32]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d101      	bne.n	800b94c <_fflush_r+0x20>
 800b948:	f7fe ffba 	bl	800a8c0 <__sinit>
 800b94c:	220c      	movs	r2, #12
 800b94e:	5ea3      	ldrsh	r3, [r4, r2]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d0f1      	beq.n	800b938 <_fflush_r+0xc>
 800b954:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b956:	07d2      	lsls	r2, r2, #31
 800b958:	d404      	bmi.n	800b964 <_fflush_r+0x38>
 800b95a:	059b      	lsls	r3, r3, #22
 800b95c:	d402      	bmi.n	800b964 <_fflush_r+0x38>
 800b95e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b960:	f7ff fa2a 	bl	800adb8 <__retarget_lock_acquire_recursive>
 800b964:	0028      	movs	r0, r5
 800b966:	0021      	movs	r1, r4
 800b968:	f7ff ff56 	bl	800b818 <__sflush_r>
 800b96c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b96e:	0005      	movs	r5, r0
 800b970:	07db      	lsls	r3, r3, #31
 800b972:	d4e2      	bmi.n	800b93a <_fflush_r+0xe>
 800b974:	89a3      	ldrh	r3, [r4, #12]
 800b976:	059b      	lsls	r3, r3, #22
 800b978:	d4df      	bmi.n	800b93a <_fflush_r+0xe>
 800b97a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b97c:	f7ff fa1d 	bl	800adba <__retarget_lock_release_recursive>
 800b980:	e7db      	b.n	800b93a <_fflush_r+0xe>
	...

0800b984 <__swhatbuf_r>:
 800b984:	b570      	push	{r4, r5, r6, lr}
 800b986:	000e      	movs	r6, r1
 800b988:	001d      	movs	r5, r3
 800b98a:	230e      	movs	r3, #14
 800b98c:	5ec9      	ldrsh	r1, [r1, r3]
 800b98e:	0014      	movs	r4, r2
 800b990:	b096      	sub	sp, #88	; 0x58
 800b992:	2900      	cmp	r1, #0
 800b994:	da0c      	bge.n	800b9b0 <__swhatbuf_r+0x2c>
 800b996:	89b2      	ldrh	r2, [r6, #12]
 800b998:	2380      	movs	r3, #128	; 0x80
 800b99a:	0011      	movs	r1, r2
 800b99c:	4019      	ands	r1, r3
 800b99e:	421a      	tst	r2, r3
 800b9a0:	d013      	beq.n	800b9ca <__swhatbuf_r+0x46>
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	3b40      	subs	r3, #64	; 0x40
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	6029      	str	r1, [r5, #0]
 800b9aa:	6023      	str	r3, [r4, #0]
 800b9ac:	b016      	add	sp, #88	; 0x58
 800b9ae:	bd70      	pop	{r4, r5, r6, pc}
 800b9b0:	466a      	mov	r2, sp
 800b9b2:	f000 f861 	bl	800ba78 <_fstat_r>
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	dbed      	blt.n	800b996 <__swhatbuf_r+0x12>
 800b9ba:	23f0      	movs	r3, #240	; 0xf0
 800b9bc:	9901      	ldr	r1, [sp, #4]
 800b9be:	021b      	lsls	r3, r3, #8
 800b9c0:	4019      	ands	r1, r3
 800b9c2:	4b03      	ldr	r3, [pc, #12]	; (800b9d0 <__swhatbuf_r+0x4c>)
 800b9c4:	18c9      	adds	r1, r1, r3
 800b9c6:	424b      	negs	r3, r1
 800b9c8:	4159      	adcs	r1, r3
 800b9ca:	2380      	movs	r3, #128	; 0x80
 800b9cc:	00db      	lsls	r3, r3, #3
 800b9ce:	e7ea      	b.n	800b9a6 <__swhatbuf_r+0x22>
 800b9d0:	ffffe000 	.word	0xffffe000

0800b9d4 <__smakebuf_r>:
 800b9d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9d6:	2602      	movs	r6, #2
 800b9d8:	898b      	ldrh	r3, [r1, #12]
 800b9da:	0005      	movs	r5, r0
 800b9dc:	000c      	movs	r4, r1
 800b9de:	4233      	tst	r3, r6
 800b9e0:	d006      	beq.n	800b9f0 <__smakebuf_r+0x1c>
 800b9e2:	0023      	movs	r3, r4
 800b9e4:	3347      	adds	r3, #71	; 0x47
 800b9e6:	6023      	str	r3, [r4, #0]
 800b9e8:	6123      	str	r3, [r4, #16]
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	6163      	str	r3, [r4, #20]
 800b9ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b9f0:	466a      	mov	r2, sp
 800b9f2:	ab01      	add	r3, sp, #4
 800b9f4:	f7ff ffc6 	bl	800b984 <__swhatbuf_r>
 800b9f8:	9900      	ldr	r1, [sp, #0]
 800b9fa:	0007      	movs	r7, r0
 800b9fc:	0028      	movs	r0, r5
 800b9fe:	f7ff fa53 	bl	800aea8 <_malloc_r>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	d108      	bne.n	800ba18 <__smakebuf_r+0x44>
 800ba06:	220c      	movs	r2, #12
 800ba08:	5ea3      	ldrsh	r3, [r4, r2]
 800ba0a:	059a      	lsls	r2, r3, #22
 800ba0c:	d4ef      	bmi.n	800b9ee <__smakebuf_r+0x1a>
 800ba0e:	2203      	movs	r2, #3
 800ba10:	4393      	bics	r3, r2
 800ba12:	431e      	orrs	r6, r3
 800ba14:	81a6      	strh	r6, [r4, #12]
 800ba16:	e7e4      	b.n	800b9e2 <__smakebuf_r+0xe>
 800ba18:	2380      	movs	r3, #128	; 0x80
 800ba1a:	89a2      	ldrh	r2, [r4, #12]
 800ba1c:	6020      	str	r0, [r4, #0]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	81a3      	strh	r3, [r4, #12]
 800ba22:	9b00      	ldr	r3, [sp, #0]
 800ba24:	6120      	str	r0, [r4, #16]
 800ba26:	6163      	str	r3, [r4, #20]
 800ba28:	9b01      	ldr	r3, [sp, #4]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00c      	beq.n	800ba48 <__smakebuf_r+0x74>
 800ba2e:	0028      	movs	r0, r5
 800ba30:	230e      	movs	r3, #14
 800ba32:	5ee1      	ldrsh	r1, [r4, r3]
 800ba34:	f000 f832 	bl	800ba9c <_isatty_r>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	d005      	beq.n	800ba48 <__smakebuf_r+0x74>
 800ba3c:	2303      	movs	r3, #3
 800ba3e:	89a2      	ldrh	r2, [r4, #12]
 800ba40:	439a      	bics	r2, r3
 800ba42:	3b02      	subs	r3, #2
 800ba44:	4313      	orrs	r3, r2
 800ba46:	81a3      	strh	r3, [r4, #12]
 800ba48:	89a3      	ldrh	r3, [r4, #12]
 800ba4a:	433b      	orrs	r3, r7
 800ba4c:	81a3      	strh	r3, [r4, #12]
 800ba4e:	e7ce      	b.n	800b9ee <__smakebuf_r+0x1a>

0800ba50 <memmove>:
 800ba50:	b510      	push	{r4, lr}
 800ba52:	4288      	cmp	r0, r1
 800ba54:	d902      	bls.n	800ba5c <memmove+0xc>
 800ba56:	188b      	adds	r3, r1, r2
 800ba58:	4298      	cmp	r0, r3
 800ba5a:	d303      	bcc.n	800ba64 <memmove+0x14>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	e007      	b.n	800ba70 <memmove+0x20>
 800ba60:	5c8b      	ldrb	r3, [r1, r2]
 800ba62:	5483      	strb	r3, [r0, r2]
 800ba64:	3a01      	subs	r2, #1
 800ba66:	d2fb      	bcs.n	800ba60 <memmove+0x10>
 800ba68:	bd10      	pop	{r4, pc}
 800ba6a:	5ccc      	ldrb	r4, [r1, r3]
 800ba6c:	54c4      	strb	r4, [r0, r3]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d1fa      	bne.n	800ba6a <memmove+0x1a>
 800ba74:	e7f8      	b.n	800ba68 <memmove+0x18>
	...

0800ba78 <_fstat_r>:
 800ba78:	2300      	movs	r3, #0
 800ba7a:	b570      	push	{r4, r5, r6, lr}
 800ba7c:	4d06      	ldr	r5, [pc, #24]	; (800ba98 <_fstat_r+0x20>)
 800ba7e:	0004      	movs	r4, r0
 800ba80:	0008      	movs	r0, r1
 800ba82:	0011      	movs	r1, r2
 800ba84:	602b      	str	r3, [r5, #0]
 800ba86:	f7f7 f9be 	bl	8002e06 <_fstat>
 800ba8a:	1c43      	adds	r3, r0, #1
 800ba8c:	d103      	bne.n	800ba96 <_fstat_r+0x1e>
 800ba8e:	682b      	ldr	r3, [r5, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d000      	beq.n	800ba96 <_fstat_r+0x1e>
 800ba94:	6023      	str	r3, [r4, #0]
 800ba96:	bd70      	pop	{r4, r5, r6, pc}
 800ba98:	200015e8 	.word	0x200015e8

0800ba9c <_isatty_r>:
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	b570      	push	{r4, r5, r6, lr}
 800baa0:	4d06      	ldr	r5, [pc, #24]	; (800babc <_isatty_r+0x20>)
 800baa2:	0004      	movs	r4, r0
 800baa4:	0008      	movs	r0, r1
 800baa6:	602b      	str	r3, [r5, #0]
 800baa8:	f7f7 f9bb 	bl	8002e22 <_isatty>
 800baac:	1c43      	adds	r3, r0, #1
 800baae:	d103      	bne.n	800bab8 <_isatty_r+0x1c>
 800bab0:	682b      	ldr	r3, [r5, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d000      	beq.n	800bab8 <_isatty_r+0x1c>
 800bab6:	6023      	str	r3, [r4, #0]
 800bab8:	bd70      	pop	{r4, r5, r6, pc}
 800baba:	46c0      	nop			; (mov r8, r8)
 800babc:	200015e8 	.word	0x200015e8

0800bac0 <_sbrk_r>:
 800bac0:	2300      	movs	r3, #0
 800bac2:	b570      	push	{r4, r5, r6, lr}
 800bac4:	4d06      	ldr	r5, [pc, #24]	; (800bae0 <_sbrk_r+0x20>)
 800bac6:	0004      	movs	r4, r0
 800bac8:	0008      	movs	r0, r1
 800baca:	602b      	str	r3, [r5, #0]
 800bacc:	f7f7 f9be 	bl	8002e4c <_sbrk>
 800bad0:	1c43      	adds	r3, r0, #1
 800bad2:	d103      	bne.n	800badc <_sbrk_r+0x1c>
 800bad4:	682b      	ldr	r3, [r5, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d000      	beq.n	800badc <_sbrk_r+0x1c>
 800bada:	6023      	str	r3, [r4, #0]
 800badc:	bd70      	pop	{r4, r5, r6, pc}
 800bade:	46c0      	nop			; (mov r8, r8)
 800bae0:	200015e8 	.word	0x200015e8

0800bae4 <memchr>:
 800bae4:	b2c9      	uxtb	r1, r1
 800bae6:	1882      	adds	r2, r0, r2
 800bae8:	4290      	cmp	r0, r2
 800baea:	d101      	bne.n	800baf0 <memchr+0xc>
 800baec:	2000      	movs	r0, #0
 800baee:	4770      	bx	lr
 800baf0:	7803      	ldrb	r3, [r0, #0]
 800baf2:	428b      	cmp	r3, r1
 800baf4:	d0fb      	beq.n	800baee <memchr+0xa>
 800baf6:	3001      	adds	r0, #1
 800baf8:	e7f6      	b.n	800bae8 <memchr+0x4>

0800bafa <_realloc_r>:
 800bafa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bafc:	0007      	movs	r7, r0
 800bafe:	000e      	movs	r6, r1
 800bb00:	0014      	movs	r4, r2
 800bb02:	2900      	cmp	r1, #0
 800bb04:	d105      	bne.n	800bb12 <_realloc_r+0x18>
 800bb06:	0011      	movs	r1, r2
 800bb08:	f7ff f9ce 	bl	800aea8 <_malloc_r>
 800bb0c:	0005      	movs	r5, r0
 800bb0e:	0028      	movs	r0, r5
 800bb10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb12:	2a00      	cmp	r2, #0
 800bb14:	d103      	bne.n	800bb1e <_realloc_r+0x24>
 800bb16:	f7ff f95b 	bl	800add0 <_free_r>
 800bb1a:	0025      	movs	r5, r4
 800bb1c:	e7f7      	b.n	800bb0e <_realloc_r+0x14>
 800bb1e:	f000 f81b 	bl	800bb58 <_malloc_usable_size_r>
 800bb22:	9001      	str	r0, [sp, #4]
 800bb24:	4284      	cmp	r4, r0
 800bb26:	d803      	bhi.n	800bb30 <_realloc_r+0x36>
 800bb28:	0035      	movs	r5, r6
 800bb2a:	0843      	lsrs	r3, r0, #1
 800bb2c:	42a3      	cmp	r3, r4
 800bb2e:	d3ee      	bcc.n	800bb0e <_realloc_r+0x14>
 800bb30:	0021      	movs	r1, r4
 800bb32:	0038      	movs	r0, r7
 800bb34:	f7ff f9b8 	bl	800aea8 <_malloc_r>
 800bb38:	1e05      	subs	r5, r0, #0
 800bb3a:	d0e8      	beq.n	800bb0e <_realloc_r+0x14>
 800bb3c:	9b01      	ldr	r3, [sp, #4]
 800bb3e:	0022      	movs	r2, r4
 800bb40:	429c      	cmp	r4, r3
 800bb42:	d900      	bls.n	800bb46 <_realloc_r+0x4c>
 800bb44:	001a      	movs	r2, r3
 800bb46:	0031      	movs	r1, r6
 800bb48:	0028      	movs	r0, r5
 800bb4a:	f7ff f937 	bl	800adbc <memcpy>
 800bb4e:	0031      	movs	r1, r6
 800bb50:	0038      	movs	r0, r7
 800bb52:	f7ff f93d 	bl	800add0 <_free_r>
 800bb56:	e7da      	b.n	800bb0e <_realloc_r+0x14>

0800bb58 <_malloc_usable_size_r>:
 800bb58:	1f0b      	subs	r3, r1, #4
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	1f18      	subs	r0, r3, #4
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	da01      	bge.n	800bb66 <_malloc_usable_size_r+0xe>
 800bb62:	580b      	ldr	r3, [r1, r0]
 800bb64:	18c0      	adds	r0, r0, r3
 800bb66:	4770      	bx	lr

0800bb68 <sqrt>:
 800bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6a:	0004      	movs	r4, r0
 800bb6c:	000d      	movs	r5, r1
 800bb6e:	f000 fa29 	bl	800bfc4 <__ieee754_sqrt>
 800bb72:	0022      	movs	r2, r4
 800bb74:	0006      	movs	r6, r0
 800bb76:	000f      	movs	r7, r1
 800bb78:	002b      	movs	r3, r5
 800bb7a:	0020      	movs	r0, r4
 800bb7c:	0029      	movs	r1, r5
 800bb7e:	f7f6 fa1f 	bl	8001fc0 <__aeabi_dcmpun>
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d113      	bne.n	800bbae <sqrt+0x46>
 800bb86:	2200      	movs	r2, #0
 800bb88:	2300      	movs	r3, #0
 800bb8a:	0020      	movs	r0, r4
 800bb8c:	0029      	movs	r1, r5
 800bb8e:	f7f4 fc51 	bl	8000434 <__aeabi_dcmplt>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	d00b      	beq.n	800bbae <sqrt+0x46>
 800bb96:	f7ff f8e5 	bl	800ad64 <__errno>
 800bb9a:	2321      	movs	r3, #33	; 0x21
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	6003      	str	r3, [r0, #0]
 800bba0:	2300      	movs	r3, #0
 800bba2:	0010      	movs	r0, r2
 800bba4:	0019      	movs	r1, r3
 800bba6:	f7f4 ffcd 	bl	8000b44 <__aeabi_ddiv>
 800bbaa:	0006      	movs	r6, r0
 800bbac:	000f      	movs	r7, r1
 800bbae:	0030      	movs	r0, r6
 800bbb0:	0039      	movs	r1, r7
 800bbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bbb4 <atan>:
 800bbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbb6:	4b98      	ldr	r3, [pc, #608]	; (800be18 <atan+0x264>)
 800bbb8:	b085      	sub	sp, #20
 800bbba:	004e      	lsls	r6, r1, #1
 800bbbc:	0004      	movs	r4, r0
 800bbbe:	000d      	movs	r5, r1
 800bbc0:	9103      	str	r1, [sp, #12]
 800bbc2:	0876      	lsrs	r6, r6, #1
 800bbc4:	429e      	cmp	r6, r3
 800bbc6:	dd18      	ble.n	800bbfa <atan+0x46>
 800bbc8:	4b94      	ldr	r3, [pc, #592]	; (800be1c <atan+0x268>)
 800bbca:	429e      	cmp	r6, r3
 800bbcc:	dc02      	bgt.n	800bbd4 <atan+0x20>
 800bbce:	d10a      	bne.n	800bbe6 <atan+0x32>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	d008      	beq.n	800bbe6 <atan+0x32>
 800bbd4:	0022      	movs	r2, r4
 800bbd6:	002b      	movs	r3, r5
 800bbd8:	0020      	movs	r0, r4
 800bbda:	0029      	movs	r1, r5
 800bbdc:	f7f4 fc52 	bl	8000484 <__aeabi_dadd>
 800bbe0:	0004      	movs	r4, r0
 800bbe2:	000d      	movs	r5, r1
 800bbe4:	e005      	b.n	800bbf2 <atan+0x3e>
 800bbe6:	9b03      	ldr	r3, [sp, #12]
 800bbe8:	4c8d      	ldr	r4, [pc, #564]	; (800be20 <atan+0x26c>)
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	dd00      	ble.n	800bbf0 <atan+0x3c>
 800bbee:	e110      	b.n	800be12 <atan+0x25e>
 800bbf0:	4d8c      	ldr	r5, [pc, #560]	; (800be24 <atan+0x270>)
 800bbf2:	0020      	movs	r0, r4
 800bbf4:	0029      	movs	r1, r5
 800bbf6:	b005      	add	sp, #20
 800bbf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbfa:	4b8b      	ldr	r3, [pc, #556]	; (800be28 <atan+0x274>)
 800bbfc:	429e      	cmp	r6, r3
 800bbfe:	dc0f      	bgt.n	800bc20 <atan+0x6c>
 800bc00:	4b8a      	ldr	r3, [pc, #552]	; (800be2c <atan+0x278>)
 800bc02:	429e      	cmp	r6, r3
 800bc04:	dc09      	bgt.n	800bc1a <atan+0x66>
 800bc06:	4a8a      	ldr	r2, [pc, #552]	; (800be30 <atan+0x27c>)
 800bc08:	4b8a      	ldr	r3, [pc, #552]	; (800be34 <atan+0x280>)
 800bc0a:	f7f4 fc3b 	bl	8000484 <__aeabi_dadd>
 800bc0e:	2200      	movs	r2, #0
 800bc10:	4b89      	ldr	r3, [pc, #548]	; (800be38 <atan+0x284>)
 800bc12:	f7f4 fc23 	bl	800045c <__aeabi_dcmpgt>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	d1eb      	bne.n	800bbf2 <atan+0x3e>
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	425b      	negs	r3, r3
 800bc1e:	e025      	b.n	800bc6c <atan+0xb8>
 800bc20:	f000 f988 	bl	800bf34 <fabs>
 800bc24:	4b85      	ldr	r3, [pc, #532]	; (800be3c <atan+0x288>)
 800bc26:	0004      	movs	r4, r0
 800bc28:	000d      	movs	r5, r1
 800bc2a:	429e      	cmp	r6, r3
 800bc2c:	dd00      	ble.n	800bc30 <atan+0x7c>
 800bc2e:	e0aa      	b.n	800bd86 <atan+0x1d2>
 800bc30:	4b83      	ldr	r3, [pc, #524]	; (800be40 <atan+0x28c>)
 800bc32:	429e      	cmp	r6, r3
 800bc34:	dd00      	ble.n	800bc38 <atan+0x84>
 800bc36:	e090      	b.n	800bd5a <atan+0x1a6>
 800bc38:	0002      	movs	r2, r0
 800bc3a:	000b      	movs	r3, r1
 800bc3c:	f7f4 fc22 	bl	8000484 <__aeabi_dadd>
 800bc40:	2200      	movs	r2, #0
 800bc42:	4b7d      	ldr	r3, [pc, #500]	; (800be38 <atan+0x284>)
 800bc44:	f7f5 fe3a 	bl	80018bc <__aeabi_dsub>
 800bc48:	2380      	movs	r3, #128	; 0x80
 800bc4a:	0006      	movs	r6, r0
 800bc4c:	000f      	movs	r7, r1
 800bc4e:	2200      	movs	r2, #0
 800bc50:	0020      	movs	r0, r4
 800bc52:	0029      	movs	r1, r5
 800bc54:	05db      	lsls	r3, r3, #23
 800bc56:	f7f4 fc15 	bl	8000484 <__aeabi_dadd>
 800bc5a:	000b      	movs	r3, r1
 800bc5c:	0002      	movs	r2, r0
 800bc5e:	0039      	movs	r1, r7
 800bc60:	0030      	movs	r0, r6
 800bc62:	f7f4 ff6f 	bl	8000b44 <__aeabi_ddiv>
 800bc66:	2300      	movs	r3, #0
 800bc68:	0004      	movs	r4, r0
 800bc6a:	000d      	movs	r5, r1
 800bc6c:	0022      	movs	r2, r4
 800bc6e:	9302      	str	r3, [sp, #8]
 800bc70:	0020      	movs	r0, r4
 800bc72:	002b      	movs	r3, r5
 800bc74:	0029      	movs	r1, r5
 800bc76:	f7f5 fb5f 	bl	8001338 <__aeabi_dmul>
 800bc7a:	0002      	movs	r2, r0
 800bc7c:	000b      	movs	r3, r1
 800bc7e:	9000      	str	r0, [sp, #0]
 800bc80:	9101      	str	r1, [sp, #4]
 800bc82:	f7f5 fb59 	bl	8001338 <__aeabi_dmul>
 800bc86:	0006      	movs	r6, r0
 800bc88:	000f      	movs	r7, r1
 800bc8a:	4a6e      	ldr	r2, [pc, #440]	; (800be44 <atan+0x290>)
 800bc8c:	4b6e      	ldr	r3, [pc, #440]	; (800be48 <atan+0x294>)
 800bc8e:	f7f5 fb53 	bl	8001338 <__aeabi_dmul>
 800bc92:	4a6e      	ldr	r2, [pc, #440]	; (800be4c <atan+0x298>)
 800bc94:	4b6e      	ldr	r3, [pc, #440]	; (800be50 <atan+0x29c>)
 800bc96:	f7f4 fbf5 	bl	8000484 <__aeabi_dadd>
 800bc9a:	0032      	movs	r2, r6
 800bc9c:	003b      	movs	r3, r7
 800bc9e:	f7f5 fb4b 	bl	8001338 <__aeabi_dmul>
 800bca2:	4a6c      	ldr	r2, [pc, #432]	; (800be54 <atan+0x2a0>)
 800bca4:	4b6c      	ldr	r3, [pc, #432]	; (800be58 <atan+0x2a4>)
 800bca6:	f7f4 fbed 	bl	8000484 <__aeabi_dadd>
 800bcaa:	0032      	movs	r2, r6
 800bcac:	003b      	movs	r3, r7
 800bcae:	f7f5 fb43 	bl	8001338 <__aeabi_dmul>
 800bcb2:	4a6a      	ldr	r2, [pc, #424]	; (800be5c <atan+0x2a8>)
 800bcb4:	4b6a      	ldr	r3, [pc, #424]	; (800be60 <atan+0x2ac>)
 800bcb6:	f7f4 fbe5 	bl	8000484 <__aeabi_dadd>
 800bcba:	0032      	movs	r2, r6
 800bcbc:	003b      	movs	r3, r7
 800bcbe:	f7f5 fb3b 	bl	8001338 <__aeabi_dmul>
 800bcc2:	4a68      	ldr	r2, [pc, #416]	; (800be64 <atan+0x2b0>)
 800bcc4:	4b68      	ldr	r3, [pc, #416]	; (800be68 <atan+0x2b4>)
 800bcc6:	f7f4 fbdd 	bl	8000484 <__aeabi_dadd>
 800bcca:	0032      	movs	r2, r6
 800bccc:	003b      	movs	r3, r7
 800bcce:	f7f5 fb33 	bl	8001338 <__aeabi_dmul>
 800bcd2:	4a66      	ldr	r2, [pc, #408]	; (800be6c <atan+0x2b8>)
 800bcd4:	4b66      	ldr	r3, [pc, #408]	; (800be70 <atan+0x2bc>)
 800bcd6:	f7f4 fbd5 	bl	8000484 <__aeabi_dadd>
 800bcda:	9a00      	ldr	r2, [sp, #0]
 800bcdc:	9b01      	ldr	r3, [sp, #4]
 800bcde:	f7f5 fb2b 	bl	8001338 <__aeabi_dmul>
 800bce2:	4a64      	ldr	r2, [pc, #400]	; (800be74 <atan+0x2c0>)
 800bce4:	9000      	str	r0, [sp, #0]
 800bce6:	9101      	str	r1, [sp, #4]
 800bce8:	4b63      	ldr	r3, [pc, #396]	; (800be78 <atan+0x2c4>)
 800bcea:	0030      	movs	r0, r6
 800bcec:	0039      	movs	r1, r7
 800bcee:	f7f5 fb23 	bl	8001338 <__aeabi_dmul>
 800bcf2:	4a62      	ldr	r2, [pc, #392]	; (800be7c <atan+0x2c8>)
 800bcf4:	4b62      	ldr	r3, [pc, #392]	; (800be80 <atan+0x2cc>)
 800bcf6:	f7f5 fde1 	bl	80018bc <__aeabi_dsub>
 800bcfa:	0032      	movs	r2, r6
 800bcfc:	003b      	movs	r3, r7
 800bcfe:	f7f5 fb1b 	bl	8001338 <__aeabi_dmul>
 800bd02:	4a60      	ldr	r2, [pc, #384]	; (800be84 <atan+0x2d0>)
 800bd04:	4b60      	ldr	r3, [pc, #384]	; (800be88 <atan+0x2d4>)
 800bd06:	f7f5 fdd9 	bl	80018bc <__aeabi_dsub>
 800bd0a:	0032      	movs	r2, r6
 800bd0c:	003b      	movs	r3, r7
 800bd0e:	f7f5 fb13 	bl	8001338 <__aeabi_dmul>
 800bd12:	4a5e      	ldr	r2, [pc, #376]	; (800be8c <atan+0x2d8>)
 800bd14:	4b5e      	ldr	r3, [pc, #376]	; (800be90 <atan+0x2dc>)
 800bd16:	f7f5 fdd1 	bl	80018bc <__aeabi_dsub>
 800bd1a:	0032      	movs	r2, r6
 800bd1c:	003b      	movs	r3, r7
 800bd1e:	f7f5 fb0b 	bl	8001338 <__aeabi_dmul>
 800bd22:	4a5c      	ldr	r2, [pc, #368]	; (800be94 <atan+0x2e0>)
 800bd24:	4b5c      	ldr	r3, [pc, #368]	; (800be98 <atan+0x2e4>)
 800bd26:	f7f5 fdc9 	bl	80018bc <__aeabi_dsub>
 800bd2a:	0032      	movs	r2, r6
 800bd2c:	003b      	movs	r3, r7
 800bd2e:	f7f5 fb03 	bl	8001338 <__aeabi_dmul>
 800bd32:	0002      	movs	r2, r0
 800bd34:	000b      	movs	r3, r1
 800bd36:	9800      	ldr	r0, [sp, #0]
 800bd38:	9901      	ldr	r1, [sp, #4]
 800bd3a:	f7f4 fba3 	bl	8000484 <__aeabi_dadd>
 800bd3e:	002b      	movs	r3, r5
 800bd40:	0022      	movs	r2, r4
 800bd42:	f7f5 faf9 	bl	8001338 <__aeabi_dmul>
 800bd46:	9b02      	ldr	r3, [sp, #8]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	d143      	bne.n	800bdd4 <atan+0x220>
 800bd4c:	0002      	movs	r2, r0
 800bd4e:	000b      	movs	r3, r1
 800bd50:	0020      	movs	r0, r4
 800bd52:	0029      	movs	r1, r5
 800bd54:	f7f5 fdb2 	bl	80018bc <__aeabi_dsub>
 800bd58:	e742      	b.n	800bbe0 <atan+0x2c>
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	4b36      	ldr	r3, [pc, #216]	; (800be38 <atan+0x284>)
 800bd5e:	f7f5 fdad 	bl	80018bc <__aeabi_dsub>
 800bd62:	2200      	movs	r2, #0
 800bd64:	0006      	movs	r6, r0
 800bd66:	000f      	movs	r7, r1
 800bd68:	0020      	movs	r0, r4
 800bd6a:	0029      	movs	r1, r5
 800bd6c:	4b32      	ldr	r3, [pc, #200]	; (800be38 <atan+0x284>)
 800bd6e:	f7f4 fb89 	bl	8000484 <__aeabi_dadd>
 800bd72:	000b      	movs	r3, r1
 800bd74:	0002      	movs	r2, r0
 800bd76:	0039      	movs	r1, r7
 800bd78:	0030      	movs	r0, r6
 800bd7a:	f7f4 fee3 	bl	8000b44 <__aeabi_ddiv>
 800bd7e:	2301      	movs	r3, #1
 800bd80:	0004      	movs	r4, r0
 800bd82:	000d      	movs	r5, r1
 800bd84:	e772      	b.n	800bc6c <atan+0xb8>
 800bd86:	4b45      	ldr	r3, [pc, #276]	; (800be9c <atan+0x2e8>)
 800bd88:	429e      	cmp	r6, r3
 800bd8a:	dc19      	bgt.n	800bdc0 <atan+0x20c>
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	4b44      	ldr	r3, [pc, #272]	; (800bea0 <atan+0x2ec>)
 800bd90:	f7f5 fd94 	bl	80018bc <__aeabi_dsub>
 800bd94:	2200      	movs	r2, #0
 800bd96:	0006      	movs	r6, r0
 800bd98:	000f      	movs	r7, r1
 800bd9a:	0020      	movs	r0, r4
 800bd9c:	0029      	movs	r1, r5
 800bd9e:	4b40      	ldr	r3, [pc, #256]	; (800bea0 <atan+0x2ec>)
 800bda0:	f7f5 faca 	bl	8001338 <__aeabi_dmul>
 800bda4:	2200      	movs	r2, #0
 800bda6:	4b24      	ldr	r3, [pc, #144]	; (800be38 <atan+0x284>)
 800bda8:	f7f4 fb6c 	bl	8000484 <__aeabi_dadd>
 800bdac:	000b      	movs	r3, r1
 800bdae:	0002      	movs	r2, r0
 800bdb0:	0039      	movs	r1, r7
 800bdb2:	0030      	movs	r0, r6
 800bdb4:	f7f4 fec6 	bl	8000b44 <__aeabi_ddiv>
 800bdb8:	2302      	movs	r3, #2
 800bdba:	0004      	movs	r4, r0
 800bdbc:	000d      	movs	r5, r1
 800bdbe:	e755      	b.n	800bc6c <atan+0xb8>
 800bdc0:	000b      	movs	r3, r1
 800bdc2:	0002      	movs	r2, r0
 800bdc4:	4937      	ldr	r1, [pc, #220]	; (800bea4 <atan+0x2f0>)
 800bdc6:	2000      	movs	r0, #0
 800bdc8:	f7f4 febc 	bl	8000b44 <__aeabi_ddiv>
 800bdcc:	2303      	movs	r3, #3
 800bdce:	0004      	movs	r4, r0
 800bdd0:	000d      	movs	r5, r1
 800bdd2:	e74b      	b.n	800bc6c <atan+0xb8>
 800bdd4:	9b02      	ldr	r3, [sp, #8]
 800bdd6:	4e34      	ldr	r6, [pc, #208]	; (800bea8 <atan+0x2f4>)
 800bdd8:	00db      	lsls	r3, r3, #3
 800bdda:	4f34      	ldr	r7, [pc, #208]	; (800beac <atan+0x2f8>)
 800bddc:	18f6      	adds	r6, r6, r3
 800bdde:	18ff      	adds	r7, r7, r3
 800bde0:	6832      	ldr	r2, [r6, #0]
 800bde2:	6873      	ldr	r3, [r6, #4]
 800bde4:	f7f5 fd6a 	bl	80018bc <__aeabi_dsub>
 800bde8:	0022      	movs	r2, r4
 800bdea:	002b      	movs	r3, r5
 800bdec:	f7f5 fd66 	bl	80018bc <__aeabi_dsub>
 800bdf0:	000b      	movs	r3, r1
 800bdf2:	0002      	movs	r2, r0
 800bdf4:	6838      	ldr	r0, [r7, #0]
 800bdf6:	6879      	ldr	r1, [r7, #4]
 800bdf8:	f7f5 fd60 	bl	80018bc <__aeabi_dsub>
 800bdfc:	9b03      	ldr	r3, [sp, #12]
 800bdfe:	0004      	movs	r4, r0
 800be00:	000d      	movs	r5, r1
 800be02:	2b00      	cmp	r3, #0
 800be04:	db00      	blt.n	800be08 <atan+0x254>
 800be06:	e6f4      	b.n	800bbf2 <atan+0x3e>
 800be08:	2180      	movs	r1, #128	; 0x80
 800be0a:	0609      	lsls	r1, r1, #24
 800be0c:	186b      	adds	r3, r5, r1
 800be0e:	001d      	movs	r5, r3
 800be10:	e6ef      	b.n	800bbf2 <atan+0x3e>
 800be12:	4d27      	ldr	r5, [pc, #156]	; (800beb0 <atan+0x2fc>)
 800be14:	e6ed      	b.n	800bbf2 <atan+0x3e>
 800be16:	46c0      	nop			; (mov r8, r8)
 800be18:	440fffff 	.word	0x440fffff
 800be1c:	7ff00000 	.word	0x7ff00000
 800be20:	54442d18 	.word	0x54442d18
 800be24:	bff921fb 	.word	0xbff921fb
 800be28:	3fdbffff 	.word	0x3fdbffff
 800be2c:	3e1fffff 	.word	0x3e1fffff
 800be30:	8800759c 	.word	0x8800759c
 800be34:	7e37e43c 	.word	0x7e37e43c
 800be38:	3ff00000 	.word	0x3ff00000
 800be3c:	3ff2ffff 	.word	0x3ff2ffff
 800be40:	3fe5ffff 	.word	0x3fe5ffff
 800be44:	e322da11 	.word	0xe322da11
 800be48:	3f90ad3a 	.word	0x3f90ad3a
 800be4c:	24760deb 	.word	0x24760deb
 800be50:	3fa97b4b 	.word	0x3fa97b4b
 800be54:	a0d03d51 	.word	0xa0d03d51
 800be58:	3fb10d66 	.word	0x3fb10d66
 800be5c:	c54c206e 	.word	0xc54c206e
 800be60:	3fb745cd 	.word	0x3fb745cd
 800be64:	920083ff 	.word	0x920083ff
 800be68:	3fc24924 	.word	0x3fc24924
 800be6c:	5555550d 	.word	0x5555550d
 800be70:	3fd55555 	.word	0x3fd55555
 800be74:	2c6a6c2f 	.word	0x2c6a6c2f
 800be78:	bfa2b444 	.word	0xbfa2b444
 800be7c:	52defd9a 	.word	0x52defd9a
 800be80:	3fadde2d 	.word	0x3fadde2d
 800be84:	af749a6d 	.word	0xaf749a6d
 800be88:	3fb3b0f2 	.word	0x3fb3b0f2
 800be8c:	fe231671 	.word	0xfe231671
 800be90:	3fbc71c6 	.word	0x3fbc71c6
 800be94:	9998ebc4 	.word	0x9998ebc4
 800be98:	3fc99999 	.word	0x3fc99999
 800be9c:	40037fff 	.word	0x40037fff
 800bea0:	3ff80000 	.word	0x3ff80000
 800bea4:	bff00000 	.word	0xbff00000
 800bea8:	0800d758 	.word	0x0800d758
 800beac:	0800d738 	.word	0x0800d738
 800beb0:	3ff921fb 	.word	0x3ff921fb

0800beb4 <cos>:
 800beb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beb6:	4a1d      	ldr	r2, [pc, #116]	; (800bf2c <cos+0x78>)
 800beb8:	004b      	lsls	r3, r1, #1
 800beba:	b087      	sub	sp, #28
 800bebc:	085b      	lsrs	r3, r3, #1
 800bebe:	4293      	cmp	r3, r2
 800bec0:	dc04      	bgt.n	800becc <cos+0x18>
 800bec2:	2200      	movs	r2, #0
 800bec4:	2300      	movs	r3, #0
 800bec6:	f000 f969 	bl	800c19c <__kernel_cos>
 800beca:	e006      	b.n	800beda <cos+0x26>
 800becc:	4a18      	ldr	r2, [pc, #96]	; (800bf30 <cos+0x7c>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	dd05      	ble.n	800bede <cos+0x2a>
 800bed2:	0002      	movs	r2, r0
 800bed4:	000b      	movs	r3, r1
 800bed6:	f7f5 fcf1 	bl	80018bc <__aeabi_dsub>
 800beda:	b007      	add	sp, #28
 800bedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bede:	aa02      	add	r2, sp, #8
 800bee0:	f000 fac8 	bl	800c474 <__ieee754_rem_pio2>
 800bee4:	9c04      	ldr	r4, [sp, #16]
 800bee6:	9d05      	ldr	r5, [sp, #20]
 800bee8:	2303      	movs	r3, #3
 800beea:	4003      	ands	r3, r0
 800beec:	9802      	ldr	r0, [sp, #8]
 800beee:	9903      	ldr	r1, [sp, #12]
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d006      	beq.n	800bf02 <cos+0x4e>
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	d00d      	beq.n	800bf14 <cos+0x60>
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d110      	bne.n	800bf1e <cos+0x6a>
 800befc:	0022      	movs	r2, r4
 800befe:	002b      	movs	r3, r5
 800bf00:	e7e1      	b.n	800bec6 <cos+0x12>
 800bf02:	9300      	str	r3, [sp, #0]
 800bf04:	0022      	movs	r2, r4
 800bf06:	002b      	movs	r3, r5
 800bf08:	f000 fa08 	bl	800c31c <__kernel_sin>
 800bf0c:	2380      	movs	r3, #128	; 0x80
 800bf0e:	061b      	lsls	r3, r3, #24
 800bf10:	18c9      	adds	r1, r1, r3
 800bf12:	e7e2      	b.n	800beda <cos+0x26>
 800bf14:	0022      	movs	r2, r4
 800bf16:	002b      	movs	r3, r5
 800bf18:	f000 f940 	bl	800c19c <__kernel_cos>
 800bf1c:	e7f6      	b.n	800bf0c <cos+0x58>
 800bf1e:	2301      	movs	r3, #1
 800bf20:	0022      	movs	r2, r4
 800bf22:	9300      	str	r3, [sp, #0]
 800bf24:	002b      	movs	r3, r5
 800bf26:	f000 f9f9 	bl	800c31c <__kernel_sin>
 800bf2a:	e7d6      	b.n	800beda <cos+0x26>
 800bf2c:	3fe921fb 	.word	0x3fe921fb
 800bf30:	7fefffff 	.word	0x7fefffff

0800bf34 <fabs>:
 800bf34:	0049      	lsls	r1, r1, #1
 800bf36:	084b      	lsrs	r3, r1, #1
 800bf38:	0019      	movs	r1, r3
 800bf3a:	4770      	bx	lr

0800bf3c <sin>:
 800bf3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf3e:	4a1f      	ldr	r2, [pc, #124]	; (800bfbc <sin+0x80>)
 800bf40:	004b      	lsls	r3, r1, #1
 800bf42:	b087      	sub	sp, #28
 800bf44:	085b      	lsrs	r3, r3, #1
 800bf46:	4293      	cmp	r3, r2
 800bf48:	dc06      	bgt.n	800bf58 <sin+0x1c>
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	9300      	str	r3, [sp, #0]
 800bf50:	2300      	movs	r3, #0
 800bf52:	f000 f9e3 	bl	800c31c <__kernel_sin>
 800bf56:	e006      	b.n	800bf66 <sin+0x2a>
 800bf58:	4a19      	ldr	r2, [pc, #100]	; (800bfc0 <sin+0x84>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	dd05      	ble.n	800bf6a <sin+0x2e>
 800bf5e:	0002      	movs	r2, r0
 800bf60:	000b      	movs	r3, r1
 800bf62:	f7f5 fcab 	bl	80018bc <__aeabi_dsub>
 800bf66:	b007      	add	sp, #28
 800bf68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf6a:	aa02      	add	r2, sp, #8
 800bf6c:	f000 fa82 	bl	800c474 <__ieee754_rem_pio2>
 800bf70:	9c04      	ldr	r4, [sp, #16]
 800bf72:	9d05      	ldr	r5, [sp, #20]
 800bf74:	2303      	movs	r3, #3
 800bf76:	4003      	ands	r3, r0
 800bf78:	9802      	ldr	r0, [sp, #8]
 800bf7a:	9903      	ldr	r1, [sp, #12]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d008      	beq.n	800bf92 <sin+0x56>
 800bf80:	2b02      	cmp	r3, #2
 800bf82:	d00b      	beq.n	800bf9c <sin+0x60>
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d113      	bne.n	800bfb0 <sin+0x74>
 800bf88:	3301      	adds	r3, #1
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	0022      	movs	r2, r4
 800bf8e:	002b      	movs	r3, r5
 800bf90:	e7df      	b.n	800bf52 <sin+0x16>
 800bf92:	0022      	movs	r2, r4
 800bf94:	002b      	movs	r3, r5
 800bf96:	f000 f901 	bl	800c19c <__kernel_cos>
 800bf9a:	e7e4      	b.n	800bf66 <sin+0x2a>
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	0022      	movs	r2, r4
 800bfa0:	9300      	str	r3, [sp, #0]
 800bfa2:	002b      	movs	r3, r5
 800bfa4:	f000 f9ba 	bl	800c31c <__kernel_sin>
 800bfa8:	2380      	movs	r3, #128	; 0x80
 800bfaa:	061b      	lsls	r3, r3, #24
 800bfac:	18c9      	adds	r1, r1, r3
 800bfae:	e7da      	b.n	800bf66 <sin+0x2a>
 800bfb0:	0022      	movs	r2, r4
 800bfb2:	002b      	movs	r3, r5
 800bfb4:	f000 f8f2 	bl	800c19c <__kernel_cos>
 800bfb8:	e7f6      	b.n	800bfa8 <sin+0x6c>
 800bfba:	46c0      	nop			; (mov r8, r8)
 800bfbc:	3fe921fb 	.word	0x3fe921fb
 800bfc0:	7fefffff 	.word	0x7fefffff

0800bfc4 <__ieee754_sqrt>:
 800bfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfc6:	000a      	movs	r2, r1
 800bfc8:	000c      	movs	r4, r1
 800bfca:	496f      	ldr	r1, [pc, #444]	; (800c188 <__ieee754_sqrt+0x1c4>)
 800bfcc:	0005      	movs	r5, r0
 800bfce:	0003      	movs	r3, r0
 800bfd0:	0008      	movs	r0, r1
 800bfd2:	b087      	sub	sp, #28
 800bfd4:	4020      	ands	r0, r4
 800bfd6:	4288      	cmp	r0, r1
 800bfd8:	d111      	bne.n	800bffe <__ieee754_sqrt+0x3a>
 800bfda:	002a      	movs	r2, r5
 800bfdc:	0023      	movs	r3, r4
 800bfde:	0028      	movs	r0, r5
 800bfe0:	0021      	movs	r1, r4
 800bfe2:	f7f5 f9a9 	bl	8001338 <__aeabi_dmul>
 800bfe6:	0002      	movs	r2, r0
 800bfe8:	000b      	movs	r3, r1
 800bfea:	0028      	movs	r0, r5
 800bfec:	0021      	movs	r1, r4
 800bfee:	f7f4 fa49 	bl	8000484 <__aeabi_dadd>
 800bff2:	0005      	movs	r5, r0
 800bff4:	000c      	movs	r4, r1
 800bff6:	0028      	movs	r0, r5
 800bff8:	0021      	movs	r1, r4
 800bffa:	b007      	add	sp, #28
 800bffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bffe:	2c00      	cmp	r4, #0
 800c000:	dc12      	bgt.n	800c028 <__ieee754_sqrt+0x64>
 800c002:	0061      	lsls	r1, r4, #1
 800c004:	0849      	lsrs	r1, r1, #1
 800c006:	4329      	orrs	r1, r5
 800c008:	d0f5      	beq.n	800bff6 <__ieee754_sqrt+0x32>
 800c00a:	2100      	movs	r1, #0
 800c00c:	428c      	cmp	r4, r1
 800c00e:	d100      	bne.n	800c012 <__ieee754_sqrt+0x4e>
 800c010:	e09f      	b.n	800c152 <__ieee754_sqrt+0x18e>
 800c012:	002a      	movs	r2, r5
 800c014:	0023      	movs	r3, r4
 800c016:	0028      	movs	r0, r5
 800c018:	0021      	movs	r1, r4
 800c01a:	f7f5 fc4f 	bl	80018bc <__aeabi_dsub>
 800c01e:	0002      	movs	r2, r0
 800c020:	000b      	movs	r3, r1
 800c022:	f7f4 fd8f 	bl	8000b44 <__aeabi_ddiv>
 800c026:	e7e4      	b.n	800bff2 <__ieee754_sqrt+0x2e>
 800c028:	1521      	asrs	r1, r4, #20
 800c02a:	d100      	bne.n	800c02e <__ieee754_sqrt+0x6a>
 800c02c:	e091      	b.n	800c152 <__ieee754_sqrt+0x18e>
 800c02e:	4857      	ldr	r0, [pc, #348]	; (800c18c <__ieee754_sqrt+0x1c8>)
 800c030:	0312      	lsls	r2, r2, #12
 800c032:	180c      	adds	r4, r1, r0
 800c034:	2080      	movs	r0, #128	; 0x80
 800c036:	0b12      	lsrs	r2, r2, #12
 800c038:	0340      	lsls	r0, r0, #13
 800c03a:	4310      	orrs	r0, r2
 800c03c:	07c9      	lsls	r1, r1, #31
 800c03e:	d403      	bmi.n	800c048 <__ieee754_sqrt+0x84>
 800c040:	0fda      	lsrs	r2, r3, #31
 800c042:	0040      	lsls	r0, r0, #1
 800c044:	1810      	adds	r0, r2, r0
 800c046:	005b      	lsls	r3, r3, #1
 800c048:	2500      	movs	r5, #0
 800c04a:	1062      	asrs	r2, r4, #1
 800c04c:	0040      	lsls	r0, r0, #1
 800c04e:	2480      	movs	r4, #128	; 0x80
 800c050:	9205      	str	r2, [sp, #20]
 800c052:	0fda      	lsrs	r2, r3, #31
 800c054:	1812      	adds	r2, r2, r0
 800c056:	0029      	movs	r1, r5
 800c058:	2016      	movs	r0, #22
 800c05a:	005b      	lsls	r3, r3, #1
 800c05c:	03a4      	lsls	r4, r4, #14
 800c05e:	190e      	adds	r6, r1, r4
 800c060:	4296      	cmp	r6, r2
 800c062:	dc02      	bgt.n	800c06a <__ieee754_sqrt+0xa6>
 800c064:	1931      	adds	r1, r6, r4
 800c066:	1b92      	subs	r2, r2, r6
 800c068:	192d      	adds	r5, r5, r4
 800c06a:	0fde      	lsrs	r6, r3, #31
 800c06c:	0052      	lsls	r2, r2, #1
 800c06e:	3801      	subs	r0, #1
 800c070:	18b2      	adds	r2, r6, r2
 800c072:	005b      	lsls	r3, r3, #1
 800c074:	0864      	lsrs	r4, r4, #1
 800c076:	2800      	cmp	r0, #0
 800c078:	d1f1      	bne.n	800c05e <__ieee754_sqrt+0x9a>
 800c07a:	2620      	movs	r6, #32
 800c07c:	2780      	movs	r7, #128	; 0x80
 800c07e:	0004      	movs	r4, r0
 800c080:	9604      	str	r6, [sp, #16]
 800c082:	063f      	lsls	r7, r7, #24
 800c084:	183e      	adds	r6, r7, r0
 800c086:	46b4      	mov	ip, r6
 800c088:	428a      	cmp	r2, r1
 800c08a:	dc02      	bgt.n	800c092 <__ieee754_sqrt+0xce>
 800c08c:	d114      	bne.n	800c0b8 <__ieee754_sqrt+0xf4>
 800c08e:	429e      	cmp	r6, r3
 800c090:	d812      	bhi.n	800c0b8 <__ieee754_sqrt+0xf4>
 800c092:	4660      	mov	r0, ip
 800c094:	4666      	mov	r6, ip
 800c096:	19c0      	adds	r0, r0, r7
 800c098:	9100      	str	r1, [sp, #0]
 800c09a:	2e00      	cmp	r6, #0
 800c09c:	da03      	bge.n	800c0a6 <__ieee754_sqrt+0xe2>
 800c09e:	43c6      	mvns	r6, r0
 800c0a0:	0ff6      	lsrs	r6, r6, #31
 800c0a2:	198e      	adds	r6, r1, r6
 800c0a4:	9600      	str	r6, [sp, #0]
 800c0a6:	1a52      	subs	r2, r2, r1
 800c0a8:	4563      	cmp	r3, ip
 800c0aa:	4189      	sbcs	r1, r1
 800c0ac:	4249      	negs	r1, r1
 800c0ae:	1a52      	subs	r2, r2, r1
 800c0b0:	4661      	mov	r1, ip
 800c0b2:	1a5b      	subs	r3, r3, r1
 800c0b4:	9900      	ldr	r1, [sp, #0]
 800c0b6:	19e4      	adds	r4, r4, r7
 800c0b8:	0fde      	lsrs	r6, r3, #31
 800c0ba:	0052      	lsls	r2, r2, #1
 800c0bc:	18b2      	adds	r2, r6, r2
 800c0be:	9e04      	ldr	r6, [sp, #16]
 800c0c0:	005b      	lsls	r3, r3, #1
 800c0c2:	3e01      	subs	r6, #1
 800c0c4:	087f      	lsrs	r7, r7, #1
 800c0c6:	9604      	str	r6, [sp, #16]
 800c0c8:	2e00      	cmp	r6, #0
 800c0ca:	d1db      	bne.n	800c084 <__ieee754_sqrt+0xc0>
 800c0cc:	431a      	orrs	r2, r3
 800c0ce:	d01f      	beq.n	800c110 <__ieee754_sqrt+0x14c>
 800c0d0:	4e2f      	ldr	r6, [pc, #188]	; (800c190 <__ieee754_sqrt+0x1cc>)
 800c0d2:	4f30      	ldr	r7, [pc, #192]	; (800c194 <__ieee754_sqrt+0x1d0>)
 800c0d4:	6830      	ldr	r0, [r6, #0]
 800c0d6:	6871      	ldr	r1, [r6, #4]
 800c0d8:	683a      	ldr	r2, [r7, #0]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	9200      	str	r2, [sp, #0]
 800c0de:	9301      	str	r3, [sp, #4]
 800c0e0:	6832      	ldr	r2, [r6, #0]
 800c0e2:	6873      	ldr	r3, [r6, #4]
 800c0e4:	9202      	str	r2, [sp, #8]
 800c0e6:	9303      	str	r3, [sp, #12]
 800c0e8:	9a00      	ldr	r2, [sp, #0]
 800c0ea:	9b01      	ldr	r3, [sp, #4]
 800c0ec:	f7f5 fbe6 	bl	80018bc <__aeabi_dsub>
 800c0f0:	0002      	movs	r2, r0
 800c0f2:	000b      	movs	r3, r1
 800c0f4:	9802      	ldr	r0, [sp, #8]
 800c0f6:	9903      	ldr	r1, [sp, #12]
 800c0f8:	f7f4 f9a6 	bl	8000448 <__aeabi_dcmple>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d007      	beq.n	800c110 <__ieee754_sqrt+0x14c>
 800c100:	6830      	ldr	r0, [r6, #0]
 800c102:	6871      	ldr	r1, [r6, #4]
 800c104:	683a      	ldr	r2, [r7, #0]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	1c67      	adds	r7, r4, #1
 800c10a:	d127      	bne.n	800c15c <__ieee754_sqrt+0x198>
 800c10c:	9c04      	ldr	r4, [sp, #16]
 800c10e:	3501      	adds	r5, #1
 800c110:	4b21      	ldr	r3, [pc, #132]	; (800c198 <__ieee754_sqrt+0x1d4>)
 800c112:	1069      	asrs	r1, r5, #1
 800c114:	18c9      	adds	r1, r1, r3
 800c116:	0864      	lsrs	r4, r4, #1
 800c118:	07ed      	lsls	r5, r5, #31
 800c11a:	d502      	bpl.n	800c122 <__ieee754_sqrt+0x15e>
 800c11c:	2380      	movs	r3, #128	; 0x80
 800c11e:	061b      	lsls	r3, r3, #24
 800c120:	431c      	orrs	r4, r3
 800c122:	9b05      	ldr	r3, [sp, #20]
 800c124:	0025      	movs	r5, r4
 800c126:	0518      	lsls	r0, r3, #20
 800c128:	1843      	adds	r3, r0, r1
 800c12a:	001c      	movs	r4, r3
 800c12c:	e763      	b.n	800bff6 <__ieee754_sqrt+0x32>
 800c12e:	0ada      	lsrs	r2, r3, #11
 800c130:	3815      	subs	r0, #21
 800c132:	055b      	lsls	r3, r3, #21
 800c134:	2a00      	cmp	r2, #0
 800c136:	d0fa      	beq.n	800c12e <__ieee754_sqrt+0x16a>
 800c138:	2480      	movs	r4, #128	; 0x80
 800c13a:	0364      	lsls	r4, r4, #13
 800c13c:	4222      	tst	r2, r4
 800c13e:	d00a      	beq.n	800c156 <__ieee754_sqrt+0x192>
 800c140:	2420      	movs	r4, #32
 800c142:	001e      	movs	r6, r3
 800c144:	1a64      	subs	r4, r4, r1
 800c146:	40e6      	lsrs	r6, r4
 800c148:	1e4d      	subs	r5, r1, #1
 800c14a:	408b      	lsls	r3, r1
 800c14c:	4332      	orrs	r2, r6
 800c14e:	1b41      	subs	r1, r0, r5
 800c150:	e76d      	b.n	800c02e <__ieee754_sqrt+0x6a>
 800c152:	2000      	movs	r0, #0
 800c154:	e7ee      	b.n	800c134 <__ieee754_sqrt+0x170>
 800c156:	0052      	lsls	r2, r2, #1
 800c158:	3101      	adds	r1, #1
 800c15a:	e7ef      	b.n	800c13c <__ieee754_sqrt+0x178>
 800c15c:	f7f4 f992 	bl	8000484 <__aeabi_dadd>
 800c160:	6877      	ldr	r7, [r6, #4]
 800c162:	6836      	ldr	r6, [r6, #0]
 800c164:	0002      	movs	r2, r0
 800c166:	000b      	movs	r3, r1
 800c168:	0030      	movs	r0, r6
 800c16a:	0039      	movs	r1, r7
 800c16c:	f7f4 f962 	bl	8000434 <__aeabi_dcmplt>
 800c170:	2800      	cmp	r0, #0
 800c172:	d004      	beq.n	800c17e <__ieee754_sqrt+0x1ba>
 800c174:	3402      	adds	r4, #2
 800c176:	4263      	negs	r3, r4
 800c178:	4163      	adcs	r3, r4
 800c17a:	18ed      	adds	r5, r5, r3
 800c17c:	e7c8      	b.n	800c110 <__ieee754_sqrt+0x14c>
 800c17e:	2301      	movs	r3, #1
 800c180:	3401      	adds	r4, #1
 800c182:	439c      	bics	r4, r3
 800c184:	e7c4      	b.n	800c110 <__ieee754_sqrt+0x14c>
 800c186:	46c0      	nop			; (mov r8, r8)
 800c188:	7ff00000 	.word	0x7ff00000
 800c18c:	fffffc01 	.word	0xfffffc01
 800c190:	20000070 	.word	0x20000070
 800c194:	20000078 	.word	0x20000078
 800c198:	3fe00000 	.word	0x3fe00000

0800c19c <__kernel_cos>:
 800c19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c19e:	b087      	sub	sp, #28
 800c1a0:	9204      	str	r2, [sp, #16]
 800c1a2:	9305      	str	r3, [sp, #20]
 800c1a4:	004b      	lsls	r3, r1, #1
 800c1a6:	085b      	lsrs	r3, r3, #1
 800c1a8:	9300      	str	r3, [sp, #0]
 800c1aa:	23f9      	movs	r3, #249	; 0xf9
 800c1ac:	9a00      	ldr	r2, [sp, #0]
 800c1ae:	0007      	movs	r7, r0
 800c1b0:	000e      	movs	r6, r1
 800c1b2:	059b      	lsls	r3, r3, #22
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	da04      	bge.n	800c1c2 <__kernel_cos+0x26>
 800c1b8:	f7f5 ff20 	bl	8001ffc <__aeabi_d2iz>
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	d100      	bne.n	800c1c2 <__kernel_cos+0x26>
 800c1c0:	e084      	b.n	800c2cc <__kernel_cos+0x130>
 800c1c2:	003a      	movs	r2, r7
 800c1c4:	0033      	movs	r3, r6
 800c1c6:	0038      	movs	r0, r7
 800c1c8:	0031      	movs	r1, r6
 800c1ca:	f7f5 f8b5 	bl	8001338 <__aeabi_dmul>
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	4b40      	ldr	r3, [pc, #256]	; (800c2d4 <__kernel_cos+0x138>)
 800c1d2:	0004      	movs	r4, r0
 800c1d4:	000d      	movs	r5, r1
 800c1d6:	f7f5 f8af 	bl	8001338 <__aeabi_dmul>
 800c1da:	4a3f      	ldr	r2, [pc, #252]	; (800c2d8 <__kernel_cos+0x13c>)
 800c1dc:	9002      	str	r0, [sp, #8]
 800c1de:	9103      	str	r1, [sp, #12]
 800c1e0:	4b3e      	ldr	r3, [pc, #248]	; (800c2dc <__kernel_cos+0x140>)
 800c1e2:	0020      	movs	r0, r4
 800c1e4:	0029      	movs	r1, r5
 800c1e6:	f7f5 f8a7 	bl	8001338 <__aeabi_dmul>
 800c1ea:	4a3d      	ldr	r2, [pc, #244]	; (800c2e0 <__kernel_cos+0x144>)
 800c1ec:	4b3d      	ldr	r3, [pc, #244]	; (800c2e4 <__kernel_cos+0x148>)
 800c1ee:	f7f4 f949 	bl	8000484 <__aeabi_dadd>
 800c1f2:	0022      	movs	r2, r4
 800c1f4:	002b      	movs	r3, r5
 800c1f6:	f7f5 f89f 	bl	8001338 <__aeabi_dmul>
 800c1fa:	4a3b      	ldr	r2, [pc, #236]	; (800c2e8 <__kernel_cos+0x14c>)
 800c1fc:	4b3b      	ldr	r3, [pc, #236]	; (800c2ec <__kernel_cos+0x150>)
 800c1fe:	f7f5 fb5d 	bl	80018bc <__aeabi_dsub>
 800c202:	0022      	movs	r2, r4
 800c204:	002b      	movs	r3, r5
 800c206:	f7f5 f897 	bl	8001338 <__aeabi_dmul>
 800c20a:	4a39      	ldr	r2, [pc, #228]	; (800c2f0 <__kernel_cos+0x154>)
 800c20c:	4b39      	ldr	r3, [pc, #228]	; (800c2f4 <__kernel_cos+0x158>)
 800c20e:	f7f4 f939 	bl	8000484 <__aeabi_dadd>
 800c212:	0022      	movs	r2, r4
 800c214:	002b      	movs	r3, r5
 800c216:	f7f5 f88f 	bl	8001338 <__aeabi_dmul>
 800c21a:	4a37      	ldr	r2, [pc, #220]	; (800c2f8 <__kernel_cos+0x15c>)
 800c21c:	4b37      	ldr	r3, [pc, #220]	; (800c2fc <__kernel_cos+0x160>)
 800c21e:	f7f5 fb4d 	bl	80018bc <__aeabi_dsub>
 800c222:	0022      	movs	r2, r4
 800c224:	002b      	movs	r3, r5
 800c226:	f7f5 f887 	bl	8001338 <__aeabi_dmul>
 800c22a:	4a35      	ldr	r2, [pc, #212]	; (800c300 <__kernel_cos+0x164>)
 800c22c:	4b35      	ldr	r3, [pc, #212]	; (800c304 <__kernel_cos+0x168>)
 800c22e:	f7f4 f929 	bl	8000484 <__aeabi_dadd>
 800c232:	0022      	movs	r2, r4
 800c234:	002b      	movs	r3, r5
 800c236:	f7f5 f87f 	bl	8001338 <__aeabi_dmul>
 800c23a:	0022      	movs	r2, r4
 800c23c:	002b      	movs	r3, r5
 800c23e:	f7f5 f87b 	bl	8001338 <__aeabi_dmul>
 800c242:	9a04      	ldr	r2, [sp, #16]
 800c244:	9b05      	ldr	r3, [sp, #20]
 800c246:	0004      	movs	r4, r0
 800c248:	000d      	movs	r5, r1
 800c24a:	0038      	movs	r0, r7
 800c24c:	0031      	movs	r1, r6
 800c24e:	f7f5 f873 	bl	8001338 <__aeabi_dmul>
 800c252:	0002      	movs	r2, r0
 800c254:	000b      	movs	r3, r1
 800c256:	0020      	movs	r0, r4
 800c258:	0029      	movs	r1, r5
 800c25a:	f7f5 fb2f 	bl	80018bc <__aeabi_dsub>
 800c25e:	4b2a      	ldr	r3, [pc, #168]	; (800c308 <__kernel_cos+0x16c>)
 800c260:	9a00      	ldr	r2, [sp, #0]
 800c262:	0004      	movs	r4, r0
 800c264:	000d      	movs	r5, r1
 800c266:	429a      	cmp	r2, r3
 800c268:	dc0d      	bgt.n	800c286 <__kernel_cos+0xea>
 800c26a:	0002      	movs	r2, r0
 800c26c:	000b      	movs	r3, r1
 800c26e:	9802      	ldr	r0, [sp, #8]
 800c270:	9903      	ldr	r1, [sp, #12]
 800c272:	f7f5 fb23 	bl	80018bc <__aeabi_dsub>
 800c276:	0002      	movs	r2, r0
 800c278:	2000      	movs	r0, #0
 800c27a:	000b      	movs	r3, r1
 800c27c:	4923      	ldr	r1, [pc, #140]	; (800c30c <__kernel_cos+0x170>)
 800c27e:	f7f5 fb1d 	bl	80018bc <__aeabi_dsub>
 800c282:	b007      	add	sp, #28
 800c284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c286:	4b22      	ldr	r3, [pc, #136]	; (800c310 <__kernel_cos+0x174>)
 800c288:	9a00      	ldr	r2, [sp, #0]
 800c28a:	2600      	movs	r6, #0
 800c28c:	429a      	cmp	r2, r3
 800c28e:	dc1b      	bgt.n	800c2c8 <__kernel_cos+0x12c>
 800c290:	0013      	movs	r3, r2
 800c292:	4a20      	ldr	r2, [pc, #128]	; (800c314 <__kernel_cos+0x178>)
 800c294:	4694      	mov	ip, r2
 800c296:	4463      	add	r3, ip
 800c298:	001f      	movs	r7, r3
 800c29a:	0032      	movs	r2, r6
 800c29c:	003b      	movs	r3, r7
 800c29e:	2000      	movs	r0, #0
 800c2a0:	491a      	ldr	r1, [pc, #104]	; (800c30c <__kernel_cos+0x170>)
 800c2a2:	f7f5 fb0b 	bl	80018bc <__aeabi_dsub>
 800c2a6:	0032      	movs	r2, r6
 800c2a8:	003b      	movs	r3, r7
 800c2aa:	9000      	str	r0, [sp, #0]
 800c2ac:	9101      	str	r1, [sp, #4]
 800c2ae:	9802      	ldr	r0, [sp, #8]
 800c2b0:	9903      	ldr	r1, [sp, #12]
 800c2b2:	f7f5 fb03 	bl	80018bc <__aeabi_dsub>
 800c2b6:	0022      	movs	r2, r4
 800c2b8:	002b      	movs	r3, r5
 800c2ba:	f7f5 faff 	bl	80018bc <__aeabi_dsub>
 800c2be:	0002      	movs	r2, r0
 800c2c0:	000b      	movs	r3, r1
 800c2c2:	9800      	ldr	r0, [sp, #0]
 800c2c4:	9901      	ldr	r1, [sp, #4]
 800c2c6:	e7da      	b.n	800c27e <__kernel_cos+0xe2>
 800c2c8:	4f13      	ldr	r7, [pc, #76]	; (800c318 <__kernel_cos+0x17c>)
 800c2ca:	e7e6      	b.n	800c29a <__kernel_cos+0xfe>
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	490f      	ldr	r1, [pc, #60]	; (800c30c <__kernel_cos+0x170>)
 800c2d0:	e7d7      	b.n	800c282 <__kernel_cos+0xe6>
 800c2d2:	46c0      	nop			; (mov r8, r8)
 800c2d4:	3fe00000 	.word	0x3fe00000
 800c2d8:	be8838d4 	.word	0xbe8838d4
 800c2dc:	bda8fae9 	.word	0xbda8fae9
 800c2e0:	bdb4b1c4 	.word	0xbdb4b1c4
 800c2e4:	3e21ee9e 	.word	0x3e21ee9e
 800c2e8:	809c52ad 	.word	0x809c52ad
 800c2ec:	3e927e4f 	.word	0x3e927e4f
 800c2f0:	19cb1590 	.word	0x19cb1590
 800c2f4:	3efa01a0 	.word	0x3efa01a0
 800c2f8:	16c15177 	.word	0x16c15177
 800c2fc:	3f56c16c 	.word	0x3f56c16c
 800c300:	5555554c 	.word	0x5555554c
 800c304:	3fa55555 	.word	0x3fa55555
 800c308:	3fd33332 	.word	0x3fd33332
 800c30c:	3ff00000 	.word	0x3ff00000
 800c310:	3fe90000 	.word	0x3fe90000
 800c314:	ffe00000 	.word	0xffe00000
 800c318:	3fd20000 	.word	0x3fd20000

0800c31c <__kernel_sin>:
 800c31c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c31e:	b089      	sub	sp, #36	; 0x24
 800c320:	9202      	str	r2, [sp, #8]
 800c322:	9303      	str	r3, [sp, #12]
 800c324:	22f9      	movs	r2, #249	; 0xf9
 800c326:	004b      	lsls	r3, r1, #1
 800c328:	0007      	movs	r7, r0
 800c32a:	000e      	movs	r6, r1
 800c32c:	085b      	lsrs	r3, r3, #1
 800c32e:	0592      	lsls	r2, r2, #22
 800c330:	4293      	cmp	r3, r2
 800c332:	da03      	bge.n	800c33c <__kernel_sin+0x20>
 800c334:	f7f5 fe62 	bl	8001ffc <__aeabi_d2iz>
 800c338:	2800      	cmp	r0, #0
 800c33a:	d04c      	beq.n	800c3d6 <__kernel_sin+0xba>
 800c33c:	003a      	movs	r2, r7
 800c33e:	0033      	movs	r3, r6
 800c340:	0038      	movs	r0, r7
 800c342:	0031      	movs	r1, r6
 800c344:	f7f4 fff8 	bl	8001338 <__aeabi_dmul>
 800c348:	0004      	movs	r4, r0
 800c34a:	000d      	movs	r5, r1
 800c34c:	0002      	movs	r2, r0
 800c34e:	000b      	movs	r3, r1
 800c350:	0038      	movs	r0, r7
 800c352:	0031      	movs	r1, r6
 800c354:	f7f4 fff0 	bl	8001338 <__aeabi_dmul>
 800c358:	4a39      	ldr	r2, [pc, #228]	; (800c440 <__kernel_sin+0x124>)
 800c35a:	9000      	str	r0, [sp, #0]
 800c35c:	9101      	str	r1, [sp, #4]
 800c35e:	4b39      	ldr	r3, [pc, #228]	; (800c444 <__kernel_sin+0x128>)
 800c360:	0020      	movs	r0, r4
 800c362:	0029      	movs	r1, r5
 800c364:	f7f4 ffe8 	bl	8001338 <__aeabi_dmul>
 800c368:	4a37      	ldr	r2, [pc, #220]	; (800c448 <__kernel_sin+0x12c>)
 800c36a:	4b38      	ldr	r3, [pc, #224]	; (800c44c <__kernel_sin+0x130>)
 800c36c:	f7f5 faa6 	bl	80018bc <__aeabi_dsub>
 800c370:	0022      	movs	r2, r4
 800c372:	002b      	movs	r3, r5
 800c374:	f7f4 ffe0 	bl	8001338 <__aeabi_dmul>
 800c378:	4a35      	ldr	r2, [pc, #212]	; (800c450 <__kernel_sin+0x134>)
 800c37a:	4b36      	ldr	r3, [pc, #216]	; (800c454 <__kernel_sin+0x138>)
 800c37c:	f7f4 f882 	bl	8000484 <__aeabi_dadd>
 800c380:	0022      	movs	r2, r4
 800c382:	002b      	movs	r3, r5
 800c384:	f7f4 ffd8 	bl	8001338 <__aeabi_dmul>
 800c388:	4a33      	ldr	r2, [pc, #204]	; (800c458 <__kernel_sin+0x13c>)
 800c38a:	4b34      	ldr	r3, [pc, #208]	; (800c45c <__kernel_sin+0x140>)
 800c38c:	f7f5 fa96 	bl	80018bc <__aeabi_dsub>
 800c390:	0022      	movs	r2, r4
 800c392:	002b      	movs	r3, r5
 800c394:	f7f4 ffd0 	bl	8001338 <__aeabi_dmul>
 800c398:	4b31      	ldr	r3, [pc, #196]	; (800c460 <__kernel_sin+0x144>)
 800c39a:	4a32      	ldr	r2, [pc, #200]	; (800c464 <__kernel_sin+0x148>)
 800c39c:	f7f4 f872 	bl	8000484 <__aeabi_dadd>
 800c3a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3a2:	9004      	str	r0, [sp, #16]
 800c3a4:	9105      	str	r1, [sp, #20]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d119      	bne.n	800c3de <__kernel_sin+0xc2>
 800c3aa:	0002      	movs	r2, r0
 800c3ac:	000b      	movs	r3, r1
 800c3ae:	0020      	movs	r0, r4
 800c3b0:	0029      	movs	r1, r5
 800c3b2:	f7f4 ffc1 	bl	8001338 <__aeabi_dmul>
 800c3b6:	4a2c      	ldr	r2, [pc, #176]	; (800c468 <__kernel_sin+0x14c>)
 800c3b8:	4b2c      	ldr	r3, [pc, #176]	; (800c46c <__kernel_sin+0x150>)
 800c3ba:	f7f5 fa7f 	bl	80018bc <__aeabi_dsub>
 800c3be:	9a00      	ldr	r2, [sp, #0]
 800c3c0:	9b01      	ldr	r3, [sp, #4]
 800c3c2:	f7f4 ffb9 	bl	8001338 <__aeabi_dmul>
 800c3c6:	0002      	movs	r2, r0
 800c3c8:	000b      	movs	r3, r1
 800c3ca:	0038      	movs	r0, r7
 800c3cc:	0031      	movs	r1, r6
 800c3ce:	f7f4 f859 	bl	8000484 <__aeabi_dadd>
 800c3d2:	0007      	movs	r7, r0
 800c3d4:	000e      	movs	r6, r1
 800c3d6:	0038      	movs	r0, r7
 800c3d8:	0031      	movs	r1, r6
 800c3da:	b009      	add	sp, #36	; 0x24
 800c3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3de:	2200      	movs	r2, #0
 800c3e0:	9802      	ldr	r0, [sp, #8]
 800c3e2:	9903      	ldr	r1, [sp, #12]
 800c3e4:	4b22      	ldr	r3, [pc, #136]	; (800c470 <__kernel_sin+0x154>)
 800c3e6:	f7f4 ffa7 	bl	8001338 <__aeabi_dmul>
 800c3ea:	9a04      	ldr	r2, [sp, #16]
 800c3ec:	9b05      	ldr	r3, [sp, #20]
 800c3ee:	9006      	str	r0, [sp, #24]
 800c3f0:	9107      	str	r1, [sp, #28]
 800c3f2:	9800      	ldr	r0, [sp, #0]
 800c3f4:	9901      	ldr	r1, [sp, #4]
 800c3f6:	f7f4 ff9f 	bl	8001338 <__aeabi_dmul>
 800c3fa:	0002      	movs	r2, r0
 800c3fc:	000b      	movs	r3, r1
 800c3fe:	9806      	ldr	r0, [sp, #24]
 800c400:	9907      	ldr	r1, [sp, #28]
 800c402:	f7f5 fa5b 	bl	80018bc <__aeabi_dsub>
 800c406:	0022      	movs	r2, r4
 800c408:	002b      	movs	r3, r5
 800c40a:	f7f4 ff95 	bl	8001338 <__aeabi_dmul>
 800c40e:	9a02      	ldr	r2, [sp, #8]
 800c410:	9b03      	ldr	r3, [sp, #12]
 800c412:	f7f5 fa53 	bl	80018bc <__aeabi_dsub>
 800c416:	4a14      	ldr	r2, [pc, #80]	; (800c468 <__kernel_sin+0x14c>)
 800c418:	0004      	movs	r4, r0
 800c41a:	000d      	movs	r5, r1
 800c41c:	9800      	ldr	r0, [sp, #0]
 800c41e:	9901      	ldr	r1, [sp, #4]
 800c420:	4b12      	ldr	r3, [pc, #72]	; (800c46c <__kernel_sin+0x150>)
 800c422:	f7f4 ff89 	bl	8001338 <__aeabi_dmul>
 800c426:	0002      	movs	r2, r0
 800c428:	000b      	movs	r3, r1
 800c42a:	0020      	movs	r0, r4
 800c42c:	0029      	movs	r1, r5
 800c42e:	f7f4 f829 	bl	8000484 <__aeabi_dadd>
 800c432:	0002      	movs	r2, r0
 800c434:	000b      	movs	r3, r1
 800c436:	0038      	movs	r0, r7
 800c438:	0031      	movs	r1, r6
 800c43a:	f7f5 fa3f 	bl	80018bc <__aeabi_dsub>
 800c43e:	e7c8      	b.n	800c3d2 <__kernel_sin+0xb6>
 800c440:	5acfd57c 	.word	0x5acfd57c
 800c444:	3de5d93a 	.word	0x3de5d93a
 800c448:	8a2b9ceb 	.word	0x8a2b9ceb
 800c44c:	3e5ae5e6 	.word	0x3e5ae5e6
 800c450:	57b1fe7d 	.word	0x57b1fe7d
 800c454:	3ec71de3 	.word	0x3ec71de3
 800c458:	19c161d5 	.word	0x19c161d5
 800c45c:	3f2a01a0 	.word	0x3f2a01a0
 800c460:	3f811111 	.word	0x3f811111
 800c464:	1110f8a6 	.word	0x1110f8a6
 800c468:	55555549 	.word	0x55555549
 800c46c:	3fc55555 	.word	0x3fc55555
 800c470:	3fe00000 	.word	0x3fe00000

0800c474 <__ieee754_rem_pio2>:
 800c474:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c476:	004b      	lsls	r3, r1, #1
 800c478:	b091      	sub	sp, #68	; 0x44
 800c47a:	085b      	lsrs	r3, r3, #1
 800c47c:	9302      	str	r3, [sp, #8]
 800c47e:	0017      	movs	r7, r2
 800c480:	4bb6      	ldr	r3, [pc, #728]	; (800c75c <__ieee754_rem_pio2+0x2e8>)
 800c482:	9a02      	ldr	r2, [sp, #8]
 800c484:	0004      	movs	r4, r0
 800c486:	000d      	movs	r5, r1
 800c488:	9109      	str	r1, [sp, #36]	; 0x24
 800c48a:	429a      	cmp	r2, r3
 800c48c:	dc09      	bgt.n	800c4a2 <__ieee754_rem_pio2+0x2e>
 800c48e:	0002      	movs	r2, r0
 800c490:	000b      	movs	r3, r1
 800c492:	603a      	str	r2, [r7, #0]
 800c494:	607b      	str	r3, [r7, #4]
 800c496:	2200      	movs	r2, #0
 800c498:	2300      	movs	r3, #0
 800c49a:	60ba      	str	r2, [r7, #8]
 800c49c:	60fb      	str	r3, [r7, #12]
 800c49e:	2600      	movs	r6, #0
 800c4a0:	e025      	b.n	800c4ee <__ieee754_rem_pio2+0x7a>
 800c4a2:	4baf      	ldr	r3, [pc, #700]	; (800c760 <__ieee754_rem_pio2+0x2ec>)
 800c4a4:	9a02      	ldr	r2, [sp, #8]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	dd00      	ble.n	800c4ac <__ieee754_rem_pio2+0x38>
 800c4aa:	e06e      	b.n	800c58a <__ieee754_rem_pio2+0x116>
 800c4ac:	4ead      	ldr	r6, [pc, #692]	; (800c764 <__ieee754_rem_pio2+0x2f0>)
 800c4ae:	4aae      	ldr	r2, [pc, #696]	; (800c768 <__ieee754_rem_pio2+0x2f4>)
 800c4b0:	2d00      	cmp	r5, #0
 800c4b2:	dd35      	ble.n	800c520 <__ieee754_rem_pio2+0xac>
 800c4b4:	0020      	movs	r0, r4
 800c4b6:	0029      	movs	r1, r5
 800c4b8:	4baa      	ldr	r3, [pc, #680]	; (800c764 <__ieee754_rem_pio2+0x2f0>)
 800c4ba:	f7f5 f9ff 	bl	80018bc <__aeabi_dsub>
 800c4be:	9b02      	ldr	r3, [sp, #8]
 800c4c0:	0004      	movs	r4, r0
 800c4c2:	000d      	movs	r5, r1
 800c4c4:	42b3      	cmp	r3, r6
 800c4c6:	d015      	beq.n	800c4f4 <__ieee754_rem_pio2+0x80>
 800c4c8:	4aa8      	ldr	r2, [pc, #672]	; (800c76c <__ieee754_rem_pio2+0x2f8>)
 800c4ca:	4ba9      	ldr	r3, [pc, #676]	; (800c770 <__ieee754_rem_pio2+0x2fc>)
 800c4cc:	f7f5 f9f6 	bl	80018bc <__aeabi_dsub>
 800c4d0:	0002      	movs	r2, r0
 800c4d2:	000b      	movs	r3, r1
 800c4d4:	0020      	movs	r0, r4
 800c4d6:	603a      	str	r2, [r7, #0]
 800c4d8:	607b      	str	r3, [r7, #4]
 800c4da:	0029      	movs	r1, r5
 800c4dc:	f7f5 f9ee 	bl	80018bc <__aeabi_dsub>
 800c4e0:	4aa2      	ldr	r2, [pc, #648]	; (800c76c <__ieee754_rem_pio2+0x2f8>)
 800c4e2:	4ba3      	ldr	r3, [pc, #652]	; (800c770 <__ieee754_rem_pio2+0x2fc>)
 800c4e4:	f7f5 f9ea 	bl	80018bc <__aeabi_dsub>
 800c4e8:	2601      	movs	r6, #1
 800c4ea:	60b8      	str	r0, [r7, #8]
 800c4ec:	60f9      	str	r1, [r7, #12]
 800c4ee:	0030      	movs	r0, r6
 800c4f0:	b011      	add	sp, #68	; 0x44
 800c4f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4f4:	22d3      	movs	r2, #211	; 0xd3
 800c4f6:	4b9e      	ldr	r3, [pc, #632]	; (800c770 <__ieee754_rem_pio2+0x2fc>)
 800c4f8:	0552      	lsls	r2, r2, #21
 800c4fa:	f7f5 f9df 	bl	80018bc <__aeabi_dsub>
 800c4fe:	4a9d      	ldr	r2, [pc, #628]	; (800c774 <__ieee754_rem_pio2+0x300>)
 800c500:	4b9d      	ldr	r3, [pc, #628]	; (800c778 <__ieee754_rem_pio2+0x304>)
 800c502:	0004      	movs	r4, r0
 800c504:	000d      	movs	r5, r1
 800c506:	f7f5 f9d9 	bl	80018bc <__aeabi_dsub>
 800c50a:	0002      	movs	r2, r0
 800c50c:	000b      	movs	r3, r1
 800c50e:	0020      	movs	r0, r4
 800c510:	603a      	str	r2, [r7, #0]
 800c512:	607b      	str	r3, [r7, #4]
 800c514:	0029      	movs	r1, r5
 800c516:	f7f5 f9d1 	bl	80018bc <__aeabi_dsub>
 800c51a:	4a96      	ldr	r2, [pc, #600]	; (800c774 <__ieee754_rem_pio2+0x300>)
 800c51c:	4b96      	ldr	r3, [pc, #600]	; (800c778 <__ieee754_rem_pio2+0x304>)
 800c51e:	e7e1      	b.n	800c4e4 <__ieee754_rem_pio2+0x70>
 800c520:	0020      	movs	r0, r4
 800c522:	0029      	movs	r1, r5
 800c524:	4b8f      	ldr	r3, [pc, #572]	; (800c764 <__ieee754_rem_pio2+0x2f0>)
 800c526:	f7f3 ffad 	bl	8000484 <__aeabi_dadd>
 800c52a:	9b02      	ldr	r3, [sp, #8]
 800c52c:	0004      	movs	r4, r0
 800c52e:	000d      	movs	r5, r1
 800c530:	42b3      	cmp	r3, r6
 800c532:	d014      	beq.n	800c55e <__ieee754_rem_pio2+0xea>
 800c534:	4a8d      	ldr	r2, [pc, #564]	; (800c76c <__ieee754_rem_pio2+0x2f8>)
 800c536:	4b8e      	ldr	r3, [pc, #568]	; (800c770 <__ieee754_rem_pio2+0x2fc>)
 800c538:	f7f3 ffa4 	bl	8000484 <__aeabi_dadd>
 800c53c:	0002      	movs	r2, r0
 800c53e:	000b      	movs	r3, r1
 800c540:	0020      	movs	r0, r4
 800c542:	603a      	str	r2, [r7, #0]
 800c544:	607b      	str	r3, [r7, #4]
 800c546:	0029      	movs	r1, r5
 800c548:	f7f5 f9b8 	bl	80018bc <__aeabi_dsub>
 800c54c:	4a87      	ldr	r2, [pc, #540]	; (800c76c <__ieee754_rem_pio2+0x2f8>)
 800c54e:	4b88      	ldr	r3, [pc, #544]	; (800c770 <__ieee754_rem_pio2+0x2fc>)
 800c550:	f7f3 ff98 	bl	8000484 <__aeabi_dadd>
 800c554:	2601      	movs	r6, #1
 800c556:	60b8      	str	r0, [r7, #8]
 800c558:	60f9      	str	r1, [r7, #12]
 800c55a:	4276      	negs	r6, r6
 800c55c:	e7c7      	b.n	800c4ee <__ieee754_rem_pio2+0x7a>
 800c55e:	22d3      	movs	r2, #211	; 0xd3
 800c560:	4b83      	ldr	r3, [pc, #524]	; (800c770 <__ieee754_rem_pio2+0x2fc>)
 800c562:	0552      	lsls	r2, r2, #21
 800c564:	f7f3 ff8e 	bl	8000484 <__aeabi_dadd>
 800c568:	4a82      	ldr	r2, [pc, #520]	; (800c774 <__ieee754_rem_pio2+0x300>)
 800c56a:	4b83      	ldr	r3, [pc, #524]	; (800c778 <__ieee754_rem_pio2+0x304>)
 800c56c:	0004      	movs	r4, r0
 800c56e:	000d      	movs	r5, r1
 800c570:	f7f3 ff88 	bl	8000484 <__aeabi_dadd>
 800c574:	0002      	movs	r2, r0
 800c576:	000b      	movs	r3, r1
 800c578:	0020      	movs	r0, r4
 800c57a:	603a      	str	r2, [r7, #0]
 800c57c:	607b      	str	r3, [r7, #4]
 800c57e:	0029      	movs	r1, r5
 800c580:	f7f5 f99c 	bl	80018bc <__aeabi_dsub>
 800c584:	4a7b      	ldr	r2, [pc, #492]	; (800c774 <__ieee754_rem_pio2+0x300>)
 800c586:	4b7c      	ldr	r3, [pc, #496]	; (800c778 <__ieee754_rem_pio2+0x304>)
 800c588:	e7e2      	b.n	800c550 <__ieee754_rem_pio2+0xdc>
 800c58a:	4b7c      	ldr	r3, [pc, #496]	; (800c77c <__ieee754_rem_pio2+0x308>)
 800c58c:	9a02      	ldr	r2, [sp, #8]
 800c58e:	429a      	cmp	r2, r3
 800c590:	dd00      	ble.n	800c594 <__ieee754_rem_pio2+0x120>
 800c592:	e0d3      	b.n	800c73c <__ieee754_rem_pio2+0x2c8>
 800c594:	0020      	movs	r0, r4
 800c596:	0029      	movs	r1, r5
 800c598:	f7ff fccc 	bl	800bf34 <fabs>
 800c59c:	4a78      	ldr	r2, [pc, #480]	; (800c780 <__ieee754_rem_pio2+0x30c>)
 800c59e:	4b79      	ldr	r3, [pc, #484]	; (800c784 <__ieee754_rem_pio2+0x310>)
 800c5a0:	0004      	movs	r4, r0
 800c5a2:	000d      	movs	r5, r1
 800c5a4:	f7f4 fec8 	bl	8001338 <__aeabi_dmul>
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	4b77      	ldr	r3, [pc, #476]	; (800c788 <__ieee754_rem_pio2+0x314>)
 800c5ac:	f7f3 ff6a 	bl	8000484 <__aeabi_dadd>
 800c5b0:	f7f5 fd24 	bl	8001ffc <__aeabi_d2iz>
 800c5b4:	0006      	movs	r6, r0
 800c5b6:	f7f5 fd57 	bl	8002068 <__aeabi_i2d>
 800c5ba:	4a6b      	ldr	r2, [pc, #428]	; (800c768 <__ieee754_rem_pio2+0x2f4>)
 800c5bc:	4b69      	ldr	r3, [pc, #420]	; (800c764 <__ieee754_rem_pio2+0x2f0>)
 800c5be:	9006      	str	r0, [sp, #24]
 800c5c0:	9107      	str	r1, [sp, #28]
 800c5c2:	f7f4 feb9 	bl	8001338 <__aeabi_dmul>
 800c5c6:	0002      	movs	r2, r0
 800c5c8:	000b      	movs	r3, r1
 800c5ca:	0020      	movs	r0, r4
 800c5cc:	0029      	movs	r1, r5
 800c5ce:	f7f5 f975 	bl	80018bc <__aeabi_dsub>
 800c5d2:	4a66      	ldr	r2, [pc, #408]	; (800c76c <__ieee754_rem_pio2+0x2f8>)
 800c5d4:	9004      	str	r0, [sp, #16]
 800c5d6:	9105      	str	r1, [sp, #20]
 800c5d8:	9806      	ldr	r0, [sp, #24]
 800c5da:	9907      	ldr	r1, [sp, #28]
 800c5dc:	4b64      	ldr	r3, [pc, #400]	; (800c770 <__ieee754_rem_pio2+0x2fc>)
 800c5de:	f7f4 feab 	bl	8001338 <__aeabi_dmul>
 800c5e2:	0004      	movs	r4, r0
 800c5e4:	000d      	movs	r5, r1
 800c5e6:	2e1f      	cmp	r6, #31
 800c5e8:	dc0f      	bgt.n	800c60a <__ieee754_rem_pio2+0x196>
 800c5ea:	4b68      	ldr	r3, [pc, #416]	; (800c78c <__ieee754_rem_pio2+0x318>)
 800c5ec:	1e72      	subs	r2, r6, #1
 800c5ee:	0092      	lsls	r2, r2, #2
 800c5f0:	58d3      	ldr	r3, [r2, r3]
 800c5f2:	9a02      	ldr	r2, [sp, #8]
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d008      	beq.n	800c60a <__ieee754_rem_pio2+0x196>
 800c5f8:	9804      	ldr	r0, [sp, #16]
 800c5fa:	9905      	ldr	r1, [sp, #20]
 800c5fc:	0022      	movs	r2, r4
 800c5fe:	002b      	movs	r3, r5
 800c600:	f7f5 f95c 	bl	80018bc <__aeabi_dsub>
 800c604:	6038      	str	r0, [r7, #0]
 800c606:	6079      	str	r1, [r7, #4]
 800c608:	e012      	b.n	800c630 <__ieee754_rem_pio2+0x1bc>
 800c60a:	0022      	movs	r2, r4
 800c60c:	9804      	ldr	r0, [sp, #16]
 800c60e:	9905      	ldr	r1, [sp, #20]
 800c610:	002b      	movs	r3, r5
 800c612:	f7f5 f953 	bl	80018bc <__aeabi_dsub>
 800c616:	9b02      	ldr	r3, [sp, #8]
 800c618:	151b      	asrs	r3, r3, #20
 800c61a:	9308      	str	r3, [sp, #32]
 800c61c:	9a08      	ldr	r2, [sp, #32]
 800c61e:	004b      	lsls	r3, r1, #1
 800c620:	0d5b      	lsrs	r3, r3, #21
 800c622:	1ad3      	subs	r3, r2, r3
 800c624:	2b10      	cmp	r3, #16
 800c626:	dc21      	bgt.n	800c66c <__ieee754_rem_pio2+0x1f8>
 800c628:	0002      	movs	r2, r0
 800c62a:	000b      	movs	r3, r1
 800c62c:	603a      	str	r2, [r7, #0]
 800c62e:	607b      	str	r3, [r7, #4]
 800c630:	9804      	ldr	r0, [sp, #16]
 800c632:	9905      	ldr	r1, [sp, #20]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	683a      	ldr	r2, [r7, #0]
 800c638:	9302      	str	r3, [sp, #8]
 800c63a:	9b02      	ldr	r3, [sp, #8]
 800c63c:	f7f5 f93e 	bl	80018bc <__aeabi_dsub>
 800c640:	0022      	movs	r2, r4
 800c642:	002b      	movs	r3, r5
 800c644:	f7f5 f93a 	bl	80018bc <__aeabi_dsub>
 800c648:	000b      	movs	r3, r1
 800c64a:	0002      	movs	r2, r0
 800c64c:	60ba      	str	r2, [r7, #8]
 800c64e:	60fb      	str	r3, [r7, #12]
 800c650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c652:	2b00      	cmp	r3, #0
 800c654:	db00      	blt.n	800c658 <__ieee754_rem_pio2+0x1e4>
 800c656:	e74a      	b.n	800c4ee <__ieee754_rem_pio2+0x7a>
 800c658:	2380      	movs	r3, #128	; 0x80
 800c65a:	061b      	lsls	r3, r3, #24
 800c65c:	469c      	mov	ip, r3
 800c65e:	9c02      	ldr	r4, [sp, #8]
 800c660:	18c9      	adds	r1, r1, r3
 800c662:	4464      	add	r4, ip
 800c664:	607c      	str	r4, [r7, #4]
 800c666:	60b8      	str	r0, [r7, #8]
 800c668:	60f9      	str	r1, [r7, #12]
 800c66a:	e776      	b.n	800c55a <__ieee754_rem_pio2+0xe6>
 800c66c:	22d3      	movs	r2, #211	; 0xd3
 800c66e:	9806      	ldr	r0, [sp, #24]
 800c670:	9907      	ldr	r1, [sp, #28]
 800c672:	4b3f      	ldr	r3, [pc, #252]	; (800c770 <__ieee754_rem_pio2+0x2fc>)
 800c674:	0552      	lsls	r2, r2, #21
 800c676:	f7f4 fe5f 	bl	8001338 <__aeabi_dmul>
 800c67a:	0004      	movs	r4, r0
 800c67c:	000d      	movs	r5, r1
 800c67e:	0002      	movs	r2, r0
 800c680:	000b      	movs	r3, r1
 800c682:	9804      	ldr	r0, [sp, #16]
 800c684:	9905      	ldr	r1, [sp, #20]
 800c686:	f7f5 f919 	bl	80018bc <__aeabi_dsub>
 800c68a:	0002      	movs	r2, r0
 800c68c:	000b      	movs	r3, r1
 800c68e:	9002      	str	r0, [sp, #8]
 800c690:	9103      	str	r1, [sp, #12]
 800c692:	9804      	ldr	r0, [sp, #16]
 800c694:	9905      	ldr	r1, [sp, #20]
 800c696:	f7f5 f911 	bl	80018bc <__aeabi_dsub>
 800c69a:	0022      	movs	r2, r4
 800c69c:	002b      	movs	r3, r5
 800c69e:	f7f5 f90d 	bl	80018bc <__aeabi_dsub>
 800c6a2:	0004      	movs	r4, r0
 800c6a4:	000d      	movs	r5, r1
 800c6a6:	9806      	ldr	r0, [sp, #24]
 800c6a8:	9907      	ldr	r1, [sp, #28]
 800c6aa:	4a32      	ldr	r2, [pc, #200]	; (800c774 <__ieee754_rem_pio2+0x300>)
 800c6ac:	4b32      	ldr	r3, [pc, #200]	; (800c778 <__ieee754_rem_pio2+0x304>)
 800c6ae:	f7f4 fe43 	bl	8001338 <__aeabi_dmul>
 800c6b2:	0022      	movs	r2, r4
 800c6b4:	002b      	movs	r3, r5
 800c6b6:	f7f5 f901 	bl	80018bc <__aeabi_dsub>
 800c6ba:	0002      	movs	r2, r0
 800c6bc:	000b      	movs	r3, r1
 800c6be:	0004      	movs	r4, r0
 800c6c0:	000d      	movs	r5, r1
 800c6c2:	9802      	ldr	r0, [sp, #8]
 800c6c4:	9903      	ldr	r1, [sp, #12]
 800c6c6:	f7f5 f8f9 	bl	80018bc <__aeabi_dsub>
 800c6ca:	9a08      	ldr	r2, [sp, #32]
 800c6cc:	004b      	lsls	r3, r1, #1
 800c6ce:	0d5b      	lsrs	r3, r3, #21
 800c6d0:	1ad3      	subs	r3, r2, r3
 800c6d2:	2b31      	cmp	r3, #49	; 0x31
 800c6d4:	dc08      	bgt.n	800c6e8 <__ieee754_rem_pio2+0x274>
 800c6d6:	0002      	movs	r2, r0
 800c6d8:	000b      	movs	r3, r1
 800c6da:	603a      	str	r2, [r7, #0]
 800c6dc:	607b      	str	r3, [r7, #4]
 800c6de:	9a02      	ldr	r2, [sp, #8]
 800c6e0:	9b03      	ldr	r3, [sp, #12]
 800c6e2:	9204      	str	r2, [sp, #16]
 800c6e4:	9305      	str	r3, [sp, #20]
 800c6e6:	e7a3      	b.n	800c630 <__ieee754_rem_pio2+0x1bc>
 800c6e8:	22b8      	movs	r2, #184	; 0xb8
 800c6ea:	9806      	ldr	r0, [sp, #24]
 800c6ec:	9907      	ldr	r1, [sp, #28]
 800c6ee:	4b22      	ldr	r3, [pc, #136]	; (800c778 <__ieee754_rem_pio2+0x304>)
 800c6f0:	0592      	lsls	r2, r2, #22
 800c6f2:	f7f4 fe21 	bl	8001338 <__aeabi_dmul>
 800c6f6:	0004      	movs	r4, r0
 800c6f8:	000d      	movs	r5, r1
 800c6fa:	0002      	movs	r2, r0
 800c6fc:	000b      	movs	r3, r1
 800c6fe:	9802      	ldr	r0, [sp, #8]
 800c700:	9903      	ldr	r1, [sp, #12]
 800c702:	f7f5 f8db 	bl	80018bc <__aeabi_dsub>
 800c706:	0002      	movs	r2, r0
 800c708:	000b      	movs	r3, r1
 800c70a:	9004      	str	r0, [sp, #16]
 800c70c:	9105      	str	r1, [sp, #20]
 800c70e:	9802      	ldr	r0, [sp, #8]
 800c710:	9903      	ldr	r1, [sp, #12]
 800c712:	f7f5 f8d3 	bl	80018bc <__aeabi_dsub>
 800c716:	0022      	movs	r2, r4
 800c718:	002b      	movs	r3, r5
 800c71a:	f7f5 f8cf 	bl	80018bc <__aeabi_dsub>
 800c71e:	0004      	movs	r4, r0
 800c720:	000d      	movs	r5, r1
 800c722:	9806      	ldr	r0, [sp, #24]
 800c724:	9907      	ldr	r1, [sp, #28]
 800c726:	4a1a      	ldr	r2, [pc, #104]	; (800c790 <__ieee754_rem_pio2+0x31c>)
 800c728:	4b1a      	ldr	r3, [pc, #104]	; (800c794 <__ieee754_rem_pio2+0x320>)
 800c72a:	f7f4 fe05 	bl	8001338 <__aeabi_dmul>
 800c72e:	0022      	movs	r2, r4
 800c730:	002b      	movs	r3, r5
 800c732:	f7f5 f8c3 	bl	80018bc <__aeabi_dsub>
 800c736:	0004      	movs	r4, r0
 800c738:	000d      	movs	r5, r1
 800c73a:	e75d      	b.n	800c5f8 <__ieee754_rem_pio2+0x184>
 800c73c:	4b16      	ldr	r3, [pc, #88]	; (800c798 <__ieee754_rem_pio2+0x324>)
 800c73e:	9a02      	ldr	r2, [sp, #8]
 800c740:	429a      	cmp	r2, r3
 800c742:	dd2b      	ble.n	800c79c <__ieee754_rem_pio2+0x328>
 800c744:	0022      	movs	r2, r4
 800c746:	002b      	movs	r3, r5
 800c748:	0020      	movs	r0, r4
 800c74a:	0029      	movs	r1, r5
 800c74c:	f7f5 f8b6 	bl	80018bc <__aeabi_dsub>
 800c750:	60b8      	str	r0, [r7, #8]
 800c752:	60f9      	str	r1, [r7, #12]
 800c754:	6038      	str	r0, [r7, #0]
 800c756:	6079      	str	r1, [r7, #4]
 800c758:	e6a1      	b.n	800c49e <__ieee754_rem_pio2+0x2a>
 800c75a:	46c0      	nop			; (mov r8, r8)
 800c75c:	3fe921fb 	.word	0x3fe921fb
 800c760:	4002d97b 	.word	0x4002d97b
 800c764:	3ff921fb 	.word	0x3ff921fb
 800c768:	54400000 	.word	0x54400000
 800c76c:	1a626331 	.word	0x1a626331
 800c770:	3dd0b461 	.word	0x3dd0b461
 800c774:	2e037073 	.word	0x2e037073
 800c778:	3ba3198a 	.word	0x3ba3198a
 800c77c:	413921fb 	.word	0x413921fb
 800c780:	6dc9c883 	.word	0x6dc9c883
 800c784:	3fe45f30 	.word	0x3fe45f30
 800c788:	3fe00000 	.word	0x3fe00000
 800c78c:	0800d778 	.word	0x0800d778
 800c790:	252049c1 	.word	0x252049c1
 800c794:	397b839a 	.word	0x397b839a
 800c798:	7fefffff 	.word	0x7fefffff
 800c79c:	9a02      	ldr	r2, [sp, #8]
 800c79e:	0020      	movs	r0, r4
 800c7a0:	1516      	asrs	r6, r2, #20
 800c7a2:	4a29      	ldr	r2, [pc, #164]	; (800c848 <__ieee754_rem_pio2+0x3d4>)
 800c7a4:	18b6      	adds	r6, r6, r2
 800c7a6:	9a02      	ldr	r2, [sp, #8]
 800c7a8:	0533      	lsls	r3, r6, #20
 800c7aa:	1ad5      	subs	r5, r2, r3
 800c7ac:	0029      	movs	r1, r5
 800c7ae:	f7f5 fc25 	bl	8001ffc <__aeabi_d2iz>
 800c7b2:	f7f5 fc59 	bl	8002068 <__aeabi_i2d>
 800c7b6:	0002      	movs	r2, r0
 800c7b8:	000b      	movs	r3, r1
 800c7ba:	0020      	movs	r0, r4
 800c7bc:	0029      	movs	r1, r5
 800c7be:	920a      	str	r2, [sp, #40]	; 0x28
 800c7c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7c2:	f7f5 f87b 	bl	80018bc <__aeabi_dsub>
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	4b20      	ldr	r3, [pc, #128]	; (800c84c <__ieee754_rem_pio2+0x3d8>)
 800c7ca:	f7f4 fdb5 	bl	8001338 <__aeabi_dmul>
 800c7ce:	000d      	movs	r5, r1
 800c7d0:	0004      	movs	r4, r0
 800c7d2:	f7f5 fc13 	bl	8001ffc <__aeabi_d2iz>
 800c7d6:	f7f5 fc47 	bl	8002068 <__aeabi_i2d>
 800c7da:	0002      	movs	r2, r0
 800c7dc:	000b      	movs	r3, r1
 800c7de:	0020      	movs	r0, r4
 800c7e0:	0029      	movs	r1, r5
 800c7e2:	920c      	str	r2, [sp, #48]	; 0x30
 800c7e4:	930d      	str	r3, [sp, #52]	; 0x34
 800c7e6:	f7f5 f869 	bl	80018bc <__aeabi_dsub>
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	4b17      	ldr	r3, [pc, #92]	; (800c84c <__ieee754_rem_pio2+0x3d8>)
 800c7ee:	f7f4 fda3 	bl	8001338 <__aeabi_dmul>
 800c7f2:	2503      	movs	r5, #3
 800c7f4:	900e      	str	r0, [sp, #56]	; 0x38
 800c7f6:	910f      	str	r1, [sp, #60]	; 0x3c
 800c7f8:	ac0a      	add	r4, sp, #40	; 0x28
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	6920      	ldr	r0, [r4, #16]
 800c7fe:	6961      	ldr	r1, [r4, #20]
 800c800:	2300      	movs	r3, #0
 800c802:	9502      	str	r5, [sp, #8]
 800c804:	3c08      	subs	r4, #8
 800c806:	3d01      	subs	r5, #1
 800c808:	f7f3 fe0e 	bl	8000428 <__aeabi_dcmpeq>
 800c80c:	2800      	cmp	r0, #0
 800c80e:	d1f4      	bne.n	800c7fa <__ieee754_rem_pio2+0x386>
 800c810:	4b0f      	ldr	r3, [pc, #60]	; (800c850 <__ieee754_rem_pio2+0x3dc>)
 800c812:	0032      	movs	r2, r6
 800c814:	9301      	str	r3, [sp, #4]
 800c816:	2302      	movs	r3, #2
 800c818:	0039      	movs	r1, r7
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	a80a      	add	r0, sp, #40	; 0x28
 800c81e:	9b02      	ldr	r3, [sp, #8]
 800c820:	f000 f818 	bl	800c854 <__kernel_rem_pio2>
 800c824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c826:	0006      	movs	r6, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	db00      	blt.n	800c82e <__ieee754_rem_pio2+0x3ba>
 800c82c:	e65f      	b.n	800c4ee <__ieee754_rem_pio2+0x7a>
 800c82e:	2080      	movs	r0, #128	; 0x80
 800c830:	6879      	ldr	r1, [r7, #4]
 800c832:	683a      	ldr	r2, [r7, #0]
 800c834:	0600      	lsls	r0, r0, #24
 800c836:	180b      	adds	r3, r1, r0
 800c838:	68f9      	ldr	r1, [r7, #12]
 800c83a:	603a      	str	r2, [r7, #0]
 800c83c:	607b      	str	r3, [r7, #4]
 800c83e:	68ba      	ldr	r2, [r7, #8]
 800c840:	180b      	adds	r3, r1, r0
 800c842:	60ba      	str	r2, [r7, #8]
 800c844:	60fb      	str	r3, [r7, #12]
 800c846:	e688      	b.n	800c55a <__ieee754_rem_pio2+0xe6>
 800c848:	fffffbea 	.word	0xfffffbea
 800c84c:	41700000 	.word	0x41700000
 800c850:	0800d7f8 	.word	0x0800d7f8

0800c854 <__kernel_rem_pio2>:
 800c854:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c856:	4ccb      	ldr	r4, [pc, #812]	; (800cb84 <__kernel_rem_pio2+0x330>)
 800c858:	44a5      	add	sp, r4
 800c85a:	0014      	movs	r4, r2
 800c85c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800c85e:	930c      	str	r3, [sp, #48]	; 0x30
 800c860:	4bc9      	ldr	r3, [pc, #804]	; (800cb88 <__kernel_rem_pio2+0x334>)
 800c862:	0092      	lsls	r2, r2, #2
 800c864:	58d3      	ldr	r3, [r2, r3]
 800c866:	900d      	str	r0, [sp, #52]	; 0x34
 800c868:	9308      	str	r3, [sp, #32]
 800c86a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c86c:	9106      	str	r1, [sp, #24]
 800c86e:	3b01      	subs	r3, #1
 800c870:	930b      	str	r3, [sp, #44]	; 0x2c
 800c872:	2300      	movs	r3, #0
 800c874:	9300      	str	r3, [sp, #0]
 800c876:	0023      	movs	r3, r4
 800c878:	3314      	adds	r3, #20
 800c87a:	db04      	blt.n	800c886 <__kernel_rem_pio2+0x32>
 800c87c:	2118      	movs	r1, #24
 800c87e:	1ee0      	subs	r0, r4, #3
 800c880:	f7f3 fcd6 	bl	8000230 <__divsi3>
 800c884:	9000      	str	r0, [sp, #0]
 800c886:	9b00      	ldr	r3, [sp, #0]
 800c888:	ae24      	add	r6, sp, #144	; 0x90
 800c88a:	1c5a      	adds	r2, r3, #1
 800c88c:	2318      	movs	r3, #24
 800c88e:	425b      	negs	r3, r3
 800c890:	4353      	muls	r3, r2
 800c892:	191b      	adds	r3, r3, r4
 800c894:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c896:	9302      	str	r3, [sp, #8]
 800c898:	9b00      	ldr	r3, [sp, #0]
 800c89a:	1a9d      	subs	r5, r3, r2
 800c89c:	002c      	movs	r4, r5
 800c89e:	9b08      	ldr	r3, [sp, #32]
 800c8a0:	189f      	adds	r7, r3, r2
 800c8a2:	1b63      	subs	r3, r4, r5
 800c8a4:	429f      	cmp	r7, r3
 800c8a6:	da0f      	bge.n	800c8c8 <__kernel_rem_pio2+0x74>
 800c8a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c8aa:	af74      	add	r7, sp, #464	; 0x1d0
 800c8ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8ae:	9a08      	ldr	r2, [sp, #32]
 800c8b0:	1af3      	subs	r3, r6, r3
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	db30      	blt.n	800c918 <__kernel_rem_pio2+0xc4>
 800c8b6:	ab24      	add	r3, sp, #144	; 0x90
 800c8b8:	00f4      	lsls	r4, r6, #3
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	18e4      	adds	r4, r4, r3
 800c8be:	2300      	movs	r3, #0
 800c8c0:	2500      	movs	r5, #0
 800c8c2:	9204      	str	r2, [sp, #16]
 800c8c4:	9305      	str	r3, [sp, #20]
 800c8c6:	e01e      	b.n	800c906 <__kernel_rem_pio2+0xb2>
 800c8c8:	2c00      	cmp	r4, #0
 800c8ca:	db07      	blt.n	800c8dc <__kernel_rem_pio2+0x88>
 800c8cc:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 800c8ce:	00a3      	lsls	r3, r4, #2
 800c8d0:	58d0      	ldr	r0, [r2, r3]
 800c8d2:	f7f5 fbc9 	bl	8002068 <__aeabi_i2d>
 800c8d6:	c603      	stmia	r6!, {r0, r1}
 800c8d8:	3401      	adds	r4, #1
 800c8da:	e7e2      	b.n	800c8a2 <__kernel_rem_pio2+0x4e>
 800c8dc:	2000      	movs	r0, #0
 800c8de:	2100      	movs	r1, #0
 800c8e0:	e7f9      	b.n	800c8d6 <__kernel_rem_pio2+0x82>
 800c8e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8e4:	00e9      	lsls	r1, r5, #3
 800c8e6:	1859      	adds	r1, r3, r1
 800c8e8:	6808      	ldr	r0, [r1, #0]
 800c8ea:	6849      	ldr	r1, [r1, #4]
 800c8ec:	6822      	ldr	r2, [r4, #0]
 800c8ee:	6863      	ldr	r3, [r4, #4]
 800c8f0:	f7f4 fd22 	bl	8001338 <__aeabi_dmul>
 800c8f4:	0002      	movs	r2, r0
 800c8f6:	000b      	movs	r3, r1
 800c8f8:	9804      	ldr	r0, [sp, #16]
 800c8fa:	9905      	ldr	r1, [sp, #20]
 800c8fc:	f7f3 fdc2 	bl	8000484 <__aeabi_dadd>
 800c900:	9004      	str	r0, [sp, #16]
 800c902:	9105      	str	r1, [sp, #20]
 800c904:	3501      	adds	r5, #1
 800c906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c908:	3c08      	subs	r4, #8
 800c90a:	429d      	cmp	r5, r3
 800c90c:	dde9      	ble.n	800c8e2 <__kernel_rem_pio2+0x8e>
 800c90e:	9b04      	ldr	r3, [sp, #16]
 800c910:	9c05      	ldr	r4, [sp, #20]
 800c912:	3601      	adds	r6, #1
 800c914:	c718      	stmia	r7!, {r3, r4}
 800c916:	e7c9      	b.n	800c8ac <__kernel_rem_pio2+0x58>
 800c918:	9b08      	ldr	r3, [sp, #32]
 800c91a:	aa10      	add	r2, sp, #64	; 0x40
 800c91c:	009b      	lsls	r3, r3, #2
 800c91e:	189b      	adds	r3, r3, r2
 800c920:	930f      	str	r3, [sp, #60]	; 0x3c
 800c922:	9b00      	ldr	r3, [sp, #0]
 800c924:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	18d3      	adds	r3, r2, r3
 800c92a:	930e      	str	r3, [sp, #56]	; 0x38
 800c92c:	9b08      	ldr	r3, [sp, #32]
 800c92e:	9304      	str	r3, [sp, #16]
 800c930:	9b04      	ldr	r3, [sp, #16]
 800c932:	aa74      	add	r2, sp, #464	; 0x1d0
 800c934:	00db      	lsls	r3, r3, #3
 800c936:	18d3      	adds	r3, r2, r3
 800c938:	681c      	ldr	r4, [r3, #0]
 800c93a:	685d      	ldr	r5, [r3, #4]
 800c93c:	ab10      	add	r3, sp, #64	; 0x40
 800c93e:	9300      	str	r3, [sp, #0]
 800c940:	930a      	str	r3, [sp, #40]	; 0x28
 800c942:	9b04      	ldr	r3, [sp, #16]
 800c944:	9307      	str	r3, [sp, #28]
 800c946:	9b07      	ldr	r3, [sp, #28]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	dc74      	bgt.n	800ca36 <__kernel_rem_pio2+0x1e2>
 800c94c:	0020      	movs	r0, r4
 800c94e:	0029      	movs	r1, r5
 800c950:	9a02      	ldr	r2, [sp, #8]
 800c952:	f000 faeb 	bl	800cf2c <scalbn>
 800c956:	23ff      	movs	r3, #255	; 0xff
 800c958:	2200      	movs	r2, #0
 800c95a:	059b      	lsls	r3, r3, #22
 800c95c:	0004      	movs	r4, r0
 800c95e:	000d      	movs	r5, r1
 800c960:	f7f4 fcea 	bl	8001338 <__aeabi_dmul>
 800c964:	f000 fb4c 	bl	800d000 <floor>
 800c968:	2200      	movs	r2, #0
 800c96a:	4b88      	ldr	r3, [pc, #544]	; (800cb8c <__kernel_rem_pio2+0x338>)
 800c96c:	f7f4 fce4 	bl	8001338 <__aeabi_dmul>
 800c970:	0002      	movs	r2, r0
 800c972:	000b      	movs	r3, r1
 800c974:	0020      	movs	r0, r4
 800c976:	0029      	movs	r1, r5
 800c978:	f7f4 ffa0 	bl	80018bc <__aeabi_dsub>
 800c97c:	000d      	movs	r5, r1
 800c97e:	0004      	movs	r4, r0
 800c980:	f7f5 fb3c 	bl	8001ffc <__aeabi_d2iz>
 800c984:	900a      	str	r0, [sp, #40]	; 0x28
 800c986:	f7f5 fb6f 	bl	8002068 <__aeabi_i2d>
 800c98a:	000b      	movs	r3, r1
 800c98c:	0002      	movs	r2, r0
 800c98e:	0029      	movs	r1, r5
 800c990:	0020      	movs	r0, r4
 800c992:	f7f4 ff93 	bl	80018bc <__aeabi_dsub>
 800c996:	9b02      	ldr	r3, [sp, #8]
 800c998:	0006      	movs	r6, r0
 800c99a:	000f      	movs	r7, r1
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	dd74      	ble.n	800ca8a <__kernel_rem_pio2+0x236>
 800c9a0:	2018      	movs	r0, #24
 800c9a2:	9b04      	ldr	r3, [sp, #16]
 800c9a4:	aa10      	add	r2, sp, #64	; 0x40
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	589a      	ldr	r2, [r3, r2]
 800c9ac:	9902      	ldr	r1, [sp, #8]
 800c9ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c9b0:	1a40      	subs	r0, r0, r1
 800c9b2:	0011      	movs	r1, r2
 800c9b4:	4101      	asrs	r1, r0
 800c9b6:	1864      	adds	r4, r4, r1
 800c9b8:	4081      	lsls	r1, r0
 800c9ba:	1a52      	subs	r2, r2, r1
 800c9bc:	a910      	add	r1, sp, #64	; 0x40
 800c9be:	505a      	str	r2, [r3, r1]
 800c9c0:	2317      	movs	r3, #23
 800c9c2:	9902      	ldr	r1, [sp, #8]
 800c9c4:	940a      	str	r4, [sp, #40]	; 0x28
 800c9c6:	1a5b      	subs	r3, r3, r1
 800c9c8:	411a      	asrs	r2, r3
 800c9ca:	9207      	str	r2, [sp, #28]
 800c9cc:	9b07      	ldr	r3, [sp, #28]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	dd6d      	ble.n	800caae <__kernel_rem_pio2+0x25a>
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9d6:	2080      	movs	r0, #128	; 0x80
 800c9d8:	3301      	adds	r3, #1
 800c9da:	930a      	str	r3, [sp, #40]	; 0x28
 800c9dc:	4b6c      	ldr	r3, [pc, #432]	; (800cb90 <__kernel_rem_pio2+0x33c>)
 800c9de:	0014      	movs	r4, r2
 800c9e0:	469c      	mov	ip, r3
 800c9e2:	2501      	movs	r5, #1
 800c9e4:	0440      	lsls	r0, r0, #17
 800c9e6:	9b04      	ldr	r3, [sp, #16]
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	dd00      	ble.n	800c9ee <__kernel_rem_pio2+0x19a>
 800c9ec:	e09b      	b.n	800cb26 <__kernel_rem_pio2+0x2d2>
 800c9ee:	9b02      	ldr	r3, [sp, #8]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	dd05      	ble.n	800ca00 <__kernel_rem_pio2+0x1ac>
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d100      	bne.n	800c9fa <__kernel_rem_pio2+0x1a6>
 800c9f8:	e0ab      	b.n	800cb52 <__kernel_rem_pio2+0x2fe>
 800c9fa:	2b02      	cmp	r3, #2
 800c9fc:	d100      	bne.n	800ca00 <__kernel_rem_pio2+0x1ac>
 800c9fe:	e0b2      	b.n	800cb66 <__kernel_rem_pio2+0x312>
 800ca00:	9b07      	ldr	r3, [sp, #28]
 800ca02:	2b02      	cmp	r3, #2
 800ca04:	d153      	bne.n	800caae <__kernel_rem_pio2+0x25a>
 800ca06:	0032      	movs	r2, r6
 800ca08:	003b      	movs	r3, r7
 800ca0a:	2000      	movs	r0, #0
 800ca0c:	4961      	ldr	r1, [pc, #388]	; (800cb94 <__kernel_rem_pio2+0x340>)
 800ca0e:	f7f4 ff55 	bl	80018bc <__aeabi_dsub>
 800ca12:	0006      	movs	r6, r0
 800ca14:	000f      	movs	r7, r1
 800ca16:	2c00      	cmp	r4, #0
 800ca18:	d049      	beq.n	800caae <__kernel_rem_pio2+0x25a>
 800ca1a:	9a02      	ldr	r2, [sp, #8]
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	495d      	ldr	r1, [pc, #372]	; (800cb94 <__kernel_rem_pio2+0x340>)
 800ca20:	f000 fa84 	bl	800cf2c <scalbn>
 800ca24:	0002      	movs	r2, r0
 800ca26:	000b      	movs	r3, r1
 800ca28:	0030      	movs	r0, r6
 800ca2a:	0039      	movs	r1, r7
 800ca2c:	f7f4 ff46 	bl	80018bc <__aeabi_dsub>
 800ca30:	0006      	movs	r6, r0
 800ca32:	000f      	movs	r7, r1
 800ca34:	e03b      	b.n	800caae <__kernel_rem_pio2+0x25a>
 800ca36:	2200      	movs	r2, #0
 800ca38:	4b57      	ldr	r3, [pc, #348]	; (800cb98 <__kernel_rem_pio2+0x344>)
 800ca3a:	0020      	movs	r0, r4
 800ca3c:	0029      	movs	r1, r5
 800ca3e:	f7f4 fc7b 	bl	8001338 <__aeabi_dmul>
 800ca42:	f7f5 fadb 	bl	8001ffc <__aeabi_d2iz>
 800ca46:	f7f5 fb0f 	bl	8002068 <__aeabi_i2d>
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	4b53      	ldr	r3, [pc, #332]	; (800cb9c <__kernel_rem_pio2+0x348>)
 800ca4e:	0006      	movs	r6, r0
 800ca50:	000f      	movs	r7, r1
 800ca52:	f7f4 fc71 	bl	8001338 <__aeabi_dmul>
 800ca56:	0002      	movs	r2, r0
 800ca58:	000b      	movs	r3, r1
 800ca5a:	0020      	movs	r0, r4
 800ca5c:	0029      	movs	r1, r5
 800ca5e:	f7f4 ff2d 	bl	80018bc <__aeabi_dsub>
 800ca62:	f7f5 facb 	bl	8001ffc <__aeabi_d2iz>
 800ca66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca68:	aa74      	add	r2, sp, #464	; 0x1d0
 800ca6a:	c301      	stmia	r3!, {r0}
 800ca6c:	930a      	str	r3, [sp, #40]	; 0x28
 800ca6e:	9b07      	ldr	r3, [sp, #28]
 800ca70:	0030      	movs	r0, r6
 800ca72:	3b01      	subs	r3, #1
 800ca74:	9307      	str	r3, [sp, #28]
 800ca76:	00db      	lsls	r3, r3, #3
 800ca78:	18d3      	adds	r3, r2, r3
 800ca7a:	0039      	movs	r1, r7
 800ca7c:	681a      	ldr	r2, [r3, #0]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	f7f3 fd00 	bl	8000484 <__aeabi_dadd>
 800ca84:	0004      	movs	r4, r0
 800ca86:	000d      	movs	r5, r1
 800ca88:	e75d      	b.n	800c946 <__kernel_rem_pio2+0xf2>
 800ca8a:	9b02      	ldr	r3, [sp, #8]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d107      	bne.n	800caa0 <__kernel_rem_pio2+0x24c>
 800ca90:	9b04      	ldr	r3, [sp, #16]
 800ca92:	aa10      	add	r2, sp, #64	; 0x40
 800ca94:	3b01      	subs	r3, #1
 800ca96:	009b      	lsls	r3, r3, #2
 800ca98:	589b      	ldr	r3, [r3, r2]
 800ca9a:	15db      	asrs	r3, r3, #23
 800ca9c:	9307      	str	r3, [sp, #28]
 800ca9e:	e795      	b.n	800c9cc <__kernel_rem_pio2+0x178>
 800caa0:	2200      	movs	r2, #0
 800caa2:	4b3f      	ldr	r3, [pc, #252]	; (800cba0 <__kernel_rem_pio2+0x34c>)
 800caa4:	f7f3 fce4 	bl	8000470 <__aeabi_dcmpge>
 800caa8:	2800      	cmp	r0, #0
 800caaa:	d139      	bne.n	800cb20 <__kernel_rem_pio2+0x2cc>
 800caac:	9007      	str	r0, [sp, #28]
 800caae:	2200      	movs	r2, #0
 800cab0:	2300      	movs	r3, #0
 800cab2:	0030      	movs	r0, r6
 800cab4:	0039      	movs	r1, r7
 800cab6:	f7f3 fcb7 	bl	8000428 <__aeabi_dcmpeq>
 800caba:	2800      	cmp	r0, #0
 800cabc:	d100      	bne.n	800cac0 <__kernel_rem_pio2+0x26c>
 800cabe:	e0bc      	b.n	800cc3a <__kernel_rem_pio2+0x3e6>
 800cac0:	2200      	movs	r2, #0
 800cac2:	9b04      	ldr	r3, [sp, #16]
 800cac4:	3b01      	subs	r3, #1
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	9908      	ldr	r1, [sp, #32]
 800caca:	428b      	cmp	r3, r1
 800cacc:	da53      	bge.n	800cb76 <__kernel_rem_pio2+0x322>
 800cace:	2a00      	cmp	r2, #0
 800cad0:	d100      	bne.n	800cad4 <__kernel_rem_pio2+0x280>
 800cad2:	e098      	b.n	800cc06 <__kernel_rem_pio2+0x3b2>
 800cad4:	9b02      	ldr	r3, [sp, #8]
 800cad6:	aa10      	add	r2, sp, #64	; 0x40
 800cad8:	3b18      	subs	r3, #24
 800cada:	9302      	str	r3, [sp, #8]
 800cadc:	9b00      	ldr	r3, [sp, #0]
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	589b      	ldr	r3, [r3, r2]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d100      	bne.n	800cae8 <__kernel_rem_pio2+0x294>
 800cae6:	e0a4      	b.n	800cc32 <__kernel_rem_pio2+0x3de>
 800cae8:	2000      	movs	r0, #0
 800caea:	9a02      	ldr	r2, [sp, #8]
 800caec:	4929      	ldr	r1, [pc, #164]	; (800cb94 <__kernel_rem_pio2+0x340>)
 800caee:	f000 fa1d 	bl	800cf2c <scalbn>
 800caf2:	0006      	movs	r6, r0
 800caf4:	000f      	movs	r7, r1
 800caf6:	9c00      	ldr	r4, [sp, #0]
 800caf8:	2c00      	cmp	r4, #0
 800cafa:	db00      	blt.n	800cafe <__kernel_rem_pio2+0x2aa>
 800cafc:	e0dc      	b.n	800ccb8 <__kernel_rem_pio2+0x464>
 800cafe:	4b29      	ldr	r3, [pc, #164]	; (800cba4 <__kernel_rem_pio2+0x350>)
 800cb00:	9c00      	ldr	r4, [sp, #0]
 800cb02:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb04:	2c00      	cmp	r4, #0
 800cb06:	da00      	bge.n	800cb0a <__kernel_rem_pio2+0x2b6>
 800cb08:	e10f      	b.n	800cd2a <__kernel_rem_pio2+0x4d6>
 800cb0a:	00e6      	lsls	r6, r4, #3
 800cb0c:	ab74      	add	r3, sp, #464	; 0x1d0
 800cb0e:	18f3      	adds	r3, r6, r3
 800cb10:	9302      	str	r3, [sp, #8]
 800cb12:	9b00      	ldr	r3, [sp, #0]
 800cb14:	2600      	movs	r6, #0
 800cb16:	1b1b      	subs	r3, r3, r4
 800cb18:	2700      	movs	r7, #0
 800cb1a:	2500      	movs	r5, #0
 800cb1c:	9304      	str	r3, [sp, #16]
 800cb1e:	e0f6      	b.n	800cd0e <__kernel_rem_pio2+0x4ba>
 800cb20:	2302      	movs	r3, #2
 800cb22:	9307      	str	r3, [sp, #28]
 800cb24:	e755      	b.n	800c9d2 <__kernel_rem_pio2+0x17e>
 800cb26:	9b00      	ldr	r3, [sp, #0]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2c00      	cmp	r4, #0
 800cb2c:	d10b      	bne.n	800cb46 <__kernel_rem_pio2+0x2f2>
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d003      	beq.n	800cb3a <__kernel_rem_pio2+0x2e6>
 800cb32:	9c00      	ldr	r4, [sp, #0]
 800cb34:	1ac3      	subs	r3, r0, r3
 800cb36:	6023      	str	r3, [r4, #0]
 800cb38:	002b      	movs	r3, r5
 800cb3a:	9c00      	ldr	r4, [sp, #0]
 800cb3c:	3201      	adds	r2, #1
 800cb3e:	3404      	adds	r4, #4
 800cb40:	9400      	str	r4, [sp, #0]
 800cb42:	001c      	movs	r4, r3
 800cb44:	e74f      	b.n	800c9e6 <__kernel_rem_pio2+0x192>
 800cb46:	4661      	mov	r1, ip
 800cb48:	1acb      	subs	r3, r1, r3
 800cb4a:	9900      	ldr	r1, [sp, #0]
 800cb4c:	600b      	str	r3, [r1, #0]
 800cb4e:	0023      	movs	r3, r4
 800cb50:	e7f3      	b.n	800cb3a <__kernel_rem_pio2+0x2e6>
 800cb52:	9b04      	ldr	r3, [sp, #16]
 800cb54:	aa10      	add	r2, sp, #64	; 0x40
 800cb56:	3b01      	subs	r3, #1
 800cb58:	009b      	lsls	r3, r3, #2
 800cb5a:	589a      	ldr	r2, [r3, r2]
 800cb5c:	0252      	lsls	r2, r2, #9
 800cb5e:	0a52      	lsrs	r2, r2, #9
 800cb60:	a910      	add	r1, sp, #64	; 0x40
 800cb62:	505a      	str	r2, [r3, r1]
 800cb64:	e74c      	b.n	800ca00 <__kernel_rem_pio2+0x1ac>
 800cb66:	9b04      	ldr	r3, [sp, #16]
 800cb68:	aa10      	add	r2, sp, #64	; 0x40
 800cb6a:	3b01      	subs	r3, #1
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	589a      	ldr	r2, [r3, r2]
 800cb70:	0292      	lsls	r2, r2, #10
 800cb72:	0a92      	lsrs	r2, r2, #10
 800cb74:	e7f4      	b.n	800cb60 <__kernel_rem_pio2+0x30c>
 800cb76:	0099      	lsls	r1, r3, #2
 800cb78:	a810      	add	r0, sp, #64	; 0x40
 800cb7a:	5809      	ldr	r1, [r1, r0]
 800cb7c:	3b01      	subs	r3, #1
 800cb7e:	430a      	orrs	r2, r1
 800cb80:	e7a2      	b.n	800cac8 <__kernel_rem_pio2+0x274>
 800cb82:	46c0      	nop			; (mov r8, r8)
 800cb84:	fffffd8c 	.word	0xfffffd8c
 800cb88:	0800d940 	.word	0x0800d940
 800cb8c:	40200000 	.word	0x40200000
 800cb90:	00ffffff 	.word	0x00ffffff
 800cb94:	3ff00000 	.word	0x3ff00000
 800cb98:	3e700000 	.word	0x3e700000
 800cb9c:	41700000 	.word	0x41700000
 800cba0:	3fe00000 	.word	0x3fe00000
 800cba4:	0800d900 	.word	0x0800d900
 800cba8:	3301      	adds	r3, #1
 800cbaa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cbac:	009a      	lsls	r2, r3, #2
 800cbae:	4252      	negs	r2, r2
 800cbb0:	588a      	ldr	r2, [r1, r2]
 800cbb2:	2a00      	cmp	r2, #0
 800cbb4:	d0f8      	beq.n	800cba8 <__kernel_rem_pio2+0x354>
 800cbb6:	9a04      	ldr	r2, [sp, #16]
 800cbb8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cbba:	1c57      	adds	r7, r2, #1
 800cbbc:	1854      	adds	r4, r2, r1
 800cbbe:	00e4      	lsls	r4, r4, #3
 800cbc0:	aa24      	add	r2, sp, #144	; 0x90
 800cbc2:	1914      	adds	r4, r2, r4
 800cbc4:	9a04      	ldr	r2, [sp, #16]
 800cbc6:	18d3      	adds	r3, r2, r3
 800cbc8:	9304      	str	r3, [sp, #16]
 800cbca:	9b04      	ldr	r3, [sp, #16]
 800cbcc:	42bb      	cmp	r3, r7
 800cbce:	da00      	bge.n	800cbd2 <__kernel_rem_pio2+0x37e>
 800cbd0:	e6ae      	b.n	800c930 <__kernel_rem_pio2+0xdc>
 800cbd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbd4:	00bb      	lsls	r3, r7, #2
 800cbd6:	58d0      	ldr	r0, [r2, r3]
 800cbd8:	f7f5 fa46 	bl	8002068 <__aeabi_i2d>
 800cbdc:	2200      	movs	r2, #0
 800cbde:	2300      	movs	r3, #0
 800cbe0:	0026      	movs	r6, r4
 800cbe2:	2500      	movs	r5, #0
 800cbe4:	6020      	str	r0, [r4, #0]
 800cbe6:	6061      	str	r1, [r4, #4]
 800cbe8:	9200      	str	r2, [sp, #0]
 800cbea:	9301      	str	r3, [sp, #4]
 800cbec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbee:	429d      	cmp	r5, r3
 800cbf0:	dd0b      	ble.n	800cc0a <__kernel_rem_pio2+0x3b6>
 800cbf2:	00fb      	lsls	r3, r7, #3
 800cbf4:	aa74      	add	r2, sp, #464	; 0x1d0
 800cbf6:	18d3      	adds	r3, r2, r3
 800cbf8:	3701      	adds	r7, #1
 800cbfa:	9900      	ldr	r1, [sp, #0]
 800cbfc:	9a01      	ldr	r2, [sp, #4]
 800cbfe:	3408      	adds	r4, #8
 800cc00:	6019      	str	r1, [r3, #0]
 800cc02:	605a      	str	r2, [r3, #4]
 800cc04:	e7e1      	b.n	800cbca <__kernel_rem_pio2+0x376>
 800cc06:	2301      	movs	r3, #1
 800cc08:	e7cf      	b.n	800cbaa <__kernel_rem_pio2+0x356>
 800cc0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc0c:	00e9      	lsls	r1, r5, #3
 800cc0e:	1859      	adds	r1, r3, r1
 800cc10:	6808      	ldr	r0, [r1, #0]
 800cc12:	6849      	ldr	r1, [r1, #4]
 800cc14:	6832      	ldr	r2, [r6, #0]
 800cc16:	6873      	ldr	r3, [r6, #4]
 800cc18:	f7f4 fb8e 	bl	8001338 <__aeabi_dmul>
 800cc1c:	0002      	movs	r2, r0
 800cc1e:	000b      	movs	r3, r1
 800cc20:	9800      	ldr	r0, [sp, #0]
 800cc22:	9901      	ldr	r1, [sp, #4]
 800cc24:	f7f3 fc2e 	bl	8000484 <__aeabi_dadd>
 800cc28:	3501      	adds	r5, #1
 800cc2a:	9000      	str	r0, [sp, #0]
 800cc2c:	9101      	str	r1, [sp, #4]
 800cc2e:	3e08      	subs	r6, #8
 800cc30:	e7dc      	b.n	800cbec <__kernel_rem_pio2+0x398>
 800cc32:	9b00      	ldr	r3, [sp, #0]
 800cc34:	3b01      	subs	r3, #1
 800cc36:	9300      	str	r3, [sp, #0]
 800cc38:	e74c      	b.n	800cad4 <__kernel_rem_pio2+0x280>
 800cc3a:	9b02      	ldr	r3, [sp, #8]
 800cc3c:	0030      	movs	r0, r6
 800cc3e:	425a      	negs	r2, r3
 800cc40:	0039      	movs	r1, r7
 800cc42:	f000 f973 	bl	800cf2c <scalbn>
 800cc46:	2200      	movs	r2, #0
 800cc48:	4bb6      	ldr	r3, [pc, #728]	; (800cf24 <__kernel_rem_pio2+0x6d0>)
 800cc4a:	0004      	movs	r4, r0
 800cc4c:	000d      	movs	r5, r1
 800cc4e:	f7f3 fc0f 	bl	8000470 <__aeabi_dcmpge>
 800cc52:	2800      	cmp	r0, #0
 800cc54:	d025      	beq.n	800cca2 <__kernel_rem_pio2+0x44e>
 800cc56:	2200      	movs	r2, #0
 800cc58:	4bb3      	ldr	r3, [pc, #716]	; (800cf28 <__kernel_rem_pio2+0x6d4>)
 800cc5a:	0020      	movs	r0, r4
 800cc5c:	0029      	movs	r1, r5
 800cc5e:	f7f4 fb6b 	bl	8001338 <__aeabi_dmul>
 800cc62:	f7f5 f9cb 	bl	8001ffc <__aeabi_d2iz>
 800cc66:	9b04      	ldr	r3, [sp, #16]
 800cc68:	0006      	movs	r6, r0
 800cc6a:	009f      	lsls	r7, r3, #2
 800cc6c:	f7f5 f9fc 	bl	8002068 <__aeabi_i2d>
 800cc70:	2200      	movs	r2, #0
 800cc72:	4bac      	ldr	r3, [pc, #688]	; (800cf24 <__kernel_rem_pio2+0x6d0>)
 800cc74:	f7f4 fb60 	bl	8001338 <__aeabi_dmul>
 800cc78:	0002      	movs	r2, r0
 800cc7a:	000b      	movs	r3, r1
 800cc7c:	0020      	movs	r0, r4
 800cc7e:	0029      	movs	r1, r5
 800cc80:	f7f4 fe1c 	bl	80018bc <__aeabi_dsub>
 800cc84:	f7f5 f9ba 	bl	8001ffc <__aeabi_d2iz>
 800cc88:	ab10      	add	r3, sp, #64	; 0x40
 800cc8a:	51d8      	str	r0, [r3, r7]
 800cc8c:	9b04      	ldr	r3, [sp, #16]
 800cc8e:	aa10      	add	r2, sp, #64	; 0x40
 800cc90:	3301      	adds	r3, #1
 800cc92:	9300      	str	r3, [sp, #0]
 800cc94:	9b02      	ldr	r3, [sp, #8]
 800cc96:	3318      	adds	r3, #24
 800cc98:	9302      	str	r3, [sp, #8]
 800cc9a:	9b00      	ldr	r3, [sp, #0]
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	509e      	str	r6, [r3, r2]
 800cca0:	e722      	b.n	800cae8 <__kernel_rem_pio2+0x294>
 800cca2:	9b04      	ldr	r3, [sp, #16]
 800cca4:	0020      	movs	r0, r4
 800cca6:	0029      	movs	r1, r5
 800cca8:	009e      	lsls	r6, r3, #2
 800ccaa:	f7f5 f9a7 	bl	8001ffc <__aeabi_d2iz>
 800ccae:	ab10      	add	r3, sp, #64	; 0x40
 800ccb0:	5198      	str	r0, [r3, r6]
 800ccb2:	9b04      	ldr	r3, [sp, #16]
 800ccb4:	9300      	str	r3, [sp, #0]
 800ccb6:	e717      	b.n	800cae8 <__kernel_rem_pio2+0x294>
 800ccb8:	00e5      	lsls	r5, r4, #3
 800ccba:	ab74      	add	r3, sp, #464	; 0x1d0
 800ccbc:	aa10      	add	r2, sp, #64	; 0x40
 800ccbe:	195d      	adds	r5, r3, r5
 800ccc0:	00a3      	lsls	r3, r4, #2
 800ccc2:	5898      	ldr	r0, [r3, r2]
 800ccc4:	f7f5 f9d0 	bl	8002068 <__aeabi_i2d>
 800ccc8:	0032      	movs	r2, r6
 800ccca:	003b      	movs	r3, r7
 800cccc:	f7f4 fb34 	bl	8001338 <__aeabi_dmul>
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	6028      	str	r0, [r5, #0]
 800ccd4:	6069      	str	r1, [r5, #4]
 800ccd6:	4b94      	ldr	r3, [pc, #592]	; (800cf28 <__kernel_rem_pio2+0x6d4>)
 800ccd8:	0030      	movs	r0, r6
 800ccda:	0039      	movs	r1, r7
 800ccdc:	f7f4 fb2c 	bl	8001338 <__aeabi_dmul>
 800cce0:	3c01      	subs	r4, #1
 800cce2:	0006      	movs	r6, r0
 800cce4:	000f      	movs	r7, r1
 800cce6:	e707      	b.n	800caf8 <__kernel_rem_pio2+0x2a4>
 800cce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccea:	9802      	ldr	r0, [sp, #8]
 800ccec:	00e9      	lsls	r1, r5, #3
 800ccee:	1859      	adds	r1, r3, r1
 800ccf0:	c80c      	ldmia	r0!, {r2, r3}
 800ccf2:	9002      	str	r0, [sp, #8]
 800ccf4:	6808      	ldr	r0, [r1, #0]
 800ccf6:	6849      	ldr	r1, [r1, #4]
 800ccf8:	f7f4 fb1e 	bl	8001338 <__aeabi_dmul>
 800ccfc:	0002      	movs	r2, r0
 800ccfe:	000b      	movs	r3, r1
 800cd00:	0030      	movs	r0, r6
 800cd02:	0039      	movs	r1, r7
 800cd04:	f7f3 fbbe 	bl	8000484 <__aeabi_dadd>
 800cd08:	0006      	movs	r6, r0
 800cd0a:	000f      	movs	r7, r1
 800cd0c:	3501      	adds	r5, #1
 800cd0e:	9b08      	ldr	r3, [sp, #32]
 800cd10:	429d      	cmp	r5, r3
 800cd12:	dc02      	bgt.n	800cd1a <__kernel_rem_pio2+0x4c6>
 800cd14:	9b04      	ldr	r3, [sp, #16]
 800cd16:	429d      	cmp	r5, r3
 800cd18:	dde6      	ble.n	800cce8 <__kernel_rem_pio2+0x494>
 800cd1a:	9b04      	ldr	r3, [sp, #16]
 800cd1c:	aa4c      	add	r2, sp, #304	; 0x130
 800cd1e:	00db      	lsls	r3, r3, #3
 800cd20:	18d3      	adds	r3, r2, r3
 800cd22:	601e      	str	r6, [r3, #0]
 800cd24:	605f      	str	r7, [r3, #4]
 800cd26:	3c01      	subs	r4, #1
 800cd28:	e6ec      	b.n	800cb04 <__kernel_rem_pio2+0x2b0>
 800cd2a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800cd2c:	2b02      	cmp	r3, #2
 800cd2e:	dc0e      	bgt.n	800cd4e <__kernel_rem_pio2+0x4fa>
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	dd00      	ble.n	800cd36 <__kernel_rem_pio2+0x4e2>
 800cd34:	e08c      	b.n	800ce50 <__kernel_rem_pio2+0x5fc>
 800cd36:	2500      	movs	r5, #0
 800cd38:	002c      	movs	r4, r5
 800cd3a:	42ab      	cmp	r3, r5
 800cd3c:	d046      	beq.n	800cdcc <__kernel_rem_pio2+0x578>
 800cd3e:	2007      	movs	r0, #7
 800cd40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd42:	4003      	ands	r3, r0
 800cd44:	0018      	movs	r0, r3
 800cd46:	239d      	movs	r3, #157	; 0x9d
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	449d      	add	sp, r3
 800cd4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd4e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800cd50:	2b03      	cmp	r3, #3
 800cd52:	d1f4      	bne.n	800cd3e <__kernel_rem_pio2+0x4ea>
 800cd54:	9b00      	ldr	r3, [sp, #0]
 800cd56:	aa4c      	add	r2, sp, #304	; 0x130
 800cd58:	00db      	lsls	r3, r3, #3
 800cd5a:	18d4      	adds	r4, r2, r3
 800cd5c:	0025      	movs	r5, r4
 800cd5e:	9b00      	ldr	r3, [sp, #0]
 800cd60:	9302      	str	r3, [sp, #8]
 800cd62:	9b02      	ldr	r3, [sp, #8]
 800cd64:	3d08      	subs	r5, #8
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	dd00      	ble.n	800cd6c <__kernel_rem_pio2+0x518>
 800cd6a:	e07f      	b.n	800ce6c <__kernel_rem_pio2+0x618>
 800cd6c:	9d00      	ldr	r5, [sp, #0]
 800cd6e:	3c08      	subs	r4, #8
 800cd70:	2d01      	cmp	r5, #1
 800cd72:	dd00      	ble.n	800cd76 <__kernel_rem_pio2+0x522>
 800cd74:	e09c      	b.n	800ceb0 <__kernel_rem_pio2+0x65c>
 800cd76:	2400      	movs	r4, #0
 800cd78:	0021      	movs	r1, r4
 800cd7a:	9b00      	ldr	r3, [sp, #0]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	dd00      	ble.n	800cd82 <__kernel_rem_pio2+0x52e>
 800cd80:	e0b4      	b.n	800ceec <__kernel_rem_pio2+0x698>
 800cd82:	9b07      	ldr	r3, [sp, #28]
 800cd84:	9f4c      	ldr	r7, [sp, #304]	; 0x130
 800cd86:	9e4d      	ldr	r6, [sp, #308]	; 0x134
 800cd88:	9d4e      	ldr	r5, [sp, #312]	; 0x138
 800cd8a:	984f      	ldr	r0, [sp, #316]	; 0x13c
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d000      	beq.n	800cd92 <__kernel_rem_pio2+0x53e>
 800cd90:	e0ba      	b.n	800cf08 <__kernel_rem_pio2+0x6b4>
 800cd92:	0033      	movs	r3, r6
 800cd94:	003a      	movs	r2, r7
 800cd96:	9e06      	ldr	r6, [sp, #24]
 800cd98:	6032      	str	r2, [r6, #0]
 800cd9a:	6073      	str	r3, [r6, #4]
 800cd9c:	002a      	movs	r2, r5
 800cd9e:	0003      	movs	r3, r0
 800cda0:	60b2      	str	r2, [r6, #8]
 800cda2:	60f3      	str	r3, [r6, #12]
 800cda4:	0022      	movs	r2, r4
 800cda6:	000b      	movs	r3, r1
 800cda8:	6132      	str	r2, [r6, #16]
 800cdaa:	6173      	str	r3, [r6, #20]
 800cdac:	e7c7      	b.n	800cd3e <__kernel_rem_pio2+0x4ea>
 800cdae:	9b00      	ldr	r3, [sp, #0]
 800cdb0:	aa4c      	add	r2, sp, #304	; 0x130
 800cdb2:	00db      	lsls	r3, r3, #3
 800cdb4:	18d3      	adds	r3, r2, r3
 800cdb6:	0028      	movs	r0, r5
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	0021      	movs	r1, r4
 800cdbe:	f7f3 fb61 	bl	8000484 <__aeabi_dadd>
 800cdc2:	0005      	movs	r5, r0
 800cdc4:	000c      	movs	r4, r1
 800cdc6:	9b00      	ldr	r3, [sp, #0]
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	9300      	str	r3, [sp, #0]
 800cdcc:	9b00      	ldr	r3, [sp, #0]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	daed      	bge.n	800cdae <__kernel_rem_pio2+0x55a>
 800cdd2:	9b07      	ldr	r3, [sp, #28]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d002      	beq.n	800cdde <__kernel_rem_pio2+0x58a>
 800cdd8:	2380      	movs	r3, #128	; 0x80
 800cdda:	061b      	lsls	r3, r3, #24
 800cddc:	18e4      	adds	r4, r4, r3
 800cdde:	002a      	movs	r2, r5
 800cde0:	0023      	movs	r3, r4
 800cde2:	9906      	ldr	r1, [sp, #24]
 800cde4:	600a      	str	r2, [r1, #0]
 800cde6:	604b      	str	r3, [r1, #4]
 800cde8:	e7a9      	b.n	800cd3e <__kernel_rem_pio2+0x4ea>
 800cdea:	00e3      	lsls	r3, r4, #3
 800cdec:	aa4c      	add	r2, sp, #304	; 0x130
 800cdee:	18d3      	adds	r3, r2, r3
 800cdf0:	0030      	movs	r0, r6
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	0029      	movs	r1, r5
 800cdf8:	f7f3 fb44 	bl	8000484 <__aeabi_dadd>
 800cdfc:	0006      	movs	r6, r0
 800cdfe:	000d      	movs	r5, r1
 800ce00:	3c01      	subs	r4, #1
 800ce02:	2c00      	cmp	r4, #0
 800ce04:	daf1      	bge.n	800cdea <__kernel_rem_pio2+0x596>
 800ce06:	9b07      	ldr	r3, [sp, #28]
 800ce08:	0029      	movs	r1, r5
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d002      	beq.n	800ce14 <__kernel_rem_pio2+0x5c0>
 800ce0e:	2380      	movs	r3, #128	; 0x80
 800ce10:	061b      	lsls	r3, r3, #24
 800ce12:	18e9      	adds	r1, r5, r3
 800ce14:	0032      	movs	r2, r6
 800ce16:	000b      	movs	r3, r1
 800ce18:	9906      	ldr	r1, [sp, #24]
 800ce1a:	2401      	movs	r4, #1
 800ce1c:	600a      	str	r2, [r1, #0]
 800ce1e:	604b      	str	r3, [r1, #4]
 800ce20:	984c      	ldr	r0, [sp, #304]	; 0x130
 800ce22:	994d      	ldr	r1, [sp, #308]	; 0x134
 800ce24:	002b      	movs	r3, r5
 800ce26:	f7f4 fd49 	bl	80018bc <__aeabi_dsub>
 800ce2a:	0007      	movs	r7, r0
 800ce2c:	000e      	movs	r6, r1
 800ce2e:	ad4c      	add	r5, sp, #304	; 0x130
 800ce30:	9b00      	ldr	r3, [sp, #0]
 800ce32:	3508      	adds	r5, #8
 800ce34:	42a3      	cmp	r3, r4
 800ce36:	da0f      	bge.n	800ce58 <__kernel_rem_pio2+0x604>
 800ce38:	9b07      	ldr	r3, [sp, #28]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d002      	beq.n	800ce44 <__kernel_rem_pio2+0x5f0>
 800ce3e:	2380      	movs	r3, #128	; 0x80
 800ce40:	061b      	lsls	r3, r3, #24
 800ce42:	18f6      	adds	r6, r6, r3
 800ce44:	003a      	movs	r2, r7
 800ce46:	0033      	movs	r3, r6
 800ce48:	9906      	ldr	r1, [sp, #24]
 800ce4a:	608a      	str	r2, [r1, #8]
 800ce4c:	60cb      	str	r3, [r1, #12]
 800ce4e:	e776      	b.n	800cd3e <__kernel_rem_pio2+0x4ea>
 800ce50:	2600      	movs	r6, #0
 800ce52:	9c00      	ldr	r4, [sp, #0]
 800ce54:	0035      	movs	r5, r6
 800ce56:	e7d4      	b.n	800ce02 <__kernel_rem_pio2+0x5ae>
 800ce58:	0038      	movs	r0, r7
 800ce5a:	682a      	ldr	r2, [r5, #0]
 800ce5c:	686b      	ldr	r3, [r5, #4]
 800ce5e:	0031      	movs	r1, r6
 800ce60:	f7f3 fb10 	bl	8000484 <__aeabi_dadd>
 800ce64:	3401      	adds	r4, #1
 800ce66:	0007      	movs	r7, r0
 800ce68:	000e      	movs	r6, r1
 800ce6a:	e7e1      	b.n	800ce30 <__kernel_rem_pio2+0x5dc>
 800ce6c:	9b02      	ldr	r3, [sp, #8]
 800ce6e:	68ae      	ldr	r6, [r5, #8]
 800ce70:	68ef      	ldr	r7, [r5, #12]
 800ce72:	3b01      	subs	r3, #1
 800ce74:	9302      	str	r3, [sp, #8]
 800ce76:	682a      	ldr	r2, [r5, #0]
 800ce78:	686b      	ldr	r3, [r5, #4]
 800ce7a:	9204      	str	r2, [sp, #16]
 800ce7c:	9305      	str	r3, [sp, #20]
 800ce7e:	9804      	ldr	r0, [sp, #16]
 800ce80:	9905      	ldr	r1, [sp, #20]
 800ce82:	0032      	movs	r2, r6
 800ce84:	003b      	movs	r3, r7
 800ce86:	f7f3 fafd 	bl	8000484 <__aeabi_dadd>
 800ce8a:	0002      	movs	r2, r0
 800ce8c:	000b      	movs	r3, r1
 800ce8e:	9008      	str	r0, [sp, #32]
 800ce90:	9109      	str	r1, [sp, #36]	; 0x24
 800ce92:	9804      	ldr	r0, [sp, #16]
 800ce94:	9905      	ldr	r1, [sp, #20]
 800ce96:	f7f4 fd11 	bl	80018bc <__aeabi_dsub>
 800ce9a:	0032      	movs	r2, r6
 800ce9c:	003b      	movs	r3, r7
 800ce9e:	f7f3 faf1 	bl	8000484 <__aeabi_dadd>
 800cea2:	9a08      	ldr	r2, [sp, #32]
 800cea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cea6:	60a8      	str	r0, [r5, #8]
 800cea8:	60e9      	str	r1, [r5, #12]
 800ceaa:	602a      	str	r2, [r5, #0]
 800ceac:	606b      	str	r3, [r5, #4]
 800ceae:	e758      	b.n	800cd62 <__kernel_rem_pio2+0x50e>
 800ceb0:	6826      	ldr	r6, [r4, #0]
 800ceb2:	6867      	ldr	r7, [r4, #4]
 800ceb4:	68a2      	ldr	r2, [r4, #8]
 800ceb6:	68e3      	ldr	r3, [r4, #12]
 800ceb8:	0030      	movs	r0, r6
 800ceba:	0039      	movs	r1, r7
 800cebc:	9202      	str	r2, [sp, #8]
 800cebe:	9303      	str	r3, [sp, #12]
 800cec0:	f7f3 fae0 	bl	8000484 <__aeabi_dadd>
 800cec4:	0002      	movs	r2, r0
 800cec6:	000b      	movs	r3, r1
 800cec8:	9004      	str	r0, [sp, #16]
 800ceca:	9105      	str	r1, [sp, #20]
 800cecc:	0030      	movs	r0, r6
 800cece:	0039      	movs	r1, r7
 800ced0:	f7f4 fcf4 	bl	80018bc <__aeabi_dsub>
 800ced4:	9a02      	ldr	r2, [sp, #8]
 800ced6:	9b03      	ldr	r3, [sp, #12]
 800ced8:	f7f3 fad4 	bl	8000484 <__aeabi_dadd>
 800cedc:	9a04      	ldr	r2, [sp, #16]
 800cede:	9b05      	ldr	r3, [sp, #20]
 800cee0:	60a0      	str	r0, [r4, #8]
 800cee2:	60e1      	str	r1, [r4, #12]
 800cee4:	6022      	str	r2, [r4, #0]
 800cee6:	6063      	str	r3, [r4, #4]
 800cee8:	3d01      	subs	r5, #1
 800ceea:	e740      	b.n	800cd6e <__kernel_rem_pio2+0x51a>
 800ceec:	9b00      	ldr	r3, [sp, #0]
 800ceee:	aa4c      	add	r2, sp, #304	; 0x130
 800cef0:	00db      	lsls	r3, r3, #3
 800cef2:	18d3      	adds	r3, r2, r3
 800cef4:	0020      	movs	r0, r4
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	f7f3 fac3 	bl	8000484 <__aeabi_dadd>
 800cefe:	9b00      	ldr	r3, [sp, #0]
 800cf00:	0004      	movs	r4, r0
 800cf02:	3b01      	subs	r3, #1
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	e738      	b.n	800cd7a <__kernel_rem_pio2+0x526>
 800cf08:	9b06      	ldr	r3, [sp, #24]
 800cf0a:	9a06      	ldr	r2, [sp, #24]
 800cf0c:	601f      	str	r7, [r3, #0]
 800cf0e:	2380      	movs	r3, #128	; 0x80
 800cf10:	061b      	lsls	r3, r3, #24
 800cf12:	18f6      	adds	r6, r6, r3
 800cf14:	18c0      	adds	r0, r0, r3
 800cf16:	18c9      	adds	r1, r1, r3
 800cf18:	6056      	str	r6, [r2, #4]
 800cf1a:	6095      	str	r5, [r2, #8]
 800cf1c:	60d0      	str	r0, [r2, #12]
 800cf1e:	6114      	str	r4, [r2, #16]
 800cf20:	6151      	str	r1, [r2, #20]
 800cf22:	e70c      	b.n	800cd3e <__kernel_rem_pio2+0x4ea>
 800cf24:	41700000 	.word	0x41700000
 800cf28:	3e700000 	.word	0x3e700000

0800cf2c <scalbn>:
 800cf2c:	b570      	push	{r4, r5, r6, lr}
 800cf2e:	0014      	movs	r4, r2
 800cf30:	004a      	lsls	r2, r1, #1
 800cf32:	000b      	movs	r3, r1
 800cf34:	0d52      	lsrs	r2, r2, #21
 800cf36:	d10f      	bne.n	800cf58 <scalbn+0x2c>
 800cf38:	004b      	lsls	r3, r1, #1
 800cf3a:	085b      	lsrs	r3, r3, #1
 800cf3c:	4303      	orrs	r3, r0
 800cf3e:	d011      	beq.n	800cf64 <scalbn+0x38>
 800cf40:	4b22      	ldr	r3, [pc, #136]	; (800cfcc <scalbn+0xa0>)
 800cf42:	2200      	movs	r2, #0
 800cf44:	f7f4 f9f8 	bl	8001338 <__aeabi_dmul>
 800cf48:	4b21      	ldr	r3, [pc, #132]	; (800cfd0 <scalbn+0xa4>)
 800cf4a:	429c      	cmp	r4, r3
 800cf4c:	da0b      	bge.n	800cf66 <scalbn+0x3a>
 800cf4e:	4a21      	ldr	r2, [pc, #132]	; (800cfd4 <scalbn+0xa8>)
 800cf50:	4b21      	ldr	r3, [pc, #132]	; (800cfd8 <scalbn+0xac>)
 800cf52:	f7f4 f9f1 	bl	8001338 <__aeabi_dmul>
 800cf56:	e005      	b.n	800cf64 <scalbn+0x38>
 800cf58:	4d20      	ldr	r5, [pc, #128]	; (800cfdc <scalbn+0xb0>)
 800cf5a:	42aa      	cmp	r2, r5
 800cf5c:	d107      	bne.n	800cf6e <scalbn+0x42>
 800cf5e:	0002      	movs	r2, r0
 800cf60:	f7f3 fa90 	bl	8000484 <__aeabi_dadd>
 800cf64:	bd70      	pop	{r4, r5, r6, pc}
 800cf66:	000b      	movs	r3, r1
 800cf68:	004a      	lsls	r2, r1, #1
 800cf6a:	0d52      	lsrs	r2, r2, #21
 800cf6c:	3a36      	subs	r2, #54	; 0x36
 800cf6e:	4d1c      	ldr	r5, [pc, #112]	; (800cfe0 <scalbn+0xb4>)
 800cf70:	42ac      	cmp	r4, r5
 800cf72:	dd0a      	ble.n	800cf8a <scalbn+0x5e>
 800cf74:	4c1b      	ldr	r4, [pc, #108]	; (800cfe4 <scalbn+0xb8>)
 800cf76:	4d1c      	ldr	r5, [pc, #112]	; (800cfe8 <scalbn+0xbc>)
 800cf78:	2900      	cmp	r1, #0
 800cf7a:	da01      	bge.n	800cf80 <scalbn+0x54>
 800cf7c:	4c19      	ldr	r4, [pc, #100]	; (800cfe4 <scalbn+0xb8>)
 800cf7e:	4d1b      	ldr	r5, [pc, #108]	; (800cfec <scalbn+0xc0>)
 800cf80:	4a18      	ldr	r2, [pc, #96]	; (800cfe4 <scalbn+0xb8>)
 800cf82:	4b19      	ldr	r3, [pc, #100]	; (800cfe8 <scalbn+0xbc>)
 800cf84:	0020      	movs	r0, r4
 800cf86:	0029      	movs	r1, r5
 800cf88:	e7e3      	b.n	800cf52 <scalbn+0x26>
 800cf8a:	18a2      	adds	r2, r4, r2
 800cf8c:	4c18      	ldr	r4, [pc, #96]	; (800cff0 <scalbn+0xc4>)
 800cf8e:	42a2      	cmp	r2, r4
 800cf90:	dcf0      	bgt.n	800cf74 <scalbn+0x48>
 800cf92:	2a00      	cmp	r2, #0
 800cf94:	dd05      	ble.n	800cfa2 <scalbn+0x76>
 800cf96:	4c17      	ldr	r4, [pc, #92]	; (800cff4 <scalbn+0xc8>)
 800cf98:	0512      	lsls	r2, r2, #20
 800cf9a:	4023      	ands	r3, r4
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	0019      	movs	r1, r3
 800cfa0:	e7e0      	b.n	800cf64 <scalbn+0x38>
 800cfa2:	0014      	movs	r4, r2
 800cfa4:	3435      	adds	r4, #53	; 0x35
 800cfa6:	da08      	bge.n	800cfba <scalbn+0x8e>
 800cfa8:	4c0a      	ldr	r4, [pc, #40]	; (800cfd4 <scalbn+0xa8>)
 800cfaa:	4d0b      	ldr	r5, [pc, #44]	; (800cfd8 <scalbn+0xac>)
 800cfac:	2900      	cmp	r1, #0
 800cfae:	da01      	bge.n	800cfb4 <scalbn+0x88>
 800cfb0:	4c08      	ldr	r4, [pc, #32]	; (800cfd4 <scalbn+0xa8>)
 800cfb2:	4d11      	ldr	r5, [pc, #68]	; (800cff8 <scalbn+0xcc>)
 800cfb4:	4a07      	ldr	r2, [pc, #28]	; (800cfd4 <scalbn+0xa8>)
 800cfb6:	4b08      	ldr	r3, [pc, #32]	; (800cfd8 <scalbn+0xac>)
 800cfb8:	e7e4      	b.n	800cf84 <scalbn+0x58>
 800cfba:	4c0e      	ldr	r4, [pc, #56]	; (800cff4 <scalbn+0xc8>)
 800cfbc:	3236      	adds	r2, #54	; 0x36
 800cfbe:	4023      	ands	r3, r4
 800cfc0:	0512      	lsls	r2, r2, #20
 800cfc2:	431a      	orrs	r2, r3
 800cfc4:	0011      	movs	r1, r2
 800cfc6:	4b0d      	ldr	r3, [pc, #52]	; (800cffc <scalbn+0xd0>)
 800cfc8:	2200      	movs	r2, #0
 800cfca:	e7c2      	b.n	800cf52 <scalbn+0x26>
 800cfcc:	43500000 	.word	0x43500000
 800cfd0:	ffff3cb0 	.word	0xffff3cb0
 800cfd4:	c2f8f359 	.word	0xc2f8f359
 800cfd8:	01a56e1f 	.word	0x01a56e1f
 800cfdc:	000007ff 	.word	0x000007ff
 800cfe0:	0000c350 	.word	0x0000c350
 800cfe4:	8800759c 	.word	0x8800759c
 800cfe8:	7e37e43c 	.word	0x7e37e43c
 800cfec:	fe37e43c 	.word	0xfe37e43c
 800cff0:	000007fe 	.word	0x000007fe
 800cff4:	800fffff 	.word	0x800fffff
 800cff8:	81a56e1f 	.word	0x81a56e1f
 800cffc:	3c900000 	.word	0x3c900000

0800d000 <floor>:
 800d000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d002:	004b      	lsls	r3, r1, #1
 800d004:	4a3e      	ldr	r2, [pc, #248]	; (800d100 <floor+0x100>)
 800d006:	0d5b      	lsrs	r3, r3, #21
 800d008:	189f      	adds	r7, r3, r2
 800d00a:	4684      	mov	ip, r0
 800d00c:	000e      	movs	r6, r1
 800d00e:	000c      	movs	r4, r1
 800d010:	0005      	movs	r5, r0
 800d012:	9001      	str	r0, [sp, #4]
 800d014:	2f13      	cmp	r7, #19
 800d016:	dc34      	bgt.n	800d082 <floor+0x82>
 800d018:	2f00      	cmp	r7, #0
 800d01a:	da16      	bge.n	800d04a <floor+0x4a>
 800d01c:	4a39      	ldr	r2, [pc, #228]	; (800d104 <floor+0x104>)
 800d01e:	4b3a      	ldr	r3, [pc, #232]	; (800d108 <floor+0x108>)
 800d020:	4660      	mov	r0, ip
 800d022:	0031      	movs	r1, r6
 800d024:	f7f3 fa2e 	bl	8000484 <__aeabi_dadd>
 800d028:	2200      	movs	r2, #0
 800d02a:	2300      	movs	r3, #0
 800d02c:	f7f3 fa16 	bl	800045c <__aeabi_dcmpgt>
 800d030:	2800      	cmp	r0, #0
 800d032:	d007      	beq.n	800d044 <floor+0x44>
 800d034:	2e00      	cmp	r6, #0
 800d036:	da5d      	bge.n	800d0f4 <floor+0xf4>
 800d038:	0074      	lsls	r4, r6, #1
 800d03a:	0864      	lsrs	r4, r4, #1
 800d03c:	4325      	orrs	r5, r4
 800d03e:	d05c      	beq.n	800d0fa <floor+0xfa>
 800d040:	2500      	movs	r5, #0
 800d042:	4c32      	ldr	r4, [pc, #200]	; (800d10c <floor+0x10c>)
 800d044:	46ac      	mov	ip, r5
 800d046:	0026      	movs	r6, r4
 800d048:	e029      	b.n	800d09e <floor+0x9e>
 800d04a:	4b31      	ldr	r3, [pc, #196]	; (800d110 <floor+0x110>)
 800d04c:	413b      	asrs	r3, r7
 800d04e:	9300      	str	r3, [sp, #0]
 800d050:	400b      	ands	r3, r1
 800d052:	4303      	orrs	r3, r0
 800d054:	d023      	beq.n	800d09e <floor+0x9e>
 800d056:	4a2b      	ldr	r2, [pc, #172]	; (800d104 <floor+0x104>)
 800d058:	4b2b      	ldr	r3, [pc, #172]	; (800d108 <floor+0x108>)
 800d05a:	4660      	mov	r0, ip
 800d05c:	0031      	movs	r1, r6
 800d05e:	f7f3 fa11 	bl	8000484 <__aeabi_dadd>
 800d062:	2200      	movs	r2, #0
 800d064:	2300      	movs	r3, #0
 800d066:	f7f3 f9f9 	bl	800045c <__aeabi_dcmpgt>
 800d06a:	2800      	cmp	r0, #0
 800d06c:	d0ea      	beq.n	800d044 <floor+0x44>
 800d06e:	2e00      	cmp	r6, #0
 800d070:	da03      	bge.n	800d07a <floor+0x7a>
 800d072:	2380      	movs	r3, #128	; 0x80
 800d074:	035b      	lsls	r3, r3, #13
 800d076:	413b      	asrs	r3, r7
 800d078:	18f4      	adds	r4, r6, r3
 800d07a:	9b00      	ldr	r3, [sp, #0]
 800d07c:	2500      	movs	r5, #0
 800d07e:	439c      	bics	r4, r3
 800d080:	e7e0      	b.n	800d044 <floor+0x44>
 800d082:	2f33      	cmp	r7, #51	; 0x33
 800d084:	dd0f      	ble.n	800d0a6 <floor+0xa6>
 800d086:	2380      	movs	r3, #128	; 0x80
 800d088:	00db      	lsls	r3, r3, #3
 800d08a:	429f      	cmp	r7, r3
 800d08c:	d107      	bne.n	800d09e <floor+0x9e>
 800d08e:	0002      	movs	r2, r0
 800d090:	000b      	movs	r3, r1
 800d092:	4660      	mov	r0, ip
 800d094:	0031      	movs	r1, r6
 800d096:	f7f3 f9f5 	bl	8000484 <__aeabi_dadd>
 800d09a:	4684      	mov	ip, r0
 800d09c:	000e      	movs	r6, r1
 800d09e:	4660      	mov	r0, ip
 800d0a0:	0031      	movs	r1, r6
 800d0a2:	b003      	add	sp, #12
 800d0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0a6:	4a1b      	ldr	r2, [pc, #108]	; (800d114 <floor+0x114>)
 800d0a8:	189b      	adds	r3, r3, r2
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	4252      	negs	r2, r2
 800d0ae:	40da      	lsrs	r2, r3
 800d0b0:	9200      	str	r2, [sp, #0]
 800d0b2:	4202      	tst	r2, r0
 800d0b4:	d0f3      	beq.n	800d09e <floor+0x9e>
 800d0b6:	4a13      	ldr	r2, [pc, #76]	; (800d104 <floor+0x104>)
 800d0b8:	4b13      	ldr	r3, [pc, #76]	; (800d108 <floor+0x108>)
 800d0ba:	4660      	mov	r0, ip
 800d0bc:	0031      	movs	r1, r6
 800d0be:	f7f3 f9e1 	bl	8000484 <__aeabi_dadd>
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	f7f3 f9c9 	bl	800045c <__aeabi_dcmpgt>
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	d0ba      	beq.n	800d044 <floor+0x44>
 800d0ce:	2e00      	cmp	r6, #0
 800d0d0:	da02      	bge.n	800d0d8 <floor+0xd8>
 800d0d2:	2f14      	cmp	r7, #20
 800d0d4:	d103      	bne.n	800d0de <floor+0xde>
 800d0d6:	3401      	adds	r4, #1
 800d0d8:	9b00      	ldr	r3, [sp, #0]
 800d0da:	439d      	bics	r5, r3
 800d0dc:	e7b2      	b.n	800d044 <floor+0x44>
 800d0de:	2234      	movs	r2, #52	; 0x34
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	1bd2      	subs	r2, r2, r7
 800d0e4:	4093      	lsls	r3, r2
 800d0e6:	18ed      	adds	r5, r5, r3
 800d0e8:	9b01      	ldr	r3, [sp, #4]
 800d0ea:	429d      	cmp	r5, r3
 800d0ec:	419b      	sbcs	r3, r3
 800d0ee:	425b      	negs	r3, r3
 800d0f0:	18f4      	adds	r4, r6, r3
 800d0f2:	e7f1      	b.n	800d0d8 <floor+0xd8>
 800d0f4:	2500      	movs	r5, #0
 800d0f6:	002c      	movs	r4, r5
 800d0f8:	e7a4      	b.n	800d044 <floor+0x44>
 800d0fa:	2480      	movs	r4, #128	; 0x80
 800d0fc:	0624      	lsls	r4, r4, #24
 800d0fe:	e7a1      	b.n	800d044 <floor+0x44>
 800d100:	fffffc01 	.word	0xfffffc01
 800d104:	8800759c 	.word	0x8800759c
 800d108:	7e37e43c 	.word	0x7e37e43c
 800d10c:	bff00000 	.word	0xbff00000
 800d110:	000fffff 	.word	0x000fffff
 800d114:	fffffbed 	.word	0xfffffbed

0800d118 <_init>:
 800d118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d11a:	46c0      	nop			; (mov r8, r8)
 800d11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d11e:	bc08      	pop	{r3}
 800d120:	469e      	mov	lr, r3
 800d122:	4770      	bx	lr

0800d124 <_fini>:
 800d124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d126:	46c0      	nop			; (mov r8, r8)
 800d128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d12a:	bc08      	pop	{r3}
 800d12c:	469e      	mov	lr, r3
 800d12e:	4770      	bx	lr
